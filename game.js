var _STRINGS = {
    Ad: {
      Mobile: {
        Preroll: {
          ReadyIn: "The game is ready in ",
          Loading: "Your game is loading...",
          Close: "Close"
        },
        Header: {
          ReadyIn: "The game is ready in ",
          Loading: "Your game is loading...",
          Close: "Close"
        },
        End: {
          ReadyIn: "Advertisement ends in ",
          Loading: "Please wait ...",
          Close: "Close"
        }
      }
    },
    Splash: {
      Loading: "Loading ...",
      LogoLine1: "Some text here",
      LogoLine2: "powered by MarketJS",
      LogoLine3: "none",
      TapToStart: "TAP TO START"
    },
    Game: {
      SelectPlayer: "Select Player",
      Win: "You win!",
      Lose: "You lose!",
      Time: "Time",
      Score: "SCORE: ",
      Ability: "ABILITY"
    },
    UI: {
      GameOver: "GAME OVER",
      Score: "SCORE: ",
      HighScore: "HIGH SCORE: ",
      NewRecord: "NEW HIGHSCORE!",
      EpisodeSelect: "SELECT EPISODE",
      LevelSelect: "SELECT LEVEL",
      Episode: "EPISODE ",
      EpisodeShort: "EP. ",
      Level: "LEVEL ",
      Settings: "SETTINGS",
      Pause: "PAUSE",
      NoAbility: "NOT ENOUGH ABILITY!",
      CannotUseAbility: "CAN'T USE THOR PIGGY'S ABILITY",
      Complete: "COMPLETE!",
      Fail: "LEVEL FAILED!",
      "tut1.1": "Captain Piggy reporting.",
      "tut1.2": "Pull slingshot to launch.",
      "tut2.1": "I can break through",
      "tut2.2": "wooden obstacles easily",
      "tut3.1": "My shield is my special ability.",
      "tut3.2": "First, launch me forward.",
      "tut3.3": "When launched, tap anywhere",
      "tut3.4": "to activate targetting.",
      "tut3.5": "Tap on the enemy targets",
      "tut3.6": "to throw my shield.",
      "tut5.1": "Iron Piggy incoming. On landing, I shall",
      "tut5.2": "explode, dealing splash damage!",
      "tut6.1": "My special ability is Laser.",
      "tut6.2": "First, launch me forward.",
      "tut6.3": "When launched, tap anywhere",
      "tut6.4": "to activate my Laser.",
      "tut6.5": "Tap on a target point",
      "tut6.6": "to fire my Laser!",
      "tut8.1": "Thor Piggy here. I land with lightning,",
      "tut8.2": " hitting enemies vertically.",
      "tut9.1": "My special ability is Slam.",
      "tut9.2": "Launch me forward!",
      "tut9.3": "Tap anywhere",
      "tut9.4": "to slam the ground!",
      "tut11.1": "Clck on the idle piggies to change",
      "tut11.2": "the current selected one.",
      "tut31.1": "Panther Piggy here.",
      "tut31.2": "I can dash through obstacles.",
      "tut31.3": "Tap anywhere to activate ability.",
      "tut31.4": "",
      "tut31.5": "Select target enemy.",
      "tut31.6": "",
      "tut32.1": "Hulk Piggy is strong",
      "tut32.2": "Hulk Piggy can break wooden obstacles",
      "tut33.1": "Big enemies with health bars take",
      "tut33.2": "many hits to defeat.",
      "tut33.3": "Hulk Piggy can throw",
      "tut33.4": "them off",
      "tut33.5": "Bring Hulk Piggy on",
      "tut33.6": "top of enemies",
      "tut33.7": "Tap anywhere for",
      "tut33.8": "Hulk Piggy smash!",
      "tut51.1": "Call me Marvel Piggy",
      "tut51.2": "I can deal huge damage to enemies",
      "tut51.3": "Tap anywhere to activate ability.",
      "tut51.4": "",
      "tut51.5": "Select target enemy to fire blasters.",
      "tut51.6": "",
      "tut52.1": "Strange Piggy. Might I offer you",
      "tut52.2": "some portals?",
      "tut52.3": "Tap anywhere to activate ability.",
      "tut52.4": "",
      "tut52.5": "Tap to open portal entrance.",
      "tut52.6": "",
      "tut52.7": "Tap to open portal exit.",
      "tut52.8": "",
      "tut71.1": "Hi, I'm Ant Piggy",
      "tut71.2": "I can expand on a target area to deal huge damage.",
      "tut71.3": "Tap anywhere to activate ability.",
      "tut71.4": "",
      "tut71.5": "Select target enemy",
      "tut71.6": "to deal damage",
      "tut73.1": "Hello, I'm Spider Piggy.",
      "tut73.2": "I can pull object with my web",
      "tut73.3": "",
      "tut73.4": "Tap anywhere to activate ability.",
      "tut73.5": "Select target object",
      "tut73.6": "so I can pull it towards me.",
      selTarget: "Select enemy targets",
      selTarget_entrance: "Select portal entrance",
      selTarget_exit: "Select portal exit",
      selTarget_antman: "Select target point",
      selTarget_web: "Select web target",
      "continue": "continue"
    },
    Results: {
      Title: "High score"
    }
  };
  var _SETTINGS = {
    API: {
      Enabled: !0,
      Log: {
        Events: {
          InitializeGame: !0,
          EndGame: !0,
          Level: {
            Begin: !0,
            End: !0,
            Win: !0,
            Lose: !0,
            Draw: !0
          }
        }
      }
    },
    Ad: {
      Mobile: {
        Preroll: {
          Enabled: !0,
          Duration: 5,
          Width: 300,
          Height: 250,
          Rotation: {
            Enabled: !1,
            Weight: {
              MobileAdInGamePreroll: 40,
              MobileAdInGamePreroll2: 40,
              MobileAdInGamePreroll3: 20
            }
          }
        },
        Header: {
          Enabled: !1,
          Duration: 5,
          Width: 320,
          Height: 50,
          Rotation: {
            Enabled: !1,
            Weight: {
              MobileAdInGameHeader: 40,
              MobileAdInGameHeader2: 40,
              MobileAdInGameHeader3: 20
            }
          }
        },
        Footer: {
          Enabled: !1,
          Duration: 5,
          Width: 320,
          Height: 50,
          Rotation: {
            Enabled: !1,
            Weight: {
              MobileAdInGameFooter: 40,
              MobileAdInGameFooter2: 40,
              MobileAdInGameFooter3: 20
            }
          }
        },
        End: {
          Enabled: !1,
          Duration: 1,
          Width: 300,
          Height: 250,
          Rotation: {
            Enabled: !1,
            Weight: {
              MobileAdInGameEnd: 40,
              MobileAdInGameEnd2: 40,
              MobileAdInGameEnd3: 20
            }
          }
        }
      }
    },
    Language: {
      Default: "en"
    },
    DeveloperBranding: {
      Splash: {
        Enabled: !1
      },
      Logo: {
        Enabled: !0,
        Link: "http://marketjs.com",
        LinkEnabled: !1,
        NewWindow: !0,
        Width: 166,
        Height: 61
      }
    },
    Branding: {
      Splash: {
        Enabled: !1
      },
      Logo: {
        Enabled: !1,
        Link: "http://google.com",
        LinkEnabled: !0,
        NewWindow: !0,
        Width: 280,
        Height: 34
      }
    },
    MoreGames: {
      Enabled: !1,
      Link: "http://www.marketjs.com/game/links/mobile",
      NewWindow: !0
    },
    Gamecenter: {
      Enabled: !0
    }
  };
  var MobileAdInGamePreroll = {
    ad_duration: _SETTINGS.Ad.Mobile.Preroll.Duration,
    ad_width: _SETTINGS.Ad.Mobile.Preroll.Width,
    ad_height: _SETTINGS.Ad.Mobile.Preroll.Height,
    ready_in: _STRINGS.Ad.Mobile.Preroll.ReadyIn,
    loading: _STRINGS.Ad.Mobile.Preroll.Loading,
    close: _STRINGS.Ad.Mobile.Preroll.Close + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
    Initialize: function () {
      if (_SETTINGS.Ad.Mobile.Preroll.Rotation.Enabled) {
        var b = _SETTINGS.Ad.Mobile.Preroll.Rotation.Weight,
          c = b.MobileAdInGamePreroll,
          d = c + b.MobileAdInGamePreroll2,
          b = d + b.MobileAdInGamePreroll3,
          e = Math.floor(100 * Math.random());
        console.log("seed: ", e);
        e <= c ? this.selectedOverlayName = "MobileAdInGamePreroll" : e <= d ? this.selectedOverlayName = "MobileAdInGamePreroll2" : e <= b && (this.selectedOverlayName = "MobileAdInGamePreroll3");
        console.log("Ad rotating preroll enabled");
      } else this.selectedOverlayName = "MobileAdInGamePreroll", console.log("Ad rotating preroll disabled");
      console.log("selected:", this.selectedOverlayName);
      this.overlay = $("#" + this.selectedOverlayName);
      this.box = $("#" + this.selectedOverlayName + "-Box");
      this.game = $("#game");
      this.boxContents = {
        footer: $("#" + this.selectedOverlayName + "-Box-Footer"),
        header: $("#" + this.selectedOverlayName + "-Box-Header"),
        close: $("#" + this.selectedOverlayName + "-Box-Close"),
        body: $("#" + this.selectedOverlayName + "-Box-Body")
      };
      this.box.width(this.ad_width);
      this.box.height(this.ad_height);
      this.box.css("left", (this.overlay.width() - this.box.width()) / 2);
      this.box.css("top", (this.overlay.height() - this.box.height() - this.boxContents.header.height() - this.boxContents.footer.height()) / 2);
      this.overlay.show(this.Timer(this.ad_duration));
    },
    Timer: function (b) {
      var c = b,
        d = setInterval(function () {
          MobileAdInGamePreroll.boxContents.header.text(MobileAdInGamePreroll.ready_in + c + "...");
          MobileAdInGamePreroll.boxContents.footer.text(MobileAdInGamePreroll.loading);
          c--;
          0 > c && (clearInterval(d), MobileAdInGamePreroll.boxContents.close.css("left", MobileAdInGamePreroll.boxContents.body.width() - 23), MobileAdInGamePreroll.boxContents.close.show(), MobileAdInGamePreroll.boxContents.header.html(MobileAdInGamePreroll.close), MobileAdInGamePreroll.boxContents.footer.text(""));
        }, 1E3);
    },
    Close: function () {
      this.boxContents.close.hide();
      this.overlay.hide();
    }
  };
  var MobileAdInGameHeader = {
    ad_duration: _SETTINGS.Ad.Mobile.Header.Duration,
    ad_width: _SETTINGS.Ad.Mobile.Header.Width,
    ad_height: _SETTINGS.Ad.Mobile.Header.Height,
    Initialize: function () {
      if (_SETTINGS.Ad.Mobile.Header.Rotation.Enabled) {
        var b = _SETTINGS.Ad.Mobile.Header.Rotation.Weight,
          c = b.MobileAdInGameHeader,
          d = c + b.MobileAdInGameHeader2,
          b = d + b.MobileAdInGameHeader3,
          e = Math.floor(100 * Math.random());
        console.log("seed: ", e);
        e <= c ? this.selectedOverlayName = "MobileAdInGameHeader" : e <= d ? this.selectedOverlayName = "MobileAdInGameHeader2" : e <= b && (this.selectedOverlayName = "MobileAdInGameHeader3");
        console.log("Ad rotating header enabled");
      } else this.selectedOverlayName = "MobileAdInGameHeader", console.log("Ad rotating header disabled");
      this.div = $("#" + this.selectedOverlayName);
      this.game = $("#game");
      this.div.width(this.ad_width);
      this.div.height(this.ad_height);
      this.div.css("left", this.game.position().left + (this.game.width() - this.div.width()) / 2);
      this.div.css("top", 0);
      this.div.show(this.Timer(this.ad_duration));
    },
    Timer: function (b) {
      var c = setInterval(function () {
        b--;
        0 > b && (MobileAdInGameHeader.div.hide(), clearInterval(c));
      }, 1E3);
    }
  };
  var MobileAdInGameFooter = {
    ad_duration: _SETTINGS.Ad.Mobile.Footer.Duration,
    ad_width: _SETTINGS.Ad.Mobile.Footer.Width,
    ad_height: _SETTINGS.Ad.Mobile.Footer.Height,
    Initialize: function () {
      if (_SETTINGS.Ad.Mobile.Footer.Rotation.Enabled) {
        var b = _SETTINGS.Ad.Mobile.Footer.Rotation.Weight,
          c = b.MobileAdInGameFooter,
          d = c + b.MobileAdInGameFooter2,
          b = d + b.MobileAdInGameFooter3,
          e = Math.floor(100 * Math.random());
        console.log("seed: ", e);
        e <= c ? this.selectedOverlayName = "MobileAdInGameFooter" : e <= d ? this.selectedOverlayName = "MobileAdInGameFooter2" : e <= b && (this.selectedOverlayName = "MobileAdInGameFooter3");
        console.log("Ad rotating footer enabled");
      } else this.selectedOverlayName = "MobileAdInGameFooter", console.log("Ad rotating footer disabled");
      this.div = $("#" + this.selectedOverlayName);
      this.game = $("#game");
      this.div.width(this.ad_width);
      this.div.height(this.ad_height);
      this.div.css("left", this.game.position().left + (this.game.width() - this.div.width()) / 2);
      this.div.css("top", this.game.height() - this.div.height() - 5);
      this.div.show(this.Timer(this.ad_duration));
    },
    Timer: function (b) {
      var c = setInterval(function () {
        b--;
        0 > b && (MobileAdInGameFooter.div.hide(), clearInterval(c));
      }, 1E3);
    }
  };
  var MobileAdInGameEnd = {
    ad_duration: _SETTINGS.Ad.Mobile.End.Duration,
    ad_width: _SETTINGS.Ad.Mobile.End.Width,
    ad_height: _SETTINGS.Ad.Mobile.End.Height,
    ready_in: _STRINGS.Ad.Mobile.End.ReadyIn,
    loading: _STRINGS.Ad.Mobile.End.Loading,
    close: _STRINGS.Ad.Mobile.End.Close + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
    Initialize: function () {
      if (_SETTINGS.Ad.Mobile.End.Rotation.Enabled) {
        var b = _SETTINGS.Ad.Mobile.End.Rotation.Weight,
          c = b.MobileAdInGameEnd,
          d = c + b.MobileAdInGameEnd2,
          b = d + b.MobileAdInGameEnd3,
          e = Math.floor(100 * Math.random());
        console.log("seed: ", e);
        e <= c ? this.selectedOverlayName = "MobileAdInGameEnd" : e <= d ? this.selectedOverlayName = "MobileAdInGameEnd2" : e <= b && (this.selectedOverlayName = "MobileAdInGameEnd3");
        console.log("Ad rotating end enabled");
      } else this.selectedOverlayName = "MobileAdInGameEnd", console.log("Ad rotating end disabled");
      console.log("selected:", this.selectedOverlayName);
      this.overlay = $("#" + this.selectedOverlayName);
      this.box = $("#" + this.selectedOverlayName + "-Box");
      this.game = $("#game");
      this.boxContents = {
        footer: $("#" + this.selectedOverlayName + "-Box-Footer"),
        header: $("#" + this.selectedOverlayName + "-Box-Header"),
        close: $("#" + this.selectedOverlayName + "-Box-Close"),
        body: $("#" + this.selectedOverlayName + "-Box-Body")
      };
      this.box.width(this.ad_width);
      this.box.height(this.ad_height);
      this.box.css("left", (this.overlay.width() - this.box.width()) / 2);
      this.box.css("top", (this.overlay.height() - this.box.height() - this.boxContents.header.height() - this.boxContents.footer.height()) / 2);
      this.overlay.show(this.Timer(this.ad_duration));
    },
    Timer: function (b) {
      var c = b,
        d = setInterval(function () {
          MobileAdInGameEnd.boxContents.header.text(MobileAdInGameEnd.ready_in + c + "...");
          MobileAdInGameEnd.boxContents.footer.text(MobileAdInGameEnd.loading);
          c--;
          0 > c && (clearInterval(d), MobileAdInGameEnd.boxContents.close.css("left", MobileAdInGameEnd.boxContents.body.width() - 23), MobileAdInGameEnd.boxContents.close.show(), MobileAdInGameEnd.boxContents.header.html(MobileAdInGameEnd.close), MobileAdInGameEnd.boxContents.footer.text(""));
        }, 1E3);
    },
    Close: function () {
      this.boxContents.close.hide();
      this.overlay.hide();
    }
  };
  !function (b, c) {
    "object" == typeof module && "object" == typeof module.exports ? module.exports = b.document ? c(b, !0) : function (b) {
      if (!b.document) throw Error("jQuery requires a window with a document");
      return c(b);
    } : c(b);
  }("undefined" != typeof window ? window : this, function (b, c) {
    function d(b, c) {
      c = c || Y;
      var d = c.createElement("script");
      d.text = b;
      c.head.appendChild(d).parentNode.removeChild(d);
    }
    function e(b) {
      var c = !!b && "length" in b && b.length,
        d = p.type(b);
      return "function" !== d && !p.isWindow(b) && ("array" === d || 0 === c || "number" == typeof c && 0 < c && c - 1 in b);
    }
    function f(b, c) {
      return b.nodeName && b.nodeName.toLowerCase() === c.toLowerCase();
    }
    function j(b, c, d) {
      return p.isFunction(c) ? p.grep(b, function (b, ja) {
        return !!c.call(b, ja, b) !== d;
      }) : c.nodeType ? p.grep(b, function (b) {
        return b === c !== d;
      }) : "string" != typeof c ? p.grep(b, function (b) {
        return -1 < Ja.call(c, b) !== d;
      }) : Gc.test(c) ? p.filter(c, b, d) : (c = p.filter(c, b), p.grep(b, function (b) {
        return -1 < Ja.call(c, b) !== d && 1 === b.nodeType;
      }));
    }
    function m(b, c) {
      for (; (b = b[c]) && 1 !== b.nodeType;);
      return b;
    }
    function l(b) {
      return b;
    }
    function g(b) {
      throw b;
    }
    function q(b, c, d, g) {
      var e;
      try {
        b && p.isFunction(e = b.promise) ? e.call(b).done(c).fail(d) : b && p.isFunction(e = b.then) ? e.call(b, c, d) : c.apply(void 0, [b].slice(g));
      } catch (f) {
        d.apply(void 0, [f]);
      }
    }
    function y() {
      Y.removeEventListener("DOMContentLoaded", y);
      b.removeEventListener("load", y);
      p.ready();
    }
    function z() {
      this.expando = p.expando + z.uid++;
    }
    function A(b, c, d) {
      var g;
      if (void 0 === d && 1 === b.nodeType) if (g = "data-" + c.replace(Hc, "-$&").toLowerCase(), d = b.getAttribute(g), "string" == typeof d) {
        try {
          d = "true" === d || "false" !== d && ("null" === d ? null : d === +d + "" ? +d : Ic.test(d) ? JSON.parse(d) : d);
        } catch (e) {}
        qa.set(b, c, d);
      } else d = void 0;
      return d;
    }
    function B(b, c, d, g) {
      var e,
        f = 1,
        n = 20,
        x = g ? function () {
          return g.cur();
        } : function () {
          return p.css(b, c, "");
        },
        j = x(),
        u = d && d[3] || (p.cssNumber[c] ? "" : "px"),
        r = (p.cssNumber[c] || "px" !== u && +j) && mb.exec(p.css(b, c));
      if (r && r[3] !== u) {
        u = u || r[3];
        d = d || [];
        r = +j || 1;
        do f = f || ".5", r /= f, p.style(b, c, r + u); while (f !== (f = x() / j) && 1 !== f && --n);
      }
      return d && (r = +r || +j || 0, e = d[1] ? r + (d[1] + 1) * d[2] : +d[2], g && (g.unit = u, g.start = r, g.end = e)), e;
    }
    function H(b, c) {
      for (var d, g, e = [], f = 0, n = b.length; f < n; f++) if (g = b[f], g.style) if (d = g.style.display, c) {
        if ("none" === d && (e[f] = T.get(g, "display") || null, e[f] || (g.style.display = "")), "" === g.style.display && Ab(g)) {
          d = e;
          var x = f,
            j,
            r = void 0;
          j = g.ownerDocument;
          var u = g.nodeName;
          j = (g = Yb[u]) ? g : (r = j.body.appendChild(j.createElement(u)), g = p.css(r, "display"), r.parentNode.removeChild(r), "none" === g && (g = "block"), Yb[u] = g, g);
          d[x] = j;
        }
      } else "none" !== d && (e[f] = "none", T.set(g, "display", d));
      for (f = 0; f < n; f++) null != e[f] && (b[f].style.display = e[f]);
      return b;
    }
    function D(b, c) {
      var d;
      return d = "undefined" != typeof b.getElementsByTagName ? b.getElementsByTagName(c || "*") : "undefined" != typeof b.querySelectorAll ? b.querySelectorAll(c || "*") : [], void 0 === c || c && f(b, c) ? p.merge([b], d) : d;
    }
    function s(b, c) {
      for (var d = 0, g = b.length; d < g; d++) T.set(b[d], "globalEval", !c || T.get(c[d], "globalEval"));
    }
    function G(b, c, d, g, e) {
      for (var f, n, x, j, r = c.createDocumentFragment(), u = [], l = 0, M = b.length; l < M; l++) if (f = b[l], f || 0 === f) if ("object" === p.type(f)) p.merge(u, f.nodeType ? [f] : f);else if (Jc.test(f)) {
        n = n || r.appendChild(c.createElement("div"));
        x = (Zb.exec(f) || ["", ""])[1].toLowerCase();
        x = sa[x] || sa._default;
        n.innerHTML = x[1] + p.htmlPrefilter(f) + x[2];
        for (x = x[0]; x--;) n = n.lastChild;
        p.merge(u, n.childNodes);
        n = r.firstChild;
        n.textContent = "";
      } else u.push(c.createTextNode(f));
      r.textContent = "";
      for (l = 0; f = u[l++];) if (g && -1 < p.inArray(f, g)) e && e.push(f);else if (j = p.contains(f.ownerDocument, f), n = D(r.appendChild(f), "script"), j && s(n), d) for (x = 0; f = n[x++];) $b.test(f.type || "") && d.push(f);
      return r;
    }
    function F() {
      return !0;
    }
    function K() {
      return !1;
    }
    function L() {
      try {
        return Y.activeElement;
      } catch (b) {}
    }
    function R(b, c, d, g, e, f) {
      var n, x;
      if ("object" == typeof c) {
        "string" != typeof d && (g = g || d, d = void 0);
        for (x in c) R(b, x, d, g, c[x], f);
        return b;
      }
      if (null == g && null == e ? (e = d, g = d = void 0) : null == e && ("string" == typeof d ? (e = g, g = void 0) : (e = g, g = d, d = void 0)), !1 === e) e = K;else if (!e) return b;
      return 1 === f && (n = e, e = function (b) {
        return p().off(b), n.apply(this, arguments);
      }, e.guid = n.guid || (n.guid = p.guid++)), b.each(function () {
        p.event.add(this, c, e, g, d);
      });
    }
    function I(b, c) {
      return f(b, "table") && f(11 !== c.nodeType ? c : c.firstChild, "tr") ? p(">tbody", b)[0] || b : b;
    }
    function fa(b) {
      return b.type = (null !== b.getAttribute("type")) + "/" + b.type, b;
    }
    function N(b) {
      var c = Kc.exec(b.type);
      return c ? b.type = c[1] : b.removeAttribute("type"), b;
    }
    function P(b, c) {
      var d, g, e, f, n, x;
      if (1 === c.nodeType) {
        if (T.hasData(b) && (d = T.access(b), g = T.set(c, d), x = d.events)) for (e in delete g.handle, g.events = {}, x) {
          d = 0;
          for (g = x[e].length; d < g; d++) p.event.add(c, e, x[e][d]);
        }
        qa.hasData(b) && (f = qa.access(b), n = p.extend({}, f), qa.set(c, n));
      }
    }
    function ba(b, c, g, e) {
      c = ab.apply([], c);
      var f,
        n,
        x,
        j,
        r = 0,
        u = b.length,
        l = u - 1,
        M = c[0],
        q = p.isFunction(M);
      if (q || 1 < u && "string" == typeof M && !da.checkClone && Lc.test(M)) return b.each(function (d) {
        var f = b.eq(d);
        q && (c[0] = M.call(this, d, f.html()));
        ba(f, c, g, e);
      });
      if (u && (f = G(c, b[0].ownerDocument, !1, b, e), n = f.firstChild, 1 === f.childNodes.length && (f = n), n || e)) {
        n = p.map(D(f, "script"), fa);
        for (x = n.length; r < u; r++) j = f, r !== l && (j = p.clone(j, !0, !0), x && p.merge(n, D(j, "script"))), g.call(b[r], j, r);
        if (x) {
          f = n[n.length - 1].ownerDocument;
          p.map(n, N);
          for (r = 0; r < x; r++) j = n[r], $b.test(j.type || "") && !T.access(j, "globalEval") && p.contains(f, j) && (j.src ? p._evalUrl && p._evalUrl(j.src) : d(j.textContent.replace(Nc, ""), f));
        }
      }
      return b;
    }
    function V(b, c, d) {
      for (var g = c ? p.filter(c, b) : b, e = 0; null != (c = g[e]); e++) d || 1 !== c.nodeType || p.cleanData(D(c)), c.parentNode && (d && p.contains(c.ownerDocument, c) && s(D(c, "script")), c.parentNode.removeChild(c));
      return b;
    }
    function r(b, c, d) {
      var g,
        e,
        f,
        n,
        x = b.style;
      return d = d || Bb(b), d && (n = d.getPropertyValue(c) || d[c], "" !== n || p.contains(b.ownerDocument, b) || (n = p.style(b, c)), !da.pixelMarginRight() && Qb.test(n) && ac.test(c) && (g = x.width, e = x.minWidth, f = x.maxWidth, x.minWidth = x.maxWidth = x.width = n, n = d.width, x.width = g, x.minWidth = e, x.maxWidth = f)), void 0 !== n ? n + "" : n;
    }
    function t(b, c) {
      return {
        get: function () {
          return b() ? void delete this.get : (this.get = c).apply(this, arguments);
        }
      };
    }
    function E(b) {
      var c = p.cssProps[b];
      if (!c) {
        var c = p.cssProps,
          d;
        a: if (d = b, !(d in bc)) {
          for (var g = d[0].toUpperCase() + d.slice(1), e = cc.length; e--;) if (d = cc[e] + g, d in bc) break a;
          d = void 0;
        }
        c = c[b] = d || b;
      }
      return c;
    }
    function C(b, c, d) {
      return (b = mb.exec(c)) ? Math.max(0, b[2] - (d || 0)) + (b[3] || "px") : c;
    }
    function O(b, c, d, g, e) {
      var f = 0;
      for (c = d === (g ? "border" : "content") ? 4 : "width" === c ? 1 : 0; 4 > c; c += 2) "margin" === d && (f += p.css(b, d + Sa[c], !0, e)), g ? ("content" === d && (f -= p.css(b, "padding" + Sa[c], !0, e)), "margin" !== d && (f -= p.css(b, "border" + Sa[c] + "Width", !0, e))) : (f += p.css(b, "padding" + Sa[c], !0, e), "padding" !== d && (f += p.css(b, "border" + Sa[c] + "Width", !0, e)));
      return f;
    }
    function aa(b, c, d) {
      var g,
        e = Bb(b),
        f = r(b, c, e),
        n = "border-box" === p.css(b, "boxSizing", !1, e);
      return Qb.test(f) ? f : (g = n && (da.boxSizingReliable() || f === b.style[c]), "auto" === f && (f = b["offset" + c[0].toUpperCase() + c.slice(1)]), f = parseFloat(f) || 0, f + O(b, c, d || (n ? "border" : "content"), g, e) + "px");
    }
    function Q(b, c, d, g, e) {
      return new Q.prototype.init(b, c, d, g, e);
    }
    function n() {
      Cb && (!1 === Y.hidden && b.requestAnimationFrame ? b.requestAnimationFrame(n) : b.setTimeout(n, p.fx.interval), p.fx.tick());
    }
    function u() {
      return b.setTimeout(function () {
        bb = void 0;
      }), bb = p.now();
    }
    function J(b, c) {
      var d,
        g = 0,
        e = {
          height: b
        };
      for (c = c ? 1 : 0; 4 > g; g += 2 - c) d = Sa[g], e["margin" + d] = e["padding" + d] = b;
      return c && (e.opacity = e.width = b), e;
    }
    function x(b, c, d) {
      for (var g, e = (M.tweeners[c] || []).concat(M.tweeners["*"]), f = 0, n = e.length; f < n; f++) if (g = e[f].call(d, c, b)) return g;
    }
    function M(b, c, d) {
      var g,
        e,
        f = 0,
        n = M.prefilters.length,
        j = p.Deferred().always(function () {
          delete r.elem;
        }),
        r = function () {
          if (e) return !1;
          for (var c = bb || u(), c = Math.max(0, l.startTime + l.duration - c), d = 1 - (c / l.duration || 0), g = 0, f = l.tweens.length; g < f; g++) l.tweens[g].run(d);
          return j.notifyWith(b, [l, d, c]), 1 > d && f ? c : (f || j.notifyWith(b, [l, 1, 0]), j.resolveWith(b, [l]), !1);
        },
        l = j.promise({
          elem: b,
          props: p.extend({}, c),
          opts: p.extend(!0, {
            specialEasing: {},
            easing: p.easing._default
          }, d),
          originalProperties: c,
          originalOptions: d,
          startTime: bb || u(),
          duration: d.duration,
          tweens: [],
          createTween: function (c, d) {
            var g = p.Tween(b, l.opts, c, d, l.opts.specialEasing[c] || l.opts.easing);
            return l.tweens.push(g), g;
          },
          stop: function (c) {
            var d = 0,
              g = c ? l.tweens.length : 0;
            if (e) return this;
            for (e = !0; d < g; d++) l.tweens[d].run(1);
            return c ? (j.notifyWith(b, [l, 1, 0]), j.resolveWith(b, [l, c])) : j.rejectWith(b, [l, c]), this;
          }
        });
      c = l.props;
      d = l.opts.specialEasing;
      var q, t, C, W;
      for (g in c) if (q = p.camelCase(g), t = d[q], C = c[g], Array.isArray(C) && (t = C[1], C = c[g] = C[0]), g !== q && (c[q] = C, delete c[g]), W = p.cssHooks[q], W && "expand" in W) for (g in C = W.expand(C), delete c[q], C) g in c || (c[g] = C[g], d[g] = t);else d[q] = t;
      for (; f < n; f++) if (g = M.prefilters[f].call(l, b, c, l.opts)) return p.isFunction(g.stop) && (p._queueHooks(l.elem, l.opts.queue).stop = p.proxy(g.stop, g)), g;
      return p.map(c, x, l), p.isFunction(l.opts.start) && l.opts.start.call(b, l), l.progress(l.opts.progress).done(l.opts.done, l.opts.complete).fail(l.opts.fail).always(l.opts.always), p.fx.timer(p.extend(r, {
        elem: b,
        anim: l,
        queue: l.opts.queue
      })), l;
    }
    function W(b) {
      return (b.match(ta) || []).join(" ");
    }
    function S(b) {
      return b.getAttribute && b.getAttribute("class") || "";
    }
    function ga(b, c, d, g) {
      var e;
      if (Array.isArray(c)) p.each(c, function (c, e) {
        d || Oc.test(b) ? g(b, e) : ga(b + "[" + ("object" == typeof e && null != e ? c : "") + "]", e, d, g);
      });else if (d || "object" !== p.type(c)) g(b, c);else for (e in c) ga(b + "[" + e + "]", c[e], d, g);
    }
    function ka(b) {
      return function (c, d) {
        "string" != typeof c && (d = c, c = "*");
        var g,
          e = 0,
          f = c.toLowerCase().match(ta) || [];
        if (p.isFunction(d)) for (; g = f[e++];) "+" === g[0] ? (g = g.slice(1) || "*", (b[g] = b[g] || []).unshift(d)) : (b[g] = b[g] || []).push(d);
      };
    }
    function na(b, c, d, g) {
      function e(x) {
        var j;
        return f[x] = !0, p.each(b[x] || [], function (b, ja) {
          var x = ja(c, d, g);
          return "string" != typeof x || n || f[x] ? n ? !(j = x) : void 0 : (c.dataTypes.unshift(x), e(x), !1);
        }), j;
      }
      var f = {},
        n = b === Rb;
      return e(c.dataTypes[0]) || !f["*"] && e("*");
    }
    function oa(b, c) {
      var d,
        g,
        e = p.ajaxSettings.flatOptions || {};
      for (d in c) void 0 !== c[d] && ((e[d] ? b : g || (g = {}))[d] = c[d]);
      return g && p.extend(!0, b, g), b;
    }
    var ua = [],
      Y = b.document,
      Db = Object.getPrototypeOf,
      ya = ua.slice,
      ab = ua.concat,
      cb = ua.push,
      Ja = ua.indexOf,
      Ka = {},
      db = Ka.toString,
      La = Ka.hasOwnProperty,
      nb = La.toString,
      ob = nb.call(Object),
      da = {},
      p = function (b, c) {
        return new p.fn.init(b, c);
      },
      pb = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
      Eb = /^-ms-/,
      Fb = /-([a-z])/g,
      qb = function (b, c) {
        return c.toUpperCase();
      };
    p.fn = p.prototype = {
      jquery: "3.2.1",
      constructor: p,
      length: 0,
      toArray: function () {
        return ya.call(this);
      },
      get: function (b) {
        return null == b ? ya.call(this) : 0 > b ? this[b + this.length] : this[b];
      },
      pushStack: function (b) {
        b = p.merge(this.constructor(), b);
        return b.prevObject = this, b;
      },
      each: function (b) {
        return p.each(this, b);
      },
      map: function (b) {
        return this.pushStack(p.map(this, function (c, d) {
          return b.call(c, d, c);
        }));
      },
      slice: function () {
        return this.pushStack(ya.apply(this, arguments));
      },
      first: function () {
        return this.eq(0);
      },
      last: function () {
        return this.eq(-1);
      },
      eq: function (b) {
        var c = this.length;
        b = +b + (0 > b ? c : 0);
        return this.pushStack(0 <= b && b < c ? [this[b]] : []);
      },
      end: function () {
        return this.prevObject || this.constructor();
      },
      push: cb,
      sort: ua.sort,
      splice: ua.splice
    };
    p.extend = p.fn.extend = function () {
      var b,
        c,
        d,
        g,
        e,
        f,
        n = arguments[0] || {},
        x = 1,
        j = arguments.length,
        l = !1;
      "boolean" == typeof n && (l = n, n = arguments[x] || {}, x++);
      "object" == typeof n || p.isFunction(n) || (n = {});
      for (x === j && (n = this, x--); x < j; x++) if (null != (b = arguments[x])) for (c in b) d = n[c], g = b[c], n !== g && (l && g && (p.isPlainObject(g) || (e = Array.isArray(g))) ? (e ? (e = !1, f = d && Array.isArray(d) ? d : []) : f = d && p.isPlainObject(d) ? d : {}, n[c] = p.extend(l, f, g)) : void 0 !== g && (n[c] = g));
      return n;
    };
    p.extend({
      expando: "jQuery" + ("3.2.1" + Math.random()).replace(/\D/g, ""),
      isReady: !0,
      error: function (b) {
        throw Error(b);
      },
      noop: function () {},
      isFunction: function (b) {
        return "function" === p.type(b);
      },
      isWindow: function (b) {
        return null != b && b === b.window;
      },
      isNumeric: function (b) {
        var c = p.type(b);
        return ("number" === c || "string" === c) && !isNaN(b - parseFloat(b));
      },
      isPlainObject: function (b) {
        var c, d;
        return !(!b || "[object Object]" !== db.call(b)) && (!(c = Db(b)) || (d = La.call(c, "constructor") && c.constructor, "function" == typeof d && nb.call(d) === ob));
      },
      isEmptyObject: function (b) {
        for (var c in b) return !1;
        return !0;
      },
      type: function (b) {
        return null == b ? b + "" : "object" == typeof b || "function" == typeof b ? Ka[db.call(b)] || "object" : typeof b;
      },
      globalEval: function (b) {
        d(b);
      },
      camelCase: function (b) {
        return b.replace(Eb, "ms-").replace(Fb, qb);
      },
      each: function (b, c) {
        var d,
          g = 0;
        if (e(b)) for (d = b.length; g < d && !1 !== c.call(b[g], g, b[g]); g++);else for (g in b) if (!1 === c.call(b[g], g, b[g])) break;
        return b;
      },
      trim: function (b) {
        return null == b ? "" : (b + "").replace(pb, "");
      },
      makeArray: function (b, c) {
        var d = c || [];
        return null != b && (e(Object(b)) ? p.merge(d, "string" == typeof b ? [b] : b) : cb.call(d, b)), d;
      },
      inArray: function (b, c, d) {
        return null == c ? -1 : Ja.call(c, b, d);
      },
      merge: function (b, c) {
        for (var d = +c.length, g = 0, e = b.length; g < d; g++) b[e++] = c[g];
        return b.length = e, b;
      },
      grep: function (b, c, d) {
        for (var g = [], e = 0, f = b.length, n = !d; e < f; e++) d = !c(b[e], e), d !== n && g.push(b[e]);
        return g;
      },
      map: function (b, c, d) {
        var g,
          f,
          n = 0,
          x = [];
        if (e(b)) for (g = b.length; n < g; n++) f = c(b[n], n, d), null != f && x.push(f);else for (n in b) f = c(b[n], n, d), null != f && x.push(f);
        return ab.apply([], x);
      },
      guid: 1,
      proxy: function (b, c) {
        var d, g, e;
        if ("string" == typeof c && (d = b[c], c = b, b = d), p.isFunction(b)) return g = ya.call(arguments, 2), e = function () {
          return b.apply(c || this, g.concat(ya.call(arguments)));
        }, e.guid = b.guid = b.guid || p.guid++, e;
      },
      now: Date.now,
      support: da
    });
    "function" == typeof Symbol && (p.fn[Symbol.iterator] = ua[Symbol.iterator]);
    p.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (b, c) {
      Ka["[object " + c + "]"] = c.toLowerCase();
    });
    var za,
      eb = b,
      ca = function (b, c, d, g) {
        var e,
          f,
          n,
          x,
          j,
          l = c && c.ownerDocument,
          r = c ? c.nodeType : 9;
        if (d = d || [], "string" != typeof b || !b || 1 !== r && 9 !== r && 11 !== r) return d;
        if (!g && ((c ? c.ownerDocument || c : va) !== Z && wa(c), c = c || Z, la)) {
          if (11 !== r && (x = Pc.exec(b))) if (e = x[1]) {
            if (9 === r) {
              if (!(f = c.getElementById(e))) return d;
              if (f.id === e) return d.push(f), d;
            } else {
              if (l && (f = l.getElementById(e)) && rb(c, f) && f.id === e) return d.push(f), d;
            }
          } else {
            if (x[2]) return Ma.apply(d, c.getElementsByTagName(b)), d;
            if ((e = x[3]) && ea.getElementsByClassName && c.getElementsByClassName) return Ma.apply(d, c.getElementsByClassName(e)), d;
          }
          if (ea.qsa && !Gb[b + " "] && (!ia || !ia.test(b))) {
            if (1 !== r) l = c, j = b;else if ("object" !== c.nodeName.toLowerCase()) {
              (n = c.getAttribute("id")) ? n = n.replace(dc, ec) : c.setAttribute("id", n = ha);
              f = Na(b);
              for (e = f.length; e--;) f[e] = "#" + n + " " + Ta(f[e]);
              j = f.join(",");
              l = Sb.test(b) && fb(c.parentNode) || c;
            }
            if (j) try {
              return Ma.apply(d, l.querySelectorAll(j)), d;
            } catch (u) {} finally {
              n === ha && c.removeAttribute("id");
            }
          }
        }
        return gb(b.replace(Hb, "$1"), c, d, g);
      },
      hb = function () {
        function b(d, g) {
          return c.push(d + " ") > X.cacheLength && delete b[c.shift()], b[d + " "] = g;
        }
        var c = [];
        return b;
      },
      pa = function (b) {
        return b[ha] = !0, b;
      },
      ra = function (b) {
        var c = Z.createElement("fieldset");
        try {
          return !!b(c);
        } catch (d) {
          return !1;
        } finally {
          c.parentNode && c.parentNode.removeChild(c);
        }
      },
      ib = function (b, c) {
        for (var d = b.split("|"), g = d.length; g--;) X.attrHandle[d[g]] = c;
      },
      sb = function (b, c) {
        var d = c && b,
          g = d && 1 === b.nodeType && 1 === c.nodeType && b.sourceIndex - c.sourceIndex;
        if (g) return g;
        if (d) for (; d = d.nextSibling;) if (d === c) return -1;
        return b ? 1 : -1;
      },
      tb = function (b) {
        return function (c) {
          return "input" === c.nodeName.toLowerCase() && c.type === b;
        };
      },
      Ib = function (b) {
        return function (c) {
          var d = c.nodeName.toLowerCase();
          return ("input" === d || "button" === d) && c.type === b;
        };
      },
      ub = function (b) {
        return function (c) {
          return "form" in c ? c.parentNode && !1 === c.disabled ? "label" in c ? "label" in c.parentNode ? c.parentNode.disabled === b : c.disabled === b : c.isDisabled === b || c.isDisabled !== !b && Qc(c) === b : c.disabled === b : "label" in c && c.disabled === b;
        };
      },
      Ca = function (b) {
        return pa(function (c) {
          return c = +c, pa(function (d, g) {
            for (var e, f = b([], d.length, c), n = f.length; n--;) d[e = f[n]] && (d[e] = !(g[e] = d[e]));
          });
        });
      },
      fb = function (b) {
        return b && "undefined" != typeof b.getElementsByTagName && b;
      },
      vb = function () {},
      Ta = function (b) {
        for (var c = 0, d = b.length, g = ""; c < d; c++) g += b[c].value;
        return g;
      },
      Ua = function (b, c, d) {
        var g = c.dir,
          e = c.next,
          f = e || g,
          n = d && "parentNode" === f,
          x = Rc++;
        return c.first ? function (c, d, e) {
          for (; c = c[g];) if (1 === c.nodeType || n) return b(c, d, e);
          return !1;
        } : function (c, d, j) {
          var l,
            r,
            u,
            U = [Da, x];
          if (j) for (; c = c[g];) {
            if ((1 === c.nodeType || n) && b(c, d, j)) return !0;
          } else for (; c = c[g];) if (1 === c.nodeType || n) if (u = c[ha] || (c[ha] = {}), r = u[c.uniqueID] || (u[c.uniqueID] = {}), e && e === c.nodeName.toLowerCase()) c = c[g] || c;else {
            if ((l = r[f]) && l[0] === Da && l[1] === x) return U[2] = l[2];
            if (r[f] = U, U[2] = b(c, d, j)) return !0;
          }
          return !1;
        };
      },
      Va = function (b) {
        return 1 < b.length ? function (c, d, g) {
          for (var e = b.length; e--;) if (!b[e](c, d, g)) return !1;
          return !0;
        } : b[0];
      },
      Oa = function (b, c, d, g, e) {
        for (var f, n = [], x = 0, j = b.length, l = null != c; x < j; x++) (f = b[x]) && (d && !d(f, g, e) || (n.push(f), l && c.push(x)));
        return n;
      },
      Wa = function (b, c, d, g, e, f) {
        return g && !g[ha] && (g = Wa(g)), e && !e[ha] && (e = Wa(e, f)), pa(function (f, n, x, j) {
          var l,
            r,
            u = [],
            M = [],
            q = n.length,
            p;
          if (!(p = f)) {
            p = c || "*";
            for (var t = x.nodeType ? [x] : x, C = [], W = 0, J = t.length; W < J; W++) ca(p, t[W], C);
            p = C;
          }
          p = !b || !f && c ? p : Oa(p, u, b, x, j);
          t = d ? e || (f ? b : q || g) ? [] : n : p;
          if (d && d(p, t, x, j), g) {
            l = Oa(t, M);
            g(l, [], x, j);
            for (x = l.length; x--;) (r = l[x]) && (t[M[x]] = !(p[M[x]] = r));
          }
          if (f) {
            if (e || b) {
              if (e) {
                l = [];
                for (x = t.length; x--;) (r = t[x]) && l.push(p[x] = r);
                e(null, t = [], l, j);
              }
              for (x = t.length; x--;) (r = t[x]) && -1 < (l = e ? Xa(f, r) : u[x]) && (f[l] = !(n[l] = r));
            }
          } else t = Oa(t === n ? t.splice(q, t.length) : t), e ? e(null, n, t, j) : Ma.apply(n, t);
        });
      },
      Ya = function (b) {
        var c,
          d,
          g,
          e = b.length,
          f = X.relative[b[0].type];
        d = f || X.relative[" "];
        for (var n = f ? 1 : 0, x = Ua(function (b) {
            return b === c;
          }, d, !0), j = Ua(function (b) {
            return -1 < Xa(c, b);
          }, d, !0), l = [function (b, d, g) {
            b = !f && (g || d !== Pa) || ((c = d).nodeType ? x(b, d, g) : j(b, d, g));
            return c = null, b;
          }]; n < e; n++) if (d = X.relative[b[n].type]) l = [Ua(Va(l), d)];else {
          if (d = X.filter[b[n].type].apply(null, b[n].matches), d[ha]) {
            for (g = ++n; g < e && !X.relative[b[g].type]; g++);
            return Wa(1 < n && Va(l), 1 < n && Ta(b.slice(0, n - 1).concat({
              value: " " === b[n - 2].type ? "*" : ""
            })).replace(Hb, "$1"), d, n < g && Ya(b.slice(n, g)), g < e && Ya(b = b.slice(g)), g < e && Ta(b));
          }
          l.push(d);
        }
        return Va(l);
      },
      Ea,
      ea,
      X,
      Qa,
      jb,
      Na,
      Za,
      gb,
      Pa,
      xa,
      Fa,
      wa,
      Z,
      ma,
      la,
      ia,
      Aa,
      Ra,
      rb,
      ha = "sizzle" + 1 * new Date(),
      va = eb.document,
      Da = 0,
      Rc = 0,
      fc = hb(),
      gc = hb(),
      Gb = hb(),
      Tb = function (b, c) {
        return b === c && (Fa = !0), 0;
      },
      Sc = {}.hasOwnProperty,
      $a = [],
      Tc = $a.pop,
      Uc = $a.push,
      Ma = $a.push,
      hc = $a.slice,
      Xa = function (b, c) {
        for (var d = 0, g = b.length; d < g; d++) if (b[d] === c) return d;
        return -1;
      },
      Vc = /[\x20\t\r\n\f]+/g,
      Hb = /^[\x20\t\r\n\f]+|((?:^|[^\\])(?:\\.)*)[\x20\t\r\n\f]+$/g,
      Wc = /^[\x20\t\r\n\f]*,[\x20\t\r\n\f]*/,
      Xc = /^[\x20\t\r\n\f]*([>+~]|[\x20\t\r\n\f])[\x20\t\r\n\f]*/,
      Yc = /=[\x20\t\r\n\f]*([^\]'"]*?)[\x20\t\r\n\f]*\]/g,
      Zc = RegExp(":((?:\\\\.|[\\w-]|[^\0-\\xa0])+)(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|\\[[\\x20\\t\\r\\n\\f]*((?:\\\\.|[\\w-]|[^\0-\\xa0])+)(?:[\\x20\\t\\r\\n\\f]*([*^$|!~]?=)[\\x20\\t\\r\\n\\f]*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|((?:\\\\.|[\\w-]|[^\0-\\xa0])+))|)[\\x20\\t\\r\\n\\f]*\\])*)|.*)\\)|)"),
      $c = /^(?:\\.|[\w-]|[^\x00-\xa0])+$/,
      Jb = {
        ID: /^#((?:\\.|[\w-]|[^\x00-\xa0])+)/,
        CLASS: /^\.((?:\\.|[\w-]|[^\x00-\xa0])+)/,
        TAG: /^((?:\\.|[\w-]|[^\x00-\xa0])+|[*])/,
        ATTR: RegExp("^\\[[\\x20\\t\\r\\n\\f]*((?:\\\\.|[\\w-]|[^\0-\\xa0])+)(?:[\\x20\\t\\r\\n\\f]*([*^$|!~]?=)[\\x20\\t\\r\\n\\f]*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|((?:\\\\.|[\\w-]|[^\0-\\xa0])+))|)[\\x20\\t\\r\\n\\f]*\\]"),
        PSEUDO: RegExp("^:((?:\\\\.|[\\w-]|[^\0-\\xa0])+)(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|\\[[\\x20\\t\\r\\n\\f]*((?:\\\\.|[\\w-]|[^\0-\\xa0])+)(?:[\\x20\\t\\r\\n\\f]*([*^$|!~]?=)[\\x20\\t\\r\\n\\f]*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|((?:\\\\.|[\\w-]|[^\0-\\xa0])+))|)[\\x20\\t\\r\\n\\f]*\\])*)|.*)\\)|)"),
        CHILD: RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)", "i"),
        bool: RegExp("^(?:checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped)$", "i"),
        needsContext: RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)", "i")
      },
      ad = /^(?:input|select|textarea|button)$/i,
      bd = /^h\d$/i,
      wb = /^[^{]+\{\s*\[native \w/,
      Pc = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
      Sb = /[+~]/,
      Ga = /\\([\da-f]{1,6}[\x20\t\r\n\f]?|([\x20\t\r\n\f])|.)/ig,
      Ha = function (b, c, d) {
        b = "0x" + c - 65536;
        return b !== b || d ? c : 0 > b ? String.fromCharCode(b + 65536) : String.fromCharCode(b >> 10 | 55296, 1023 & b | 56320);
      },
      dc = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
      ec = function (b, c) {
        return c ? "\0" === b ? "�" : b.slice(0, -1) + "\\" + b.charCodeAt(b.length - 1).toString(16) + " " : "\\" + b;
      },
      ic = function () {
        wa();
      },
      Qc = Ua(function (b) {
        return !0 === b.disabled && ("form" in b || "label" in b);
      }, {
        dir: "parentNode",
        next: "legend"
      });
    try {
      Ma.apply($a = hc.call(va.childNodes), va.childNodes), $a[va.childNodes.length].nodeType;
    } catch (Ed) {
      Ma = {
        apply: $a.length ? function (b, c) {
          Uc.apply(b, hc.call(c));
        } : function (b, c) {
          for (var d = b.length, g = 0; b[d++] = c[g++];);
          b.length = d - 1;
        }
      };
    }
    ea = ca.support = {};
    jb = ca.isXML = function (b) {
      b = b && (b.ownerDocument || b).documentElement;
      return !!b && "HTML" !== b.nodeName;
    };
    wa = ca.setDocument = function (b) {
      var c, d;
      b = b ? b.ownerDocument || b : va;
      return b !== Z && 9 === b.nodeType && b.documentElement ? (Z = b, ma = Z.documentElement, la = !jb(Z), va !== Z && (d = Z.defaultView) && d.top !== d && (d.addEventListener ? d.addEventListener("unload", ic, !1) : d.attachEvent && d.attachEvent("onunload", ic)), ea.attributes = ra(function (b) {
        return b.className = "i", !b.getAttribute("className");
      }), ea.getElementsByTagName = ra(function (b) {
        return b.appendChild(Z.createComment("")), !b.getElementsByTagName("*").length;
      }), ea.getElementsByClassName = wb.test(Z.getElementsByClassName), ea.getById = ra(function (b) {
        return ma.appendChild(b).id = ha, !Z.getElementsByName || !Z.getElementsByName(ha).length;
      }), ea.getById ? (X.filter.ID = function (b) {
        var c = b.replace(Ga, Ha);
        return function (b) {
          return b.getAttribute("id") === c;
        };
      }, X.find.ID = function (b, c) {
        if ("undefined" != typeof c.getElementById && la) {
          var d = c.getElementById(b);
          return d ? [d] : [];
        }
      }) : (X.filter.ID = function (b) {
        var c = b.replace(Ga, Ha);
        return function (b) {
          return (b = "undefined" != typeof b.getAttributeNode && b.getAttributeNode("id")) && b.value === c;
        };
      }, X.find.ID = function (b, c) {
        if ("undefined" != typeof c.getElementById && la) {
          var d,
            g,
            e,
            f = c.getElementById(b);
          if (f) {
            if (d = f.getAttributeNode("id"), d && d.value === b) return [f];
            e = c.getElementsByName(b);
            for (g = 0; f = e[g++];) if (d = f.getAttributeNode("id"), d && d.value === b) return [f];
          }
          return [];
        }
      }), X.find.TAG = ea.getElementsByTagName ? function (b, c) {
        return "undefined" != typeof c.getElementsByTagName ? c.getElementsByTagName(b) : ea.qsa ? c.querySelectorAll(b) : void 0;
      } : function (b, c) {
        var d,
          g = [],
          e = 0,
          f = c.getElementsByTagName(b);
        if ("*" === b) {
          for (; d = f[e++];) 1 === d.nodeType && g.push(d);
          return g;
        }
        return f;
      }, X.find.CLASS = ea.getElementsByClassName && function (b, c) {
        if ("undefined" != typeof c.getElementsByClassName && la) return c.getElementsByClassName(b);
      }, Aa = [], ia = [], (ea.qsa = wb.test(Z.querySelectorAll)) && (ra(function (b) {
        ma.appendChild(b).innerHTML = "<a id='" + ha + "'></a><select id='" + ha + "-\r\\' msallowcapture=''><option selected=''></option></select>";
        b.querySelectorAll("[msallowcapture^='']").length && ia.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")");
        b.querySelectorAll("[selected]").length || ia.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped)");
        b.querySelectorAll("[id~=" + ha + "-]").length || ia.push("~=");
        b.querySelectorAll(":checked").length || ia.push(":checked");
        b.querySelectorAll("a#" + ha + "+*").length || ia.push(".#.+[+~]");
      }), ra(function (b) {
        b.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
        var c = Z.createElement("input");
        c.setAttribute("type", "hidden");
        b.appendChild(c).setAttribute("name", "D");
        b.querySelectorAll("[name=d]").length && ia.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?=");
        2 !== b.querySelectorAll(":enabled").length && ia.push(":enabled", ":disabled");
        ma.appendChild(b).disabled = !0;
        2 !== b.querySelectorAll(":disabled").length && ia.push(":enabled", ":disabled");
        b.querySelectorAll("*,:x");
        ia.push(",.*:");
      })), (ea.matchesSelector = wb.test(Ra = ma.matches || ma.webkitMatchesSelector || ma.mozMatchesSelector || ma.oMatchesSelector || ma.msMatchesSelector)) && ra(function (b) {
        ea.disconnectedMatch = Ra.call(b, "*");
        Ra.call(b, "[s!='']:x");
        Aa.push("!=", ":((?:\\\\.|[\\w-]|[^\0-\\xa0])+)(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|\\[[\\x20\\t\\r\\n\\f]*((?:\\\\.|[\\w-]|[^\0-\\xa0])+)(?:[\\x20\\t\\r\\n\\f]*([*^$|!~]?=)[\\x20\\t\\r\\n\\f]*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|((?:\\\\.|[\\w-]|[^\0-\\xa0])+))|)[\\x20\\t\\r\\n\\f]*\\])*)|.*)\\)|)");
      }), ia = ia.length && RegExp(ia.join("|")), Aa = Aa.length && RegExp(Aa.join("|")), c = wb.test(ma.compareDocumentPosition), rb = c || wb.test(ma.contains) ? function (b, c) {
        var d = 9 === b.nodeType ? b.documentElement : b,
          g = c && c.parentNode;
        return b === g || !(!g || 1 !== g.nodeType || !(d.contains ? d.contains(g) : b.compareDocumentPosition && 16 & b.compareDocumentPosition(g)));
      } : function (b, c) {
        if (c) for (; c = c.parentNode;) if (c === b) return !0;
        return !1;
      }, Tb = c ? function (b, c) {
        if (b === c) return Fa = !0, 0;
        var d = !b.compareDocumentPosition - !c.compareDocumentPosition;
        return d ? d : (d = (b.ownerDocument || b) === (c.ownerDocument || c) ? b.compareDocumentPosition(c) : 1, 1 & d || !ea.sortDetached && c.compareDocumentPosition(b) === d ? b === Z || b.ownerDocument === va && rb(va, b) ? -1 : c === Z || c.ownerDocument === va && rb(va, c) ? 1 : xa ? Xa(xa, b) - Xa(xa, c) : 0 : 4 & d ? -1 : 1);
      } : function (b, c) {
        if (b === c) return Fa = !0, 0;
        var d,
          g = 0;
        d = b.parentNode;
        var e = c.parentNode,
          f = [b],
          ja = [c];
        if (!d || !e) return b === Z ? -1 : c === Z ? 1 : d ? -1 : e ? 1 : xa ? Xa(xa, b) - Xa(xa, c) : 0;
        if (d === e) return sb(b, c);
        for (d = b; d = d.parentNode;) f.unshift(d);
        for (d = c; d = d.parentNode;) ja.unshift(d);
        for (; f[g] === ja[g];) g++;
        return g ? sb(f[g], ja[g]) : f[g] === va ? -1 : ja[g] === va ? 1 : 0;
      }, Z) : Z;
    };
    ca.matches = function (b, c) {
      return ca(b, null, null, c);
    };
    ca.matchesSelector = function (b, c) {
      if ((b.ownerDocument || b) !== Z && wa(b), c = c.replace(Yc, "='$1']"), ea.matchesSelector && la && !Gb[c + " "] && (!Aa || !Aa.test(c)) && (!ia || !ia.test(c))) try {
        var d = Ra.call(b, c);
        if (d || ea.disconnectedMatch || b.document && 11 !== b.document.nodeType) return d;
      } catch (g) {}
      return 0 < ca(c, Z, null, [b]).length;
    };
    ca.contains = function (b, c) {
      return (b.ownerDocument || b) !== Z && wa(b), rb(b, c);
    };
    ca.attr = function (b, c) {
      (b.ownerDocument || b) !== Z && wa(b);
      var d = X.attrHandle[c.toLowerCase()],
        d = d && Sc.call(X.attrHandle, c.toLowerCase()) ? d(b, c, !la) : void 0;
      return void 0 !== d ? d : ea.attributes || !la ? b.getAttribute(c) : (d = b.getAttributeNode(c)) && d.specified ? d.value : null;
    };
    ca.escape = function (b) {
      return (b + "").replace(dc, ec);
    };
    ca.error = function (b) {
      throw Error("Syntax error, unrecognized expression: " + b);
    };
    ca.uniqueSort = function (b) {
      var c,
        d = [],
        g = 0,
        e = 0;
      if (Fa = !ea.detectDuplicates, xa = !ea.sortStable && b.slice(0), b.sort(Tb), Fa) {
        for (; c = b[e++];) c === b[e] && (g = d.push(e));
        for (; g--;) b.splice(d[g], 1);
      }
      return xa = null, b;
    };
    Qa = ca.getText = function (b) {
      var c,
        d = "",
        g = 0;
      if (c = b.nodeType) {
        if (1 === c || 9 === c || 11 === c) {
          if ("string" == typeof b.textContent) return b.textContent;
          for (b = b.firstChild; b; b = b.nextSibling) d += Qa(b);
        } else {
          if (3 === c || 4 === c) return b.nodeValue;
        }
      } else for (; c = b[g++];) d += Qa(c);
      return d;
    };
    X = ca.selectors = {
      cacheLength: 50,
      createPseudo: pa,
      match: Jb,
      attrHandle: {},
      find: {},
      relative: {
        ">": {
          dir: "parentNode",
          first: !0
        },
        " ": {
          dir: "parentNode"
        },
        "+": {
          dir: "previousSibling",
          first: !0
        },
        "~": {
          dir: "previousSibling"
        }
      },
      preFilter: {
        ATTR: function (b) {
          return b[1] = b[1].replace(Ga, Ha), b[3] = (b[3] || b[4] || b[5] || "").replace(Ga, Ha), "~=" === b[2] && (b[3] = " " + b[3] + " "), b.slice(0, 4);
        },
        CHILD: function (b) {
          return b[1] = b[1].toLowerCase(), "nth" === b[1].slice(0, 3) ? (b[3] || ca.error(b[0]), b[4] = +(b[4] ? b[5] + (b[6] || 1) : 2 * ("even" === b[3] || "odd" === b[3])), b[5] = +(b[7] + b[8] || "odd" === b[3])) : b[3] && ca.error(b[0]), b;
        },
        PSEUDO: function (b) {
          var c,
            d = !b[6] && b[2];
          return Jb.CHILD.test(b[0]) ? null : (b[3] ? b[2] = b[4] || b[5] || "" : d && Zc.test(d) && (c = Na(d, !0)) && (c = d.indexOf(")", d.length - c) - d.length) && (b[0] = b[0].slice(0, c), b[2] = d.slice(0, c)), b.slice(0, 3));
        }
      },
      filter: {
        TAG: function (b) {
          var c = b.replace(Ga, Ha).toLowerCase();
          return "*" === b ? function () {
            return !0;
          } : function (b) {
            return b.nodeName && b.nodeName.toLowerCase() === c;
          };
        },
        CLASS: function (b) {
          var c = fc[b + " "];
          return c || (c = RegExp("(^|[\\x20\\t\\r\\n\\f])" + b + "([\\x20\\t\\r\\n\\f]|$)")) && fc(b, function (b) {
            return c.test("string" == typeof b.className && b.className || "undefined" != typeof b.getAttribute && b.getAttribute("class") || "");
          });
        },
        ATTR: function (b, c, d) {
          return function (g) {
            g = ca.attr(g, b);
            return null == g ? "!=" === c : !c || (g += "", "=" === c ? g === d : "!=" === c ? g !== d : "^=" === c ? d && 0 === g.indexOf(d) : "*=" === c ? d && -1 < g.indexOf(d) : "$=" === c ? d && g.slice(-d.length) === d : "~=" === c ? -1 < (" " + g.replace(Vc, " ") + " ").indexOf(d) : "|=" === c && (g === d || g.slice(0, d.length + 1) === d + "-"));
          };
        },
        CHILD: function (b, c, d, g, e) {
          var f = "nth" !== b.slice(0, 3),
            n = "last" !== b.slice(-4),
            x = "of-type" === c;
          return 1 === g && 0 === e ? function (b) {
            return !!b.parentNode;
          } : function (c, d, j) {
            var l, r, u, U, M, q;
            d = f !== n ? "nextSibling" : "previousSibling";
            var t = c.parentNode,
              p = x && c.nodeName.toLowerCase();
            j = !j && !x;
            var C = !1;
            if (t) {
              if (f) {
                for (; d;) {
                  for (U = c; U = U[d];) if (x ? U.nodeName.toLowerCase() === p : 1 === U.nodeType) return !1;
                  q = d = "only" === b && !q && "nextSibling";
                }
                return !0;
              }
              if (q = [n ? t.firstChild : t.lastChild], n && j) {
                U = t;
                u = U[ha] || (U[ha] = {});
                r = u[U.uniqueID] || (u[U.uniqueID] = {});
                l = r[b] || [];
                C = (M = l[0] === Da && l[1]) && l[2];
                for (U = M && t.childNodes[M]; U = ++M && U && U[d] || (C = M = 0) || q.pop();) if (1 === U.nodeType && ++C && U === c) {
                  r[b] = [Da, M, C];
                  break;
                }
              } else if (j && (U = c, u = U[ha] || (U[ha] = {}), r = u[U.uniqueID] || (u[U.uniqueID] = {}), l = r[b] || [], M = l[0] === Da && l[1], C = M), !1 === C) for (; (U = ++M && U && U[d] || (C = M = 0) || q.pop()) && (!(x ? U.nodeName.toLowerCase() === p : 1 === U.nodeType) || !++C || !(j && (u = U[ha] || (U[ha] = {}), r = u[U.uniqueID] || (u[U.uniqueID] = {}), r[b] = [Da, C]), U === c)););
              return C -= e, C === g || 0 === C % g && 0 <= C / g;
            }
          };
        },
        PSEUDO: function (b, c) {
          var d,
            g = X.pseudos[b] || X.setFilters[b.toLowerCase()] || ca.error("unsupported pseudo: " + b);
          return g[ha] ? g(c) : 1 < g.length ? (d = [b, b, "", c], X.setFilters.hasOwnProperty(b.toLowerCase()) ? pa(function (b, d) {
            for (var e, f = g(b, c), n = f.length; n--;) e = Xa(b, f[n]), b[e] = !(d[e] = f[n]);
          }) : function (b) {
            return g(b, 0, d);
          }) : g;
        }
      },
      pseudos: {
        not: pa(function (b) {
          var c = [],
            d = [],
            g = Za(b.replace(Hb, "$1"));
          return g[ha] ? pa(function (b, c, d, e) {
            var f;
            d = g(b, null, e, []);
            for (e = b.length; e--;) (f = d[e]) && (b[e] = !(c[e] = f));
          }) : function (b, e, f) {
            return c[0] = b, g(c, null, f, d), c[0] = null, !d.pop();
          };
        }),
        has: pa(function (b) {
          return function (c) {
            return 0 < ca(b, c).length;
          };
        }),
        contains: pa(function (b) {
          return b = b.replace(Ga, Ha), function (c) {
            return -1 < (c.textContent || c.innerText || Qa(c)).indexOf(b);
          };
        }),
        lang: pa(function (b) {
          return $c.test(b || "") || ca.error("unsupported lang: " + b), b = b.replace(Ga, Ha).toLowerCase(), function (c) {
            var d;
            do if (d = la ? c.lang : c.getAttribute("xml:lang") || c.getAttribute("lang")) return d = d.toLowerCase(), d === b || 0 === d.indexOf(b + "-"); while ((c = c.parentNode) && 1 === c.nodeType);
            return !1;
          };
        }),
        target: function (b) {
          var c = eb.location && eb.location.hash;
          return c && c.slice(1) === b.id;
        },
        root: function (b) {
          return b === ma;
        },
        focus: function (b) {
          return b === Z.activeElement && (!Z.hasFocus || Z.hasFocus()) && !(!b.type && !b.href && !~b.tabIndex);
        },
        enabled: ub(!1),
        disabled: ub(!0),
        checked: function (b) {
          var c = b.nodeName.toLowerCase();
          return "input" === c && !!b.checked || "option" === c && !!b.selected;
        },
        selected: function (b) {
          return b.parentNode && b.parentNode.selectedIndex, !0 === b.selected;
        },
        empty: function (b) {
          for (b = b.firstChild; b; b = b.nextSibling) if (6 > b.nodeType) return !1;
          return !0;
        },
        parent: function (b) {
          return !X.pseudos.empty(b);
        },
        header: function (b) {
          return bd.test(b.nodeName);
        },
        input: function (b) {
          return ad.test(b.nodeName);
        },
        button: function (b) {
          var c = b.nodeName.toLowerCase();
          return "input" === c && "button" === b.type || "button" === c;
        },
        text: function (b) {
          var c;
          return "input" === b.nodeName.toLowerCase() && "text" === b.type && (null == (c = b.getAttribute("type")) || "text" === c.toLowerCase());
        },
        first: Ca(function () {
          return [0];
        }),
        last: Ca(function (b, c) {
          return [c - 1];
        }),
        eq: Ca(function (b, c, d) {
          return [0 > d ? d + c : d];
        }),
        even: Ca(function (b, c) {
          for (var d = 0; d < c; d += 2) b.push(d);
          return b;
        }),
        odd: Ca(function (b, c) {
          for (var d = 1; d < c; d += 2) b.push(d);
          return b;
        }),
        lt: Ca(function (b, c, d) {
          for (c = 0 > d ? d + c : d; 0 <= --c;) b.push(c);
          return b;
        }),
        gt: Ca(function (b, c, d) {
          for (d = 0 > d ? d + c : d; ++d < c;) b.push(d);
          return b;
        })
      }
    };
    X.pseudos.nth = X.pseudos.eq;
    for (Ea in {
      radio: !0,
      checkbox: !0,
      file: !0,
      password: !0,
      image: !0
    }) X.pseudos[Ea] = tb(Ea);
    for (Ea in {
      submit: !0,
      reset: !0
    }) X.pseudos[Ea] = Ib(Ea);
    vb.prototype = X.filters = X.pseudos;
    X.setFilters = new vb();
    Na = ca.tokenize = function (b, c) {
      var d, g, e, f, n, x, j;
      if (n = gc[b + " "]) return c ? 0 : n.slice(0);
      n = b;
      x = [];
      for (j = X.preFilter; n;) {
        d && !(g = Wc.exec(n)) || (g && (n = n.slice(g[0].length) || n), x.push(e = []));
        d = !1;
        (g = Xc.exec(n)) && (d = g.shift(), e.push({
          value: d,
          type: g[0].replace(Hb, " ")
        }), n = n.slice(d.length));
        for (f in X.filter) !(g = Jb[f].exec(n)) || j[f] && !(g = j[f](g)) || (d = g.shift(), e.push({
          value: d,
          type: f,
          matches: g
        }), n = n.slice(d.length));
        if (!d) break;
      }
      return c ? n.length : n ? ca.error(b) : gc(b, x).slice(0);
    };
    za = (Za = ca.compile = function (b, c) {
      var d,
        g = [],
        e = [],
        f = Gb[b + " "];
      if (!f) {
        c || (c = Na(b));
        for (d = c.length; d--;) f = Ya(c[d]), f[ha] ? g.push(f) : e.push(f);
        d = Gb;
        var n = 0 < g.length,
          x = 0 < e.length,
          f = function (b, c, d, f, ja) {
            var j,
              l,
              r,
              u = 0,
              M = "0",
              U = b && [],
              q = [],
              t = Pa,
              p = b || x && X.find.TAG("*", ja),
              C = Da += null == t ? 1 : Math.random() || 0.1,
              W = p.length;
            for (ja && (Pa = c === Z || c || ja); M !== W && null != (j = p[M]); M++) {
              if (x && j) {
                l = 0;
                for (c || j.ownerDocument === Z || (wa(j), d = !la); r = e[l++];) if (r(j, c || Z, d)) {
                  f.push(j);
                  break;
                }
                ja && (Da = C);
              }
              n && ((j = !r && j) && u--, b && U.push(j));
            }
            if (u += M, n && M !== u) {
              for (l = 0; r = g[l++];) r(U, q, c, d);
              if (b) {
                if (0 < u) for (; M--;) U[M] || q[M] || (q[M] = Tc.call(f));
                q = Oa(q);
              }
              Ma.apply(f, q);
              ja && !b && 0 < q.length && 1 < u + g.length && ca.uniqueSort(f);
            }
            return ja && (Da = C, Pa = t), U;
          },
          f = n ? pa(f) : f,
          f = d(b, f);
        f.selector = b;
      }
      return f;
    }, gb = ca.select = function (b, c, d, g) {
      var e,
        f,
        n,
        x,
        j,
        l = "function" == typeof b && b,
        r = !g && Na(b = l.selector || b);
      if (d = d || [], 1 === r.length) {
        if (f = r[0] = r[0].slice(0), 2 < f.length && "ID" === (n = f[0]).type && 9 === c.nodeType && la && X.relative[f[1].type]) {
          if (c = (X.find.ID(n.matches[0].replace(Ga, Ha), c) || [])[0], !c) return d;
          l && (c = c.parentNode);
          b = b.slice(f.shift().value.length);
        }
        for (e = Jb.needsContext.test(b) ? 0 : f.length; e-- && !(n = f[e], X.relative[x = n.type]);) if ((j = X.find[x]) && (g = j(n.matches[0].replace(Ga, Ha), Sb.test(f[0].type) && fb(c.parentNode) || c))) {
          if (f.splice(e, 1), b = g.length && Ta(f), !b) return Ma.apply(d, g), d;
          break;
        }
      }
      return (l || Za(b, r))(g, c, !la, d, !c || Sb.test(b) && fb(c.parentNode) || c), d;
    }, ea.sortStable = ha.split("").sort(Tb).join("") === ha, ea.detectDuplicates = !!Fa, wa(), ea.sortDetached = ra(function (b) {
      return 1 & b.compareDocumentPosition(Z.createElement("fieldset"));
    }), ra(function (b) {
      return b.innerHTML = "<a href='#'></a>", "#" === b.firstChild.getAttribute("href");
    }) || ib("type|href|height|width", function (b, c, d) {
      if (!d) return b.getAttribute(c, "type" === c.toLowerCase() ? 1 : 2);
    }), ea.attributes && ra(function (b) {
      return b.innerHTML = "<input/>", b.firstChild.setAttribute("value", ""), "" === b.firstChild.getAttribute("value");
    }) || ib("value", function (b, c, d) {
      if (!d && "input" === b.nodeName.toLowerCase()) return b.defaultValue;
    }), ra(function (b) {
      return null == b.getAttribute("disabled");
    }) || ib("checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", function (b, c, d) {
      var g;
      if (!d) return !0 === b[c] ? c.toLowerCase() : (g = b.getAttributeNode(c)) && g.specified ? g.value : null;
    }), ca);
    p.find = za;
    p.expr = za.selectors;
    p.expr[":"] = p.expr.pseudos;
    p.uniqueSort = p.unique = za.uniqueSort;
    p.text = za.getText;
    p.isXMLDoc = za.isXML;
    p.contains = za.contains;
    p.escapeSelector = za.escape;
    var kb = function (b, c, d) {
        for (var g = [], e = void 0 !== d; (b = b[c]) && 9 !== b.nodeType;) if (1 === b.nodeType) {
          if (e && p(b).is(d)) break;
          g.push(b);
        }
        return g;
      },
      jc = function (b, c) {
        for (var d = []; b; b = b.nextSibling) 1 === b.nodeType && b !== c && d.push(b);
        return d;
      },
      kc = p.expr.match.needsContext,
      lc = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,
      Gc = /^.[^:#\[\.,]*$/;
    p.filter = function (b, c, d) {
      var g = c[0];
      return d && (b = ":not(" + b + ")"), 1 === c.length && 1 === g.nodeType ? p.find.matchesSelector(g, b) ? [g] : [] : p.find.matches(b, p.grep(c, function (b) {
        return 1 === b.nodeType;
      }));
    };
    p.fn.extend({
      find: function (b) {
        var c,
          d,
          g = this.length,
          e = this;
        if ("string" != typeof b) return this.pushStack(p(b).filter(function () {
          for (c = 0; c < g; c++) if (p.contains(e[c], this)) return !0;
        }));
        d = this.pushStack([]);
        for (c = 0; c < g; c++) p.find(b, e[c], d);
        return 1 < g ? p.uniqueSort(d) : d;
      },
      filter: function (b) {
        return this.pushStack(j(this, b || [], !1));
      },
      not: function (b) {
        return this.pushStack(j(this, b || [], !0));
      },
      is: function (b) {
        return !!j(this, "string" == typeof b && kc.test(b) ? p(b) : b || [], !1).length;
      }
    });
    var mc,
      cd = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
    (p.fn.init = function (b, c, d) {
      var g, e;
      if (!b) return this;
      if (d = d || mc, "string" == typeof b) {
        if (g = "<" === b[0] && ">" === b[b.length - 1] && 3 <= b.length ? [null, b, null] : cd.exec(b), !g || !g[1] && c) return !c || c.jquery ? (c || d).find(b) : this.constructor(c).find(b);
        if (g[1]) {
          if (c = c instanceof p ? c[0] : c, p.merge(this, p.parseHTML(g[1], c && c.nodeType ? c.ownerDocument || c : Y, !0)), lc.test(g[1]) && p.isPlainObject(c)) for (g in c) p.isFunction(this[g]) ? this[g](c[g]) : this.attr(g, c[g]);
          return this;
        }
        return e = Y.getElementById(g[2]), e && (this[0] = e, this.length = 1), this;
      }
      return b.nodeType ? (this[0] = b, this.length = 1, this) : p.isFunction(b) ? void 0 !== d.ready ? d.ready(b) : b(p) : p.makeArray(b, this);
    }).prototype = p.fn;
    mc = p(Y);
    var dd = /^(?:parents|prev(?:Until|All))/,
      ed = {
        children: !0,
        contents: !0,
        next: !0,
        prev: !0
      };
    p.fn.extend({
      has: function (b) {
        var c = p(b, this),
          d = c.length;
        return this.filter(function () {
          for (var b = 0; b < d; b++) if (p.contains(this, c[b])) return !0;
        });
      },
      closest: function (b, c) {
        var d,
          g = 0,
          e = this.length,
          f = [],
          n = "string" != typeof b && p(b);
        if (!kc.test(b)) for (; g < e; g++) for (d = this[g]; d && d !== c; d = d.parentNode) if (11 > d.nodeType && (n ? -1 < n.index(d) : 1 === d.nodeType && p.find.matchesSelector(d, b))) {
          f.push(d);
          break;
        }
        return this.pushStack(1 < f.length ? p.uniqueSort(f) : f);
      },
      index: function (b) {
        return b ? "string" == typeof b ? Ja.call(p(b), this[0]) : Ja.call(this, b.jquery ? b[0] : b) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      },
      add: function (b, c) {
        return this.pushStack(p.uniqueSort(p.merge(this.get(), p(b, c))));
      },
      addBack: function (b) {
        return this.add(null == b ? this.prevObject : this.prevObject.filter(b));
      }
    });
    p.each({
      parent: function (b) {
        return (b = b.parentNode) && 11 !== b.nodeType ? b : null;
      },
      parents: function (b) {
        return kb(b, "parentNode");
      },
      parentsUntil: function (b, c, d) {
        return kb(b, "parentNode", d);
      },
      next: function (b) {
        return m(b, "nextSibling");
      },
      prev: function (b) {
        return m(b, "previousSibling");
      },
      nextAll: function (b) {
        return kb(b, "nextSibling");
      },
      prevAll: function (b) {
        return kb(b, "previousSibling");
      },
      nextUntil: function (b, c, d) {
        return kb(b, "nextSibling", d);
      },
      prevUntil: function (b, c, d) {
        return kb(b, "previousSibling", d);
      },
      siblings: function (b) {
        return jc((b.parentNode || {}).firstChild, b);
      },
      children: function (b) {
        return jc(b.firstChild);
      },
      contents: function (b) {
        return f(b, "iframe") ? b.contentDocument : (f(b, "template") && (b = b.content || b), p.merge([], b.childNodes));
      }
    }, function (b, c) {
      p.fn[b] = function (d, g) {
        var e = p.map(this, c, d);
        return "Until" !== b.slice(-5) && (g = d), g && "string" == typeof g && (e = p.filter(g, e)), 1 < this.length && (ed[b] || p.uniqueSort(e), dd.test(b) && e.reverse()), this.pushStack(e);
      };
    });
    var ta = /[^\x20\t\r\n\f]+/g;
    p.Callbacks = function (b) {
      var c;
      if ("string" == typeof b) {
        var d = {};
        c = (p.each(b.match(ta) || [], function (b, c) {
          d[c] = !0;
        }), d);
      } else c = p.extend({}, b);
      b = c;
      var g,
        e,
        f,
        n,
        x = [],
        j = [],
        l = -1,
        r = function () {
          n = n || b.once;
          for (f = g = !0; j.length; l = -1) for (e = j.shift(); ++l < x.length;) !1 === x[l].apply(e[0], e[1]) && b.stopOnFalse && (l = x.length, e = !1);
          b.memory || (e = !1);
          g = !1;
          n && (x = e ? [] : "");
        },
        u = {
          add: function () {
            return x && (e && !g && (l = x.length - 1, j.push(e)), function Mc(c) {
              p.each(c, function (c, d) {
                p.isFunction(d) ? b.unique && u.has(d) || x.push(d) : d && d.length && "string" !== p.type(d) && Mc(d);
              });
            }(arguments), e && !g && r()), this;
          },
          remove: function () {
            return p.each(arguments, function (b, c) {
              for (var d; -1 < (d = p.inArray(c, x, d));) x.splice(d, 1), d <= l && l--;
            }), this;
          },
          has: function (b) {
            return b ? -1 < p.inArray(b, x) : 0 < x.length;
          },
          empty: function () {
            return x && (x = []), this;
          },
          disable: function () {
            return n = j = [], x = e = "", this;
          },
          disabled: function () {
            return !x;
          },
          lock: function () {
            return n = j = [], e || g || (x = e = ""), this;
          },
          locked: function () {
            return !!n;
          },
          fireWith: function (b, c) {
            return n || (c = c || [], c = [b, c.slice ? c.slice() : c], j.push(c), g || r()), this;
          },
          fire: function () {
            return u.fireWith(this, arguments), this;
          },
          fired: function () {
            return !!f;
          }
        };
      return u;
    };
    p.extend({
      Deferred: function (c) {
        var d = [["notify", "progress", p.Callbacks("memory"), p.Callbacks("memory"), 2], ["resolve", "done", p.Callbacks("once memory"), p.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", p.Callbacks("once memory"), p.Callbacks("once memory"), 1, "rejected"]],
          e = "pending",
          f = {
            state: function () {
              return e;
            },
            always: function () {
              return n.done(arguments).fail(arguments), this;
            },
            "catch": function (b) {
              return f.then(null, b);
            },
            pipe: function () {
              var b = arguments;
              return p.Deferred(function (c) {
                p.each(d, function (d, g) {
                  var e = p.isFunction(b[g[4]]) && b[g[4]];
                  n[g[1]](function () {
                    var b = e && e.apply(this, arguments);
                    b && p.isFunction(b.promise) ? b.promise().progress(c.notify).done(c.resolve).fail(c.reject) : c[g[0] + "With"](this, e ? [b] : arguments);
                  });
                });
                b = null;
              }).promise();
            },
            then: function (c, e, f) {
              function n(c, d, e, f) {
                return function () {
                  var j = this,
                    r = arguments,
                    u = function () {
                      var b, u;
                      if (!(c < x)) {
                        if (b = e.apply(j, r), b === d.promise()) throw new TypeError("Thenable self-resolution");
                        u = b && ("object" == typeof b || "function" == typeof b) && b.then;
                        p.isFunction(u) ? f ? u.call(b, n(x, d, l, f), n(x, d, g, f)) : (x++, u.call(b, n(x, d, l, f), n(x, d, g, f), n(x, d, l, d.notifyWith))) : (e !== l && (j = void 0, r = [b]), (f || d.resolveWith)(j, r));
                      }
                    },
                    ja = f ? u : function () {
                      try {
                        u();
                      } catch (b) {
                        p.Deferred.exceptionHook && p.Deferred.exceptionHook(b, ja.stackTrace), c + 1 >= x && (e !== g && (j = void 0, r = [b]), d.rejectWith(j, r));
                      }
                    };
                  c ? ja() : (p.Deferred.getStackHook && (ja.stackTrace = p.Deferred.getStackHook()), b.setTimeout(ja));
                };
              }
              var x = 0;
              return p.Deferred(function (b) {
                d[0][3].add(n(0, b, p.isFunction(f) ? f : l, b.notifyWith));
                d[1][3].add(n(0, b, p.isFunction(c) ? c : l));
                d[2][3].add(n(0, b, p.isFunction(e) ? e : g));
              }).promise();
            },
            promise: function (b) {
              return null != b ? p.extend(b, f) : f;
            }
          },
          n = {};
        return p.each(d, function (b, c) {
          var g = c[2],
            x = c[5];
          f[c[1]] = g.add;
          x && g.add(function () {
            e = x;
          }, d[3 - b][2].disable, d[0][2].lock);
          g.add(c[3].fire);
          n[c[0]] = function () {
            return n[c[0] + "With"](this === n ? void 0 : this, arguments), this;
          };
          n[c[0] + "With"] = g.fireWith;
        }), f.promise(n), c && c.call(n, n), n;
      },
      when: function (b) {
        var c = arguments.length,
          d = c,
          g = Array(d),
          e = ya.call(arguments),
          f = p.Deferred(),
          n = function (b) {
            return function (d) {
              g[b] = this;
              e[b] = 1 < arguments.length ? ya.call(arguments) : d;
              --c || f.resolveWith(g, e);
            };
          };
        if (1 >= c && (q(b, f.done(n(d)).resolve, f.reject, !c), "pending" === f.state() || p.isFunction(e[d] && e[d].then))) return f.then();
        for (; d--;) q(e[d], n(d), f.reject);
        return f.promise();
      }
    });
    var fd = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    p.Deferred.exceptionHook = function (c, d) {
      b.console && b.console.warn && c && fd.test(c.name) && b.console.warn("jQuery.Deferred exception: " + c.message, c.stack, d);
    };
    p.readyException = function (c) {
      b.setTimeout(function () {
        throw c;
      });
    };
    var Ub = p.Deferred();
    p.fn.ready = function (b) {
      return Ub.then(b)["catch"](function (b) {
        p.readyException(b);
      }), this;
    };
    p.extend({
      isReady: !1,
      readyWait: 1,
      ready: function (b) {
        (!0 === b ? --p.readyWait : p.isReady) || (p.isReady = !0, !0 !== b && 0 < --p.readyWait || Ub.resolveWith(Y, [p]));
      }
    });
    p.ready.then = Ub.then;
    "complete" === Y.readyState || "loading" !== Y.readyState && !Y.documentElement.doScroll ? b.setTimeout(p.ready) : (Y.addEventListener("DOMContentLoaded", y), b.addEventListener("load", y));
    var Ia = function (b, c, d, g, e, f, n) {
        var x = 0,
          j = b.length,
          l = null == d;
        if ("object" === p.type(d)) for (x in e = !0, d) Ia(b, c, x, d[x], !0, f, n);else if (void 0 !== g && (e = !0, p.isFunction(g) || (n = !0), l && (n ? (c.call(b, g), c = null) : (l = c, c = function (b, c, d) {
          return l.call(p(b), d);
        })), c)) for (; x < j; x++) c(b[x], d, n ? g : g.call(b[x], x, c(b[x], d)));
        return e ? b : l ? c.call(b) : j ? c(b[0], d) : f;
      },
      Kb = function (b) {
        return 1 === b.nodeType || 9 === b.nodeType || !+b.nodeType;
      };
    z.uid = 1;
    z.prototype = {
      cache: function (b) {
        var c = b[this.expando];
        return c || (c = {}, Kb(b) && (b.nodeType ? b[this.expando] = c : Object.defineProperty(b, this.expando, {
          value: c,
          configurable: !0
        }))), c;
      },
      set: function (b, c, d) {
        var g;
        b = this.cache(b);
        if ("string" == typeof c) b[p.camelCase(c)] = d;else for (g in c) b[p.camelCase(g)] = c[g];
        return b;
      },
      get: function (b, c) {
        return void 0 === c ? this.cache(b) : b[this.expando] && b[this.expando][p.camelCase(c)];
      },
      access: function (b, c, d) {
        return void 0 === c || c && "string" == typeof c && void 0 === d ? this.get(b, c) : (this.set(b, c, d), void 0 !== d ? d : c);
      },
      remove: function (b, c) {
        var d,
          g = b[this.expando];
        if (void 0 !== g) {
          if (void 0 !== c) {
            Array.isArray(c) ? c = c.map(p.camelCase) : (c = p.camelCase(c), c = c in g ? [c] : c.match(ta) || []);
            for (d = c.length; d--;) delete g[c[d]];
          }
          (void 0 === c || p.isEmptyObject(g)) && (b.nodeType ? b[this.expando] = void 0 : delete b[this.expando]);
        }
      },
      hasData: function (b) {
        b = b[this.expando];
        return void 0 !== b && !p.isEmptyObject(b);
      }
    };
    var T = new z(),
      qa = new z(),
      Ic = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      Hc = /[A-Z]/g;
    p.extend({
      hasData: function (b) {
        return qa.hasData(b) || T.hasData(b);
      },
      data: function (b, c, d) {
        return qa.access(b, c, d);
      },
      removeData: function (b, c) {
        qa.remove(b, c);
      },
      _data: function (b, c, d) {
        return T.access(b, c, d);
      },
      _removeData: function (b, c) {
        T.remove(b, c);
      }
    });
    p.fn.extend({
      data: function (b, c) {
        var d,
          g,
          e,
          f = this[0],
          n = f && f.attributes;
        if (void 0 === b) {
          if (this.length && (e = qa.get(f), 1 === f.nodeType && !T.get(f, "hasDataAttrs"))) {
            for (d = n.length; d--;) n[d] && (g = n[d].name, 0 === g.indexOf("data-") && (g = p.camelCase(g.slice(5)), A(f, g, e[g])));
            T.set(f, "hasDataAttrs", !0);
          }
          return e;
        }
        return "object" == typeof b ? this.each(function () {
          qa.set(this, b);
        }) : Ia(this, function (c) {
          var d;
          if (f && void 0 === c) {
            if ((d = qa.get(f, b), void 0 !== d) || (d = A(f, b), void 0 !== d)) return d;
          } else this.each(function () {
            qa.set(this, b, c);
          });
        }, null, c, 1 < arguments.length, null, !0);
      },
      removeData: function (b) {
        return this.each(function () {
          qa.remove(this, b);
        });
      }
    });
    p.extend({
      queue: function (b, c, d) {
        var g;
        if (b) return c = (c || "fx") + "queue", g = T.get(b, c), d && (!g || Array.isArray(d) ? g = T.access(b, c, p.makeArray(d)) : g.push(d)), g || [];
      },
      dequeue: function (b, c) {
        c = c || "fx";
        var d = p.queue(b, c),
          g = d.length,
          e = d.shift(),
          f = p._queueHooks(b, c),
          n = function () {
            p.dequeue(b, c);
          };
        "inprogress" === e && (e = d.shift(), g--);
        e && ("fx" === c && d.unshift("inprogress"), delete f.stop, e.call(b, n, f));
        !g && f && f.empty.fire();
      },
      _queueHooks: function (b, c) {
        var d = c + "queueHooks";
        return T.get(b, d) || T.access(b, d, {
          empty: p.Callbacks("once memory").add(function () {
            T.remove(b, [c + "queue", d]);
          })
        });
      }
    });
    p.fn.extend({
      queue: function (b, c) {
        var d = 2;
        return "string" != typeof b && (c = b, b = "fx", d--), arguments.length < d ? p.queue(this[0], b) : void 0 === c ? this : this.each(function () {
          var d = p.queue(this, b, c);
          p._queueHooks(this, b);
          "fx" === b && "inprogress" !== d[0] && p.dequeue(this, b);
        });
      },
      dequeue: function (b) {
        return this.each(function () {
          p.dequeue(this, b);
        });
      },
      clearQueue: function (b) {
        return this.queue(b || "fx", []);
      },
      promise: function (b, c) {
        var d,
          g = 1,
          e = p.Deferred(),
          f = this,
          n = this.length,
          x = function () {
            --g || e.resolveWith(f, [f]);
          };
        "string" != typeof b && (c = b, b = void 0);
        for (b = b || "fx"; n--;) (d = T.get(f[n], b + "queueHooks")) && d.empty && (g++, d.empty.add(x));
        return x(), e.promise(c);
      }
    });
    var nc = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
      mb = RegExp("^(?:([+-])=|)(" + nc + ")([a-z%]*)$", "i"),
      Sa = ["Top", "Right", "Bottom", "Left"],
      Ab = function (b, c) {
        return b = c || b, "none" === b.style.display || "" === b.style.display && p.contains(b.ownerDocument, b) && "none" === p.css(b, "display");
      },
      oc = function (b, c, d, g) {
        var e,
          f = {};
        for (e in c) f[e] = b.style[e], b.style[e] = c[e];
        d = d.apply(b, g || []);
        for (e in c) b.style[e] = f[e];
        return d;
      },
      Yb = {};
    p.fn.extend({
      show: function () {
        return H(this, !0);
      },
      hide: function () {
        return H(this);
      },
      toggle: function (b) {
        return "boolean" == typeof b ? b ? this.show() : this.hide() : this.each(function () {
          Ab(this) ? p(this).show() : p(this).hide();
        });
      }
    });
    var pc = /^(?:checkbox|radio)$/i,
      Zb = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i,
      $b = /^$|\/(?:java|ecma)script/i,
      sa = {
        option: [1, "<select multiple='multiple'>", "</select>"],
        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        _default: [0, "", ""]
      };
    sa.optgroup = sa.option;
    sa.tbody = sa.tfoot = sa.colgroup = sa.caption = sa.thead;
    sa.th = sa.td;
    var Jc = /<|&#?\w+;/,
      Lb = Y.createDocumentFragment().appendChild(Y.createElement("div")),
      Mb = Y.createElement("input");
    Mb.setAttribute("type", "radio");
    Mb.setAttribute("checked", "checked");
    Mb.setAttribute("name", "t");
    Lb.appendChild(Mb);
    da.checkClone = Lb.cloneNode(!0).cloneNode(!0).lastChild.checked;
    Lb.innerHTML = "<textarea>x</textarea>";
    da.noCloneChecked = !!Lb.cloneNode(!0).lastChild.defaultValue;
    !0;
    var Nb = Y.documentElement,
      gd = /^key/,
      hd = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
      qc = /^([^.]*)(?:\.(.+)|)/;
    p.event = {
      global: {},
      add: function (b, c, d, g, e) {
        var f, n, x, j, l, r, u, M, q, t;
        if (l = T.get(b)) {
          d.handler && (f = d, d = f.handler, e = f.selector);
          e && p.find.matchesSelector(Nb, e);
          d.guid || (d.guid = p.guid++);
          (j = l.events) || (j = l.events = {});
          (n = l.handle) || (n = l.handle = function (c) {
            return "undefined" != typeof p && p.event.triggered !== c.type ? p.event.dispatch.apply(b, arguments) : void 0;
          });
          c = (c || "").match(ta) || [""];
          for (l = c.length; l--;) x = qc.exec(c[l]) || [], q = t = x[1], x = (x[2] || "").split(".").sort(), q && (u = p.event.special[q] || {}, q = (e ? u.delegateType : u.bindType) || q, u = p.event.special[q] || {}, r = p.extend({
            type: q,
            origType: t,
            data: g,
            handler: d,
            guid: d.guid,
            selector: e,
            needsContext: e && p.expr.match.needsContext.test(e),
            namespace: x.join(".")
          }, f), (M = j[q]) || (M = j[q] = [], M.delegateCount = 0, u.setup && !1 !== u.setup.call(b, g, x, n) || b.addEventListener && b.addEventListener(q, n)), u.add && (u.add.call(b, r), r.handler.guid || (r.handler.guid = d.guid)), e ? M.splice(M.delegateCount++, 0, r) : M.push(r), p.event.global[q] = !0);
        }
      },
      remove: function (b, c, d, g, e) {
        var f,
          n,
          x,
          j,
          l,
          r,
          u,
          M,
          q,
          t,
          C,
          W = T.hasData(b) && T.get(b);
        if (W && (j = W.events)) {
          c = (c || "").match(ta) || [""];
          for (l = c.length; l--;) if (x = qc.exec(c[l]) || [], q = C = x[1], t = (x[2] || "").split(".").sort(), q) {
            u = p.event.special[q] || {};
            q = (g ? u.delegateType : u.bindType) || q;
            M = j[q] || [];
            x = x[2] && RegExp("(^|\\.)" + t.join("\\.(?:.*\\.|)") + "(\\.|$)");
            for (n = f = M.length; f--;) r = M[f], !e && C !== r.origType || d && d.guid !== r.guid || x && !x.test(r.namespace) || g && g !== r.selector && ("**" !== g || !r.selector) || (M.splice(f, 1), r.selector && M.delegateCount--, u.remove && u.remove.call(b, r));
            n && !M.length && (u.teardown && !1 !== u.teardown.call(b, t, W.handle) || p.removeEvent(b, q, W.handle), delete j[q]);
          } else for (q in j) p.event.remove(b, q + c[l], d, g, !0);
          p.isEmptyObject(j) && T.remove(b, "handle events");
        }
      },
      dispatch: function (b) {
        var c = p.event.fix(b),
          d,
          g,
          e,
          f,
          n,
          x,
          j = Array(arguments.length);
        g = (T.get(this, "events") || {})[c.type] || [];
        var l = p.event.special[c.type] || {};
        j[0] = c;
        for (d = 1; d < arguments.length; d++) j[d] = arguments[d];
        if (c.delegateTarget = this, !l.preDispatch || !1 !== l.preDispatch.call(this, c)) {
          x = p.event.handlers.call(this, c, g);
          for (d = 0; (f = x[d++]) && !c.isPropagationStopped();) {
            c.currentTarget = f.elem;
            for (g = 0; (n = f.handlers[g++]) && !c.isImmediatePropagationStopped();) c.rnamespace && !c.rnamespace.test(n.namespace) || (c.handleObj = n, c.data = n.data, e = ((p.event.special[n.origType] || {}).handle || n.handler).apply(f.elem, j), void 0 !== e && !1 === (c.result = e) && (c.preventDefault(), c.stopPropagation()));
          }
          return l.postDispatch && l.postDispatch.call(this, c), c.result;
        }
      },
      handlers: function (b, c) {
        var d,
          g,
          e,
          f,
          n,
          x = [],
          j = c.delegateCount,
          l = b.target;
        if (j && l.nodeType && !("click" === b.type && 1 <= b.button)) for (; l !== this; l = l.parentNode || this) if (1 === l.nodeType && ("click" !== b.type || !0 !== l.disabled)) {
          f = [];
          n = {};
          for (d = 0; d < j; d++) g = c[d], e = g.selector + " ", void 0 === n[e] && (n[e] = g.needsContext ? -1 < p(e, this).index(l) : p.find(e, this, null, [l]).length), n[e] && f.push(g);
          f.length && x.push({
            elem: l,
            handlers: f
          });
        }
        return l = this, j < c.length && x.push({
          elem: l,
          handlers: c.slice(j)
        }), x;
      },
      addProp: function (b, c) {
        Object.defineProperty(p.Event.prototype, b, {
          enumerable: !0,
          configurable: !0,
          get: p.isFunction(c) ? function () {
            if (this.originalEvent) return c(this.originalEvent);
          } : function () {
            if (this.originalEvent) return this.originalEvent[b];
          },
          set: function (c) {
            Object.defineProperty(this, b, {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: c
            });
          }
        });
      },
      fix: function (b) {
        return b[p.expando] ? b : new p.Event(b);
      },
      special: {
        load: {
          noBubble: !0
        },
        focus: {
          trigger: function () {
            if (this !== L() && this.focus) return this.focus(), !1;
          },
          delegateType: "focusin"
        },
        blur: {
          trigger: function () {
            if (this === L() && this.blur) return this.blur(), !1;
          },
          delegateType: "focusout"
        },
        click: {
          trigger: function () {
            if ("checkbox" === this.type && this.click && f(this, "input")) return this.click(), !1;
          },
          _default: function (b) {
            return f(b.target, "a");
          }
        },
        beforeunload: {
          postDispatch: function (b) {
            void 0 !== b.result && b.originalEvent && (b.originalEvent.returnValue = b.result);
          }
        }
      }
    };
    p.removeEvent = function (b, c, d) {
      b.removeEventListener && b.removeEventListener(c, d);
    };
    p.Event = function (b, c) {
      return this instanceof p.Event ? (b && b.type ? (this.originalEvent = b, this.type = b.type, this.isDefaultPrevented = b.defaultPrevented || void 0 === b.defaultPrevented && !1 === b.returnValue ? F : K, this.target = b.target && 3 === b.target.nodeType ? b.target.parentNode : b.target, this.currentTarget = b.currentTarget, this.relatedTarget = b.relatedTarget) : this.type = b, c && p.extend(this, c), this.timeStamp = b && b.timeStamp || p.now(), void (this[p.expando] = !0)) : new p.Event(b, c);
    };
    p.Event.prototype = {
      constructor: p.Event,
      isDefaultPrevented: K,
      isPropagationStopped: K,
      isImmediatePropagationStopped: K,
      isSimulated: !1,
      preventDefault: function () {
        var b = this.originalEvent;
        this.isDefaultPrevented = F;
        b && !this.isSimulated && b.preventDefault();
      },
      stopPropagation: function () {
        var b = this.originalEvent;
        this.isPropagationStopped = F;
        b && !this.isSimulated && b.stopPropagation();
      },
      stopImmediatePropagation: function () {
        var b = this.originalEvent;
        this.isImmediatePropagationStopped = F;
        b && !this.isSimulated && b.stopImmediatePropagation();
        this.stopPropagation();
      }
    };
    p.each({
      altKey: !0,
      bubbles: !0,
      cancelable: !0,
      changedTouches: !0,
      ctrlKey: !0,
      detail: !0,
      eventPhase: !0,
      metaKey: !0,
      pageX: !0,
      pageY: !0,
      shiftKey: !0,
      view: !0,
      "char": !0,
      charCode: !0,
      key: !0,
      keyCode: !0,
      button: !0,
      buttons: !0,
      clientX: !0,
      clientY: !0,
      offsetX: !0,
      offsetY: !0,
      pointerId: !0,
      pointerType: !0,
      screenX: !0,
      screenY: !0,
      targetTouches: !0,
      toElement: !0,
      touches: !0,
      which: function (b) {
        var c = b.button;
        return null == b.which && gd.test(b.type) ? null != b.charCode ? b.charCode : b.keyCode : !b.which && void 0 !== c && hd.test(b.type) ? 1 & c ? 1 : 2 & c ? 3 : 4 & c ? 2 : 0 : b.which;
      }
    }, p.event.addProp);
    p.each({
      mouseenter: "mouseover",
      mouseleave: "mouseout",
      pointerenter: "pointerover",
      pointerleave: "pointerout"
    }, function (b, c) {
      p.event.special[b] = {
        delegateType: c,
        bindType: c,
        handle: function (b) {
          var d,
            g = b.relatedTarget,
            e = b.handleObj;
          return g && (g === this || p.contains(this, g)) || (b.type = e.origType, d = e.handler.apply(this, arguments), b.type = c), d;
        }
      };
    });
    p.fn.extend({
      on: function (b, c, d, g) {
        return R(this, b, c, d, g);
      },
      one: function (b, c, d, g) {
        return R(this, b, c, d, g, 1);
      },
      off: function (b, c, d) {
        var g, e;
        if (b && b.preventDefault && b.handleObj) return g = b.handleObj, p(b.delegateTarget).off(g.namespace ? g.origType + "." + g.namespace : g.origType, g.selector, g.handler), this;
        if ("object" == typeof b) {
          for (e in b) this.off(e, c, b[e]);
          return this;
        }
        return !1 !== c && "function" != typeof c || (d = c, c = void 0), !1 === d && (d = K), this.each(function () {
          p.event.remove(this, b, d, c);
        });
      }
    });
    var id = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
      jd = /<script|<style|<link/i,
      Lc = /checked\s*(?:[^=]|=\s*.checked.)/i,
      Kc = /^true\/(.*)/,
      Nc = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    p.extend({
      htmlPrefilter: function (b) {
        return b.replace(id, "<$1></$2>");
      },
      clone: function (b, c, d) {
        var g,
          e,
          f,
          n,
          x = b.cloneNode(!0),
          j = p.contains(b.ownerDocument, b);
        if (!da.noCloneChecked && !(1 !== b.nodeType && 11 !== b.nodeType || p.isXMLDoc(b))) {
          n = D(x);
          f = D(b);
          g = 0;
          for (e = f.length; g < e; g++) {
            var l = f[g],
              r = n[g],
              u = r.nodeName.toLowerCase();
            "input" === u && pc.test(l.type) ? r.checked = l.checked : "input" !== u && "textarea" !== u || (r.defaultValue = l.defaultValue);
          }
        }
        if (c) if (d) {
          f = f || D(b);
          n = n || D(x);
          g = 0;
          for (e = f.length; g < e; g++) P(f[g], n[g]);
        } else P(b, x);
        return n = D(x, "script"), 0 < n.length && s(n, !j && D(b, "script")), x;
      },
      cleanData: function (b) {
        for (var c, d, g, e = p.event.special, f = 0; void 0 !== (d = b[f]); f++) if (Kb(d)) {
          if (c = d[T.expando]) {
            if (c.events) for (g in c.events) e[g] ? p.event.remove(d, g) : p.removeEvent(d, g, c.handle);
            d[T.expando] = void 0;
          }
          d[qa.expando] && (d[qa.expando] = void 0);
        }
      }
    });
    p.fn.extend({
      detach: function (b) {
        return V(this, b, !0);
      },
      remove: function (b) {
        return V(this, b);
      },
      text: function (b) {
        return Ia(this, function (b) {
          return void 0 === b ? p.text(this) : this.empty().each(function () {
            1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = b);
          });
        }, null, b, arguments.length);
      },
      append: function () {
        return ba(this, arguments, function (b) {
          (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) && I(this, b).appendChild(b);
        });
      },
      prepend: function () {
        return ba(this, arguments, function (b) {
          if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
            var c = I(this, b);
            c.insertBefore(b, c.firstChild);
          }
        });
      },
      before: function () {
        return ba(this, arguments, function (b) {
          this.parentNode && this.parentNode.insertBefore(b, this);
        });
      },
      after: function () {
        return ba(this, arguments, function (b) {
          this.parentNode && this.parentNode.insertBefore(b, this.nextSibling);
        });
      },
      empty: function () {
        for (var b, c = 0; null != (b = this[c]); c++) 1 === b.nodeType && (p.cleanData(D(b, !1)), b.textContent = "");
        return this;
      },
      clone: function (b, c) {
        return b = null != b && b, c = null == c ? b : c, this.map(function () {
          return p.clone(this, b, c);
        });
      },
      html: function (b) {
        return Ia(this, function (b) {
          var c = this[0] || {},
            d = 0,
            g = this.length;
          if (void 0 === b && 1 === c.nodeType) return c.innerHTML;
          if ("string" == typeof b && !jd.test(b) && !sa[(Zb.exec(b) || ["", ""])[1].toLowerCase()]) {
            b = p.htmlPrefilter(b);
            try {
              for (; d < g; d++) c = this[d] || {}, 1 === c.nodeType && (p.cleanData(D(c, !1)), c.innerHTML = b);
              c = 0;
            } catch (e) {}
          }
          c && this.empty().append(b);
        }, null, b, arguments.length);
      },
      replaceWith: function () {
        var b = [];
        return ba(this, arguments, function (c) {
          var d = this.parentNode;
          0 > p.inArray(this, b) && (p.cleanData(D(this)), d && d.replaceChild(c, this));
        }, b);
      }
    });
    p.each({
      appendTo: "append",
      prependTo: "prepend",
      insertBefore: "before",
      insertAfter: "after",
      replaceAll: "replaceWith"
    }, function (b, c) {
      p.fn[b] = function (b) {
        for (var d = [], g = p(b), e = g.length - 1, f = 0; f <= e; f++) b = f === e ? this : this.clone(!0), p(g[f])[c](b), cb.apply(d, b.get());
        return this.pushStack(d);
      };
    });
    var ac = /^margin/,
      Qb = RegExp("^(" + nc + ")(?!px)[a-z%]+$", "i"),
      Bb = function (c) {
        var d = c.ownerDocument.defaultView;
        return d && d.opener || (d = b), d.getComputedStyle(c);
      },
      Pb = function () {
        if (Ba) {
          Ba.style.cssText = "box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%";
          Ba.innerHTML = "";
          Nb.appendChild(Ob);
          var c = b.getComputedStyle(Ba);
          rc = "1%" !== c.top;
          sc = "2px" === c.marginLeft;
          tc = "4px" === c.width;
          Ba.style.marginRight = "50%";
          uc = "4px" === c.marginRight;
          Nb.removeChild(Ob);
          Ba = null;
        }
      },
      rc,
      tc,
      uc,
      sc,
      Ob = Y.createElement("div"),
      Ba = Y.createElement("div");
    Ba.style && (Ba.style.backgroundClip = "content-box", Ba.cloneNode(!0).style.backgroundClip = "", da.clearCloneStyle = "content-box" === Ba.style.backgroundClip, Ob.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute", Ob.appendChild(Ba), p.extend(da, {
      pixelPosition: function () {
        return Pb(), rc;
      },
      boxSizingReliable: function () {
        return Pb(), tc;
      },
      pixelMarginRight: function () {
        return Pb(), uc;
      },
      reliableMarginLeft: function () {
        return Pb(), sc;
      }
    }));
    !0;
    var kd = /^(none|table(?!-c[ea]).+)/,
      vc = /^--/,
      ld = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
      },
      wc = {
        letterSpacing: "0",
        fontWeight: "400"
      },
      cc = ["Webkit", "Moz", "ms"],
      bc = Y.createElement("div").style;
    p.extend({
      cssHooks: {
        opacity: {
          get: function (b, c) {
            if (c) {
              var d = r(b, "opacity");
              return "" === d ? "1" : d;
            }
          }
        }
      },
      cssNumber: {
        animationIterationCount: !0,
        columnCount: !0,
        fillOpacity: !0,
        flexGrow: !0,
        flexShrink: !0,
        fontWeight: !0,
        lineHeight: !0,
        opacity: !0,
        order: !0,
        orphans: !0,
        widows: !0,
        zIndex: !0,
        zoom: !0
      },
      cssProps: {
        "float": "cssFloat"
      },
      style: function (b, c, d, g) {
        if (b && 3 !== b.nodeType && 8 !== b.nodeType && b.style) {
          var e,
            f,
            n,
            x = p.camelCase(c),
            j = vc.test(c),
            l = b.style;
          return j || (c = E(x)), n = p.cssHooks[c] || p.cssHooks[x], void 0 === d ? n && "get" in n && void 0 !== (e = n.get(b, !1, g)) ? e : l[c] : (f = typeof d, "string" === f && (e = mb.exec(d)) && e[1] && (d = B(b, c, e), f = "number"), null != d && d === d && ("number" === f && (d += e && e[3] || (p.cssNumber[x] ? "" : "px")), da.clearCloneStyle || "" !== d || 0 !== c.indexOf("background") || (l[c] = "inherit"), n && "set" in n && void 0 === (d = n.set(b, d, g)) || (j ? l.setProperty(c, d) : l[c] = d)), void 0);
        }
      },
      css: function (b, c, d, g) {
        var e,
          f,
          n,
          x = p.camelCase(c);
        return vc.test(c) || (c = E(x)), n = p.cssHooks[c] || p.cssHooks[x], n && "get" in n && (e = n.get(b, !0, d)), void 0 === e && (e = r(b, c, g)), "normal" === e && c in wc && (e = wc[c]), "" === d || d ? (f = parseFloat(e), !0 === d || isFinite(f) ? f || 0 : e) : e;
      }
    });
    p.each(["height", "width"], function (b, c) {
      p.cssHooks[c] = {
        get: function (b, d, g) {
          if (d) return !kd.test(p.css(b, "display")) || b.getClientRects().length && b.getBoundingClientRect().width ? aa(b, c, g) : oc(b, ld, function () {
            return aa(b, c, g);
          });
        },
        set: function (b, d, g) {
          var e,
            f = g && Bb(b);
          g = g && O(b, c, g, "border-box" === p.css(b, "boxSizing", !1, f), f);
          return g && (e = mb.exec(d)) && "px" !== (e[3] || "px") && (b.style[c] = d, d = p.css(b, c)), C(b, d, g);
        }
      };
    });
    p.cssHooks.marginLeft = t(da.reliableMarginLeft, function (b, c) {
      if (c) return (parseFloat(r(b, "marginLeft")) || b.getBoundingClientRect().left - oc(b, {
        marginLeft: 0
      }, function () {
        return b.getBoundingClientRect().left;
      })) + "px";
    });
    p.each({
      margin: "",
      padding: "",
      border: "Width"
    }, function (b, c) {
      p.cssHooks[b + c] = {
        expand: function (d) {
          var g = 0,
            e = {};
          for (d = "string" == typeof d ? d.split(" ") : [d]; 4 > g; g++) e[b + Sa[g] + c] = d[g] || d[g - 2] || d[0];
          return e;
        }
      };
      ac.test(b) || (p.cssHooks[b + c].set = C);
    });
    p.fn.extend({
      css: function (b, c) {
        return Ia(this, function (b, c, d) {
          var g,
            e = {},
            f = 0;
          if (Array.isArray(c)) {
            d = Bb(b);
            for (g = c.length; f < g; f++) e[c[f]] = p.css(b, c[f], !1, d);
            return e;
          }
          return void 0 !== d ? p.style(b, c, d) : p.css(b, c);
        }, b, c, 1 < arguments.length);
      }
    });
    p.Tween = Q;
    Q.prototype = {
      constructor: Q,
      init: function (b, c, d, g, e, f) {
        this.elem = b;
        this.prop = d;
        this.easing = e || p.easing._default;
        this.options = c;
        this.start = this.now = this.cur();
        this.end = g;
        this.unit = f || (p.cssNumber[d] ? "" : "px");
      },
      cur: function () {
        var b = Q.propHooks[this.prop];
        return b && b.get ? b.get(this) : Q.propHooks._default.get(this);
      },
      run: function (b) {
        var c,
          d = Q.propHooks[this.prop];
        return this.options.duration ? this.pos = c = p.easing[this.easing](b, this.options.duration * b, 0, 1, this.options.duration) : this.pos = c = b, this.now = (this.end - this.start) * c + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), d && d.set ? d.set(this) : Q.propHooks._default.set(this), this;
      }
    };
    Q.prototype.init.prototype = Q.prototype;
    Q.propHooks = {
      _default: {
        get: function (b) {
          var c;
          return 1 !== b.elem.nodeType || null != b.elem[b.prop] && null == b.elem.style[b.prop] ? b.elem[b.prop] : (c = p.css(b.elem, b.prop, ""), c && "auto" !== c ? c : 0);
        },
        set: function (b) {
          p.fx.step[b.prop] ? p.fx.step[b.prop](b) : 1 !== b.elem.nodeType || null == b.elem.style[p.cssProps[b.prop]] && !p.cssHooks[b.prop] ? b.elem[b.prop] = b.now : p.style(b.elem, b.prop, b.now + b.unit);
        }
      }
    };
    Q.propHooks.scrollTop = Q.propHooks.scrollLeft = {
      set: function (b) {
        b.elem.nodeType && b.elem.parentNode && (b.elem[b.prop] = b.now);
      }
    };
    p.easing = {
      linear: function (b) {
        return b;
      },
      swing: function (b) {
        return 0.5 - Math.cos(b * Math.PI) / 2;
      },
      _default: "swing"
    };
    p.fx = Q.prototype.init;
    p.fx.step = {};
    var bb,
      Cb,
      md = /^(?:toggle|show|hide)$/,
      nd = /queueHooks$/;
    p.Animation = p.extend(M, {
      tweeners: {
        "*": [function (b, c) {
          var d = this.createTween(b, c);
          return B(d.elem, b, mb.exec(c), d), d;
        }]
      },
      tweener: function (b, c) {
        p.isFunction(b) ? (c = b, b = ["*"]) : b = b.match(ta);
        for (var d, g = 0, e = b.length; g < e; g++) d = b[g], M.tweeners[d] = M.tweeners[d] || [], M.tweeners[d].unshift(c);
      },
      prefilters: [function (b, c, d) {
        var g,
          e,
          f,
          n,
          j,
          l,
          r,
          u,
          M = "width" in c || "height" in c,
          q = this,
          t = {},
          C = b.style,
          W = b.nodeType && Ab(b),
          J = T.get(b, "fxshow");
        d.queue || (n = p._queueHooks(b, "fx"), null == n.unqueued && (n.unqueued = 0, j = n.empty.fire, n.empty.fire = function () {
          n.unqueued || j();
        }), n.unqueued++, q.always(function () {
          q.always(function () {
            n.unqueued--;
            p.queue(b, "fx").length || n.empty.fire();
          });
        }));
        for (g in c) if (e = c[g], md.test(e)) {
          if (delete c[g], f = f || "toggle" === e, e === (W ? "hide" : "show")) {
            if ("show" !== e || !J || void 0 === J[g]) continue;
            W = !0;
          }
          t[g] = J && J[g] || p.style(b, g);
        }
        if (l = !p.isEmptyObject(c), l || !p.isEmptyObject(t)) for (g in M && 1 === b.nodeType && (d.overflow = [C.overflow, C.overflowX, C.overflowY], r = J && J.display, null == r && (r = T.get(b, "display")), u = p.css(b, "display"), "none" === u && (r ? u = r : (H([b], !0), r = b.style.display || r, u = p.css(b, "display"), H([b]))), ("inline" === u || "inline-block" === u && null != r) && "none" === p.css(b, "float") && (l || (q.done(function () {
          C.display = r;
        }), null == r && (u = C.display, r = "none" === u ? "" : u)), C.display = "inline-block")), d.overflow && (C.overflow = "hidden", q.always(function () {
          C.overflow = d.overflow[0];
          C.overflowX = d.overflow[1];
          C.overflowY = d.overflow[2];
        })), l = !1, t) l || (J ? "hidden" in J && (W = J.hidden) : J = T.access(b, "fxshow", {
          display: r
        }), f && (J.hidden = !W), W && H([b], !0), q.done(function () {
          W || H([b]);
          T.remove(b, "fxshow");
          for (g in t) p.style(b, g, t[g]);
        })), l = x(W ? J[g] : 0, g, q), g in J || (J[g] = l.start, W && (l.end = l.start, l.start = 0));
      }],
      prefilter: function (b, c) {
        c ? M.prefilters.unshift(b) : M.prefilters.push(b);
      }
    });
    p.speed = function (b, c, d) {
      var g = b && "object" == typeof b ? p.extend({}, b) : {
        complete: d || !d && c || p.isFunction(b) && b,
        duration: b,
        easing: d && c || c && !p.isFunction(c) && c
      };
      return p.fx.off ? g.duration = 0 : "number" != typeof g.duration && (g.duration in p.fx.speeds ? g.duration = p.fx.speeds[g.duration] : g.duration = p.fx.speeds._default), null != g.queue && !0 !== g.queue || (g.queue = "fx"), g.old = g.complete, g.complete = function () {
        p.isFunction(g.old) && g.old.call(this);
        g.queue && p.dequeue(this, g.queue);
      }, g;
    };
    p.fn.extend({
      fadeTo: function (b, c, d, g) {
        return this.filter(Ab).css("opacity", 0).show().end().animate({
          opacity: c
        }, b, d, g);
      },
      animate: function (b, c, d, g) {
        var e = p.isEmptyObject(b),
          f = p.speed(c, d, g);
        c = function () {
          var c = M(this, p.extend({}, b), f);
          (e || T.get(this, "finish")) && c.stop(!0);
        };
        return c.finish = c, e || !1 === f.queue ? this.each(c) : this.queue(f.queue, c);
      },
      stop: function (b, c, d) {
        var g = function (b) {
          var c = b.stop;
          delete b.stop;
          c(d);
        };
        return "string" != typeof b && (d = c, c = b, b = void 0), c && !1 !== b && this.queue(b || "fx", []), this.each(function () {
          var c = !0,
            e = null != b && b + "queueHooks",
            f = p.timers,
            n = T.get(this);
          if (e) n[e] && n[e].stop && g(n[e]);else for (e in n) n[e] && n[e].stop && nd.test(e) && g(n[e]);
          for (e = f.length; e--;) f[e].elem !== this || null != b && f[e].queue !== b || (f[e].anim.stop(d), c = !1, f.splice(e, 1));
          !c && d || p.dequeue(this, b);
        });
      },
      finish: function (b) {
        return !1 !== b && (b = b || "fx"), this.each(function () {
          var c,
            d = T.get(this),
            g = d[b + "queue"];
          c = d[b + "queueHooks"];
          var e = p.timers,
            f = g ? g.length : 0;
          d.finish = !0;
          p.queue(this, b, []);
          c && c.stop && c.stop.call(this, !0);
          for (c = e.length; c--;) e[c].elem === this && e[c].queue === b && (e[c].anim.stop(!0), e.splice(c, 1));
          for (c = 0; c < f; c++) g[c] && g[c].finish && g[c].finish.call(this);
          delete d.finish;
        });
      }
    });
    p.each(["toggle", "show", "hide"], function (b, c) {
      var d = p.fn[c];
      p.fn[c] = function (b, g, e) {
        return null == b || "boolean" == typeof b ? d.apply(this, arguments) : this.animate(J(c, !0), b, g, e);
      };
    });
    p.each({
      slideDown: J("show"),
      slideUp: J("hide"),
      slideToggle: J("toggle"),
      fadeIn: {
        opacity: "show"
      },
      fadeOut: {
        opacity: "hide"
      },
      fadeToggle: {
        opacity: "toggle"
      }
    }, function (b, c) {
      p.fn[b] = function (b, d, g) {
        return this.animate(c, b, d, g);
      };
    });
    p.timers = [];
    p.fx.tick = function () {
      var b,
        c = 0,
        d = p.timers;
      for (bb = p.now(); c < d.length; c++) b = d[c], b() || d[c] !== b || d.splice(c--, 1);
      d.length || p.fx.stop();
      bb = void 0;
    };
    p.fx.timer = function (b) {
      p.timers.push(b);
      p.fx.start();
    };
    p.fx.interval = 13;
    p.fx.start = function () {
      Cb || (Cb = !0, n());
    };
    p.fx.stop = function () {
      Cb = null;
    };
    p.fx.speeds = {
      slow: 600,
      fast: 200,
      _default: 400
    };
    p.fn.delay = function (c, d) {
      return c = p.fx ? p.fx.speeds[c] || c : c, d = d || "fx", this.queue(d, function (d, g) {
        var e = b.setTimeout(d, c);
        g.stop = function () {
          b.clearTimeout(e);
        };
      });
    };
    var lb = Y.createElement("input"),
      od = Y.createElement("select").appendChild(Y.createElement("option"));
    lb.type = "checkbox";
    da.checkOn = "" !== lb.value;
    da.optSelected = od.selected;
    lb = Y.createElement("input");
    lb.value = "t";
    lb.type = "radio";
    da.radioValue = "t" === lb.value;
    var xc,
      xb = p.expr.attrHandle;
    p.fn.extend({
      attr: function (b, c) {
        return Ia(this, p.attr, b, c, 1 < arguments.length);
      },
      removeAttr: function (b) {
        return this.each(function () {
          p.removeAttr(this, b);
        });
      }
    });
    p.extend({
      attr: function (b, c, d) {
        var g,
          e,
          f = b.nodeType;
        if (3 !== f && 8 !== f && 2 !== f) return "undefined" == typeof b.getAttribute ? p.prop(b, c, d) : (1 === f && p.isXMLDoc(b) || (e = p.attrHooks[c.toLowerCase()] || (p.expr.match.bool.test(c) ? xc : void 0)), void 0 !== d ? null === d ? void p.removeAttr(b, c) : e && "set" in e && void 0 !== (g = e.set(b, d, c)) ? g : (b.setAttribute(c, d + ""), d) : e && "get" in e && null !== (g = e.get(b, c)) ? g : (g = p.find.attr(b, c), null == g ? void 0 : g));
      },
      attrHooks: {
        type: {
          set: function (b, c) {
            if (!da.radioValue && "radio" === c && f(b, "input")) {
              var d = b.value;
              return b.setAttribute("type", c), d && (b.value = d), c;
            }
          }
        }
      },
      removeAttr: function (b, c) {
        var d,
          g = 0,
          e = c && c.match(ta);
        if (e && 1 === b.nodeType) for (; d = e[g++];) b.removeAttribute(d);
      }
    });
    xc = {
      set: function (b, c, d) {
        return !1 === c ? p.removeAttr(b, d) : b.setAttribute(d, d), d;
      }
    };
    p.each(p.expr.match.bool.source.match(/\w+/g), function (b, c) {
      var d = xb[c] || p.find.attr;
      xb[c] = function (b, c, g) {
        var e,
          f,
          n = c.toLowerCase();
        return g || (f = xb[n], xb[n] = e, e = null != d(b, c, g) ? n : null, xb[n] = f), e;
      };
    });
    var pd = /^(?:input|select|textarea|button)$/i,
      qd = /^(?:a|area)$/i;
    p.fn.extend({
      prop: function (b, c) {
        return Ia(this, p.prop, b, c, 1 < arguments.length);
      },
      removeProp: function (b) {
        return this.each(function () {
          delete this[p.propFix[b] || b];
        });
      }
    });
    p.extend({
      prop: function (b, c, d) {
        var g,
          e,
          f = b.nodeType;
        if (3 !== f && 8 !== f && 2 !== f) return 1 === f && p.isXMLDoc(b) || (c = p.propFix[c] || c, e = p.propHooks[c]), void 0 !== d ? e && "set" in e && void 0 !== (g = e.set(b, d, c)) ? g : b[c] = d : e && "get" in e && null !== (g = e.get(b, c)) ? g : b[c];
      },
      propHooks: {
        tabIndex: {
          get: function (b) {
            var c = p.find.attr(b, "tabindex");
            return c ? parseInt(c, 10) : pd.test(b.nodeName) || qd.test(b.nodeName) && b.href ? 0 : -1;
          }
        }
      },
      propFix: {
        "for": "htmlFor",
        "class": "className"
      }
    });
    da.optSelected || (p.propHooks.selected = {
      get: function (b) {
        b = b.parentNode;
        return b && b.parentNode && b.parentNode.selectedIndex, null;
      },
      set: function (b) {
        b = b.parentNode;
        b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex);
      }
    });
    p.each("tabIndex readOnly maxLength cellSpacing cellPadding rowSpan colSpan useMap frameBorder contentEditable".split(" "), function () {
      p.propFix[this.toLowerCase()] = this;
    });
    p.fn.extend({
      addClass: function (b) {
        var c,
          d,
          g,
          e,
          f,
          n,
          x = 0;
        if (p.isFunction(b)) return this.each(function (c) {
          p(this).addClass(b.call(this, c, S(this)));
        });
        if ("string" == typeof b && b) for (c = b.match(ta) || []; d = this[x++];) if (e = S(d), g = 1 === d.nodeType && " " + W(e) + " ") {
          for (n = 0; f = c[n++];) 0 > g.indexOf(" " + f + " ") && (g += f + " ");
          g = W(g);
          e !== g && d.setAttribute("class", g);
        }
        return this;
      },
      removeClass: function (b) {
        var c,
          d,
          g,
          e,
          f,
          n,
          x = 0;
        if (p.isFunction(b)) return this.each(function (c) {
          p(this).removeClass(b.call(this, c, S(this)));
        });
        if (!arguments.length) return this.attr("class", "");
        if ("string" == typeof b && b) for (c = b.match(ta) || []; d = this[x++];) if (e = S(d), g = 1 === d.nodeType && " " + W(e) + " ") {
          for (n = 0; f = c[n++];) for (; -1 < g.indexOf(" " + f + " ");) g = g.replace(" " + f + " ", " ");
          g = W(g);
          e !== g && d.setAttribute("class", g);
        }
        return this;
      },
      toggleClass: function (b, c) {
        var d = typeof b;
        return "boolean" == typeof c && "string" === d ? c ? this.addClass(b) : this.removeClass(b) : p.isFunction(b) ? this.each(function (d) {
          p(this).toggleClass(b.call(this, d, S(this), c), c);
        }) : this.each(function () {
          var c, g, e, f;
          if ("string" === d) {
            g = 0;
            e = p(this);
            for (f = b.match(ta) || []; c = f[g++];) e.hasClass(c) ? e.removeClass(c) : e.addClass(c);
          } else void 0 !== b && "boolean" !== d || (c = S(this), c && T.set(this, "__className__", c), this.setAttribute && this.setAttribute("class", c || !1 === b ? "" : T.get(this, "__className__") || ""));
        });
      },
      hasClass: function (b) {
        var c,
          d = 0;
        for (b = " " + b + " "; c = this[d++];) if (1 === c.nodeType && -1 < (" " + W(S(c)) + " ").indexOf(b)) return !0;
        return !1;
      }
    });
    var rd = /\r/g;
    p.fn.extend({
      val: function (b) {
        var c,
          d,
          g,
          e = this[0];
        if (arguments.length) return g = p.isFunction(b), this.each(function (d) {
          var e;
          1 === this.nodeType && (e = g ? b.call(this, d, p(this).val()) : b, null == e ? e = "" : "number" == typeof e ? e += "" : Array.isArray(e) && (e = p.map(e, function (b) {
            return null == b ? "" : b + "";
          })), c = p.valHooks[this.type] || p.valHooks[this.nodeName.toLowerCase()], c && "set" in c && void 0 !== c.set(this, e, "value") || (this.value = e));
        });
        if (e) return c = p.valHooks[e.type] || p.valHooks[e.nodeName.toLowerCase()], c && "get" in c && void 0 !== (d = c.get(e, "value")) ? d : (d = e.value, "string" == typeof d ? d.replace(rd, "") : null == d ? "" : d);
      }
    });
    p.extend({
      valHooks: {
        option: {
          get: function (b) {
            var c = p.find.attr(b, "value");
            return null != c ? c : W(p.text(b));
          }
        },
        select: {
          get: function (b) {
            var c,
              d,
              g = b.options,
              e = b.selectedIndex,
              n = "select-one" === b.type,
              x = n ? null : [],
              j = n ? e + 1 : g.length;
            for (d = 0 > e ? j : n ? e : 0; d < j; d++) if (c = g[d], (c.selected || d === e) && !c.disabled && (!c.parentNode.disabled || !f(c.parentNode, "optgroup"))) {
              if (b = p(c).val(), n) return b;
              x.push(b);
            }
            return x;
          },
          set: function (b, c) {
            for (var d, g, e = b.options, f = p.makeArray(c), n = e.length; n--;) g = e[n], (g.selected = -1 < p.inArray(p.valHooks.option.get(g), f)) && (d = !0);
            return d || (b.selectedIndex = -1), f;
          }
        }
      }
    });
    p.each(["radio", "checkbox"], function () {
      p.valHooks[this] = {
        set: function (b, c) {
          if (Array.isArray(c)) return b.checked = -1 < p.inArray(p(b).val(), c);
        }
      };
      da.checkOn || (p.valHooks[this].get = function (b) {
        return null === b.getAttribute("value") ? "on" : b.value;
      });
    });
    var yc = /^(?:focusinfocus|focusoutblur)$/;
    p.extend(p.event, {
      trigger: function (c, d, g, e) {
        var f,
          n,
          x,
          j,
          l,
          r,
          u,
          M = [g || Y],
          q = La.call(c, "type") ? c.type : c;
        f = La.call(c, "namespace") ? c.namespace.split(".") : [];
        if (n = x = g = g || Y, 3 !== g.nodeType && 8 !== g.nodeType && !yc.test(q + p.event.triggered) && (-1 < q.indexOf(".") && (f = q.split("."), q = f.shift(), f.sort()), l = 0 > q.indexOf(":") && "on" + q, c = c[p.expando] ? c : new p.Event(q, "object" == typeof c && c), c.isTrigger = e ? 2 : 3, c.namespace = f.join("."), c.rnamespace = c.namespace ? RegExp("(^|\\.)" + f.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, c.result = void 0, c.target || (c.target = g), d = null == d ? [c] : p.makeArray(d, [c]), u = p.event.special[q] || {}, e || !u.trigger || !1 !== u.trigger.apply(g, d))) {
          if (!e && !u.noBubble && !p.isWindow(g)) {
            j = u.delegateType || q;
            for (yc.test(j + q) || (n = n.parentNode); n; n = n.parentNode) M.push(n), x = n;
            x === (g.ownerDocument || Y) && M.push(x.defaultView || x.parentWindow || b);
          }
          for (f = 0; (n = M[f++]) && !c.isPropagationStopped();) c.type = 1 < f ? j : u.bindType || q, (r = (T.get(n, "events") || {})[c.type] && T.get(n, "handle")) && r.apply(n, d), (r = l && n[l]) && r.apply && Kb(n) && (c.result = r.apply(n, d), !1 === c.result && c.preventDefault());
          return c.type = q, e || c.isDefaultPrevented() || u._default && !1 !== u._default.apply(M.pop(), d) || !Kb(g) || l && p.isFunction(g[q]) && !p.isWindow(g) && (x = g[l], x && (g[l] = null), p.event.triggered = q, g[q](), p.event.triggered = void 0, x && (g[l] = x)), c.result;
        }
      },
      simulate: function (b, c, d) {
        b = p.extend(new p.Event(), d, {
          type: b,
          isSimulated: !0
        });
        p.event.trigger(b, null, c);
      }
    });
    p.fn.extend({
      trigger: function (b, c) {
        return this.each(function () {
          p.event.trigger(b, c, this);
        });
      },
      triggerHandler: function (b, c) {
        var d = this[0];
        if (d) return p.event.trigger(b, c, d, !0);
      }
    });
    p.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function (b, c) {
      p.fn[c] = function (b, d) {
        return 0 < arguments.length ? this.on(c, null, b, d) : this.trigger(c);
      };
    });
    p.fn.extend({
      hover: function (b, c) {
        return this.mouseenter(b).mouseleave(c || b);
      }
    });
    da.focusin = "onfocusin" in b;
    da.focusin || p.each({
      focus: "focusin",
      blur: "focusout"
    }, function (b, c) {
      var d = function (b) {
        p.event.simulate(c, b.target, p.event.fix(b));
      };
      p.event.special[c] = {
        setup: function () {
          var g = this.ownerDocument || this,
            e = T.access(g, c);
          e || g.addEventListener(b, d, !0);
          T.access(g, c, (e || 0) + 1);
        },
        teardown: function () {
          var g = this.ownerDocument || this,
            e = T.access(g, c) - 1;
          e ? T.access(g, c, e) : (g.removeEventListener(b, d, !0), T.remove(g, c));
        }
      };
    });
    var yb = b.location,
      zc = p.now(),
      Vb = /\?/;
    p.parseXML = function (c) {
      var d;
      if (!c || "string" != typeof c) return null;
      try {
        d = new b.DOMParser().parseFromString(c, "text/xml");
      } catch (g) {
        d = void 0;
      }
      return d && !d.getElementsByTagName("parsererror").length || p.error("Invalid XML: " + c), d;
    };
    var Oc = /\[\]$/,
      Ac = /\r?\n/g,
      sd = /^(?:submit|button|image|reset|file)$/i,
      td = /^(?:input|select|textarea|keygen)/i;
    p.param = function (b, c) {
      var d,
        g = [],
        e = function (b, c) {
          var d = p.isFunction(c) ? c() : c;
          g[g.length] = encodeURIComponent(b) + "=" + encodeURIComponent(null == d ? "" : d);
        };
      if (Array.isArray(b) || b.jquery && !p.isPlainObject(b)) p.each(b, function () {
        e(this.name, this.value);
      });else for (d in b) ga(d, b[d], c, e);
      return g.join("&");
    };
    p.fn.extend({
      serialize: function () {
        return p.param(this.serializeArray());
      },
      serializeArray: function () {
        return this.map(function () {
          var b = p.prop(this, "elements");
          return b ? p.makeArray(b) : this;
        }).filter(function () {
          var b = this.type;
          return this.name && !p(this).is(":disabled") && td.test(this.nodeName) && !sd.test(b) && (this.checked || !pc.test(b));
        }).map(function (b, c) {
          var d = p(this).val();
          return null == d ? null : Array.isArray(d) ? p.map(d, function (b) {
            return {
              name: c.name,
              value: b.replace(Ac, "\r\n")
            };
          }) : {
            name: c.name,
            value: d.replace(Ac, "\r\n")
          };
        }).get();
      }
    });
    var ud = /%20/g,
      vd = /#.*$/,
      wd = /([?&])_=[^&]*/,
      xd = /^(.*?):[ \t]*([^\r\n]*)$/gm,
      yd = /^(?:GET|HEAD)$/,
      zd = /^\/\//,
      Bc = {},
      Rb = {},
      Cc = "*/".concat("*"),
      Wb = Y.createElement("a");
    Wb.href = yb.href;
    p.extend({
      active: 0,
      lastModified: {},
      etag: {},
      ajaxSettings: {
        url: yb.href,
        type: "GET",
        isLocal: /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(yb.protocol),
        global: !0,
        processData: !0,
        async: !0,
        contentType: "application/x-www-form-urlencoded; charset=UTF-8",
        accepts: {
          "*": Cc,
          text: "text/plain",
          html: "text/html",
          xml: "application/xml, text/xml",
          json: "application/json, text/javascript"
        },
        contents: {
          xml: /\bxml\b/,
          html: /\bhtml/,
          json: /\bjson\b/
        },
        responseFields: {
          xml: "responseXML",
          text: "responseText",
          json: "responseJSON"
        },
        converters: {
          "* text": String,
          "text html": !0,
          "text json": JSON.parse,
          "text xml": p.parseXML
        },
        flatOptions: {
          url: !0,
          context: !0
        }
      },
      ajaxSetup: function (b, c) {
        return c ? oa(oa(b, p.ajaxSettings), c) : oa(p.ajaxSettings, b);
      },
      ajaxPrefilter: ka(Bc),
      ajaxTransport: ka(Rb),
      ajax: function (c, d) {
        function g(c, d, x, l) {
          var M,
            q,
            E,
            m,
            Q = d;
          if (!r) {
            r = !0;
            j && b.clearTimeout(j);
            e = void 0;
            n = l || "";
            S.readyState = 0 < c ? 4 : 0;
            l = 200 <= c && 300 > c || 304 === c;
            if (x) {
              E = t;
              for (var O = S, z, A, aa, ga, B = E.contents, F = E.dataTypes; "*" === F[0];) F.shift(), void 0 === z && (z = E.mimeType || O.getResponseHeader("Content-Type"));
              if (z) for (A in B) if (B[A] && B[A].test(z)) {
                F.unshift(A);
                break;
              }
              if (F[0] in x) aa = F[0];else {
                for (A in x) {
                  if (!F[0] || E.converters[A + " " + F[0]]) {
                    aa = A;
                    break;
                  }
                  ga || (ga = A);
                }
                aa = aa || ga;
              }
              E = x = aa ? (aa !== F[0] && F.unshift(aa), x[aa]) : void 0;
            }
            var oa;
            a: {
              x = t;
              z = E;
              A = S;
              aa = l;
              var ka, G, na;
              E = {};
              O = x.dataTypes.slice();
              if (O[1]) for (ka in x.converters) E[ka.toLowerCase()] = x.converters[ka];
              for (ga = O.shift(); ga;) if (x.responseFields[ga] && (A[x.responseFields[ga]] = z), !na && aa && x.dataFilter && (z = x.dataFilter(z, x.dataType)), na = ga, ga = O.shift()) if ("*" === ga) ga = na;else if ("*" !== na && na !== ga) {
                if (ka = E[na + " " + ga] || E["* " + ga], !ka) for (oa in E) if (G = oa.split(" "), G[1] === ga && (ka = E[na + " " + G[0]] || E["* " + G[0]])) {
                  !0 === ka ? ka = E[oa] : !0 !== E[oa] && (ga = G[0], O.unshift(G[1]));
                  break;
                }
                if (!0 !== ka) if (ka && x.throws) z = ka(z);else try {
                  z = ka(z);
                } catch (ua) {
                  oa = {
                    state: "parsererror",
                    error: ka ? ua : "No conversion from " + na + " to " + ga
                  };
                  break a;
                }
              }
              oa = {
                state: "success",
                data: z
              };
            }
            E = oa;
            l ? (t.ifModified && (m = S.getResponseHeader("Last-Modified"), m && (p.lastModified[f] = m), m = S.getResponseHeader("etag"), m && (p.etag[f] = m)), 204 === c || "HEAD" === t.type ? Q = "nocontent" : 304 === c ? Q = "notmodified" : (Q = E.state, M = E.data, q = E.error, l = !q)) : (q = Q, !c && Q || (Q = "error", 0 > c && (c = 0)));
            S.status = c;
            S.statusText = (d || Q) + "";
            l ? J.resolveWith(C, [M, Q, S]) : J.rejectWith(C, [S, Q, q]);
            S.statusCode(y);
            y = void 0;
            u && W.trigger(l ? "ajaxSuccess" : "ajaxError", [S, t, l ? M : q]);
            s.fireWith(C, [S, Q]);
            u && (W.trigger("ajaxComplete", [S, t]), --p.active || p.event.trigger("ajaxStop"));
          }
        }
        "object" == typeof c && (d = c, c = void 0);
        d = d || {};
        var e,
          f,
          n,
          x,
          j,
          l,
          r,
          u,
          M,
          q,
          t = p.ajaxSetup({}, d),
          C = t.context || t,
          W = t.context && (C.nodeType || C.jquery) ? p(C) : p.event,
          J = p.Deferred(),
          s = p.Callbacks("once memory"),
          y = t.statusCode || {},
          E = {},
          m = {},
          Q = "canceled",
          S = {
            readyState: 0,
            getResponseHeader: function (b) {
              var c;
              if (r) {
                if (!x) for (x = {}; c = xd.exec(n);) x[c[1].toLowerCase()] = c[2];
                c = x[b.toLowerCase()];
              }
              return null == c ? null : c;
            },
            getAllResponseHeaders: function () {
              return r ? n : null;
            },
            setRequestHeader: function (b, c) {
              return null == r && (b = m[b.toLowerCase()] = m[b.toLowerCase()] || b, E[b] = c), this;
            },
            overrideMimeType: function (b) {
              return null == r && (t.mimeType = b), this;
            },
            statusCode: function (b) {
              var c;
              if (b) if (r) S.always(b[S.status]);else for (c in b) y[c] = [y[c], b[c]];
              return this;
            },
            abort: function (b) {
              b = b || Q;
              return e && e.abort(b), g(0, b), this;
            }
          };
        if (J.promise(S), t.url = ((c || t.url || yb.href) + "").replace(zd, yb.protocol + "//"), t.type = d.method || d.type || t.method || t.type, t.dataTypes = (t.dataType || "*").toLowerCase().match(ta) || [""], null == t.crossDomain) {
          l = Y.createElement("a");
          try {
            l.href = t.url, l.href = l.href, t.crossDomain = Wb.protocol + "//" + Wb.host != l.protocol + "//" + l.host;
          } catch (O) {
            t.crossDomain = !0;
          }
        }
        if (t.data && t.processData && "string" != typeof t.data && (t.data = p.param(t.data, t.traditional)), na(Bc, t, d, S), r) return S;
        (u = p.event && t.global) && 0 === p.active++ && p.event.trigger("ajaxStart");
        t.type = t.type.toUpperCase();
        t.hasContent = !yd.test(t.type);
        f = t.url.replace(vd, "");
        t.hasContent ? t.data && t.processData && 0 === (t.contentType || "").indexOf("application/x-www-form-urlencoded") && (t.data = t.data.replace(ud, "+")) : (q = t.url.slice(f.length), t.data && (f += (Vb.test(f) ? "&" : "?") + t.data, delete t.data), !1 === t.cache && (f = f.replace(wd, "$1"), q = (Vb.test(f) ? "&" : "?") + "_=" + zc++ + q), t.url = f + q);
        t.ifModified && (p.lastModified[f] && S.setRequestHeader("If-Modified-Since", p.lastModified[f]), p.etag[f] && S.setRequestHeader("If-None-Match", p.etag[f]));
        (t.data && t.hasContent && !1 !== t.contentType || d.contentType) && S.setRequestHeader("Content-Type", t.contentType);
        S.setRequestHeader("Accept", t.dataTypes[0] && t.accepts[t.dataTypes[0]] ? t.accepts[t.dataTypes[0]] + ("*" !== t.dataTypes[0] ? ", " + Cc + "; q=0.01" : "") : t.accepts["*"]);
        for (M in t.headers) S.setRequestHeader(M, t.headers[M]);
        if (t.beforeSend && (!1 === t.beforeSend.call(C, S, t) || r)) return S.abort();
        if (Q = "abort", s.add(t.complete), S.done(t.success), S.fail(t.error), e = na(Rb, t, d, S)) {
          if (S.readyState = 1, u && W.trigger("ajaxSend", [S, t]), r) return S;
          t.async && 0 < t.timeout && (j = b.setTimeout(function () {
            S.abort("timeout");
          }, t.timeout));
          try {
            r = !1, e.send(E, g);
          } catch (z) {
            if (r) throw z;
            g(-1, z);
          }
        } else g(-1, "No Transport");
        return S;
      },
      getJSON: function (b, c, d) {
        return p.get(b, c, d, "json");
      },
      getScript: function (b, c) {
        return p.get(b, void 0, c, "script");
      }
    });
    p.each(["get", "post"], function (b, c) {
      p[c] = function (b, d, g, e) {
        return p.isFunction(d) && (e = e || g, g = d, d = void 0), p.ajax(p.extend({
          url: b,
          type: c,
          dataType: e,
          data: d,
          success: g
        }, p.isPlainObject(b) && b));
      };
    });
    p._evalUrl = function (b) {
      return p.ajax({
        url: b,
        type: "GET",
        dataType: "script",
        cache: !0,
        async: !1,
        global: !1,
        "throws": !0
      });
    };
    p.fn.extend({
      wrapAll: function (b) {
        var c;
        return this[0] && (p.isFunction(b) && (b = b.call(this[0])), c = p(b, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && c.insertBefore(this[0]), c.map(function () {
          for (var b = this; b.firstElementChild;) b = b.firstElementChild;
          return b;
        }).append(this)), this;
      },
      wrapInner: function (b) {
        return p.isFunction(b) ? this.each(function (c) {
          p(this).wrapInner(b.call(this, c));
        }) : this.each(function () {
          var c = p(this),
            d = c.contents();
          d.length ? d.wrapAll(b) : c.append(b);
        });
      },
      wrap: function (b) {
        var c = p.isFunction(b);
        return this.each(function (d) {
          p(this).wrapAll(c ? b.call(this, d) : b);
        });
      },
      unwrap: function (b) {
        return this.parent(b).not("body").each(function () {
          p(this).replaceWith(this.childNodes);
        }), this;
      }
    });
    p.expr.pseudos.hidden = function (b) {
      return !p.expr.pseudos.visible(b);
    };
    p.expr.pseudos.visible = function (b) {
      return !(!b.offsetWidth && !b.offsetHeight && !b.getClientRects().length);
    };
    p.ajaxSettings.xhr = function () {
      try {
        return new b.XMLHttpRequest();
      } catch (c) {}
    };
    var Ad = {
        "0": 200,
        1223: 204
      },
      zb = p.ajaxSettings.xhr();
    da.cors = !!zb && "withCredentials" in zb;
    da.ajax = zb = !!zb;
    p.ajaxTransport(function (c) {
      var d, g;
      if (da.cors || zb && !c.crossDomain) return {
        send: function (e, f) {
          var n,
            x = c.xhr();
          if (x.open(c.type, c.url, c.async, c.username, c.password), c.xhrFields) for (n in c.xhrFields) x[n] = c.xhrFields[n];
          c.mimeType && x.overrideMimeType && x.overrideMimeType(c.mimeType);
          c.crossDomain || e["X-Requested-With"] || (e["X-Requested-With"] = "XMLHttpRequest");
          for (n in e) x.setRequestHeader(n, e[n]);
          d = function (b) {
            return function () {
              d && (d = g = x.onload = x.onerror = x.onabort = x.onreadystatechange = null, "abort" === b ? x.abort() : "error" === b ? "number" != typeof x.status ? f(0, "error") : f(x.status, x.statusText) : f(Ad[x.status] || x.status, x.statusText, "text" !== (x.responseType || "text") || "string" != typeof x.responseText ? {
                binary: x.response
              } : {
                text: x.responseText
              }, x.getAllResponseHeaders()));
            };
          };
          x.onload = d();
          g = x.onerror = d("error");
          void 0 !== x.onabort ? x.onabort = g : x.onreadystatechange = function () {
            4 === x.readyState && b.setTimeout(function () {
              d && g();
            });
          };
          d = d("abort");
          try {
            x.send(c.hasContent && c.data || null);
          } catch (l) {
            if (d) throw l;
          }
        },
        abort: function () {
          d && d();
        }
      };
    });
    p.ajaxPrefilter(function (b) {
      b.crossDomain && (b.contents.script = !1);
    });
    p.ajaxSetup({
      accepts: {
        script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
      },
      contents: {
        script: /\b(?:java|ecma)script\b/
      },
      converters: {
        "text script": function (b) {
          return p.globalEval(b), b;
        }
      }
    });
    p.ajaxPrefilter("script", function (b) {
      void 0 === b.cache && (b.cache = !1);
      b.crossDomain && (b.type = "GET");
    });
    p.ajaxTransport("script", function (b) {
      if (b.crossDomain) {
        var c, d;
        return {
          send: function (g, e) {
            c = p("<script>").prop({
              charset: b.scriptCharset,
              src: b.url
            }).on("load error", d = function (b) {
              c.remove();
              d = null;
              b && e("error" === b.type ? 404 : 200, b.type);
            });
            Y.head.appendChild(c[0]);
          },
          abort: function () {
            d && d();
          }
        };
      }
    });
    var Dc = [],
      Xb = /(=)\?(?=&|$)|\?\?/;
    p.ajaxSetup({
      jsonp: "callback",
      jsonpCallback: function () {
        var b = Dc.pop() || p.expando + "_" + zc++;
        return this[b] = !0, b;
      }
    });
    p.ajaxPrefilter("json jsonp", function (c, d, g) {
      var e,
        f,
        n,
        x = !1 !== c.jsonp && (Xb.test(c.url) ? "url" : "string" == typeof c.data && 0 === (c.contentType || "").indexOf("application/x-www-form-urlencoded") && Xb.test(c.data) && "data");
      if (x || "jsonp" === c.dataTypes[0]) return e = c.jsonpCallback = p.isFunction(c.jsonpCallback) ? c.jsonpCallback() : c.jsonpCallback, x ? c[x] = c[x].replace(Xb, "$1" + e) : !1 !== c.jsonp && (c.url += (Vb.test(c.url) ? "&" : "?") + c.jsonp + "=" + e), c.converters["script json"] = function () {
        return n || p.error(e + " was not called"), n[0];
      }, c.dataTypes[0] = "json", f = b[e], b[e] = function () {
        n = arguments;
      }, g.always(function () {
        void 0 === f ? p(b).removeProp(e) : b[e] = f;
        c[e] && (c.jsonpCallback = d.jsonpCallback, Dc.push(e));
        n && p.isFunction(f) && f(n[0]);
        n = f = void 0;
      }), "script";
    });
    var Bd = da,
      Ec,
      Fc = Y.implementation.createHTMLDocument("").body;
    Ec = (Fc.innerHTML = "<form></form><form></form>", 2 === Fc.childNodes.length);
    Bd.createHTMLDocument = Ec;
    p.parseHTML = function (b, c, d) {
      if ("string" != typeof b) return [];
      "boolean" == typeof c && (d = c, c = !1);
      var g, e, f;
      return c || (da.createHTMLDocument ? (c = Y.implementation.createHTMLDocument(""), g = c.createElement("base"), g.href = Y.location.href, c.head.appendChild(g)) : c = Y), e = lc.exec(b), f = !d && [], e ? [c.createElement(e[1])] : (e = G([b], c, f), f && f.length && p(f).remove(), p.merge([], e.childNodes));
    };
    p.fn.load = function (b, c, d) {
      var g,
        e,
        f,
        n = this,
        x = b.indexOf(" ");
      return -1 < x && (g = W(b.slice(x)), b = b.slice(0, x)), p.isFunction(c) ? (d = c, c = void 0) : c && "object" == typeof c && (e = "POST"), 0 < n.length && p.ajax({
        url: b,
        type: e || "GET",
        dataType: "html",
        data: c
      }).done(function (b) {
        f = arguments;
        n.html(g ? p("<div>").append(p.parseHTML(b)).find(g) : b);
      }).always(d && function (b, c) {
        n.each(function () {
          d.apply(this, f || [b.responseText, c, b]);
        });
      }), this;
    };
    p.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function (b, c) {
      p.fn[c] = function (b) {
        return this.on(c, b);
      };
    });
    p.expr.pseudos.animated = function (b) {
      return p.grep(p.timers, function (c) {
        return b === c.elem;
      }).length;
    };
    p.offset = {
      setOffset: function (b, c, d) {
        var g,
          e,
          f,
          n,
          x,
          l,
          j = p.css(b, "position"),
          r = p(b),
          u = {};
        "static" === j && (b.style.position = "relative");
        x = r.offset();
        f = p.css(b, "top");
        l = p.css(b, "left");
        ("absolute" === j || "fixed" === j) && -1 < (f + l).indexOf("auto") ? (g = r.position(), n = g.top, e = g.left) : (n = parseFloat(f) || 0, e = parseFloat(l) || 0);
        p.isFunction(c) && (c = c.call(b, d, p.extend({}, x)));
        null != c.top && (u.top = c.top - x.top + n);
        null != c.left && (u.left = c.left - x.left + e);
        "using" in c ? c.using.call(b, u) : r.css(u);
      }
    };
    p.fn.extend({
      offset: function (b) {
        if (arguments.length) return void 0 === b ? this : this.each(function (c) {
          p.offset.setOffset(this, b, c);
        });
        var c,
          d,
          g,
          e,
          f = this[0];
        if (f) return f.getClientRects().length ? (g = f.getBoundingClientRect(), c = f.ownerDocument, d = c.documentElement, e = c.defaultView, {
          top: g.top + e.pageYOffset - d.clientTop,
          left: g.left + e.pageXOffset - d.clientLeft
        }) : {
          top: 0,
          left: 0
        };
      },
      position: function () {
        if (this[0]) {
          var b,
            c,
            d = this[0],
            g = {
              top: 0,
              left: 0
            };
          return "fixed" === p.css(d, "position") ? c = d.getBoundingClientRect() : (b = this.offsetParent(), c = this.offset(), f(b[0], "html") || (g = b.offset()), g = {
            top: g.top + p.css(b[0], "borderTopWidth", !0),
            left: g.left + p.css(b[0], "borderLeftWidth", !0)
          }), {
            top: c.top - g.top - p.css(d, "marginTop", !0),
            left: c.left - g.left - p.css(d, "marginLeft", !0)
          };
        }
      },
      offsetParent: function () {
        return this.map(function () {
          for (var b = this.offsetParent; b && "static" === p.css(b, "position");) b = b.offsetParent;
          return b || Nb;
        });
      }
    });
    p.each({
      scrollLeft: "pageXOffset",
      scrollTop: "pageYOffset"
    }, function (b, c) {
      var d = "pageYOffset" === c;
      p.fn[b] = function (g) {
        return Ia(this, function (b, g, e) {
          var f;
          return p.isWindow(b) ? f = b : 9 === b.nodeType && (f = b.defaultView), void 0 === e ? f ? f[c] : b[g] : void (f ? f.scrollTo(d ? f.pageXOffset : e, d ? e : f.pageYOffset) : b[g] = e);
        }, b, g, arguments.length);
      };
    });
    p.each(["top", "left"], function (b, c) {
      p.cssHooks[c] = t(da.pixelPosition, function (b, d) {
        if (d) return d = r(b, c), Qb.test(d) ? p(b).position()[c] + "px" : d;
      });
    });
    p.each({
      Height: "height",
      Width: "width"
    }, function (b, c) {
      p.each({
        padding: "inner" + b,
        content: c,
        "": "outer" + b
      }, function (d, g) {
        p.fn[g] = function (e, f) {
          var n = arguments.length && (d || "boolean" != typeof e),
            x = d || (!0 === e || !0 === f ? "margin" : "border");
          return Ia(this, function (c, d, e) {
            var f;
            return p.isWindow(c) ? 0 === g.indexOf("outer") ? c["inner" + b] : c.document.documentElement["client" + b] : 9 === c.nodeType ? (f = c.documentElement, Math.max(c.body["scroll" + b], f["scroll" + b], c.body["offset" + b], f["offset" + b], f["client" + b])) : void 0 === e ? p.css(c, d, x) : p.style(c, d, e, x);
          }, c, n ? e : void 0, n);
        };
      });
    });
    p.fn.extend({
      bind: function (b, c, d) {
        return this.on(b, null, c, d);
      },
      unbind: function (b, c) {
        return this.off(b, null, c);
      },
      delegate: function (b, c, d, g) {
        return this.on(c, b, d, g);
      },
      undelegate: function (b, c, d) {
        return 1 === arguments.length ? this.off(b, "**") : this.off(c, b || "**", d);
      }
    });
    p.holdReady = function (b) {
      b ? p.readyWait++ : p.ready(!0);
    };
    p.isArray = Array.isArray;
    p.parseJSON = JSON.parse;
    p.nodeName = f;
    "function" == typeof define && define.amd && define("jquery", [], function () {
      return p;
    });
    var Cd = b.jQuery,
      Dd = b.$;
    return p.noConflict = function (c) {
      return b.$ === p && (b.$ = Dd), c && b.jQuery === p && (b.jQuery = Cd), p;
    }, c || (b.jQuery = b.$ = p), p;
  });
  function getInternetExplorerVersion() {
    var b = -1;
    "Microsoft Internet Explorer" == navigator.appName && null != /MSIE ([0-9]{1,}[.0-9]{0,})/.exec(navigator.userAgent) && (b = parseFloat(RegExp.$1));
    return b;
  }
  var ie = getInternetExplorerVersion();
  function getQueryVariable(b) {
    for (var c = window.location.search.substring(1).split("&"), d = 0; d < c.length; d++) {
      var e = c[d].split("=");
      if (decodeURIComponent(e[0]) == b) return decodeURIComponent(e[1]);
    }
  }
  this.jukebox = {};
  jukebox.Player = function (b, c) {
    this.id = ++jukebox.__jukeboxId;
    this.origin = c || null;
    this.settings = {};
    for (var d in this.defaults) this.settings[d] = this.defaults[d];
    if ("[object Object]" === Object.prototype.toString.call(b)) for (var e in b) this.settings[e] = b[e];
    "[object Function]" === Object.prototype.toString.call(jukebox.Manager) && (jukebox.Manager = new jukebox.Manager());
    this.resource = this.isPlaying = null;
    this.resource = "[object Object]" === Object.prototype.toString.call(jukebox.Manager) ? jukebox.Manager.getPlayableResource(this.settings.resources) : this.settings.resources[0] || null;
    if (null === this.resource) throw "Your browser can't playback the given resources - or you have missed to include jukebox.Manager";
    this.__init();
    return this;
  };
  jukebox.__jukeboxId = 0;
  jukebox.Player.prototype = {
    defaults: {
      resources: [],
      autoplay: !1,
      spritemap: {},
      flashMediaElement: "./swf/FlashMediaElement.swf",
      timeout: 1E3
    },
    __addToManager: function () {
      !0 !== this.__wasAddedToManager && (jukebox.Manager.add(this), this.__wasAddedToManager = !0);
    },
    __init: function () {
      var b = this,
        c = this.settings,
        d = {},
        e;
      jukebox.Manager && void 0 !== jukebox.Manager.features && (d = jukebox.Manager.features);
      if (!0 === d.html5audio) {
        this.context = new Audio();
        this.context.src = this.resource;
        if (null === this.origin) {
          var f = function (c) {
            b.__addToManager(c);
          };
          this.context.addEventListener("canplaythrough", f, !0);
          window.setTimeout(function () {
            b.context.removeEventListener("canplaythrough", f, !0);
            f("timeout");
          }, c.timeout);
        }
        this.context.autobuffer = !0;
        this.context.preload = !0;
        for (e in this.HTML5API) this[e] = this.HTML5API[e];
        1 < d.channels ? !0 === c.autoplay ? this.context.autoplay = !0 : void 0 !== c.spritemap[c.autoplay] && this.play(c.autoplay) : 1 === d.channels && void 0 !== c.spritemap[c.autoplay] && (this.backgroundMusic = c.spritemap[c.autoplay], this.backgroundMusic.started = Date.now ? Date.now() : +new Date(), this.play(c.autoplay));
        1 == d.channels && !0 !== c.canPlayBackground && (window.addEventListener("pagehide", function () {
          null !== b.isPlaying && (b.pause(), b.__wasAutoPaused = !0);
        }), window.addEventListener("pageshow", function () {
          b.__wasAutoPaused && (b.resume(), delete b._wasAutoPaused);
        }));
      } else if (!0 === d.flashaudio) {
        for (e in this.FLASHAPI) this[e] = this.FLASHAPI[e];
        d = ["id=jukebox-flashstream-" + this.id, "autoplay=" + c.autoplay, "file=" + window.encodeURIComponent(this.resource)];
        this.__initFlashContext(d);
        !0 === c.autoplay ? this.play(0) : c.spritemap[c.autoplay] && this.play(c.autoplay);
      } else throw "Your Browser does not support Flash Audio or HTML5 Audio.";
    },
    __initFlashContext: function (b) {
      var c,
        d = this.settings.flashMediaElement,
        e,
        f = {
          flashvars: b.join("&"),
          quality: "high",
          bgcolor: "#000000",
          wmode: "transparent",
          allowscriptaccess: "always",
          allowfullscreen: "true"
        };
      if (navigator.userAgent.match(/MSIE/)) {
        c = document.createElement("div");
        document.getElementsByTagName("body")[0].appendChild(c);
        var j = document.createElement("object");
        j.id = "jukebox-flashstream-" + this.id;
        j.setAttribute("type", "application/x-shockwave-flash");
        j.setAttribute("classid", "clsid:d27cdb6e-ae6d-11cf-96b8-444553540000");
        j.setAttribute("width", "0");
        j.setAttribute("height", "0");
        f.movie = d + "?x=" + (Date.now ? Date.now() : +new Date());
        f.flashvars = b.join("&amp;");
        for (e in f) b = document.createElement("param"), b.setAttribute("name", e), b.setAttribute("value", f[e]), j.appendChild(b);
        c.outerHTML = j.outerHTML;
        this.context = document.getElementById("jukebox-flashstream-" + this.id);
      } else {
        c = document.createElement("embed");
        c.id = "jukebox-flashstream-" + this.id;
        c.setAttribute("type", "application/x-shockwave-flash");
        c.setAttribute("width", "100");
        c.setAttribute("height", "100");
        f.play = !1;
        f.loop = !1;
        f.src = d + "?x=" + (Date.now ? Date.now() : +new Date());
        for (e in f) c.setAttribute(e, f[e]);
        document.getElementsByTagName("body")[0].appendChild(c);
        this.context = c;
      }
    },
    backgroundHackForiOS: function () {
      if (void 0 !== this.backgroundMusic) {
        var b = Date.now ? Date.now() : +new Date();
        void 0 === this.backgroundMusic.started ? (this.backgroundMusic.started = b, this.setCurrentTime(this.backgroundMusic.start)) : (this.backgroundMusic.lastPointer = (b - this.backgroundMusic.started) / 1E3 % (this.backgroundMusic.end - this.backgroundMusic.start) + this.backgroundMusic.start, this.play(this.backgroundMusic.lastPointer));
      }
    },
    play: function (b, c) {
      if (null !== this.isPlaying && !0 !== c) void 0 !== jukebox.Manager && jukebox.Manager.addToQueue(b, this.id);else {
        var d = this.settings.spritemap,
          e;
        if (void 0 !== d[b]) e = d[b].start;else if ("number" === typeof b) {
          e = b;
          for (var f in d) if (e >= d[f].start && e <= d[f].end) {
            b = f;
            break;
          }
        }
        void 0 !== e && "[object Object]" === Object.prototype.toString.call(d[b]) && (this.isPlaying = this.settings.spritemap[b], this.context.play && this.context.play(), this.wasReady = this.setCurrentTime(e));
      }
    },
    stop: function () {
      this.__lastPosition = 0;
      this.isPlaying = null;
      this.backgroundMusic ? this.backgroundHackForiOS() : this.context.pause();
      return !0;
    },
    pause: function () {
      this.isPlaying = null;
      this.__lastPosition = this.getCurrentTime();
      this.context.pause();
      return this.__lastPosition;
    },
    resume: function (b) {
      b = "number" === typeof b ? b : this.__lastPosition;
      if (null !== b) return this.play(b), this.__lastPosition = null, !0;
      this.context.play();
      return !1;
    },
    HTML5API: {
      getVolume: function () {
        return this.context.volume || 1;
      },
      setVolume: function (b) {
        this.context.volume = b;
        return 1E-4 > Math.abs(this.context.volume - b) ? !0 : !1;
      },
      getCurrentTime: function () {
        return this.context.currentTime || 0;
      },
      setCurrentTime: function (b) {
        try {
          return this.context.currentTime = b, !0;
        } catch (c) {
          return !1;
        }
      }
    },
    FLASHAPI: {
      getVolume: function () {
        return this.context && "function" === typeof this.context.getVolume ? this.context.getVolume() : 1;
      },
      setVolume: function (b) {
        return this.context && "function" === typeof this.context.setVolume ? (this.context.setVolume(b), !0) : !1;
      },
      getCurrentTime: function () {
        return this.context && "function" === typeof this.context.getCurrentTime ? this.context.getCurrentTime() : 0;
      },
      setCurrentTime: function (b) {
        return this.context && "function" === typeof this.context.setCurrentTime ? this.context.setCurrentTime(b) : !1;
      }
    }
  };
  if (void 0 === this.jukebox) throw "jukebox.Manager requires jukebox.Player (Player.js) to run properly.";
  jukebox.Manager = function (b) {
    this.features = {};
    this.codecs = {};
    this.__players = {};
    this.__playersLength = 0;
    this.__clones = {};
    this.__queue = [];
    this.settings = {};
    for (var c in this.defaults) this.settings[c] = this.defaults[c];
    if ("[object Object]" === Object.prototype.toString.call(b)) for (var d in b) this.settings[d] = b[d];
    this.__detectFeatures();
    jukebox.Manager.__initialized = !1 === this.settings.useGameLoop ? window.setInterval(function () {
      jukebox.Manager.loop();
    }, 20) : !0;
  };
  jukebox.Manager.prototype = {
    defaults: {
      useFlash: !1,
      useGameLoop: !1
    },
    __detectFeatures: function () {
      var b = window.Audio && new Audio();
      if (b && b.canPlayType && !1 === this.settings.useFlash) {
        for (var c = [{
            e: "3gp",
            m: ["audio/3gpp", "audio/amr"]
          }, {
            e: "aac",
            m: ["audio/aac", "audio/aacp"]
          }, {
            e: "amr",
            m: ["audio/amr", "audio/3gpp"]
          }, {
            e: "caf",
            m: ["audio/IMA-ADPCM", "audio/x-adpcm", "audio/x-aiff; codecs=\"IMA-ADPCM, ADPCM\""]
          }, {
            e: "m4a",
            m: "audio/mp4{audio/mp4; codecs=\"mp4a.40.2,avc1.42E01E\"{audio/mpeg4{audio/mpeg4-generic{audio/mp4a-latm{audio/MP4A-LATM{audio/x-m4a".split("{")
          }, {
            e: "mp3",
            m: ["audio/mp3", "audio/mpeg", "audio/mpeg; codecs=\"mp3\"", "audio/MPA", "audio/mpa-robust"]
          }, {
            e: "mpga",
            m: ["audio/MPA", "audio/mpa-robust", "audio/mpeg", "video/mpeg"]
          }, {
            e: "mp4",
            m: ["audio/mp4", "video/mp4"]
          }, {
            e: "ogg",
            m: ["application/ogg", "audio/ogg", "audio/ogg; codecs=\"theora, vorbis\"", "video/ogg", "video/ogg; codecs=\"theora, vorbis\""]
          }, {
            e: "wav",
            m: ["audio/wave", "audio/wav", "audio/wav; codecs=\"1\"", "audio/x-wav", "audio/x-pn-wav"]
          }, {
            e: "webm",
            m: ["audio/webm", "audio/webm; codecs=\"vorbis\"", "video/webm"]
          }], d, e, f = 0, j = c.length; f < j; f++) if (e = c[f].e, c[f].m.length && "object" === typeof c[f].m) for (var m = 0, l = c[f].m.length; m < l; m++) if (d = c[f].m[m], "" !== b.canPlayType(d)) {
          this.codecs[e] = d;
          break;
        } else this.codecs[e] || (this.codecs[e] = !1);
        this.features.html5audio = !(!this.codecs.mp3 && !this.codecs.ogg && !this.codecs.webm && !this.codecs.wav);
        this.features.channels = 8;
        b.volume = 0.1337;
        this.features.volume = !!(1E-4 > Math.abs(b.volume - 0.1337));
        navigator.userAgent.match(/iPhone|iPod|iPad/i) && (this.features.channels = 1);
      }
      this.features.flashaudio = !!navigator.mimeTypes["application/x-shockwave-flash"] || !!navigator.plugins["Shockwave Flash"] || !1;
      if (window.ActiveXObject) try {
        new ActiveXObject("ShockwaveFlash.ShockwaveFlash.10"), this.features.flashaudio = !0;
      } catch (g) {}
      !0 === this.settings.useFlash && (this.features.flashaudio = !0);
      !0 === this.features.flashaudio && !this.features.html5audio && (this.codecs.mp3 = "audio/mp3", this.codecs.mpga = "audio/mpeg", this.codecs.mp4 = "audio/mp4", this.codecs.m4a = "audio/mp4", this.codecs["3gp"] = "audio/3gpp", this.codecs.amr = "audio/amr", this.features.volume = !0, this.features.channels = 1);
    },
    __getPlayerById: function (b) {
      return this.__players && void 0 !== this.__players[b] ? this.__players[b] : null;
    },
    __getClone: function (b, c) {
      for (var d in this.__clones) {
        var e = this.__clones[d];
        if (null === e.isPlaying && e.origin === b) return e;
      }
      if ("[object Object]" === Object.prototype.toString.call(c)) {
        d = {};
        for (var f in c) d[f] = c[f];
        d.autoplay = !1;
        f = new jukebox.Player(d, b);
        f.isClone = !0;
        f.wasReady = !1;
        return this.__clones[f.id] = f;
      }
      return null;
    },
    loop: function () {
      if (0 !== this.__playersLength) if (this.__queue.length && this.__playersLength < this.features.channels) {
        var b = this.__queue[0],
          c = this.__getPlayerById(b.origin);
        if (null !== c) {
          var d = this.__getClone(b.origin, c.settings);
          null !== d && (!0 === this.features.volume && (c = this.__players[b.origin]) && d.setVolume(c.getVolume()), this.add(d), d.play(b.pointer, !0));
        }
        this.__queue.splice(0, 1);
      } else for (d in this.__queue.length && 1 === this.features.channels && (b = this.__queue[0], c = this.__getPlayerById(b.origin), null !== c && c.play(b.pointer, !0), this.__queue.splice(0, 1)), this.__players) b = this.__players[d], c = b.getCurrentTime() || 0, b.isPlaying && !1 === b.wasReady ? b.wasReady = b.setCurrentTime(b.isPlaying.start) : b.isPlaying && !0 === b.wasReady ? c > b.isPlaying.end && (!0 === b.isPlaying.loop ? b.play(b.isPlaying.start, !0) : b.stop()) : b.isClone && null === b.isPlaying ? this.remove(b) : void 0 !== b.backgroundMusic && null === b.isPlaying && c > b.backgroundMusic.end && b.backgroundHackForiOS();
    },
    getPlayableResource: function (b) {
      "[object Array]" !== Object.prototype.toString.call(b) && (b = [b]);
      for (var c = 0, d = b.length; c < d; c++) {
        var e = b[c],
          f = e.match(/\.([^\.]*)$/)[1];
        if (f && this.codecs[f]) return e;
      }
      return null;
    },
    add: function (b) {
      return b instanceof jukebox.Player && void 0 === this.__players[b.id] ? (this.__playersLength++, this.__players[b.id] = b, !0) : !1;
    },
    remove: function (b) {
      return b instanceof jukebox.Player && void 0 !== this.__players[b.id] ? (this.__playersLength--, delete this.__players[b.id], !0) : !1;
    },
    addToQueue: function (b, c) {
      return ("string" === typeof b || "number" === typeof b) && void 0 !== this.__players[c] ? (this.__queue.push({
        pointer: b,
        origin: c
      }), !0) : !1;
    }
  };
  (function () {
    var b = function () {
      this.init();
    };
    b.prototype = {
      init: function () {
        var b = this || c;
        b._counter = 1E3;
        b._codecs = {};
        b._howls = [];
        b._muted = !1;
        b._volume = 1;
        b._canPlayEvent = "canplaythrough";
        b._navigator = "undefined" !== typeof window && window.navigator ? window.navigator : null;
        b.masterGain = null;
        b.noAudio = !1;
        b.usingWebAudio = !0;
        b.autoSuspend = !0;
        b.ctx = null;
        b.mobileAutoEnable = !0;
        b._setup();
        return b;
      },
      volume: function (b) {
        var d = this || c;
        b = parseFloat(b);
        d.ctx || l();
        if ("undefined" !== typeof b && 0 <= b && 1 >= b) {
          d._volume = b;
          if (d._muted) return d;
          d.usingWebAudio && d.masterGain.gain.setValueAtTime(b, c.ctx.currentTime);
          for (var e = 0; e < d._howls.length; e++) if (!d._howls[e]._webAudio) for (var f = d._howls[e]._getSoundIds(), j = 0; j < f.length; j++) {
            var m = d._howls[e]._soundById(f[j]);
            m && m._node && (m._node.volume = m._volume * b);
          }
          return d;
        }
        return d._volume;
      },
      mute: function (b) {
        var d = this || c;
        d.ctx || l();
        d._muted = b;
        d.usingWebAudio && d.masterGain.gain.setValueAtTime(b ? 0 : d._volume, c.ctx.currentTime);
        for (var e = 0; e < d._howls.length; e++) if (!d._howls[e]._webAudio) for (var f = d._howls[e]._getSoundIds(), j = 0; j < f.length; j++) {
          var m = d._howls[e]._soundById(f[j]);
          m && m._node && (m._node.muted = b ? !0 : m._muted);
        }
        return d;
      },
      unload: function () {
        for (var b = this || c, d = b._howls.length - 1; 0 <= d; d--) b._howls[d].unload();
        b.usingWebAudio && b.ctx && "undefined" !== typeof b.ctx.close && (b.ctx.close(), b.ctx = null, l());
        return b;
      },
      codecs: function (b) {
        return (this || c)._codecs[b.replace(/^x-/, "")];
      },
      _setup: function () {
        var b = this || c;
        b.state = b.ctx ? b.ctx.state || "running" : "running";
        b._autoSuspend();
        if (!b.usingWebAudio) if ("undefined" !== typeof Audio) try {
          var d = new Audio();
          "undefined" === typeof d.oncanplaythrough && (b._canPlayEvent = "canplay");
        } catch (e) {
          b.noAudio = !0;
        } else b.noAudio = !0;
        try {
          d = new Audio(), d.muted && (b.noAudio = !0);
        } catch (f) {}
        b.noAudio || b._setupCodecs();
        return b;
      },
      _setupCodecs: function () {
        var b = this || c,
          d = null;
        try {
          d = "undefined" !== typeof Audio ? new Audio() : null;
        } catch (e) {
          return b;
        }
        if (!d || "function" !== typeof d.canPlayType) return b;
        var f = d.canPlayType("audio/mpeg;").replace(/^no$/, ""),
          j = b._navigator && b._navigator.userAgent.match(/OPR\/([0-6].)/g),
          j = j && 33 > parseInt(j[0].split("/")[1], 10);
        b._codecs = {
          mp3: !(j || !f && !d.canPlayType("audio/mp3;").replace(/^no$/, "")),
          mpeg: !!f,
          opus: !!d.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
          ogg: !!d.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          oga: !!d.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          wav: !!d.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
          aac: !!d.canPlayType("audio/aac;").replace(/^no$/, ""),
          caf: !!d.canPlayType("audio/x-caf;").replace(/^no$/, ""),
          m4a: !!(d.canPlayType("audio/x-m4a;") || d.canPlayType("audio/m4a;") || d.canPlayType("audio/aac;")).replace(/^no$/, ""),
          mp4: !!(d.canPlayType("audio/x-mp4;") || d.canPlayType("audio/mp4;") || d.canPlayType("audio/aac;")).replace(/^no$/, ""),
          weba: !!d.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          webm: !!d.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          dolby: !!d.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
          flac: !!(d.canPlayType("audio/x-flac;") || d.canPlayType("audio/flac;")).replace(/^no$/, "")
        };
        return b;
      },
      _enableMobileAudio: function () {
        var b = this || c,
          d = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(b._navigator && b._navigator.userAgent),
          e = !!("ontouchend" in window || b._navigator && 0 < b._navigator.maxTouchPoints || b._navigator && 0 < b._navigator.msMaxTouchPoints);
        if (!b._mobileEnabled && b.ctx && (d || e)) {
          b._mobileEnabled = !1;
          !b._mobileUnloaded && 44100 !== b.ctx.sampleRate && (b._mobileUnloaded = !0, b.unload());
          b._scratchBuffer = b.ctx.createBuffer(1, 1, 22050);
          var f = function () {
            c._autoResume();
            var d = b.ctx.createBufferSource();
            d.buffer = b._scratchBuffer;
            d.connect(b.ctx.destination);
            "undefined" === typeof d.start ? d.noteOn(0) : d.start(0);
            "function" === typeof b.ctx.resume && b.ctx.resume();
            d.onended = function () {
              d.disconnect(0);
              b._mobileEnabled = !0;
              b.mobileAutoEnable = !1;
              document.removeEventListener("touchstart", f, !0);
              document.removeEventListener("touchend", f, !0);
            };
          };
          document.addEventListener("touchstart", f, !0);
          document.addEventListener("touchend", f, !0);
          return b;
        }
      },
      _autoSuspend: function () {
        var b = this;
        if (b.autoSuspend && b.ctx && "undefined" !== typeof b.ctx.suspend && c.usingWebAudio) {
          for (var d = 0; d < b._howls.length; d++) if (b._howls[d]._webAudio) for (var e = 0; e < b._howls[d]._sounds.length; e++) if (!b._howls[d]._sounds[e]._paused) return b;
          b._suspendTimer && clearTimeout(b._suspendTimer);
          b._suspendTimer = setTimeout(function () {
            b.autoSuspend && (b._suspendTimer = null, b.state = "suspending", b.ctx.suspend().then(function () {
              b.state = "suspended";
              b._resumeAfterSuspend && (delete b._resumeAfterSuspend, b._autoResume());
            }));
          }, 3E4);
          return b;
        }
      },
      _autoResume: function () {
        var b = this;
        if (b.ctx && "undefined" !== typeof b.ctx.resume && c.usingWebAudio) return "running" === b.state && b._suspendTimer ? (clearTimeout(b._suspendTimer), b._suspendTimer = null) : "suspended" === b.state ? (b.ctx.resume().then(function () {
          b.state = "running";
          for (var c = 0; c < b._howls.length; c++) b._howls[c]._emit("resume");
        }), b._suspendTimer && (clearTimeout(b._suspendTimer), b._suspendTimer = null)) : "suspending" === b.state && (b._resumeAfterSuspend = !0), b;
      }
    };
    var c = new b(),
      d = function (b) {
        !b.src || 0 === b.src.length ? console.error("An array of source files must be passed with any new Howl.") : this.init(b);
      };
    d.prototype = {
      init: function (b) {
        var d = this;
        c.ctx || l();
        d._autoplay = b.autoplay || !1;
        d._format = "string" !== typeof b.format ? b.format : [b.format];
        d._html5 = b.html5 || !1;
        d._muted = b.mute || !1;
        d._loop = b.loop || !1;
        d._pool = b.pool || 5;
        d._preload = "boolean" === typeof b.preload ? b.preload : !0;
        d._rate = b.rate || 1;
        d._sprite = b.sprite || {};
        d._src = "string" !== typeof b.src ? b.src : [b.src];
        d._volume = void 0 !== b.volume ? b.volume : 1;
        d._xhrWithCredentials = b.xhrWithCredentials || !1;
        d._duration = 0;
        d._state = "unloaded";
        d._sounds = [];
        d._endTimers = {};
        d._queue = [];
        d._playLock = !1;
        d._onend = b.onend ? [{
          fn: b.onend
        }] : [];
        d._onfade = b.onfade ? [{
          fn: b.onfade
        }] : [];
        d._onload = b.onload ? [{
          fn: b.onload
        }] : [];
        d._onloaderror = b.onloaderror ? [{
          fn: b.onloaderror
        }] : [];
        d._onplayerror = b.onplayerror ? [{
          fn: b.onplayerror
        }] : [];
        d._onpause = b.onpause ? [{
          fn: b.onpause
        }] : [];
        d._onplay = b.onplay ? [{
          fn: b.onplay
        }] : [];
        d._onstop = b.onstop ? [{
          fn: b.onstop
        }] : [];
        d._onmute = b.onmute ? [{
          fn: b.onmute
        }] : [];
        d._onvolume = b.onvolume ? [{
          fn: b.onvolume
        }] : [];
        d._onrate = b.onrate ? [{
          fn: b.onrate
        }] : [];
        d._onseek = b.onseek ? [{
          fn: b.onseek
        }] : [];
        d._onresume = [];
        d._webAudio = c.usingWebAudio && !d._html5;
        "undefined" !== typeof c.ctx && c.ctx && c.mobileAutoEnable && c._enableMobileAudio();
        c._howls.push(d);
        d._autoplay && d._queue.push({
          event: "play",
          action: function () {
            d.play();
          }
        });
        d._preload && d.load();
        return d;
      },
      load: function () {
        var b = null;
        if (c.noAudio) this._emit("loaderror", null, "No audio support.");else {
          "string" === typeof this._src && (this._src = [this._src]);
          for (var d = 0; d < this._src.length; d++) {
            var l, z;
            if (this._format && this._format[d]) l = this._format[d];else {
              z = this._src[d];
              if ("string" !== typeof z) {
                this._emit("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                continue;
              }
              (l = /^data:audio\/([^;,]+);/i.exec(z)) || (l = /\.([^.]+)$/.exec(z.split("?", 1)[0]));
              l && (l = l[1].toLowerCase());
            }
            l || console.warn("No file extension was found. Consider using the \"format\" property or specify an extension.");
            if (l && c.codecs(l)) {
              b = this._src[d];
              break;
            }
          }
          if (b) {
            this._src = b;
            this._state = "loading";
            "https:" === window.location.protocol && "http:" === b.slice(0, 5) && (this._html5 = !0, this._webAudio = !1);
            new e(this);
            if (this._webAudio) {
              var A = this,
                B = A._src;
              if (f[B]) A._duration = f[B].duration, m(A);else if (/^data:[^;]+;base64,/.test(B)) {
                b = atob(B.split(",")[1]);
                d = new Uint8Array(b.length);
                for (l = 0; l < b.length; ++l) d[l] = b.charCodeAt(l);
                j(d.buffer, A);
              } else {
                var H = new XMLHttpRequest();
                H.open("GET", B, !0);
                H.withCredentials = A._xhrWithCredentials;
                H.responseType = "arraybuffer";
                H.onload = function () {
                  var b = (H.status + "")[0];
                  "0" !== b && "2" !== b && "3" !== b ? A._emit("loaderror", null, "Failed loading audio file with status: " + H.status + ".") : j(H.response, A);
                };
                H.onerror = function () {
                  A._webAudio && (A._html5 = !0, A._webAudio = !1, A._sounds = [], delete f[B], A.load());
                };
                try {
                  H.send();
                } catch (D) {
                  H.onerror();
                }
              }
            }
            return this;
          }
          this._emit("loaderror", null, "No codec support for selected audio sources.");
        }
      },
      play: function (b, d) {
        var e = this,
          f = null;
        if ("number" === typeof b) f = b, b = null;else {
          if ("string" === typeof b && "loaded" === e._state && !e._sprite[b]) return null;
          if ("undefined" === typeof b) {
            b = "__default";
            for (var l = 0, j = 0; j < e._sounds.length; j++) e._sounds[j]._paused && !e._sounds[j]._ended && (l++, f = e._sounds[j]._id);
            1 === l ? b = null : f = null;
          }
        }
        var m = f ? e._soundById(f) : e._inactiveSound();
        if (!m) return null;
        f && !b && (b = m._sprite || "__default");
        if ("loaded" !== e._state) {
          m._sprite = b;
          m._ended = !1;
          var D = m._id;
          e._queue.push({
            event: "play",
            action: function () {
              e.play(D);
            }
          });
          return D;
        }
        if (f && !m._paused) return d || e._loadQueue("play"), m._id;
        e._webAudio && c._autoResume();
        var s = Math.max(0, 0 < m._seek ? m._seek : e._sprite[b][0] / 1E3),
          G = Math.max(0, (e._sprite[b][0] + e._sprite[b][1]) / 1E3 - s),
          F = 1E3 * G / Math.abs(m._rate);
        m._paused = !1;
        m._ended = !1;
        m._sprite = b;
        m._seek = s;
        m._start = e._sprite[b][0] / 1E3;
        m._stop = (e._sprite[b][0] + e._sprite[b][1]) / 1E3;
        m._loop = !(!m._loop && !e._sprite[b][2]);
        var K = m._node;
        if (e._webAudio) f = function () {
          e._refreshBuffer(m);
          K.gain.setValueAtTime(m._muted || e._muted ? 0 : m._volume, c.ctx.currentTime);
          m._playStart = c.ctx.currentTime;
          "undefined" === typeof K.bufferSource.start ? m._loop ? K.bufferSource.noteGrainOn(0, s, 86400) : K.bufferSource.noteGrainOn(0, s, G) : m._loop ? K.bufferSource.start(0, s, 86400) : K.bufferSource.start(0, s, G);
          Infinity !== F && (e._endTimers[m._id] = setTimeout(e._ended.bind(e, m), F));
          d || setTimeout(function () {
            e._emit("play", m._id);
          }, 0);
        }, "running" === c.state ? f() : (e.once("resume", f), e._clearTimer(m._id));else {
          var L = function () {
              K.currentTime = s;
              K.muted = m._muted || e._muted || c._muted || K.muted;
              K.volume = m._volume * c.volume();
              K.playbackRate = m._rate;
              try {
                var f = K.play();
                if ("undefined" !== typeof Promise && f instanceof Promise) {
                  e._playLock = !0;
                  var l = function () {
                    e._playLock = !1;
                    d || e._emit("play", m._id);
                  };
                  f.then(l, l);
                } else d || e._emit("play", m._id);
                K.playbackRate = m._rate;
                K.paused ? e._emit("playerror", m._id, "Playback was unable to start. This is most commonly an issue on mobile devices where playback was not within a user interaction.") : "__default" !== b || m._loop ? e._endTimers[m._id] = setTimeout(e._ended.bind(e, m), F) : (e._endTimers[m._id] = function () {
                  e._ended(m);
                  K.removeEventListener("ended", e._endTimers[m._id], !1);
                }, K.addEventListener("ended", e._endTimers[m._id], !1));
              } catch (j) {
                e._emit("playerror", m._id, j);
              }
            },
            f = window && window.ejecta || !K.readyState && c._navigator.isCocoonJS;
          if (3 <= K.readyState || f) L();else {
            var R = function () {
              L();
              K.removeEventListener(c._canPlayEvent, R, !1);
            };
            K.addEventListener(c._canPlayEvent, R, !1);
            e._clearTimer(m._id);
          }
        }
        return m._id;
      },
      pause: function (b, c) {
        var d = this;
        if ("loaded" !== d._state || d._playLock) return d._queue.push({
          event: "pause",
          action: function () {
            d.pause(b);
          }
        }), d;
        for (var e = d._getSoundIds(b), f = 0; f < e.length; f++) {
          d._clearTimer(e[f]);
          var l = d._soundById(e[f]);
          if (l && !l._paused && (l._seek = d.seek(e[f]), l._rateSeek = 0, l._paused = !0, d._stopFade(e[f]), l._node)) if (d._webAudio) {
            if (!l._node.bufferSource) continue;
            "undefined" === typeof l._node.bufferSource.stop ? l._node.bufferSource.noteOff(0) : l._node.bufferSource.stop(0);
            d._cleanBuffer(l._node);
          } else (!isNaN(l._node.duration) || Infinity === l._node.duration) && l._node.pause();
          c || d._emit("pause", l ? l._id : null);
        }
        return d;
      },
      stop: function (b, c) {
        var d = this;
        if ("loaded" !== d._state) return d._queue.push({
          event: "stop",
          action: function () {
            d.stop(b);
          }
        }), d;
        for (var e = d._getSoundIds(b), f = 0; f < e.length; f++) {
          d._clearTimer(e[f]);
          var l = d._soundById(e[f]);
          if (l) {
            l._seek = l._start || 0;
            l._rateSeek = 0;
            l._paused = !0;
            l._ended = !0;
            d._stopFade(e[f]);
            if (l._node) if (d._webAudio) l._node.bufferSource && ("undefined" === typeof l._node.bufferSource.stop ? l._node.bufferSource.noteOff(0) : l._node.bufferSource.stop(0), d._cleanBuffer(l._node));else if (!isNaN(l._node.duration) || Infinity === l._node.duration) l._node.currentTime = l._start || 0, l._node.pause();
            c || d._emit("stop", l._id);
          }
        }
        return d;
      },
      mute: function (b, d) {
        var e = this;
        if ("loaded" !== e._state) return e._queue.push({
          event: "mute",
          action: function () {
            e.mute(b, d);
          }
        }), e;
        if ("undefined" === typeof d) if ("boolean" === typeof b) e._muted = b;else return e._muted;
        for (var f = e._getSoundIds(d), l = 0; l < f.length; l++) {
          var j = e._soundById(f[l]);
          j && (j._muted = b, j._interval && e._stopFade(j._id), e._webAudio && j._node ? j._node.gain.setValueAtTime(b ? 0 : j._volume, c.ctx.currentTime) : j._node && (j._node.muted = c._muted ? !0 : b), e._emit("mute", j._id));
        }
        return e;
      },
      volume: function () {
        var b = this,
          d = arguments,
          e,
          f;
        if (0 === d.length) return b._volume;
        1 === d.length || 2 === d.length && "undefined" === typeof d[1] ? 0 <= b._getSoundIds().indexOf(d[0]) ? f = parseInt(d[0], 10) : e = parseFloat(d[0]) : 2 <= d.length && (e = parseFloat(d[0]), f = parseInt(d[1], 10));
        var l;
        if ("undefined" !== typeof e && 0 <= e && 1 >= e) {
          if ("loaded" !== b._state) return b._queue.push({
            event: "volume",
            action: function () {
              b.volume.apply(b, d);
            }
          }), b;
          "undefined" === typeof f && (b._volume = e);
          f = b._getSoundIds(f);
          for (var j = 0; j < f.length; j++) if (l = b._soundById(f[j])) l._volume = e, d[2] || b._stopFade(f[j]), b._webAudio && l._node && !l._muted ? l._node.gain.setValueAtTime(e, c.ctx.currentTime) : l._node && !l._muted && (l._node.volume = e * c.volume()), b._emit("volume", l._id);
        } else return (l = f ? b._soundById(f) : b._sounds[0]) ? l._volume : 0;
        return b;
      },
      fade: function (b, d, e, f) {
        var l = this;
        if ("loaded" !== l._state) return l._queue.push({
          event: "fade",
          action: function () {
            l.fade(b, d, e, f);
          }
        }), l;
        l.volume(b, f);
        for (var j = l._getSoundIds(f), m = 0; m < j.length; m++) {
          var D = l._soundById(j[m]);
          if (D) {
            f || l._stopFade(j[m]);
            if (l._webAudio && !D._muted) {
              var s = c.ctx.currentTime,
                G = s + e / 1E3;
              D._volume = b;
              D._node.gain.setValueAtTime(b, s);
              D._node.gain.linearRampToValueAtTime(d, G);
            }
            l._startFadeInterval(D, b, d, e, j[m], "undefined" === typeof f);
          }
        }
        return l;
      },
      _startFadeInterval: function (b, c, d, e, f, l) {
        var j = this,
          m = c,
          s = d - c;
        f = Math.abs(s / 0.01);
        f = Math.max(4, 0 < f ? e / f : e);
        var G = Date.now();
        b._fadeTo = d;
        b._interval = setInterval(function () {
          var f = (Date.now() - G) / e;
          G = Date.now();
          m += s * f;
          m = Math.max(0, m);
          m = Math.min(1, m);
          m = Math.round(100 * m) / 100;
          j._webAudio ? b._volume = m : j.volume(m, b._id, !0);
          l && (j._volume = m);
          if (d < c && m <= d || d > c && m >= d) clearInterval(b._interval), b._interval = null, b._fadeTo = null, j.volume(d, b._id), j._emit("fade", b._id);
        }, f);
      },
      _stopFade: function (b) {
        var d = this._soundById(b);
        d && d._interval && (this._webAudio && d._node.gain.cancelScheduledValues(c.ctx.currentTime), clearInterval(d._interval), d._interval = null, this.volume(d._fadeTo, b), d._fadeTo = null, this._emit("fade", b));
        return this;
      },
      loop: function () {
        var b = arguments,
          c,
          d;
        if (0 === b.length) return this._loop;
        if (1 === b.length) {
          if ("boolean" === typeof b[0]) this._loop = c = b[0];else return (b = this._soundById(parseInt(b[0], 10))) ? b._loop : !1;
        } else 2 === b.length && (c = b[0], d = parseInt(b[1], 10));
        d = this._getSoundIds(d);
        for (var e = 0; e < d.length; e++) if (b = this._soundById(d[e])) if (b._loop = c, this._webAudio && b._node && b._node.bufferSource && (b._node.bufferSource.loop = c)) b._node.bufferSource.loopStart = b._start || 0, b._node.bufferSource.loopEnd = b._stop;
        return this;
      },
      rate: function () {
        var b = this,
          d = arguments,
          e,
          f;
        0 === d.length ? f = b._sounds[0]._id : 1 === d.length ? 0 <= b._getSoundIds().indexOf(d[0]) ? f = parseInt(d[0], 10) : e = parseFloat(d[0]) : 2 === d.length && (e = parseFloat(d[0]), f = parseInt(d[1], 10));
        var l;
        if ("number" === typeof e) {
          if ("loaded" !== b._state) return b._queue.push({
            event: "rate",
            action: function () {
              b.rate.apply(b, d);
            }
          }), b;
          "undefined" === typeof f && (b._rate = e);
          f = b._getSoundIds(f);
          for (var j = 0; j < f.length; j++) if (l = b._soundById(f[j])) {
            l._rateSeek = b.seek(f[j]);
            l._playStart = b._webAudio ? c.ctx.currentTime : l._playStart;
            l._rate = e;
            b._webAudio && l._node && l._node.bufferSource ? l._node.bufferSource.playbackRate.setValueAtTime(e, c.ctx.currentTime) : l._node && (l._node.playbackRate = e);
            var m = b.seek(f[j]),
              m = 1E3 * ((b._sprite[l._sprite][0] + b._sprite[l._sprite][1]) / 1E3 - m) / Math.abs(l._rate);
            if (b._endTimers[f[j]] || !l._paused) b._clearTimer(f[j]), b._endTimers[f[j]] = setTimeout(b._ended.bind(b, l), m);
            b._emit("rate", l._id);
          }
        } else return (l = b._soundById(f)) ? l._rate : b._rate;
        return b;
      },
      seek: function () {
        var b = this,
          d = arguments,
          e,
          f;
        0 === d.length ? f = b._sounds[0]._id : 1 === d.length ? 0 <= b._getSoundIds().indexOf(d[0]) ? f = parseInt(d[0], 10) : b._sounds.length && (f = b._sounds[0]._id, e = parseFloat(d[0])) : 2 === d.length && (e = parseFloat(d[0]), f = parseInt(d[1], 10));
        if ("undefined" === typeof f) return b;
        if ("loaded" !== b._state) return b._queue.push({
          event: "seek",
          action: function () {
            b.seek.apply(b, d);
          }
        }), b;
        var l = b._soundById(f);
        if (l) if ("number" === typeof e && 0 <= e) {
          var j = b.playing(f);
          j && b.pause(f, !0);
          l._seek = e;
          l._ended = !1;
          b._clearTimer(f);
          j && b.play(f, !0);
          !b._webAudio && l._node && (l._node.currentTime = e);
          if (j && !b._webAudio) {
            var m = function () {
              b._playLock ? setTimeout(m, 0) : b._emit("seek", f);
            };
            setTimeout(m, 0);
          } else b._emit("seek", f);
        } else return b._webAudio ? (e = b.playing(f) ? c.ctx.currentTime - l._playStart : 0, l._seek + ((l._rateSeek ? l._rateSeek - l._seek : 0) + e * Math.abs(l._rate))) : l._node.currentTime;
        return b;
      },
      playing: function (b) {
        if ("number" === typeof b) return (b = this._soundById(b)) ? !b._paused : !1;
        for (b = 0; b < this._sounds.length; b++) if (!this._sounds[b]._paused) return !0;
        return !1;
      },
      duration: function (b) {
        var c = this._duration;
        (b = this._soundById(b)) && (c = this._sprite[b._sprite][1] / 1E3);
        return c;
      },
      state: function () {
        return this._state;
      },
      unload: function () {
        for (var b = this._sounds, d = 0; d < b.length; d++) b[d]._paused || this.stop(b[d]._id), this._webAudio || (/MSIE |Trident\//.test(c._navigator && c._navigator.userAgent) || (b[d]._node.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA"), b[d]._node.removeEventListener("error", b[d]._errorFn, !1), b[d]._node.removeEventListener(c._canPlayEvent, b[d]._loadFn, !1)), delete b[d]._node, this._clearTimer(b[d]._id);
        d = c._howls.indexOf(this);
        0 <= d && c._howls.splice(d, 1);
        b = !0;
        for (d = 0; d < c._howls.length; d++) if (c._howls[d]._src === this._src) {
          b = !1;
          break;
        }
        f && b && delete f[this._src];
        c.noAudio = !1;
        this._state = "unloaded";
        this._sounds = [];
        return null;
      },
      on: function (b, c, d, e) {
        b = this["_on" + b];
        "function" === typeof c && b.push(e ? {
          id: d,
          fn: c,
          once: e
        } : {
          id: d,
          fn: c
        });
        return this;
      },
      off: function (b, c, d) {
        var e = this["_on" + b],
          f = 0;
        "number" === typeof c && (d = c, c = null);
        if (c || d) for (f = 0; f < e.length; f++) {
          if (b = d === e[f].id, c === e[f].fn && b || !c && b) {
            e.splice(f, 1);
            break;
          }
        } else if (b) this["_on" + b] = [];else {
          c = Object.keys(this);
          for (f = 0; f < c.length; f++) 0 === c[f].indexOf("_on") && Array.isArray(this[c[f]]) && (this[c[f]] = []);
        }
        return this;
      },
      once: function (b, c, d) {
        this.on(b, c, d, 1);
        return this;
      },
      _emit: function (b, c, d) {
        for (var e = this["_on" + b], f = e.length - 1; 0 <= f; f--) if (!e[f].id || e[f].id === c || "load" === b) setTimeout(function (b) {
          b.call(this, c, d);
        }.bind(this, e[f].fn), 0), e[f].once && this.off(b, e[f].fn, e[f].id);
        this._loadQueue(b);
        return this;
      },
      _loadQueue: function (b) {
        if (0 < this._queue.length) {
          var c = this._queue[0];
          c.event === b && (this._queue.shift(), this._loadQueue());
          b || c.action();
        }
        return this;
      },
      _ended: function (b) {
        var d = b._sprite;
        if (!this._webAudio && b._node && !b._node.paused && !b._node.ended && b._node.currentTime < b._stop) return setTimeout(this._ended.bind(this, b), 100), this;
        d = !(!b._loop && !this._sprite[d][2]);
        this._emit("end", b._id);
        !this._webAudio && d && this.stop(b._id, !0).play(b._id);
        if (this._webAudio && d) {
          this._emit("play", b._id);
          b._seek = b._start || 0;
          b._rateSeek = 0;
          b._playStart = c.ctx.currentTime;
          var e = 1E3 * (b._stop - b._start) / Math.abs(b._rate);
          this._endTimers[b._id] = setTimeout(this._ended.bind(this, b), e);
        }
        this._webAudio && !d && (b._paused = !0, b._ended = !0, b._seek = b._start || 0, b._rateSeek = 0, this._clearTimer(b._id), this._cleanBuffer(b._node), c._autoSuspend());
        !this._webAudio && !d && this.stop(b._id, !0);
        return this;
      },
      _clearTimer: function (b) {
        if (this._endTimers[b]) {
          if ("function" !== typeof this._endTimers[b]) clearTimeout(this._endTimers[b]);else {
            var c = this._soundById(b);
            c && c._node && c._node.removeEventListener("ended", this._endTimers[b], !1);
          }
          delete this._endTimers[b];
        }
        return this;
      },
      _soundById: function (b) {
        for (var c = 0; c < this._sounds.length; c++) if (b === this._sounds[c]._id) return this._sounds[c];
        return null;
      },
      _inactiveSound: function () {
        this._drain();
        for (var b = 0; b < this._sounds.length; b++) if (this._sounds[b]._ended) return this._sounds[b].reset();
        return new e(this);
      },
      _drain: function () {
        var b = this._pool,
          c = 0,
          d = 0;
        if (!(this._sounds.length < b)) {
          for (d = 0; d < this._sounds.length; d++) this._sounds[d]._ended && c++;
          for (d = this._sounds.length - 1; 0 <= d && !(c <= b); d--) this._sounds[d]._ended && (this._webAudio && this._sounds[d]._node && this._sounds[d]._node.disconnect(0), this._sounds.splice(d, 1), c--);
        }
      },
      _getSoundIds: function (b) {
        if ("undefined" === typeof b) {
          b = [];
          for (var c = 0; c < this._sounds.length; c++) b.push(this._sounds[c]._id);
          return b;
        }
        return [b];
      },
      _refreshBuffer: function (b) {
        b._node.bufferSource = c.ctx.createBufferSource();
        b._node.bufferSource.buffer = f[this._src];
        b._panner ? b._node.bufferSource.connect(b._panner) : b._node.bufferSource.connect(b._node);
        if (b._node.bufferSource.loop = b._loop) b._node.bufferSource.loopStart = b._start || 0, b._node.bufferSource.loopEnd = b._stop;
        b._node.bufferSource.playbackRate.setValueAtTime(b._rate, c.ctx.currentTime);
        return this;
      },
      _cleanBuffer: function (b) {
        if (c._scratchBuffer && b.bufferSource) {
          b.bufferSource.onended = null;
          b.bufferSource.disconnect(0);
          try {
            b.bufferSource.buffer = c._scratchBuffer;
          } catch (d) {}
        }
        b.bufferSource = null;
        return this;
      }
    };
    var e = function (b) {
      this._parent = b;
      this.init();
    };
    e.prototype = {
      init: function () {
        var b = this._parent;
        this._muted = b._muted;
        this._loop = b._loop;
        this._volume = b._volume;
        this._rate = b._rate;
        this._seek = 0;
        this._ended = this._paused = !0;
        this._sprite = "__default";
        this._id = ++c._counter;
        b._sounds.push(this);
        this.create();
        return this;
      },
      create: function () {
        var b = this._parent,
          d = c._muted || this._muted || this._parent._muted ? 0 : this._volume;
        b._webAudio ? (this._node = "undefined" === typeof c.ctx.createGain ? c.ctx.createGainNode() : c.ctx.createGain(), this._node.gain.setValueAtTime(d, c.ctx.currentTime), this._node.paused = !0, this._node.connect(c.masterGain)) : (this._node = new Audio(), this._errorFn = this._errorListener.bind(this), this._node.addEventListener("error", this._errorFn, !1), this._loadFn = this._loadListener.bind(this), this._node.addEventListener(c._canPlayEvent, this._loadFn, !1), this._node.src = b._src, this._node.preload = "auto", this._node.volume = d * c.volume(), this._node.load());
        return this;
      },
      reset: function () {
        var b = this._parent;
        this._muted = b._muted;
        this._loop = b._loop;
        this._volume = b._volume;
        this._rate = b._rate;
        this._rateSeek = this._seek = 0;
        this._ended = this._paused = !0;
        this._sprite = "__default";
        this._id = ++c._counter;
        return this;
      },
      _errorListener: function () {
        this._parent._emit("loaderror", this._id, this._node.error ? this._node.error.code : 0);
        this._node.removeEventListener("error", this._errorFn, !1);
      },
      _loadListener: function () {
        var b = this._parent;
        b._duration = Math.ceil(10 * this._node.duration) / 10;
        0 === Object.keys(b._sprite).length && (b._sprite = {
          __default: [0, 1E3 * b._duration]
        });
        "loaded" !== b._state && (b._state = "loaded", b._emit("load"), b._loadQueue());
        this._node.removeEventListener(c._canPlayEvent, this._loadFn, !1);
      }
    };
    var f = {},
      j = function (b, d) {
        c.ctx.decodeAudioData(b, function (b) {
          b && 0 < d._sounds.length && (f[d._src] = b, m(d, b));
        }, function () {
          d._emit("loaderror", null, "Decoding audio data failed.");
        });
      },
      m = function (b, c) {
        c && !b._duration && (b._duration = c.duration);
        0 === Object.keys(b._sprite).length && (b._sprite = {
          __default: [0, 1E3 * b._duration]
        });
        "loaded" !== b._state && (b._state = "loaded", b._emit("load"), b._loadQueue());
      },
      l = function () {
        try {
          "undefined" !== typeof AudioContext ? c.ctx = new AudioContext() : "undefined" !== typeof webkitAudioContext ? c.ctx = new webkitAudioContext() : c.usingWebAudio = !1;
        } catch (b) {
          c.usingWebAudio = !1;
        }
        var d = /iP(hone|od|ad)/.test(c._navigator && c._navigator.platform),
          e = c._navigator && c._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/),
          e = e ? parseInt(e[1], 10) : null;
        if (d && e && 9 > e && (d = /safari/.test(c._navigator && c._navigator.userAgent.toLowerCase()), c._navigator && c._navigator.standalone && !d || c._navigator && !c._navigator.standalone && !d)) c.usingWebAudio = !1;
        c.usingWebAudio && (c.masterGain = "undefined" === typeof c.ctx.createGain ? c.ctx.createGainNode() : c.ctx.createGain(), c.masterGain.gain.setValueAtTime(c._muted ? 0 : 1, c.ctx.currentTime), c.masterGain.connect(c.ctx.destination));
        c._setup();
      };
    "function" === typeof define && define.amd && define([], function () {
      return {
        Howler: c,
        Howl: d
      };
    });
    "undefined" !== typeof exports && (exports.Howler = c, exports.Howl = d);
    "undefined" !== typeof window ? (window.HowlerGlobal = b, window.Howler = c, window.Howl = d, window.Sound = e) : "undefined" !== typeof global && (global.HowlerGlobal = b, global.Howler = c, global.Howl = d, global.Sound = e);
  })();
  (function () {
    HowlerGlobal.prototype._pos = [0, 0, 0];
    HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];
    HowlerGlobal.prototype.stereo = function (b) {
      if (!this.ctx || !this.ctx.listener) return this;
      for (var c = this._howls.length - 1; 0 <= c; c--) this._howls[c].stereo(b);
      return this;
    };
    HowlerGlobal.prototype.pos = function (b, c, d) {
      if (!this.ctx || !this.ctx.listener) return this;
      c = "number" !== typeof c ? this._pos[1] : c;
      d = "number" !== typeof d ? this._pos[2] : d;
      if ("number" === typeof b) this._pos = [b, c, d], "undefined" !== typeof this.ctx.listener.positionX ? (this.ctx.listener.positionX.setTargetAtTime(this._pos[0], Howler.ctx.currentTime, 0.1), this.ctx.listener.positionY.setTargetAtTime(this._pos[1], Howler.ctx.currentTime, 0.1), this.ctx.listener.positionZ.setTargetAtTime(this._pos[2], Howler.ctx.currentTime, 0.1)) : this.ctx.listener.setPosition(this._pos[0], this._pos[1], this._pos[2]);else return this._pos;
      return this;
    };
    HowlerGlobal.prototype.orientation = function (b, c, d, e, g, q) {
      if (!this.ctx || !this.ctx.listener) return this;
      var y = this._orientation;
      c = "number" !== typeof c ? y[1] : c;
      d = "number" !== typeof d ? y[2] : d;
      e = "number" !== typeof e ? y[3] : e;
      g = "number" !== typeof g ? y[4] : g;
      q = "number" !== typeof q ? y[5] : q;
      if ("number" === typeof b) this._orientation = [b, c, d, e, g, q], "undefined" !== typeof this.ctx.listener.forwardX ? (this.ctx.listener.forwardX.setTargetAtTime(b, Howler.ctx.currentTime, 0.1), this.ctx.listener.forwardY.setTargetAtTime(c, Howler.ctx.currentTime, 0.1), this.ctx.listener.forwardZ.setTargetAtTime(d, Howler.ctx.currentTime, 0.1), this.ctx.listener.upX.setTargetAtTime(b, Howler.ctx.currentTime, 0.1), this.ctx.listener.upY.setTargetAtTime(c, Howler.ctx.currentTime, 0.1), this.ctx.listener.upZ.setTargetAtTime(d, Howler.ctx.currentTime, 0.1)) : this.ctx.listener.setOrientation(b, c, d, e, g, q);else return y;
      return this;
    };
    var b = Howl.prototype.init;
    Howl.prototype.init = function (c) {
      this._orientation = c.orientation || [1, 0, 0];
      this._stereo = c.stereo || null;
      this._pos = c.pos || null;
      this._pannerAttr = {
        coneInnerAngle: "undefined" !== typeof c.coneInnerAngle ? c.coneInnerAngle : 360,
        coneOuterAngle: "undefined" !== typeof c.coneOuterAngle ? c.coneOuterAngle : 360,
        coneOuterGain: "undefined" !== typeof c.coneOuterGain ? c.coneOuterGain : 0,
        distanceModel: "undefined" !== typeof c.distanceModel ? c.distanceModel : "inverse",
        maxDistance: "undefined" !== typeof c.maxDistance ? c.maxDistance : 1E4,
        panningModel: "undefined" !== typeof c.panningModel ? c.panningModel : "HRTF",
        refDistance: "undefined" !== typeof c.refDistance ? c.refDistance : 1,
        rolloffFactor: "undefined" !== typeof c.rolloffFactor ? c.rolloffFactor : 1
      };
      this._onstereo = c.onstereo ? [{
        fn: c.onstereo
      }] : [];
      this._onpos = c.onpos ? [{
        fn: c.onpos
      }] : [];
      this._onorientation = c.onorientation ? [{
        fn: c.onorientation
      }] : [];
      return b.call(this, c);
    };
    Howl.prototype.stereo = function (b, c) {
      var d = this;
      if (!d._webAudio) return d;
      if ("loaded" !== d._state) return d._queue.push({
        event: "stereo",
        action: function () {
          d.stereo(b, c);
        }
      }), d;
      var l = "undefined" === typeof Howler.ctx.createStereoPanner ? "spatial" : "stereo";
      if ("undefined" === typeof c) if ("number" === typeof b) d._stereo = b, d._pos = [b, 0, 0];else return d._stereo;
      for (var g = d._getSoundIds(c), q = 0; q < g.length; q++) {
        var y = d._soundById(g[q]);
        if (y) if ("number" === typeof b) y._stereo = b, y._pos = [b, 0, 0], y._node && (y._pannerAttr.panningModel = "equalpower", (!y._panner || !y._panner.pan) && e(y, l), "spatial" === l ? "undefined" !== typeof y._panner.positionX ? (y._panner.positionX.setValueAtTime(b, Howler.ctx.currentTime), y._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime), y._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime)) : y._panner.setPosition(b, 0, 0) : y._panner.pan.setValueAtTime(b, Howler.ctx.currentTime)), d._emit("stereo", y._id);else return y._stereo;
      }
      return d;
    };
    Howl.prototype.pos = function (b, c, d, l) {
      var g = this;
      if (!g._webAudio) return g;
      if ("loaded" !== g._state) return g._queue.push({
        event: "pos",
        action: function () {
          g.pos(b, c, d, l);
        }
      }), g;
      c = "number" !== typeof c ? 0 : c;
      d = "number" !== typeof d ? -0.5 : d;
      if ("undefined" === typeof l) if ("number" === typeof b) g._pos = [b, c, d];else return g._pos;
      for (var q = g._getSoundIds(l), y = 0; y < q.length; y++) {
        var z = g._soundById(q[y]);
        if (z) if ("number" === typeof b) z._pos = [b, c, d], z._node && ((!z._panner || z._panner.pan) && e(z, "spatial"), "undefined" !== typeof z._panner.positionX ? (z._panner.positionX.setValueAtTime(b, Howler.ctx.currentTime), z._panner.positionY.setValueAtTime(c, Howler.ctx.currentTime), z._panner.positionZ.setValueAtTime(d, Howler.ctx.currentTime)) : z._panner.setOrientation(b, c, d)), g._emit("pos", z._id);else return z._pos;
      }
      return g;
    };
    Howl.prototype.orientation = function (b, c, d, l) {
      var g = this;
      if (!g._webAudio) return g;
      if ("loaded" !== g._state) return g._queue.push({
        event: "orientation",
        action: function () {
          g.orientation(b, c, d, l);
        }
      }), g;
      c = "number" !== typeof c ? g._orientation[1] : c;
      d = "number" !== typeof d ? g._orientation[2] : d;
      if ("undefined" === typeof l) if ("number" === typeof b) g._orientation = [b, c, d];else return g._orientation;
      for (var q = g._getSoundIds(l), y = 0; y < q.length; y++) {
        var z = g._soundById(q[y]);
        if (z) if ("number" === typeof b) z._orientation = [b, c, d], z._node && (z._panner || (z._pos || (z._pos = g._pos || [0, 0, -0.5]), e(z, "spatial")), z._panner.orientationX.setValueAtTime(b, Howler.ctx.currentTime), z._panner.orientationY.setValueAtTime(c, Howler.ctx.currentTime), z._panner.orientationZ.setValueAtTime(d, Howler.ctx.currentTime)), g._emit("orientation", z._id);else return z._orientation;
      }
      return g;
    };
    Howl.prototype.pannerAttr = function () {
      var b = arguments,
        c,
        d;
      if (!this._webAudio) return this;
      if (0 === b.length) return this._pannerAttr;
      if (1 === b.length) {
        if ("object" === typeof b[0]) c = b[0], "undefined" === typeof d && (c.pannerAttr || (c.pannerAttr = {
          coneInnerAngle: c.coneInnerAngle,
          coneOuterAngle: c.coneOuterAngle,
          coneOuterGain: c.coneOuterGain,
          distanceModel: c.distanceModel,
          maxDistance: c.maxDistance,
          refDistance: c.refDistance,
          rolloffFactor: c.rolloffFactor,
          panningModel: c.panningModel
        }), this._pannerAttr = {
          coneInnerAngle: "undefined" !== typeof c.pannerAttr.coneInnerAngle ? c.pannerAttr.coneInnerAngle : this._coneInnerAngle,
          coneOuterAngle: "undefined" !== typeof c.pannerAttr.coneOuterAngle ? c.pannerAttr.coneOuterAngle : this._coneOuterAngle,
          coneOuterGain: "undefined" !== typeof c.pannerAttr.coneOuterGain ? c.pannerAttr.coneOuterGain : this._coneOuterGain,
          distanceModel: "undefined" !== typeof c.pannerAttr.distanceModel ? c.pannerAttr.distanceModel : this._distanceModel,
          maxDistance: "undefined" !== typeof c.pannerAttr.maxDistance ? c.pannerAttr.maxDistance : this._maxDistance,
          refDistance: "undefined" !== typeof c.pannerAttr.refDistance ? c.pannerAttr.refDistance : this._refDistance,
          rolloffFactor: "undefined" !== typeof c.pannerAttr.rolloffFactor ? c.pannerAttr.rolloffFactor : this._rolloffFactor,
          panningModel: "undefined" !== typeof c.pannerAttr.panningModel ? c.pannerAttr.panningModel : this._panningModel
        });else return (b = this._soundById(parseInt(b[0], 10))) ? b._pannerAttr : this._pannerAttr;
      } else 2 === b.length && (c = b[0], d = parseInt(b[1], 10));
      d = this._getSoundIds(d);
      for (var l = 0; l < d.length; l++) if (b = this._soundById(d[l])) {
        var g = b._pannerAttr,
          g = {
            coneInnerAngle: "undefined" !== typeof c.coneInnerAngle ? c.coneInnerAngle : g.coneInnerAngle,
            coneOuterAngle: "undefined" !== typeof c.coneOuterAngle ? c.coneOuterAngle : g.coneOuterAngle,
            coneOuterGain: "undefined" !== typeof c.coneOuterGain ? c.coneOuterGain : g.coneOuterGain,
            distanceModel: "undefined" !== typeof c.distanceModel ? c.distanceModel : g.distanceModel,
            maxDistance: "undefined" !== typeof c.maxDistance ? c.maxDistance : g.maxDistance,
            refDistance: "undefined" !== typeof c.refDistance ? c.refDistance : g.refDistance,
            rolloffFactor: "undefined" !== typeof c.rolloffFactor ? c.rolloffFactor : g.rolloffFactor,
            panningModel: "undefined" !== typeof c.panningModel ? c.panningModel : g.panningModel
          },
          q = b._panner;
        q ? (q.coneInnerAngle = g.coneInnerAngle, q.coneOuterAngle = g.coneOuterAngle, q.coneOuterGain = g.coneOuterGain, q.distanceModel = g.distanceModel, q.maxDistance = g.maxDistance, q.refDistance = g.refDistance, q.rolloffFactor = g.rolloffFactor, q.panningModel = g.panningModel) : (b._pos || (b._pos = this._pos || [0, 0, -0.5]), e(b, "spatial"));
      }
      return this;
    };
    var c = Sound.prototype.init;
    Sound.prototype.init = function () {
      var b = this._parent;
      this._orientation = b._orientation;
      this._stereo = b._stereo;
      this._pos = b._pos;
      this._pannerAttr = b._pannerAttr;
      c.call(this);
      this._stereo ? b.stereo(this._stereo) : this._pos && b.pos(this._pos[0], this._pos[1], this._pos[2], this._id);
    };
    var d = Sound.prototype.reset;
    Sound.prototype.reset = function () {
      var b = this._parent;
      this._orientation = b._orientation;
      this._stereo = b._stereo;
      this._pos = b._pos;
      this._pannerAttr = b._pannerAttr;
      this._stereo ? b.stereo(this._stereo) : this._pos ? b.pos(this._pos[0], this._pos[1], this._pos[2], this._id) : this._panner && (this._panner.disconnect(0), this._panner = void 0, b._refreshBuffer(this));
      return d.call(this);
    };
    var e = function (b, c) {
      "spatial" === (c || "spatial") ? (b._panner = Howler.ctx.createPanner(), b._panner.coneInnerAngle = b._pannerAttr.coneInnerAngle, b._panner.coneOuterAngle = b._pannerAttr.coneOuterAngle, b._panner.coneOuterGain = b._pannerAttr.coneOuterGain, b._panner.distanceModel = b._pannerAttr.distanceModel, b._panner.maxDistance = b._pannerAttr.maxDistance, b._panner.refDistance = b._pannerAttr.refDistance, b._panner.rolloffFactor = b._pannerAttr.rolloffFactor, b._panner.panningModel = b._pannerAttr.panningModel, "undefined" !== typeof b._panner.positionX ? (b._panner.positionX.setValueAtTime(b._pos[0], Howler.ctx.currentTime), b._panner.positionY.setValueAtTime(b._pos[1], Howler.ctx.currentTime), b._panner.positionZ.setValueAtTime(b._pos[2], Howler.ctx.currentTime)) : b._panner.setPosition(b._pos[0], b._pos[1], b._pos[2]), "undefined" !== typeof b._panner.orientationX ? (b._panner.orientationX.setValueAtTime(b._orientation[0], Howler.ctx.currentTime), b._panner.orientationY.setValueAtTime(b._orientation[1], Howler.ctx.currentTime), b._panner.orientationZ.setValueAtTime(b._orientation[2], Howler.ctx.currentTime)) : b._panner.setOrientation(b._orientation[0], b._orientation[1], b._orientation[2])) : (b._panner = Howler.ctx.createStereoPanner(), b._panner.pan.setValueAtTime(b._stereo, Howler.ctx.currentTime));
      b._panner.connect(b._node);
      b._paused || b._parent.pause(b._id, !0).play(b._id, !0);
    };
  })();
  (function (b) {
    Number.prototype.map = function (b, c, d, e) {
      return d + (e - d) * ((this - b) / (c - b));
    };
    Number.prototype.limit = function (b, c) {
      return Math.min(c, Math.max(b, this));
    };
    Number.prototype.round = function (b) {
      b = Math.pow(10, b || 0);
      return Math.round(this * b) / b;
    };
    Number.prototype.floor = function () {
      return Math.floor(this);
    };
    Number.prototype.ceil = function () {
      return Math.ceil(this);
    };
    Number.prototype.toInt = function () {
      return this | 0;
    };
    Number.prototype.toRad = function () {
      return this / 180 * Math.PI;
    };
    Number.prototype.toDeg = function () {
      return 180 * this / Math.PI;
    };
    Array.prototype.erase = function (b) {
      for (var c = this.length; c--;) this[c] === b && this.splice(c, 1);
      return this;
    };
    Array.prototype.random = function () {
      return this[Math.floor(Math.random() * this.length)];
    };
    Function.prototype.bind = Function.prototype.bind || function (b) {
      if ("function" !== typeof this) throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
      var c = Array.prototype.slice.call(arguments, 1),
        d = this,
        e = function () {},
        f = function () {
          return d.apply(this instanceof e && b ? this : b, c.concat(Array.prototype.slice.call(arguments)));
        };
      e.prototype = this.prototype;
      f.prototype = new e();
      return f;
    };
    b.ig = {
      game: null,
      debug: null,
      version: "1.23",
      global: b,
      modules: {},
      resources: [],
      ready: !1,
      baked: !1,
      nocache: "",
      ua: {},
      prefix: b.ImpactPrefix || "",
      lib: "lib/",
      _current: null,
      _loadQueue: [],
      _waitForOnload: 0,
      $: function (b) {
        return "#" == b.charAt(0) ? document.getElementById(b.substr(1)) : document.getElementsByTagName(b);
      },
      $new: function (b) {
        return document.createElement(b);
      },
      copy: function (b) {
        if (!b || "object" != typeof b || b instanceof HTMLElement || b instanceof ig.Class) return b;
        if (b instanceof Array) for (var c = [], d = 0, e = b.length; d < e; d++) c[d] = ig.copy(b[d]);else for (d in c = {}, b) c[d] = ig.copy(b[d]);
        return c;
      },
      merge: function (b, c) {
        for (var d in c) {
          var e = c[d];
          if ("object" != typeof e || e instanceof HTMLElement || e instanceof ig.Class || null === e) b[d] = e;else {
            if (!b[d] || "object" != typeof b[d]) b[d] = e instanceof Array ? [] : {};
            ig.merge(b[d], e);
          }
        }
        return b;
      },
      ksort: function (b) {
        if (!b || "object" != typeof b) return [];
        var c = [],
          d = [],
          e;
        for (e in b) c.push(e);
        c.sort();
        for (e = 0; e < c.length; e++) d.push(b[c[e]]);
        return d;
      },
      setVendorAttribute: function (b, c, d) {
        var e = c.charAt(0).toUpperCase() + c.substr(1);
        b[c] = "undefined" !== typeof b.imageSmoothingEnabled ? b["ms" + e] = b["moz" + e] = b["o" + e] = d : b["ms" + e] = b["moz" + e] = b["webkit" + e] = b["o" + e] = d;
      },
      getVendorAttribute: function (b, c) {
        var d = c.charAt(0).toUpperCase() + c.substr(1);
        return "undefined" !== typeof b.imageSmoothingEnabled ? b[c] || b["ms" + d] || b["moz" + d] || b["o" + d] : b[c] || b["ms" + d] || b["moz" + d] || b["webkit" + d] || b["o" + d];
      },
      normalizeVendorAttribute: function (b, c) {
        var d = ig.getVendorAttribute(b, c);
        !b[c] && d && (b[c] = d);
      },
      getImagePixels: function (b, c, d, e, f) {
        var j = ig.$new("canvas");
        j.width = b.width;
        j.height = b.height;
        var m = j.getContext("2d");
        ig.System.SCALE.CRISP(j, m);
        var H = ig.getVendorAttribute(m, "backingStorePixelRatio") || 1;
        ig.normalizeVendorAttribute(m, "getImageDataHD");
        var D = b.width / H,
          s = b.height / H;
        j.width = Math.ceil(D);
        j.height = Math.ceil(s);
        m.drawImage(b, 0, 0, D, s);
        return 1 === H ? m.getImageData(c, d, e, f) : m.getImageDataHD(c, d, e, f);
      },
      module: function (b) {
        if (ig._current) throw "Module '" + ig._current.name + "' defines nothing";
        if (ig.modules[b] && ig.modules[b].body) throw "Module '" + b + "' is already defined";
        ig._current = {
          name: b,
          requires: [],
          loaded: !1,
          body: null
        };
        ig.modules[b] = ig._current;
        ig._loadQueue.push(ig._current);
        return ig;
      },
      requires: function () {
        ig._current.requires = Array.prototype.slice.call(arguments);
        return ig;
      },
      defines: function (b) {
        ig._current.body = b;
        ig._current = null;
        ig._initDOMReady();
      },
      addResource: function (b) {
        ig.resources.push(b);
      },
      setNocache: function (b) {
        ig.nocache = b ? "?" + Date.now() : "";
      },
      log: function () {},
      assert: function () {},
      show: function () {},
      mark: function () {},
      _loadScript: function (b, c) {
        ig.modules[b] = {
          name: b,
          requires: [],
          loaded: !1,
          body: null
        };
        ig._waitForOnload++;
        var d = ig.prefix + ig.lib + b.replace(/\./g, "/") + ".js" + ig.nocache,
          e = ig.$new("script");
        e.type = "text/javascript";
        e.src = d;
        e.onload = function () {
          ig._waitForOnload--;
          ig._execModules();
        };
        e.onerror = function () {
          throw "Failed to load module " + b + " at " + d + " required from " + c;
        };
        ig.$("head")[0].appendChild(e);
      },
      _execModules: function () {
        for (var b = !1, c = 0; c < ig._loadQueue.length; c++) {
          for (var d = ig._loadQueue[c], e = !0, f = 0; f < d.requires.length; f++) {
            var j = d.requires[f];
            ig.modules[j] ? ig.modules[j].loaded || (e = !1) : (e = !1, ig._loadScript(j, d.name));
          }
          e && d.body && (ig._loadQueue.splice(c, 1), d.loaded = !0, d.body(), b = !0, c--);
        }
        if (b) ig._execModules();else if (!ig.baked && 0 == ig._waitForOnload && 0 != ig._loadQueue.length) {
          b = [];
          for (c = 0; c < ig._loadQueue.length; c++) {
            e = [];
            j = ig._loadQueue[c].requires;
            for (f = 0; f < j.length; f++) d = ig.modules[j[f]], (!d || !d.loaded) && e.push(j[f]);
            b.push(ig._loadQueue[c].name + " (requires: " + e.join(", ") + ")");
          }
          throw "Unresolved (or circular?) dependencies. Most likely there's a name/path mismatch for one of the listed modules or a previous syntax error prevents a module from loading:\n" + b.join("\n");
        }
      },
      _DOMReady: function () {
        if (!ig.modules["dom.ready"].loaded) {
          if (!document.body) return setTimeout(ig._DOMReady, 13);
          ig.modules["dom.ready"].loaded = !0;
          ig._waitForOnload--;
          ig._execModules();
        }
        return 0;
      },
      _boot: function () {
        document.location.href.match(/\?nocache/) && ig.setNocache(!0);
        ig.ua.pixelRatio = b.devicePixelRatio || 1;
        ig.ua.viewport = {
          width: b.innerWidth,
          height: b.innerHeight
        };
        ig.ua.screen = {
          width: b.screen.availWidth * ig.ua.pixelRatio,
          height: b.screen.availHeight * ig.ua.pixelRatio
        };
        ig.ua.iPhone = /iPhone/i.test(navigator.userAgent);
        ig.ua.iPhone4 = ig.ua.iPhone && 2 == ig.ua.pixelRatio;
        ig.ua.iPad = /iPad/i.test(navigator.userAgent);
        ig.ua.android = /android/i.test(navigator.userAgent);
        ig.ua.winPhone = /Windows Phone/i.test(navigator.userAgent);
        ig.ua.is_uiwebview = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent);
        ig.ua.is_safari_or_uiwebview = /(iPhone|iPod|iPad).*AppleWebKit/i.test(navigator.userAgent);
        ig.ua.iOS = ig.ua.iPhone || ig.ua.iPad;
        ig.ua.iOS6_tag = /OS 6_/i.test(navigator.userAgent);
        ig.ua.iOS6 = (ig.ua.iPhone || ig.ua.iPad) && ig.ua.iOS6_tag;
        ig.ua.iOSgt5 = ig.ua.iOS && 5 < parseInt(navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/)[1]);
        ig.ua.HTCONE = /HTC_One/i.test(navigator.userAgent);
        ig.ua.winPhone = /Windows Phone/i.test(navigator.userAgent);
        ig.ua.Kindle = /Silk/i.test(navigator.userAgent);
        ig.ua.touchDevice = "ontouchstart" in b || b.navigator.msMaxTouchPoints;
        ig.ua.mobile = false
      },
      _initDOMReady: function () {
        ig.modules["dom.ready"] ? ig._execModules() : (ig._boot(), ig.modules["dom.ready"] = {
          requires: [],
          loaded: !1,
          body: null
        }, ig._waitForOnload++, "complete" === document.readyState ? ig._DOMReady() : (document.addEventListener("DOMContentLoaded", ig._DOMReady, !1), b.addEventListener("load", ig._DOMReady, !1)));
      }
    };
    ig.normalizeVendorAttribute(b, "requestAnimationFrame");
    if (b.requestAnimationFrame) {
      var c = 1,
        d = {};
      b.ig.setAnimation = function (e, f) {
        var j = c++;
        d[j] = !0;
        var m = function () {
          d[j] && (b.requestAnimationFrame(m, f), e());
        };
        b.requestAnimationFrame(m, f);
        return j;
      };
      b.ig.clearAnimation = function (b) {
        delete d[b];
      };
    } else b.ig.setAnimation = function (c) {
      return b.setInterval(c, 1E3 / 60);
    }, b.ig.clearAnimation = function (c) {
      b.clearInterval(c);
    };
    var e = !1,
      f = /xyz/.test(function () {
        xyz;
      }) ? /\bparent\b/ : /.*/,
      j = 0;
    b.ig.Class = function () {};
    var m = function (b) {
      var c = this.prototype,
        d = {},
        e;
      for (e in b) "function" == typeof b[e] && "function" == typeof c[e] && f.test(b[e]) ? (d[e] = c[e], c[e] = function (b, c) {
        return function () {
          var e = this.parent;
          this.parent = d[b];
          var f = c.apply(this, arguments);
          this.parent = e;
          return f;
        };
      }(e, b[e])) : c[e] = b[e];
    };
    b.ig.Class.extend = function (c) {
      function d() {
        if (!e) {
          if (this.staticInstantiate) {
            var b = this.staticInstantiate.apply(this, arguments);
            if (b) return b;
          }
          for (var c in this) "object" == typeof this[c] && (this[c] = ig.copy(this[c]));
          this.init && this.init.apply(this, arguments);
        }
        return this;
      }
      var q = this.prototype;
      e = !0;
      var y = new this();
      e = !1;
      for (var z in c) y[z] = "function" == typeof c[z] && "function" == typeof q[z] && f.test(c[z]) ? function (b, c) {
        return function () {
          var d = this.parent;
          this.parent = q[b];
          var e = c.apply(this, arguments);
          this.parent = d;
          return e;
        };
      }(z, c[z]) : c[z];
      d.prototype = y;
      d.prototype.constructor = d;
      d.extend = b.ig.Class.extend;
      d.inject = m;
      d.classId = y.classId = ++j;
      return d;
    };
    b.ImpactMixin && ig.merge(ig, b.ImpactMixin);
  })(window);
  ig.baked = !0;
  ig.module("impact.image").defines(function () {
    ig.Image = ig.Class.extend({
      data: null,
      width: 0,
      height: 0,
      loaded: !1,
      failed: !1,
      loadCallback: null,
      path: "",
      staticInstantiate: function (b) {
        return ig.Image.cache[b] || null;
      },
      init: function (b) {
        this.path = b;
        this.load();
      },
      load: function (b) {
        this.loaded ? b && b(this.path, !0) : (!this.loaded && ig.ready ? (this.loadCallback = b || null, this.data = new Image(), this.data.onload = this.onload.bind(this), this.data.onerror = this.onerror.bind(this), this.data.src = ig.prefix + this.path + ig.nocache) : ig.addResource(this), ig.Image.cache[this.path] = this);
      },
      reload: function () {
        this.loaded = !1;
        this.data = new Image();
        this.data.onload = this.onload.bind(this);
        this.data.src = this.path + "?" + Date.now();
      },
      onload: function () {
        this.width = this.data.width;
        this.height = this.data.height;
        this.loaded = !0;
        1 != ig.system.scale && this.resize(ig.system.scale);
        this.loadCallback && this.loadCallback(this.path, !0);
      },
      onerror: function () {
        this.failed = !0;
        this.loadCallback && this.loadCallback(this.path, !1);
      },
      resize: function (b) {
        var c = ig.getImagePixels(this.data, 0, 0, this.width, this.height),
          d = this.width * b,
          e = this.height * b,
          f = ig.$new("canvas");
        f.width = d;
        f.height = e;
        for (var j = f.getContext("2d"), m = j.getImageData(0, 0, d, e), l = 0; l < e; l++) for (var g = 0; g < d; g++) {
          var q = 4 * (Math.floor(l / b) * this.width + Math.floor(g / b)),
            y = 4 * (l * d + g);
          m.data[y] = c.data[q];
          m.data[y + 1] = c.data[q + 1];
          m.data[y + 2] = c.data[q + 2];
          m.data[y + 3] = c.data[q + 3];
        }
        j.putImageData(m, 0, 0);
        this.data = f;
      },
      draw: function (b, c, d, e, f, j) {
        if (this.loaded) {
          var m = ig.system.scale;
          f = (f ? f : this.width) * m;
          j = (j ? j : this.height) * m;
          ig.system.context.drawImage(this.data, d ? d * m : 0, e ? e * m : 0, f, j, ig.system.getDrawPos(b), ig.system.getDrawPos(c), f, j);
          ig.Image.drawCount++;
        }
      },
      drawTile: function (b, c, d, e, f, j, m) {
        f = f ? f : e;
        if (this.loaded && !(e > this.width || f > this.height)) {
          var l = ig.system.scale,
            g = Math.floor(e * l),
            q = Math.floor(f * l),
            y = j ? -1 : 1,
            z = m ? -1 : 1;
          if (j || m) ig.system.context.save(), ig.system.context.scale(y, z);
          ig.system.context.drawImage(this.data, Math.floor(d * e) % this.width * l, Math.floor(d * e / this.width) * f * l, g, q, ig.system.getDrawPos(b) * y - (j ? g : 0), ig.system.getDrawPos(c) * z - (m ? q : 0), g, q);
          (j || m) && ig.system.context.restore();
          ig.Image.drawCount++;
        }
      }
    });
    ig.Image.drawCount = 0;
    ig.Image.cache = {};
    ig.Image.reloadCache = function () {
      for (var b in ig.Image.cache) ig.Image.cache[b].reload();
    };
  });
  ig.baked = !0;
  ig.module("impact.font").requires("impact.image").defines(function () {
    ig.Font = ig.Image.extend({
      widthMap: [],
      indices: [],
      firstChar: 32,
      alpha: 1,
      letterSpacing: 1,
      lineSpacing: 0,
      onload: function (b) {
        this._loadMetrics(this.data);
        this.parent(b);
      },
      widthForString: function (b) {
        if (-1 !== b.indexOf("\n")) {
          b = b.split("\n");
          for (var c = 0, d = 0; d < b.length; d++) c = Math.max(c, this._widthForLine(b[d]));
          return c;
        }
        return this._widthForLine(b);
      },
      _widthForLine: function (b) {
        for (var c = 0, d = 0; d < b.length; d++) c += this.widthMap[b.charCodeAt(d) - this.firstChar] + this.letterSpacing;
        return c;
      },
      heightForString: function (b) {
        return b.split("\n").length * (this.height + this.lineSpacing);
      },
      draw: function (b, c, d, e) {
        "string" != typeof b && (b = b.toString());
        if (-1 !== b.indexOf("\n")) {
          b = b.split("\n");
          for (var f = this.height + this.lineSpacing, j = 0; j < b.length; j++) this.draw(b[j], c, d + j * f, e);
        } else {
          if (e == ig.Font.ALIGN.RIGHT || e == ig.Font.ALIGN.CENTER) j = this._widthForLine(b), c -= e == ig.Font.ALIGN.CENTER ? j / 2 : j;
          1 !== this.alpha && (ig.system.context.globalAlpha = this.alpha);
          for (j = 0; j < b.length; j++) e = b.charCodeAt(j), c += this._drawChar(e - this.firstChar, c, d);
          1 !== this.alpha && (ig.system.context.globalAlpha = 1);
          ig.Image.drawCount += b.length;
        }
      },
      _drawChar: function (b, c, d) {
        if (!this.loaded || 0 > b || b >= this.indices.length) return 0;
        var e = ig.system.scale,
          f = this.widthMap[b] * e,
          j = (this.height - 2) * e;
        ig.system.context.drawImage(this.data, this.indices[b] * e, 0, f, j, ig.system.getDrawPos(c), ig.system.getDrawPos(d), f, j);
        return this.widthMap[b] + this.letterSpacing;
      },
      _loadMetrics: function (b) {
        this.height = b.height - 1;
        this.widthMap = [];
        this.indices = [];
        for (var c = ig.getImagePixels(b, 0, b.height - 1, b.width, 1), d = 0, e = 0, f = 0; f < b.width; f++) {
          var j = 4 * f + 3;
          127 < c.data[j] ? e++ : 128 > c.data[j] && e && (this.widthMap.push(e), this.indices.push(f - e), d++, e = 0);
        }
        this.widthMap.push(e);
        this.indices.push(f - e);
      }
    });
    ig.Font.ALIGN = {
      LEFT: 0,
      RIGHT: 1,
      CENTER: 2
    };
  });
  ig.baked = !0;
  ig.module("impact.sound").defines(function () {
    ig.SoundManager = ig.Class.extend({
      clips: {},
      volume: 1,
      format: null,
      init: function () {
        if (!ig.Sound.enabled || !window.Audio) ig.Sound.enabled = !1;else {
          for (var b = new Audio(), c = 0; c < ig.Sound.use.length; c++) {
            var d = ig.Sound.use[c];
            if (b.canPlayType(d.mime)) {
              this.format = d;
              break;
            }
          }
          this.format || (ig.Sound.enabled = !1);
        }
      },
      load: function (b, c, d) {
        var e = ig.prefix + b.replace(/[^\.]+$/, this.format.ext) + ig.nocache;
        if (this.clips[b]) {
          if (c && this.clips[b].length < ig.Sound.channels) for (c = this.clips[b].length; c < ig.Sound.channels; c++) {
            var f = new Audio(e);
            f.load();
            this.clips[b].push(f);
          }
          return this.clips[b][0];
        }
        var j = new Audio(e);
        d && (j.addEventListener("canplaythrough", function l(c) {
          j.removeEventListener("canplaythrough", l, !1);
          d(b, !0, c);
        }, !1), j.addEventListener("error", function (c) {
          d(b, !1, c);
        }, !1));
        j.preload = "auto";
        j.load();
        this.clips[b] = [j];
        if (c) for (c = 1; c < ig.Sound.channels; c++) f = new Audio(e), f.load(), this.clips[b].push(f);
        return j;
      },
      get: function (b) {
        b = this.clips[b];
        for (var c = 0, d; d = b[c++];) if (d.paused || d.ended) return d.ended && (d.currentTime = 0), d;
        b[0].pause();
        b[0].currentTime = 0;
        return b[0];
      }
    });
    ig.Music = ig.Class.extend({
      tracks: [],
      namedTracks: {},
      currentTrack: null,
      currentIndex: 0,
      random: !1,
      _volume: 1,
      _loop: !1,
      _fadeInterval: 0,
      _fadeTimer: null,
      _endedCallbackBound: null,
      init: function () {
        this._endedCallbackBound = this._endedCallback.bind(this);
        Object.defineProperty ? (Object.defineProperty(this, "volume", {
          get: this.getVolume.bind(this),
          set: this.setVolume.bind(this)
        }), Object.defineProperty(this, "loop", {
          get: this.getLooping.bind(this),
          set: this.setLooping.bind(this)
        })) : this.__defineGetter__ && (this.__defineGetter__("volume", this.getVolume.bind(this)), this.__defineSetter__("volume", this.setVolume.bind(this)), this.__defineGetter__("loop", this.getLooping.bind(this)), this.__defineSetter__("loop", this.setLooping.bind(this)));
      },
      add: function (b, c) {
        if (ig.Sound.enabled) {
          var d = ig.soundManager.load(b instanceof ig.Sound ? b.path : b, !1);
          d.loop = this._loop;
          d.volume = this._volume;
          d.addEventListener("ended", this._endedCallbackBound, !1);
          this.tracks.push(d);
          c && (this.namedTracks[c] = d);
          this.currentTrack || (this.currentTrack = d);
        }
      },
      next: function () {
        this.tracks.length && (this.stop(), this.currentIndex = this.random ? Math.floor(Math.random() * this.tracks.length) : (this.currentIndex + 1) % this.tracks.length, this.currentTrack = this.tracks[this.currentIndex], this.play());
      },
      pause: function () {
        this.currentTrack && this.currentTrack.pause();
      },
      stop: function () {
        this.currentTrack && (this.currentTrack.pause(), this.currentTrack.currentTime = 0);
      },
      play: function (b) {
        if (b && this.namedTracks[b]) b = this.namedTracks[b], b != this.currentTrack && (this.stop(), this.currentTrack = b);else if (!this.currentTrack) return;
        this.currentTrack.play();
      },
      getLooping: function () {
        return this._loop;
      },
      setLooping: function (b) {
        this._loop = b;
        for (var c in this.tracks) this.tracks[c].loop = b;
      },
      getVolume: function () {
        return this._volume;
      },
      setVolume: function (b) {
        this._volume = b.limit(0, 1);
        for (var c in this.tracks) this.tracks[c].volume = this._volume;
      },
      fadeOut: function (b) {
        this.currentTrack && (clearInterval(this._fadeInterval), this.fadeTimer = new ig.Timer(b), this._fadeInterval = setInterval(this._fadeStep.bind(this), 50));
      },
      _fadeStep: function () {
        var b = this.fadeTimer.delta().map(-this.fadeTimer.target, 0, 1, 0).limit(0, 1) * this._volume;
        0.01 >= b ? (this.stop(), this.currentTrack.volume = this._volume, clearInterval(this._fadeInterval)) : this.currentTrack.volume = b;
      },
      _endedCallback: function () {
        this._loop ? this.play() : this.next();
      }
    });
    ig.Sound = ig.Class.extend({
      path: "",
      volume: 1,
      currentClip: null,
      multiChannel: !0,
      init: function (b, c) {
        this.path = b;
        this.multiChannel = !1 !== c;
        this.load();
      },
      load: function (b) {
        ig.Sound.enabled ? ig.ready ? ig.soundManager.load(this.path, this.multiChannel, b) : ig.addResource(this) : b && b(this.path, !0);
      },
      play: function () {
        ig.Sound.enabled && (this.currentClip = ig.soundManager.get(this.path), this.currentClip.volume = ig.soundManager.volume * this.volume, this.currentClip.play());
      },
      stop: function () {
        this.currentClip && (this.currentClip.pause(), this.currentClip.currentTime = 0);
      }
    });
    ig.Sound.FORMAT = {
      MP3: {
        ext: "mp3",
        mime: "audio/mpeg"
      },
      M4A: {
        ext: "m4a",
        mime: "audio/mp4; codecs=mp4a"
      },
      OGG: {
        ext: "ogg",
        mime: "audio/ogg; codecs=vorbis"
      },
      WEBM: {
        ext: "webm",
        mime: "audio/webm; codecs=vorbis"
      },
      CAF: {
        ext: "caf",
        mime: "audio/x-caf"
      }
    };
    ig.Sound.use = [ig.Sound.FORMAT.OGG, ig.Sound.FORMAT.MP3];
    ig.Sound.channels = 4;
    ig.Sound.enabled = !0;
  });
  ig.baked = !0;
  ig.module("impact.loader").requires("impact.image", "impact.font", "impact.sound").defines(function () {
    ig.Loader = ig.Class.extend({
      resources: [],
      gameClass: null,
      status: 0,
      done: !1,
      _unloaded: [],
      _drawStatus: 0,
      _intervalId: 0,
      _loadCallbackBound: null,
      init: function (b, c) {
        this.gameClass = b;
        this.resources = c;
        this._loadCallbackBound = this._loadCallback.bind(this);
        for (var d = 0; d < this.resources.length; d++) this._unloaded.push(this.resources[d].path);
      },
      load: function () {
        ig.system.clear("#000");
        if (this.resources.length) {
          for (var b = 0; b < this.resources.length; b++) this.loadResource(this.resources[b]);
          this._intervalId = setInterval(this.draw.bind(this), 16);
        } else this.end();
      },
      loadResource: function (b) {
        b.load(this._loadCallbackBound);
      },
      end: function () {
        this.done || (this.done = !0, clearInterval(this._intervalId));
      },
      draw: function () {},
      _loadCallback: function (b, c) {
        if (c) this._unloaded.erase(b);else throw "Failed to load resource: " + b;
        this.status = 1 - this._unloaded.length / this.resources.length;
        0 == this._unloaded.length && setTimeout(this.end.bind(this), 250);
      }
    });
  });
  ig.baked = !0;
  ig.module("impact.timer").defines(function () {
    ig.Timer = ig.Class.extend({
      target: 0,
      base: 0,
      last: 0,
      pausedAt: 0,
      init: function (b) {
        this.last = this.base = ig.Timer.time;
        this.target = b || 0;
      },
      set: function (b) {
        this.target = b || 0;
        this.base = ig.Timer.time;
        this.pausedAt = 0;
      },
      reset: function () {
        this.base = ig.Timer.time;
        this.pausedAt = 0;
      },
      tick: function () {
        var b = ig.Timer.time - this.last;
        this.last = ig.Timer.time;
        return this.pausedAt ? 0 : b;
      },
      delta: function () {
        return (this.pausedAt || ig.Timer.time) - this.base - this.target;
      },
      pause: function () {
        this.pausedAt || (this.pausedAt = ig.Timer.time);
      },
      unpause: function () {
        this.pausedAt && (this.base += ig.Timer.time - this.pausedAt, this.pausedAt = 0);
      }
    });
    ig.Timer._last = 0;
    ig.Timer.time = Number.MIN_VALUE;
    ig.Timer.timeScale = 1;
    ig.Timer.maxStep = 0.05;
    ig.Timer.step = function () {
      var b = Date.now();
      ig.Timer.time += Math.min((b - ig.Timer._last) / 1E3, ig.Timer.maxStep) * ig.Timer.timeScale;
      ig.Timer._last = b;
    };
  });
  ig.baked = !0;
  ig.module("impact.system").requires("impact.timer", "impact.image").defines(function () {
    ig.System = ig.Class.extend({
      fps: 30,
      width: 320,
      height: 240,
      realWidth: 320,
      realHeight: 240,
      scale: 1,
      tick: 0,
      animationId: 0,
      newGameClass: null,
      running: !1,
      delegate: null,
      clock: null,
      canvas: null,
      context: null,
      init: function (b, c, d, e, f) {
        this.fps = c;
        this.clock = new ig.Timer();
        this.canvas = ig.$(b);
        this.resize(d, e, f);
        this.context = this.canvas.getContext("2d");
        this.getDrawPos = ig.System.drawMode;
        1 != this.scale && (ig.System.scaleMode = ig.System.SCALE.CRISP);
        ig.System.scaleMode(this.canvas, this.context);
      },
      resize: function (b, c, d) {
        this.width = b;
        this.height = c;
        this.scale = d || this.scale;
        this.realWidth = this.width * this.scale;
        this.realHeight = this.height * this.scale;
        this.canvas.width = this.realWidth;
        this.canvas.height = this.realHeight;
      },
      setGame: function (b) {
        this.running ? this.newGameClass = b : this.setGameNow(b);
      },
      setGameNow: function (b) {
        ig.game = new b();
        ig.system.setDelegate(ig.game);
      },
      setDelegate: function (b) {
        if ("function" == typeof b.run) this.delegate = b, this.startRunLoop();else throw "System.setDelegate: No run() function in object";
      },
      stopRunLoop: function () {
        ig.clearAnimation(this.animationId);
        this.running = !1;
      },
      startRunLoop: function () {
        this.stopRunLoop();
        this.animationId = ig.setAnimation(this.run.bind(this), this.canvas);
        this.running = !0;
      },
      clear: function (b) {
        this.context.fillStyle = b;
        this.context.fillRect(0, 0, this.realWidth, this.realHeight);
      },
      run: function () {
        ig.Timer.step();
        this.tick = this.clock.tick();
        this.delegate.run();
        ig.input.clearPressed();
        this.newGameClass && (this.setGameNow(this.newGameClass), this.newGameClass = null);
      },
      getDrawPos: null
    });
    ig.System.DRAW = {
      AUTHENTIC: function (b) {
        return Math.round(b) * this.scale;
      },
      SMOOTH: function (b) {
        return Math.round(b * this.scale);
      },
      SUBPIXEL: function (b) {
        return b * this.scale;
      }
    };
    ig.System.drawMode = ig.System.DRAW.SMOOTH;
    ig.System.SCALE = {
      CRISP: function (b, c) {
        ig.setVendorAttribute(c, "imageSmoothingEnabled", !1);
        b.style.imageRendering = "-moz-crisp-edges";
        b.style.imageRendering = "-o-crisp-edges";
        b.style.imageRendering = "-webkit-optimize-contrast";
        b.style.imageRendering = "crisp-edges";
        b.style.msInterpolationMode = "nearest-neighbor";
      },
      SMOOTH: function (b, c) {
        ig.setVendorAttribute(c, "imageSmoothingEnabled", !0);
        b.style.imageRendering = "";
        b.style.msInterpolationMode = "";
      }
    };
    ig.System.scaleMode = ig.System.SCALE.SMOOTH;
  });
  ig.baked = !0;
  ig.module("impact.input").defines(function () {
    ig.KEY = {
      MOUSE1: -1,
      MOUSE2: -3,
      MWHEEL_UP: -4,
      MWHEEL_DOWN: -5,
      BACKSPACE: 8,
      TAB: 9,
      ENTER: 13,
      PAUSE: 19,
      CAPS: 20,
      ESC: 27,
      SPACE: 32,
      PAGE_UP: 33,
      PAGE_DOWN: 34,
      END: 35,
      HOME: 36,
      LEFT_ARROW: 37,
      UP_ARROW: 38,
      RIGHT_ARROW: 39,
      DOWN_ARROW: 40,
      INSERT: 45,
      DELETE: 46,
      _0: 48,
      _1: 49,
      _2: 50,
      _3: 51,
      _4: 52,
      _5: 53,
      _6: 54,
      _7: 55,
      _8: 56,
      _9: 57,
      A: 65,
      B: 66,
      C: 67,
      D: 68,
      E: 69,
      F: 70,
      G: 71,
      H: 72,
      I: 73,
      J: 74,
      K: 75,
      L: 76,
      M: 77,
      N: 78,
      O: 79,
      P: 80,
      Q: 81,
      R: 82,
      S: 83,
      T: 84,
      U: 85,
      V: 86,
      W: 87,
      X: 88,
      Y: 89,
      Z: 90,
      NUMPAD_0: 96,
      NUMPAD_1: 97,
      NUMPAD_2: 98,
      NUMPAD_3: 99,
      NUMPAD_4: 100,
      NUMPAD_5: 101,
      NUMPAD_6: 102,
      NUMPAD_7: 103,
      NUMPAD_8: 104,
      NUMPAD_9: 105,
      MULTIPLY: 106,
      ADD: 107,
      SUBSTRACT: 109,
      DECIMAL: 110,
      DIVIDE: 111,
      F1: 112,
      F2: 113,
      F3: 114,
      F4: 115,
      F5: 116,
      F6: 117,
      F7: 118,
      F8: 119,
      F9: 120,
      F10: 121,
      F11: 122,
      F12: 123,
      SHIFT: 16,
      CTRL: 17,
      ALT: 18,
      PLUS: 187,
      COMMA: 188,
      MINUS: 189,
      PERIOD: 190
    };
    ig.Input = ig.Class.extend({
      bindings: {},
      actions: {},
      presses: {},
      locks: {},
      delayedKeyup: {},
      isUsingMouse: !1,
      isUsingKeyboard: !1,
      isUsingAccelerometer: !1,
      mouse: {
        x: 0,
        y: 0
      },
      accel: {
        x: 0,
        y: 0,
        z: 0
      },
      initMouse: function () {
        if (!this.isUsingMouse) {
          this.isUsingMouse = !0;
          var b = this.mousewheel.bind(this);
          ig.system.canvas.addEventListener("mousewheel", b, !1);
          ig.system.canvas.addEventListener("DOMMouseScroll", b, !1);
          ig.system.canvas.addEventListener("contextmenu", this.contextmenu.bind(this), !1);
          ig.system.canvas.addEventListener("mousedown", this.keydown.bind(this), !1);
          ig.system.canvas.addEventListener("mouseup", this.keyup.bind(this), !1);
          ig.system.canvas.addEventListener("mousemove", this.mousemove.bind(this), !1);
          ig.ua.touchDevice && (ig.system.canvas.addEventListener("touchstart", this.keydown.bind(this), !1), ig.system.canvas.addEventListener("touchend", this.keyup.bind(this), !1), ig.system.canvas.addEventListener("touchmove", this.mousemove.bind(this), !1), ig.system.canvas.addEventListener("MSPointerDown", this.keydown.bind(this), !1), ig.system.canvas.addEventListener("MSPointerUp", this.keyup.bind(this), !1), ig.system.canvas.addEventListener("MSPointerMove", this.mousemove.bind(this), !1), ig.system.canvas.style.msTouchAction = "none");
        }
      },
      initKeyboard: function () {
        this.isUsingKeyboard || (this.isUsingKeyboard = !0, window.addEventListener("keydown", this.keydown.bind(this), !1), window.addEventListener("keyup", this.keyup.bind(this), !1));
      },
      initAccelerometer: function () {
        this.isUsingAccelerometer || window.addEventListener("devicemotion", this.devicemotion.bind(this), !1);
      },
      mousewheel: function (b) {
        var c = this.bindings[0 < (b.wheelDelta ? b.wheelDelta : -1 * b.detail) ? ig.KEY.MWHEEL_UP : ig.KEY.MWHEEL_DOWN];
        c && (this.actions[c] = !0, this.presses[c] = !0, this.delayedKeyup[c] = !0, b.stopPropagation(), b.preventDefault());
      },
      mousemove: function (b) {
        var c = parseInt(ig.system.canvas.offsetWidth) || ig.system.realWidth;
        ig.ua.mobile && (c = ig.system.realWidth);
        var c = ig.system.scale * (c / ig.system.realWidth),
          d = {
            left: 0,
            top: 0
          };
        ig.system.canvas.getBoundingClientRect && (d = ig.system.canvas.getBoundingClientRect());
        b = b.touches ? b.touches[0] : b;
        this.mouse.x = (b.clientX - d.left) / c;
        this.mouse.y = (b.clientY - d.top) / c;
      },
      contextmenu: function (b) {
        this.bindings[ig.KEY.MOUSE2] && (b.stopPropagation(), b.preventDefault());
      },
      keydown: function (b) {
        var c = b.target.tagName;
        if (!("INPUT" == c || "TEXTAREA" == c)) if (c = "keydown" == b.type ? b.keyCode : 2 == b.button ? ig.KEY.MOUSE2 : ig.KEY.MOUSE1, ("touchstart" == b.type || "mousedown" == b.type) && this.mousemove(b), c = this.bindings[c]) this.actions[c] = !0, this.locks[c] || (this.presses[c] = !0, this.locks[c] = !0), b.stopPropagation(), b.preventDefault();
      },
      keyup: function (b) {
        var c = b.target.tagName;
        if (!("INPUT" == c || "TEXTAREA" == c)) if (c = this.bindings["keyup" == b.type ? b.keyCode : 2 == b.button ? ig.KEY.MOUSE2 : ig.KEY.MOUSE1]) this.delayedKeyup[c] = !0, b.stopPropagation(), b.preventDefault();
      },
      devicemotion: function (b) {
        this.accel = b.accelerationIncludingGravity;
      },
      bind: function (b, c) {
        0 > b ? this.initMouse() : 0 < b && this.initKeyboard();
        this.bindings[b] = c;
      },
      bindTouch: function (b, c) {
        var d = ig.$(b),
          e = this;
        d.addEventListener("touchstart", function (b) {
          e.touchStart(b, c);
        }, !1);
        d.addEventListener("touchend", function (b) {
          e.touchEnd(b, c);
        }, !1);
        d.addEventListener("MSPointerDown", function (b) {
          e.touchStart(b, c);
        }, !1);
        d.addEventListener("MSPointerUp", function (b) {
          e.touchEnd(b, c);
        }, !1);
      },
      unbind: function (b) {
        this.delayedKeyup[this.bindings[b]] = !0;
        this.bindings[b] = null;
      },
      unbindAll: function () {
        this.bindings = {};
        this.actions = {};
        this.presses = {};
        this.locks = {};
        this.delayedKeyup = {};
      },
      state: function (b) {
        return this.actions[b];
      },
      pressed: function (b) {
        return this.presses[b];
      },
      released: function (b) {
        return !!this.delayedKeyup[b];
      },
      clearPressed: function () {
        for (var b in this.delayedKeyup) this.actions[b] = !1, this.locks[b] = !1;
        this.delayedKeyup = {};
        this.presses = {};
      },
      touchStart: function (b, c) {
        this.actions[c] = !0;
        this.presses[c] = !0;
        b.stopPropagation();
        b.preventDefault();
        return !1;
      },
      touchEnd: function (b, c) {
        this.delayedKeyup[c] = !0;
        b.stopPropagation();
        b.preventDefault();
        return !1;
      }
    });
  });
  ig.baked = !0;
  ig.module("impact.impact").requires("dom.ready", "impact.loader", "impact.system", "impact.input", "impact.sound").defines(function () {
    ig.main = function (b, c, d, e, f, j, m) {
      ig.system = new ig.System(b, d, e, f, j || 1);
      ig.input = new ig.Input();
      ig.soundManager = new ig.SoundManager();
      ig.music = new ig.Music();
      ig.ready = !0;
      new (m || ig.Loader)(c, ig.resources).load();
    };
  });
  ig.baked = !0;
  ig.module("impact.animation").requires("impact.timer", "impact.image").defines(function () {
    ig.AnimationSheet = ig.Class.extend({
      width: 8,
      height: 8,
      image: null,
      init: function (b, c, d) {
        this.width = c;
        this.height = d;
        this.image = new ig.Image(b);
      }
    });
    ig.Animation = ig.Class.extend({
      sheet: null,
      timer: null,
      sequence: [],
      flip: {
        x: !1,
        y: !1
      },
      pivot: {
        x: 0,
        y: 0
      },
      frame: 0,
      tile: 0,
      loopCount: 0,
      alpha: 1,
      angle: 0,
      init: function (b, c, d, e) {
        this.sheet = b;
        this.pivot = {
          x: b.width / 2,
          y: b.height / 2
        };
        this.timer = new ig.Timer();
        this.frameTime = c;
        this.sequence = d;
        this.stop = !!e;
        this.tile = this.sequence[0];
      },
      rewind: function () {
        this.timer.set();
        this.frame = this.loopCount = 0;
        this.tile = this.sequence[0];
        return this;
      },
      gotoFrame: function (b) {
        this.timer.set(this.frameTime * -b - 1E-4);
        this.update();
      },
      gotoRandomFrame: function () {
        this.gotoFrame(Math.floor(Math.random() * this.sequence.length));
      },
      update: function () {
        var b = Math.floor(this.timer.delta() / this.frameTime);
        this.loopCount = Math.floor(b / this.sequence.length);
        this.frame = this.stop && 0 < this.loopCount ? this.sequence.length - 1 : b % this.sequence.length;
        this.tile = this.sequence[this.frame];
      },
      draw: function (b, c) {
        var d = Math.max(this.sheet.width, this.sheet.height);
        b > ig.system.width || c > ig.system.height || 0 > b + d || 0 > c + d || (1 != this.alpha && (ig.system.context.globalAlpha = this.alpha), 0 == this.angle ? this.sheet.image.drawTile(b, c, this.tile, this.sheet.width, this.sheet.height, this.flip.x, this.flip.y) : (ig.system.context.save(), ig.system.context.translate(ig.system.getDrawPos(b + this.pivot.x), ig.system.getDrawPos(c + this.pivot.y)), ig.system.context.rotate(this.angle), this.sheet.image.drawTile(-this.pivot.x, -this.pivot.y, this.tile, this.sheet.width, this.sheet.height, this.flip.x, this.flip.y), ig.system.context.restore()), 1 != this.alpha && (ig.system.context.globalAlpha = 1));
      }
    });
  });
  ig.baked = !0;
  ig.module("impact.entity").requires("impact.animation", "impact.impact").defines(function () {
    ig.Entity = ig.Class.extend({
      id: 0,
      settings: {},
      size: {
        x: 16,
        y: 16
      },
      offset: {
        x: 0,
        y: 0
      },
      pos: {
        x: 0,
        y: 0
      },
      last: {
        x: 0,
        y: 0
      },
      vel: {
        x: 0,
        y: 0
      },
      accel: {
        x: 0,
        y: 0
      },
      friction: {
        x: 0,
        y: 0
      },
      maxVel: {
        x: 100,
        y: 100
      },
      zIndex: 0,
      gravityFactor: 0,
      standing: !1,
      bounciness: 0,
      minBounceVelocity: 40,
      anims: {},
      animSheet: null,
      currentAnim: null,
      health: 10,
      type: 0,
      checkAgainst: 0,
      collides: 0,
      _killed: !1,
      slopeStanding: {
        min: 44 .toRad(),
        max: 136 .toRad()
      },
      init: function (b, c, d) {
        this.id = ++ig.Entity._lastId;
        this.pos.x = this.last.x = b;
        this.pos.y = this.last.y = c;
        ig.merge(this, d);
      },
      reset: function (b, c, d) {
        var e = this.constructor.prototype;
        this.pos.x = b;
        this.pos.y = c;
        this.last.x = b;
        this.last.y = c;
        this.vel.x = e.vel.x;
        this.vel.y = e.vel.y;
        this.accel.x = e.accel.x;
        this.accel.y = e.accel.y;
        this.health = e.health;
        this._killed = e._killed;
        this.standing = e.standing;
        this.type = e.type;
        this.checkAgainst = e.checkAgainst;
        this.collides = e.collides;
        ig.merge(this, d);
      },
      addAnim: function (b, c, d, e) {
        if (!this.animSheet) throw "No animSheet to add the animation " + b + " to.";
        c = new ig.Animation(this.animSheet, c, d, e);
        this.anims[b] = c;
        this.currentAnim || (this.currentAnim = c);
        return c;
      },
      update: function () {
        this.last.x = this.pos.x;
        this.last.y = this.pos.y;
        this.vel.y += ig.game.gravity * ig.system.tick * this.gravityFactor;
        this.vel.x = this.getNewVelocity(this.vel.x, this.accel.x, this.friction.x, this.maxVel.x);
        this.vel.y = this.getNewVelocity(this.vel.y, this.accel.y, this.friction.y, this.maxVel.y);
        var b = ig.game.collisionMap.trace(this.pos.x, this.pos.y, this.vel.x * ig.system.tick, this.vel.y * ig.system.tick, this.size.x, this.size.y);
        this.handleMovementTrace(b);
        this.currentAnim && this.currentAnim.update();
      },
      getNewVelocity: function (b, c, d, e) {
        return c ? (b + c * ig.system.tick).limit(-e, e) : d ? (c = d * ig.system.tick, 0 < b - c ? b - c : 0 > b + c ? b + c : 0) : b.limit(-e, e);
      },
      handleMovementTrace: function (b) {
        this.standing = !1;
        b.collision.y && (0 < this.bounciness && Math.abs(this.vel.y) > this.minBounceVelocity ? this.vel.y *= -this.bounciness : (0 < this.vel.y && (this.standing = !0), this.vel.y = 0));
        b.collision.x && (this.vel.x = 0 < this.bounciness && Math.abs(this.vel.x) > this.minBounceVelocity ? this.vel.x * -this.bounciness : 0);
        if (b.collision.slope) {
          var c = b.collision.slope;
          if (0 < this.bounciness) {
            var d = this.vel.x * c.nx + this.vel.y * c.ny;
            this.vel.x = (this.vel.x - 2 * c.nx * d) * this.bounciness;
            this.vel.y = (this.vel.y - 2 * c.ny * d) * this.bounciness;
          } else d = (this.vel.x * c.x + this.vel.y * c.y) / (c.x * c.x + c.y * c.y), this.vel.x = c.x * d, this.vel.y = c.y * d, c = Math.atan2(c.x, c.y), c > this.slopeStanding.min && c < this.slopeStanding.max && (this.standing = !0);
        }
        this.pos = b.pos;
      },
      draw: function () {
        this.currentAnim && this.currentAnim.draw(this.pos.x - this.offset.x - ig.game._rscreen.x, this.pos.y - this.offset.y - ig.game._rscreen.y);
      },
      kill: function () {
        ig.game.removeEntity(this);
      },
      receiveDamage: function (b) {
        this.health -= b;
        0 >= this.health && this.kill();
      },
      touches: function (b) {
        return !(this.pos.x >= b.pos.x + b.size.x || this.pos.x + this.size.x <= b.pos.x || this.pos.y >= b.pos.y + b.size.y || this.pos.y + this.size.y <= b.pos.y);
      },
      distanceTo: function (b) {
        var c = this.pos.x + this.size.x / 2 - (b.pos.x + b.size.x / 2);
        b = this.pos.y + this.size.y / 2 - (b.pos.y + b.size.y / 2);
        return Math.sqrt(c * c + b * b);
      },
      angleTo: function (b) {
        return Math.atan2(b.pos.y + b.size.y / 2 - (this.pos.y + this.size.y / 2), b.pos.x + b.size.x / 2 - (this.pos.x + this.size.x / 2));
      },
      check: function () {},
      collideWith: function () {},
      ready: function () {},
      erase: function () {}
    });
    ig.Entity._lastId = 0;
    ig.Entity.COLLIDES = {
      NEVER: 0,
      LITE: 1,
      PASSIVE: 2,
      ACTIVE: 4,
      FIXED: 8
    };
    ig.Entity.TYPE = {
      NONE: 0,
      A: 1,
      B: 2,
      BOTH: 3
    };
    ig.Entity.checkPair = function (b, c) {
      b.checkAgainst & c.type && b.check(c);
      c.checkAgainst & b.type && c.check(b);
      b.collides && c.collides && b.collides + c.collides > ig.Entity.COLLIDES.ACTIVE && ig.Entity.solveCollision(b, c);
    };
    ig.Entity.solveCollision = function (b, c) {
      var d = null;
      if (b.collides == ig.Entity.COLLIDES.LITE || c.collides == ig.Entity.COLLIDES.FIXED) d = b;else if (c.collides == ig.Entity.COLLIDES.LITE || b.collides == ig.Entity.COLLIDES.FIXED) d = c;
      b.last.x + b.size.x > c.last.x && b.last.x < c.last.x + c.size.x ? (b.last.y < c.last.y ? ig.Entity.seperateOnYAxis(b, c, d) : ig.Entity.seperateOnYAxis(c, b, d), b.collideWith(c, "y"), c.collideWith(b, "y")) : b.last.y + b.size.y > c.last.y && b.last.y < c.last.y + c.size.y && (b.last.x < c.last.x ? ig.Entity.seperateOnXAxis(b, c, d) : ig.Entity.seperateOnXAxis(c, b, d), b.collideWith(c, "x"), c.collideWith(b, "x"));
    };
    ig.Entity.seperateOnXAxis = function (b, c, d) {
      var e = b.pos.x + b.size.x - c.pos.x;
      d ? (d.vel.x = -d.vel.x * d.bounciness + (b === d ? c : b).vel.x, c = ig.game.collisionMap.trace(d.pos.x, d.pos.y, d == b ? -e : e, 0, d.size.x, d.size.y), d.pos.x = c.pos.x) : (d = (b.vel.x - c.vel.x) / 2, b.vel.x = -d, c.vel.x = d, d = ig.game.collisionMap.trace(b.pos.x, b.pos.y, -e / 2, 0, b.size.x, b.size.y), b.pos.x = Math.floor(d.pos.x), b = ig.game.collisionMap.trace(c.pos.x, c.pos.y, e / 2, 0, c.size.x, c.size.y), c.pos.x = Math.ceil(b.pos.x));
    };
    ig.Entity.seperateOnYAxis = function (b, c, d) {
      var e = b.pos.y + b.size.y - c.pos.y;
      if (d) {
        c = b === d ? c : b;
        d.vel.y = -d.vel.y * d.bounciness + c.vel.y;
        var f = 0;
        d == b && Math.abs(d.vel.y - c.vel.y) < d.minBounceVelocity && (d.standing = !0, f = c.vel.x * ig.system.tick);
        b = ig.game.collisionMap.trace(d.pos.x, d.pos.y, f, d == b ? -e : e, d.size.x, d.size.y);
        d.pos.y = b.pos.y;
        d.pos.x = b.pos.x;
      } else ig.game.gravity && (c.standing || 0 < b.vel.y) ? (d = ig.game.collisionMap.trace(b.pos.x, b.pos.y, 0, -(b.pos.y + b.size.y - c.pos.y), b.size.x, b.size.y), b.pos.y = d.pos.y, 0 < b.bounciness && b.vel.y > b.minBounceVelocity ? b.vel.y *= -b.bounciness : (b.standing = !0, b.vel.y = 0)) : (d = (b.vel.y - c.vel.y) / 2, b.vel.y = -d, c.vel.y = d, f = c.vel.x * ig.system.tick, d = ig.game.collisionMap.trace(b.pos.x, b.pos.y, f, -e / 2, b.size.x, b.size.y), b.pos.y = d.pos.y, b = ig.game.collisionMap.trace(c.pos.x, c.pos.y, 0, e / 2, c.size.x, c.size.y), c.pos.y = b.pos.y);
    };
  });
  ig.baked = !0;
  ig.module("impact.map").defines(function () {
    ig.Map = ig.Class.extend({
      tilesize: 8,
      width: 1,
      height: 1,
      data: [[]],
      name: null,
      init: function (b, c) {
        this.tilesize = b;
        this.data = c;
        this.height = c.length;
        this.width = c[0].length;
        this.pxWidth = this.width * this.tilesize;
        this.pxHeight = this.height * this.tilesize;
      },
      getTile: function (b, c) {
        var d = Math.floor(b / this.tilesize),
          e = Math.floor(c / this.tilesize);
        return 0 <= d && d < this.width && 0 <= e && e < this.height ? this.data[e][d] : 0;
      },
      setTile: function (b, c, d) {
        b = Math.floor(b / this.tilesize);
        c = Math.floor(c / this.tilesize);
        0 <= b && b < this.width && 0 <= c && c < this.height && (this.data[c][b] = d);
      }
    });
  });
  ig.baked = !0;
  ig.module("impact.collision-map").requires("impact.map").defines(function () {
    ig.CollisionMap = ig.Map.extend({
      lastSlope: 1,
      tiledef: null,
      init: function (b, c, f) {
        this.parent(b, c);
        this.tiledef = f || ig.CollisionMap.defaultTileDef;
        for (var j in this.tiledef) j | 0 > this.lastSlope && (this.lastSlope = j | 0);
      },
      trace: function (b, c, f, j, m, l) {
        var g = {
            collision: {
              x: !1,
              y: !1,
              slope: !1
            },
            pos: {
              x: b,
              y: c
            },
            tile: {
              x: 0,
              y: 0
            }
          },
          q = Math.ceil(Math.max(Math.abs(f), Math.abs(j)) / this.tilesize);
        if (1 < q) for (var y = f / q, z = j / q, A = 0; A < q && (y || z) && !(this._traceStep(g, b, c, y, z, m, l, f, j, A), b = g.pos.x, c = g.pos.y, g.collision.x && (f = y = 0), g.collision.y && (j = z = 0), g.collision.slope); A++);else this._traceStep(g, b, c, f, j, m, l, f, j, 0);
        return g;
      },
      _traceStep: function (b, c, f, j, m, l, g, q, y, z) {
        b.pos.x += j;
        b.pos.y += m;
        var A = 0;
        if (j) {
          var B = 0 < j ? l : 0,
            H = 0 > j ? this.tilesize : 0,
            A = Math.max(Math.floor(f / this.tilesize), 0),
            D = Math.min(Math.ceil((f + g) / this.tilesize), this.height);
          j = Math.floor((b.pos.x + B) / this.tilesize);
          var s = Math.floor((c + B) / this.tilesize);
          if (0 < z || j == s || 0 > s || s >= this.width) s = -1;
          if (0 <= j && j < this.width) for (var G = A; G < D && !(-1 != s && (A = this.data[G][s], 1 < A && A <= this.lastSlope && this._checkTileDef(b, A, c, f, q, y, l, g, s, G))); G++) if (A = this.data[G][j], 1 == A || A > this.lastSlope || 1 < A && this._checkTileDef(b, A, c, f, q, y, l, g, j, G)) {
            if (1 < A && A <= this.lastSlope && b.collision.slope) break;
            b.collision.x = !0;
            b.tile.x = A;
            c = b.pos.x = j * this.tilesize - B + H;
            q = 0;
            break;
          }
        }
        if (m) {
          B = 0 < m ? g : 0;
          m = 0 > m ? this.tilesize : 0;
          A = Math.max(Math.floor(b.pos.x / this.tilesize), 0);
          H = Math.min(Math.ceil((b.pos.x + l) / this.tilesize), this.width);
          G = Math.floor((b.pos.y + B) / this.tilesize);
          D = Math.floor((f + B) / this.tilesize);
          if (0 < z || G == D || 0 > D || D >= this.height) D = -1;
          if (0 <= G && G < this.height) for (j = A; j < H && !(-1 != D && (A = this.data[D][j], 1 < A && A <= this.lastSlope && this._checkTileDef(b, A, c, f, q, y, l, g, j, D))); j++) if (A = this.data[G][j], 1 == A || A > this.lastSlope || 1 < A && this._checkTileDef(b, A, c, f, q, y, l, g, j, G)) {
            if (1 < A && A <= this.lastSlope && b.collision.slope) break;
            b.collision.y = !0;
            b.tile.y = A;
            b.pos.y = G * this.tilesize - B + m;
            break;
          }
        }
      },
      _checkTileDef: function (b, c, f, j, m, l, g, q, y, z) {
        var A = this.tiledef[c];
        if (!A) return !1;
        c = (A[2] - A[0]) * this.tilesize;
        var B = (A[3] - A[1]) * this.tilesize,
          H = A[4];
        g = f + m + (0 > B ? g : 0) - (y + A[0]) * this.tilesize;
        q = j + l + (0 < c ? q : 0) - (z + A[1]) * this.tilesize;
        if (0 < c * q - B * g) {
          if (0 > m * -B + l * c) return H;
          y = Math.sqrt(c * c + B * B);
          z = B / y;
          y = -c / y;
          var D = g * z + q * y,
            A = z * D,
            D = y * D;
          if (A * A + D * D >= m * m + l * l) return H || 0.5 > c * (q - l) - B * (g - m);
          b.pos.x = f + m - A;
          b.pos.y = j + l - D;
          b.collision.slope = {
            x: c,
            y: B,
            nx: z,
            ny: y
          };
          return !0;
        }
        return !1;
      }
    });
    var b = 1 / 3,
      c = 2 / 3;
    ig.CollisionMap.defaultTileDef = {
      5: [0, 1, 1, c, !0],
      6: [0, c, 1, b, !0],
      7: [0, b, 1, 0, !0],
      3: [0, 1, 1, 0.5, !0],
      4: [0, 0.5, 1, 0, !0],
      2: [0, 1, 1, 0, !0],
      10: [0.5, 1, 1, 0, !0],
      21: [0, 1, 0.5, 0, !0],
      32: [c, 1, 1, 0, !0],
      43: [b, 1, c, 0, !0],
      54: [0, 1, b, 0, !0],
      27: [0, 0, 1, b, !0],
      28: [0, b, 1, c, !0],
      29: [0, c, 1, 1, !0],
      25: [0, 0, 1, 0.5, !0],
      26: [0, 0.5, 1, 1, !0],
      24: [0, 0, 1, 1, !0],
      11: [0, 0, 0.5, 1, !0],
      22: [0.5, 0, 1, 1, !0],
      33: [0, 0, b, 1, !0],
      44: [b, 0, c, 1, !0],
      55: [c, 0, 1, 1, !0],
      16: [1, b, 0, 0, !0],
      17: [1, c, 0, b, !0],
      18: [1, 1, 0, c, !0],
      14: [1, 0.5, 0, 0, !0],
      15: [1, 1, 0, 0.5, !0],
      13: [1, 1, 0, 0, !0],
      8: [0.5, 1, 0, 0, !0],
      19: [1, 1, 0.5, 0, !0],
      30: [b, 1, 0, 0, !0],
      41: [c, 1, b, 0, !0],
      52: [1, 1, c, 0, !0],
      38: [1, c, 0, 1, !0],
      39: [1, b, 0, c, !0],
      40: [1, 0, 0, b, !0],
      36: [1, 0.5, 0, 1, !0],
      37: [1, 0, 0, 0.5, !0],
      35: [1, 0, 0, 1, !0],
      9: [1, 0, 0.5, 1, !0],
      20: [0.5, 0, 0, 1, !0],
      31: [1, 0, c, 1, !0],
      42: [c, 0, b, 1, !0],
      53: [b, 0, 0, 1, !0],
      12: [0, 0, 1, 0, !1],
      23: [1, 1, 0, 1, !1],
      34: [1, 0, 1, 1, !1],
      45: [0, 1, 0, 0, !1]
    };
    ig.CollisionMap.staticNoCollision = {
      trace: function (b, c, f, j) {
        return {
          collision: {
            x: !1,
            y: !1,
            slope: !1
          },
          pos: {
            x: b + f,
            y: c + j
          },
          tile: {
            x: 0,
            y: 0
          }
        };
      }
    };
  });
  ig.baked = !0;
  ig.module("impact.background-map").requires("impact.map", "impact.image").defines(function () {
    ig.BackgroundMap = ig.Map.extend({
      tiles: null,
      scroll: {
        x: 0,
        y: 0
      },
      distance: 1,
      repeat: !1,
      tilesetName: "",
      foreground: !1,
      enabled: !0,
      preRender: !1,
      preRenderedChunks: null,
      chunkSize: 512,
      debugChunks: !1,
      anims: {},
      init: function (b, c, d) {
        this.parent(b, c);
        this.setTileset(d);
      },
      setTileset: function (b) {
        this.tilesetName = b instanceof ig.Image ? b.path : b;
        this.tiles = new ig.Image(this.tilesetName);
        this.preRenderedChunks = null;
      },
      setScreenPos: function (b, c) {
        this.scroll.x = b / this.distance;
        this.scroll.y = c / this.distance;
      },
      preRenderMapToChunks: function () {
        var b = this.width * this.tilesize * ig.system.scale,
          c = this.height * this.tilesize * ig.system.scale;
        this.chunkSize = Math.min(Math.max(b, c), this.chunkSize);
        var d = Math.ceil(b / this.chunkSize),
          e = Math.ceil(c / this.chunkSize);
        this.preRenderedChunks = [];
        for (var f = 0; f < e; f++) {
          this.preRenderedChunks[f] = [];
          for (var j = 0; j < d; j++) this.preRenderedChunks[f][j] = this.preRenderChunk(j, f, j == d - 1 ? b - j * this.chunkSize : this.chunkSize, f == e - 1 ? c - f * this.chunkSize : this.chunkSize);
        }
      },
      preRenderChunk: function (b, c, d, e) {
        var f = d / this.tilesize / ig.system.scale + 1,
          j = e / this.tilesize / ig.system.scale + 1,
          m = b * this.chunkSize / ig.system.scale % this.tilesize,
          l = c * this.chunkSize / ig.system.scale % this.tilesize;
        b = Math.floor(b * this.chunkSize / this.tilesize / ig.system.scale);
        c = Math.floor(c * this.chunkSize / this.tilesize / ig.system.scale);
        var g = ig.$new("canvas");
        g.width = d;
        g.height = e;
        g.retinaResolutionEnabled = !1;
        e = g.getContext("2d");
        ig.System.scaleMode(g, e);
        d = ig.system.context;
        ig.system.context = e;
        for (e = 0; e < f; e++) for (var q = 0; q < j; q++) if (e + b < this.width && q + c < this.height) {
          var y = this.data[q + c][e + b];
          y && this.tiles.drawTile(e * this.tilesize - m, q * this.tilesize - l, y - 1, this.tilesize);
        }
        ig.system.context = d;
        return g;
      },
      draw: function () {
        this.tiles.loaded && this.enabled && (this.preRender ? this.drawPreRendered() : this.drawTiled());
      },
      drawPreRendered: function () {
        this.preRenderedChunks || this.preRenderMapToChunks();
        var b = ig.system.getDrawPos(this.scroll.x),
          c = ig.system.getDrawPos(this.scroll.y);
        if (this.repeat) var d = this.width * this.tilesize * ig.system.scale,
          b = (b % d + d) % d,
          d = this.height * this.tilesize * ig.system.scale,
          c = (c % d + d) % d;
        var d = Math.max(Math.floor(b / this.chunkSize), 0),
          e = Math.max(Math.floor(c / this.chunkSize), 0),
          f = Math.ceil((b + ig.system.realWidth) / this.chunkSize),
          j = Math.ceil((c + ig.system.realHeight) / this.chunkSize),
          m = this.preRenderedChunks[0].length,
          l = this.preRenderedChunks.length;
        this.repeat || (f = Math.min(f, m), j = Math.min(j, l));
        for (var g = 0; e < j; e++) {
          for (var q = 0, y = d; y < f; y++) {
            var z = this.preRenderedChunks[e % l][y % m],
              A = -b + y * this.chunkSize - q,
              B = -c + e * this.chunkSize - g;
            ig.system.context.drawImage(z, A, B);
            ig.Image.drawCount++;
            this.debugChunks && (ig.system.context.strokeStyle = "#f0f", ig.system.context.strokeRect(A, B, this.chunkSize, this.chunkSize));
            this.repeat && z.width < this.chunkSize && A + z.width < ig.system.realWidth && (q += this.chunkSize - z.width, f++);
          }
          this.repeat && z.height < this.chunkSize && B + z.height < ig.system.realHeight && (g += this.chunkSize - z.height, j++);
        }
      },
      drawTiled: function () {
        for (var b = 0, c = null, d = (this.scroll.x / this.tilesize).toInt(), e = (this.scroll.y / this.tilesize).toInt(), f = this.scroll.x % this.tilesize, j = this.scroll.y % this.tilesize, m = -f - this.tilesize, f = ig.system.width + this.tilesize - f, l = ig.system.height + this.tilesize - j, g = -1, j = -j - this.tilesize; j < l; g++, j += this.tilesize) {
          var q = g + e;
          if (q >= this.height || 0 > q) {
            if (!this.repeat) continue;
            q = (q % this.height + this.height) % this.height;
          }
          for (var y = -1, z = m; z < f; y++, z += this.tilesize) {
            b = y + d;
            if (b >= this.width || 0 > b) {
              if (!this.repeat) continue;
              b = (b % this.width + this.width) % this.width;
            }
            if (b = this.data[q][b]) (c = this.anims[b - 1]) ? c.draw(z, j) : this.tiles.drawTile(z, j, b - 1, this.tilesize);
          }
        }
      }
    });
  });
  ig.baked = !0;
  ig.module("impact.game").requires("impact.impact", "impact.entity", "impact.collision-map", "impact.background-map").defines(function () {
    ig.Game = ig.Class.extend({
      clearColor: "#000000",
      gravity: 0,
      screen: {
        x: 0,
        y: 0
      },
      _rscreen: {
        x: 0,
        y: 0
      },
      entities: [],
      namedEntities: {},
      collisionMap: ig.CollisionMap.staticNoCollision,
      backgroundMaps: [],
      backgroundAnims: {},
      autoSort: !1,
      sortBy: null,
      cellSize: 64,
      _deferredKill: [],
      _levelToLoad: null,
      _doSortEntities: !1,
      staticInstantiate: function () {
        this.sortBy = this.sortBy || ig.Game.SORT.Z_INDEX;
        ig.game = this;
        return null;
      },
      loadLevel: function (b) {
        this.screen = {
          x: 0,
          y: 0
        };
        this.entities = [];
        this.namedEntities = {};
        for (var c = 0; c < b.entities.length; c++) {
          var d = b.entities[c];
          this.spawnEntity(d.type, d.x, d.y, d.settings);
        }
        this.sortEntities();
        this.collisionMap = ig.CollisionMap.staticNoCollision;
        this.backgroundMaps = [];
        for (c = 0; c < b.layer.length; c++) if (d = b.layer[c], "collision" == d.name) this.collisionMap = new ig.CollisionMap(d.tilesize, d.data);else {
          var e = new ig.BackgroundMap(d.tilesize, d.data, d.tilesetName);
          e.anims = this.backgroundAnims[d.tilesetName] || {};
          e.repeat = d.repeat;
          e.distance = d.distance;
          e.foreground = !!d.foreground;
          e.preRender = !!d.preRender;
          e.name = d.name;
          this.backgroundMaps.push(e);
        }
        for (c = 0; c < this.entities.length; c++) this.entities[c].ready();
      },
      loadLevelDeferred: function (b) {
        this._levelToLoad = b;
      },
      getMapByName: function (b) {
        if ("collision" == b) return this.collisionMap;
        for (var c = 0; c < this.backgroundMaps.length; c++) if (this.backgroundMaps[c].name == b) return this.backgroundMaps[c];
        return null;
      },
      getEntityByName: function (b) {
        return this.namedEntities[b];
      },
      getEntitiesByType: function (b) {
        b = "string" === typeof b ? ig.global[b] : b;
        for (var c = [], d = 0; d < this.entities.length; d++) {
          var e = this.entities[d];
          e instanceof b && !e._killed && c.push(e);
        }
        return c;
      },
      spawnEntity: function (b, c, d, e) {
        var f = "string" === typeof b ? ig.global[b] : b;
        if (!f) throw "Can't spawn entity of type " + b;
        b = new f(c, d, e || {});
        this.entities.push(b);
        b.name && (this.namedEntities[b.name] = b);
        return b;
      },
      sortEntities: function () {
        this.entities.sort(this.sortBy);
      },
      sortEntitiesDeferred: function () {
        this._doSortEntities = !0;
      },
      removeEntity: function (b) {
        b.name && delete this.namedEntities[b.name];
        b._killed = !0;
        b.type = ig.Entity.TYPE.NONE;
        b.checkAgainst = ig.Entity.TYPE.NONE;
        b.collides = ig.Entity.COLLIDES.NEVER;
        this._deferredKill.push(b);
      },
      run: function () {
        this.update();
        this.draw();
      },
      update: function () {
        this._levelToLoad && (this.loadLevel(this._levelToLoad), this._levelToLoad = null);
        this.updateEntities();
        this.checkEntities();
        for (var b = 0; b < this._deferredKill.length; b++) this._deferredKill[b].erase(), this.entities.erase(this._deferredKill[b]);
        this._deferredKill = [];
        if (this._doSortEntities || this.autoSort) this.sortEntities(), this._doSortEntities = !1;
        for (var c in this.backgroundAnims) {
          var b = this.backgroundAnims[c],
            d;
          for (d in b) b[d].update();
        }
      },
      updateEntities: function () {
        for (var b = 0; b < this.entities.length; b++) {
          var c = this.entities[b];
          c._killed || c.update();
        }
      },
      draw: function () {
        this.clearColor && ig.system.clear(this.clearColor);
        this._rscreen.x = ig.system.getDrawPos(this.screen.x) / ig.system.scale;
        this._rscreen.y = ig.system.getDrawPos(this.screen.y) / ig.system.scale;
        var b;
        for (b = 0; b < this.backgroundMaps.length; b++) {
          var c = this.backgroundMaps[b];
          if (c.foreground) break;
          c.setScreenPos(this.screen.x, this.screen.y);
          c.draw();
        }
        this.drawEntities();
        for (b; b < this.backgroundMaps.length; b++) c = this.backgroundMaps[b], c.setScreenPos(this.screen.x, this.screen.y), c.draw();
      },
      drawEntities: function () {
        for (var b = 0; b < this.entities.length; b++) this.entities[b].draw();
      },
      checkEntities: function () {
        for (var b = {}, c = 0; c < this.entities.length; c++) {
          var d = this.entities[c];
          if (!(d.type == ig.Entity.TYPE.NONE && d.checkAgainst == ig.Entity.TYPE.NONE && d.collides == ig.Entity.COLLIDES.NEVER)) for (var e = {}, f = Math.floor(d.pos.y / this.cellSize), j = Math.floor((d.pos.x + d.size.x) / this.cellSize) + 1, m = Math.floor((d.pos.y + d.size.y) / this.cellSize) + 1, l = Math.floor(d.pos.x / this.cellSize); l < j; l++) for (var g = f; g < m; g++) if (b[l]) {
            if (b[l][g]) {
              for (var q = b[l][g], y = 0; y < q.length; y++) d.touches(q[y]) && !e[q[y].id] && (e[q[y].id] = !0, ig.Entity.checkPair(d, q[y]));
              q.push(d);
            } else b[l][g] = [d];
          } else b[l] = {}, b[l][g] = [d];
        }
      }
    });
    ig.Game.SORT = {
      Z_INDEX: function (b, c) {
        return b.zIndex - c.zIndex;
      },
      POS_X: function (b, c) {
        return b.pos.x + b.size.x - (c.pos.x + c.size.x);
      },
      POS_Y: function (b, c) {
        return b.pos.y + b.size.y - (c.pos.y + c.size.y);
      }
    };
  });
  ig.baked = !0;
  ig.module("plugins.patches.webkit-image-smoothing-patch").defines(function () {
    ig.System && (ig.System.SCALE = {
      CRISP: function (b, c) {
        c.imageSmoothingEnabled = c.msImageSmoothingEnabled = c.mozImageSmoothingEnabled = c.oImageSmoothingEnabled = !1;
        b.style.imageRendering = "-moz-crisp-edges";
        b.style.imageRendering = "-o-crisp-edges";
        b.style.imageRendering = "-webkit-optimize-contrast";
        b.style.imageRendering = "crisp-edges";
        b.style.msInterpolationMode = "nearest-neighbor";
      },
      SMOOTH: function (b, c) {
        c.imageSmoothingEnabled = c.msImageSmoothingEnabled = c.mozImageSmoothingEnabled = c.oImageSmoothingEnabled = !0;
        b.style.imageRendering = "";
        b.style.msInterpolationMode = "";
      }
    }, ig.System.scaleMode = ig.System.SCALE.SMOOTH);
  });
  ig.baked = !0;
  ig.module("plugins.patches.windowfocus-onMouseDown-patch").defines(function () {
    var b = !1;
    try {
      b = window.self !== window.top, !1 === b && (b = 0 < window.frames.length);
    } catch (c) {
      b = !0;
    }
    ig.Input.inject({
      keydown: function (c) {
        var e = c.target.tagName;
        if (!("INPUT" == e || "TEXTAREA" == e)) if (e = "keydown" == c.type ? c.keyCode : 2 == c.button ? ig.KEY.MOUSE2 : ig.KEY.MOUSE1, b && 0 > e && window.focus(), ("touchstart" == c.type || "mousedown" == c.type) && this.mousemove(c), e = this.bindings[e]) this.actions[e] = !0, this.locks[e] || (this.presses[e] = !0, this.locks[e] = !0), c.stopPropagation(), c.preventDefault();
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.handlers.dom-handler").defines(function () {
    ig.DomHandler = ig.Class.extend({
      JQUERYAVAILABLE: !1,
      init: function () {
        this.JQUERYAVAILABLE = this._jqueryAvailable();
      },
      _jqueryAvailable: function () {
        return "undefined" !== typeof jQuery;
      },
      addEvent: function (b, c, d, e) {
        if (this.JQUERYAVAILABLE) b.on(c, d);else b.addEventListener(c, d, e);
      },
      create: function (b) {
        return this.JQUERYAVAILABLE ? $("<" + b + ">") : ig.$new(b);
      },
      getElementByClass: function (b) {
        return this.JQUERYAVAILABLE ? $("." + b) : document.getElementsByClassName(b);
      },
      getElementById: function (b) {
        return this.JQUERYAVAILABLE ? 0 < $(b).length ? $(b) : null : ig.$(b);
      },
      appendChild: function (b, c) {
        this.JQUERYAVAILABLE ? b.append(c) : b.appendChild(c);
      },
      appendToBody: function (b) {
        this.JQUERYAVAILABLE ? $("body").append(b) : document.body.appendChild(b);
      },
      resize: function (b, c, d) {
        if (this.JQUERYAVAILABLE) b.width(c.toFixed(2)), b.height(d.toFixed(2));else {
          var e = b.style.visibility;
          c = "width:" + c.toFixed(2) + "px; height:" + d.toFixed(2) + "px;";
          this.attr(b, "style", c);
          b.style.visibility = e;
        }
      },
      resizeOffsetLeft: function (b, c, d, e) {
        if (this.JQUERYAVAILABLE) b.width(c.toFixed(2)), b.height(d.toFixed(2)), b.css("left", e);else {
          var f = b.style.visibility;
          c = "width:" + c.toFixed(2) + "px; height:" + d.toFixed(2) + "px; left: " + e.toFixed(2) + "px;";
          this.attr(b, "style", c);
          b.style.visibility = f;
        }
      },
      resizeOffset: function (b, c, d, e, f) {
        if (this.JQUERYAVAILABLE) b.width(c.toFixed(2)), b.height(d.toFixed(2)), b.css("left", e), b.css("top", f);else {
          var j = b.style.visibility;
          c = "width:" + c.toFixed(2) + "px; height:" + d.toFixed(2) + "px; left: " + e.toFixed(2) + "px; top: " + f.toFixed(2) + "px;";
          this.attr(b, "style", c);
          b.style.visibility = j;
        }
      },
      css: function (b, c) {
        if (this.JQUERYAVAILABLE) b.css(c);else {
          var d = "",
            e;
          for (e in c) d += e + ":" + c[e] + ";";
          this.attr(b, "style", d);
        }
      },
      getOffsets: function (b) {
        return this.JQUERYAVAILABLE ? (b = b.offset(), {
          left: b.left,
          top: b.top
        }) : {
          left: b.offsetLeft,
          top: b.offsetTop
        };
      },
      attr: function (b, c, d) {
        if ("undefined" === typeof d) return this.JQUERYAVAILABLE ? b.attr(c) : b.getAttribute(c);
        this.JQUERYAVAILABLE ? b.attr(c, d) : b.setAttribute(c, d);
      },
      show: function (b) {
        this.JQUERYAVAILABLE ? (b.show(), b.css("visibility", "visible")) : b && (b.style ? b.style.visibility = "visible" : b[0] && (b[0].style.visibility = "visible"));
      },
      hide: function (b) {
        this.JQUERYAVAILABLE ? (b.hide(), b.css("visibility", "hidden")) : b && (b.style ? b.style.visibility = "hidden" : b[0] && (b[0].style.visibility = "hidden"));
      },
      getQueryVariable: function (b) {
        for (var c = window.location.search.substring(1).split("&"), d = 0; d < c.length; d++) {
          var e = c[d].split("=");
          if (decodeURIComponent(e[0]) == b) return decodeURIComponent(e[1]);
        }
      },
      forcedDeviceDetection: function () {
        var b = this.getQueryVariable("device");
        if (b) switch (b) {
          case "mobile":
            console.log("serving mobile version ...");
            ig.ua.mobile = !0;
            break;
          case "desktop":
            console.log("serving desktop version ...");
            ig.ua.mobile = !1;
            break;
          default:
            console.log("serving universal version ...");
        } else console.log("serving universal version ...");
      },
      forcedDeviceRotation: function () {
        var b = this.getQueryVariable("force-rotate");
        if (b) switch (b) {
          case "portrait":
            console.log("force rotate to portrait");
            window.orientation = 0;
            break;
          case "landscape":
            console.log("force rotate to horizontal");
            window.orientation = 90;
            break;
          default:
            alert("wrong command/type in param force-rotate. Defaulting value to portrait"), window.orientation = 0;
        }
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.data.vector").defines(function () {
    Vector2 = function (b, c) {
      this.x = b || 0;
      this.y = c || 0;
    };
    Vector2.prototype = {
      valType: "number",
      neg: function () {
        this.x = -this.x;
        this.y = -this.y;
        return this;
      },
      row: function (b) {
        typeof b === this.valType && (this.y = b);
        return this.y;
      },
      col: function (b) {
        typeof b === this.valType && (this.x = b);
        return this.x;
      },
      add: function (b) {
        b instanceof Vector2 ? (this.x += b.x, this.y += b.y) : (this.x += b, this.y += b);
        return this;
      },
      sub: function (b) {
        b instanceof Vector2 ? (this.x -= b.x, this.y -= b.y) : (this.x -= b, this.y -= b);
        return this;
      },
      mul: function (b) {
        b instanceof Vector2 ? (this.x *= b.x, this.y *= b.y) : (this.x *= b, this.y *= b);
        return this;
      },
      div: function (b) {
        b instanceof Vector2 ? (0 != b.x && (this.x /= b.x), 0 != b.y && (this.y /= b.y)) : 0 != b && (this.x /= b, this.y /= b);
        return this;
      },
      equals: function (b) {
        return this.x == b.x && this.y == b.y;
      },
      dot: function (b) {
        return this.x * b.x + this.y * b.y;
      },
      cross: function (b) {
        return this.x * b.y - this.y * b.x;
      },
      length: function () {
        return Math.sqrt(this.dot(this));
      },
      norm: function () {
        return this.divide(this.length());
      },
      min: function () {
        return Math.min(this.x, this.y);
      },
      max: function () {
        return Math.max(this.x, this.y);
      },
      toAngles: function () {
        return -Math.atan2(-this.y, this.x);
      },
      angleTo: function (b) {
        return Math.acos(this.dot(b) / (this.length() * b.length()));
      },
      toArray: function (b) {
        return [this.x, this.y].slice(0, b || 2);
      },
      clone: function () {
        return new Vector2(this.x, this.y);
      },
      set: function (b, c) {
        this.x = b;
        this.y = c;
        return this;
      },
      unit: function () {
        var b = this.length();
        if (0 < b) return new Vector2(this.x / b, this.y / b);
        throw "Divide by 0 error in unitVector function of vector:" + this;
      },
      turnRight: function () {
        var b = this.x;
        this.x = -this.y;
        this.y = b;
        return this;
      },
      turnLeft: function () {
        var b = this.x;
        this.x = this.y;
        this.y = -b;
        return this;
      },
      rotate: function (b) {
        var c = this.clone();
        this.x = c.x * Math.cos(b) - c.y * Math.sin(b);
        this.y = c.x * Math.sin(b) + c.y * Math.cos(b);
        return this;
      }
    };
    Vector2.negative = function (b) {
      return new Vector2(-b.x, -b.y);
    };
    Vector2.add = function (b, c) {
      return c instanceof Vector2 ? new Vector2(b.x + c.x, b.y + c.y) : new Vector2(b.x + v, b.y + v);
    };
    Vector2.subtract = function (b, c) {
      return c instanceof Vector2 ? new Vector2(b.x - c.x, b.y - c.y) : new Vector2(b.x - v, b.y - v);
    };
    Vector2.multiply = function (b, c) {
      return c instanceof Vector2 ? new Vector2(b.x * c.x, b.y * c.y) : new Vector2(b.x * v, b.y * v);
    };
    Vector2.divide = function (b, c) {
      return c instanceof Vector2 ? new Vector2(b.x / c.x, b.y / c.y) : new Vector2(b.x / v, b.y / v);
    };
    Vector2.equals = function (b, c) {
      return b.x == c.x && b.y == c.y;
    };
    Vector2.dot = function (b, c) {
      return b.x * c.x + b.y * c.y;
    };
    Vector2.cross = function (b, c) {
      return b.x * c.y - b.y * c.x;
    };
  });
  ig.baked = !0;
  ig.module("plugins.handlers.size-handler").requires("plugins.data.vector").defines(function () {
    ig.SizeHandler = ig.Class.extend({
      portraitMode: !1,
      disableStretchToFitOnMobileFlag: !1,
      enableStretchToFitOnAntiPortraitModeFlag: !0,
      enableScalingLimitsOnMobileFlag: !1,
      minScalingOnMobile: 0,
      maxScalingOnMobile: 1,
      enableStretchToFitOnDesktopFlag: !1,
      enableScalingLimitsOnDesktopFlag: !1,
      minScalingOnDesktop: 0,
      maxScalingOnDesktop: 1,
      desktop: {
        actualSize: new Vector2(window.innerWidth, window.innerHeight),
        actualResolution: new Vector2(960, 540)
      },
      mobile: {
        actualSize: new Vector2(window.innerWidth, window.innerHeight),
        actualResolution: new Vector2(960, 540)
      },
      windowSize: new Vector2(window.innerWidth, window.innerHeight),
      scaleRatioMultiplier: new Vector2(1, 1),
      sizeRatio: new Vector2(1, 1),
      scale: 1,
      domHandler: null,
      dynamicClickableEntityDivs: {},
      coreDivsToResize: ["#canvas", "#play", "#orientate"],
      adsToResize: {
        MobileAdInGamePreroll: {
          "box-width": _SETTINGS.Ad.Mobile.Preroll.Width + 2,
          "box-height": _SETTINGS.Ad.Mobile.Preroll.Height + 20
        },
        MobileAdInGameEnd: {
          "box-width": _SETTINGS.Ad.Mobile.End.Width + 2,
          "box-height": _SETTINGS.Ad.Mobile.End.Height + 20
        },
        MobileAdInGamePreroll2: {
          "box-width": _SETTINGS.Ad.Mobile.Preroll.Width + 2,
          "box-height": _SETTINGS.Ad.Mobile.Preroll.Height + 20
        },
        MobileAdInGameEnd2: {
          "box-width": _SETTINGS.Ad.Mobile.End.Width + 2,
          "box-height": _SETTINGS.Ad.Mobile.End.Height + 20
        },
        MobileAdInGamePreroll3: {
          "box-width": _SETTINGS.Ad.Mobile.Preroll.Width + 2,
          "box-height": _SETTINGS.Ad.Mobile.Preroll.Height + 20
        },
        MobileAdInGameEnd3: {
          "box-width": _SETTINGS.Ad.Mobile.End.Width + 2,
          "box-height": _SETTINGS.Ad.Mobile.End.Height + 20
        }
      },
      init: function (b) {
        this.domHandler = b;
        if ("undefined" === typeof b) throw "undefined Dom Handler for Size Handler";
        this.sizeCalcs();
        this.eventListenerSetup();
        this.samsungFix();
      },
      sizeCalcs: function () {
        this.windowSize = new Vector2(window.innerWidth, window.innerHeight);
        if (ig.ua.mobile) {
          this.mobile.actualSize = new Vector2(window.innerWidth, window.innerHeight);
          var b = new Vector2(this.mobile.actualResolution.x, this.mobile.actualResolution.y);
          this.scaleRatioMultiplier = new Vector2(this.mobile.actualSize.x / b.x, this.mobile.actualSize.y / b.y);
          if (this.disableStretchToFitOnMobileFlag) {
            var c = Math.min(this.scaleRatioMultiplier.x, this.scaleRatioMultiplier.y);
            this.enableScalingLimitsOnMobileFlag && (c = c.limit(this.minScalingOnMobile, this.maxScalingOnMobile));
            this.mobile.actualSize.x = b.x * c;
            this.mobile.actualSize.y = b.y * c;
            this.scaleRatioMultiplier.x = c;
            this.scaleRatioMultiplier.y = c;
          } else this.sizeRatio.x = this.scaleRatioMultiplier.x, this.sizeRatio.y = this.scaleRatioMultiplier.y, this.scaleRatioMultiplier.x = 1, this.scaleRatioMultiplier.y = 1;
        } else this.desktop.actualSize = new Vector2(window.innerWidth, window.innerHeight), b = new Vector2(this.desktop.actualResolution.x, this.desktop.actualResolution.y), this.scaleRatioMultiplier = new Vector2(this.desktop.actualSize.x / b.x, this.desktop.actualSize.y / b.y), this.enableStretchToFitOnDesktopFlag ? (this.sizeRatio.x = this.scaleRatioMultiplier.x, this.sizeRatio.y = this.scaleRatioMultiplier.y, this.scaleRatioMultiplier.x = 1, this.scaleRatioMultiplier.y = 1) : (c = Math.min(this.scaleRatioMultiplier.x, this.scaleRatioMultiplier.y), this.enableScalingLimitsOnDesktopFlag && (c = c.limit(this.minScalingOnDesktop, this.maxScalingOnDesktop)), this.desktop.actualSize.x = b.x * c, this.desktop.actualSize.y = b.y * c, this.scaleRatioMultiplier.x = c, this.scaleRatioMultiplier.y = c);
      },
      resizeLayers: function () {
        for (var b = 0; b < this.coreDivsToResize.length; b++) {
          var c = ig.domHandler.getElementById(this.coreDivsToResize[b]);
          if (ig.ua.mobile) {
            if (this.disableStretchToFitOnMobileFlag) {
              var d = Math.floor(ig.sizeHandler.windowSize.x / 2 - ig.sizeHandler.mobile.actualSize.x / 2),
                e = Math.floor(ig.sizeHandler.windowSize.y / 2 - ig.sizeHandler.mobile.actualSize.y / 2);
              0 > d && (d = 0);
              0 > e && (e = 0);
              ig.domHandler.resizeOffset(c, Math.floor(ig.sizeHandler.mobile.actualSize.x), Math.floor(ig.sizeHandler.mobile.actualSize.y), d, e);
              var f = !1;
              if (this.portraitMode ? window.innerHeight < window.innerWidth : window.innerHeight > window.innerWidth) if (this.enableStretchToFitOnAntiPortraitModeFlag) ig.domHandler.resizeOffset(c, Math.floor(window.innerWidth), Math.floor(window.innerHeight), 0, 0);else {
                var f = new Vector2(window.innerWidth / this.mobile.actualResolution.y, window.innerHeight / this.mobile.actualResolution.x),
                  d = Math.min(f.x, f.y),
                  f = this.mobile.actualResolution.y * d,
                  j = this.mobile.actualResolution.x * d,
                  d = Math.floor(ig.sizeHandler.windowSize.x / 2 - f / 2),
                  e = Math.floor(ig.sizeHandler.windowSize.y / 2 - j / 2);
                0 > d && (d = 0);
                0 > e && (e = 0);
                ig.domHandler.resizeOffset(c, Math.floor(f), Math.floor(j), d, e);
              }
            } else ig.domHandler.resize(c, Math.floor(ig.sizeHandler.mobile.actualSize.x), Math.floor(ig.sizeHandler.mobile.actualSize.y));
          } else this.enableStretchToFitOnDesktopFlag ? ig.domHandler.resize(c, Math.floor(ig.sizeHandler.desktop.actualSize.x), Math.floor(ig.sizeHandler.desktop.actualSize.y)) : (d = Math.floor(ig.sizeHandler.windowSize.x / 2 - ig.sizeHandler.desktop.actualSize.x / 2), e = Math.floor(ig.sizeHandler.windowSize.y / 2 - ig.sizeHandler.desktop.actualSize.y / 2), 0 > d && (d = 0), 0 > e && (e = 0), ig.domHandler.resizeOffset(c, Math.floor(ig.sizeHandler.desktop.actualSize.x), Math.floor(ig.sizeHandler.desktop.actualSize.y), d, e));
        }
        for (var m in this.adsToResize) b = ig.domHandler.getElementById("#" + m), c = ig.domHandler.getElementById("#" + m + "-Box"), f = (window.innerWidth - this.adsToResize[m]["box-width"]) / 2 + "px", d = (window.innerHeight - this.adsToResize[m]["box-height"]) / 2 + "px", b && ig.domHandler.css(b, {
          width: window.innerWidth,
          height: window.innerHeight
        }), c && ig.domHandler.css(c, {
          left: f,
          top: d
        });
        b = ig.domHandler.getElementById("#canvas");
        c = ig.domHandler.getOffsets(b);
        b = c.left;
        c = c.top;
        f = Math.min(ig.sizeHandler.scaleRatioMultiplier.x, ig.sizeHandler.scaleRatioMultiplier.y);
        for (m in this.dynamicClickableEntityDivs) {
          d = ig.domHandler.getElementById("#" + m);
          if (ig.ua.mobile) {
            var j = this.dynamicClickableEntityDivs[m].entity_pos_x,
              l = this.dynamicClickableEntityDivs[m].entity_pos_y,
              g = this.dynamicClickableEntityDivs[m].width,
              e = this.dynamicClickableEntityDivs[m].height;
            this.disableStretchToFitOnMobileFlag ? (j = Math.floor(b + j * this.scaleRatioMultiplier.x) + "px", l = Math.floor(c + l * this.scaleRatioMultiplier.y) + "px", g = Math.floor(g * this.scaleRatioMultiplier.x) + "px", e = Math.floor(e * this.scaleRatioMultiplier.y) + "px") : (j = Math.floor(j * this.sizeRatio.x) + "px", l = Math.floor(l * this.sizeRatio.y) + "px", g = Math.floor(g * this.sizeRatio.x) + "px", e = Math.floor(e * this.sizeRatio.y) + "px");
          } else j = this.dynamicClickableEntityDivs[m].entity_pos_x, l = this.dynamicClickableEntityDivs[m].entity_pos_y, g = this.dynamicClickableEntityDivs[m].width, e = this.dynamicClickableEntityDivs[m].height, this.enableStretchToFitOnDesktopFlag ? (j = Math.floor(j * this.sizeRatio.x) + "px", l = Math.floor(l * this.sizeRatio.y) + "px", g = Math.floor(g * this.sizeRatio.x) + "px", e = Math.floor(e * this.sizeRatio.y) + "px") : (j = Math.floor(b + j * this.scaleRatioMultiplier.x) + "px", l = Math.floor(c + l * this.scaleRatioMultiplier.y) + "px", g = Math.floor(g * this.scaleRatioMultiplier.x) + "px", e = Math.floor(e * this.scaleRatioMultiplier.y) + "px");
          ig.domHandler.css(d, {
            "float": "left",
            position: "absolute",
            left: j,
            top: l,
            width: g,
            height: e,
            "z-index": 3
          });
          this.dynamicClickableEntityDivs[m]["font-size"] && ig.domHandler.css(d, {
            "font-size": this.dynamicClickableEntityDivs[m]["font-size"] * f + "px"
          });
        }
        $("#ajaxbar").width(this.windowSize.x);
        $("#ajaxbar").height(this.windowSize.y);
      },
      resize: function () {
        this.sizeCalcs();
        this.resizeLayers();
      },
      reorient: function () {
        console.log("changing orientation ...");
        if (ig.ua.mobile) {
          var b = !1,
            b = this.portraitMode ? window.innerHeight < window.innerWidth : window.innerHeight > window.innerWidth,
            c = this.domHandler.getElementById("#orientate"),
            d = this.domHandler.getElementById("#game");
          b ? (this.domHandler.show(c), this.domHandler.hide(d), console.log("portrait" + window.innerWidth + "," + window.innerHeight)) : (this.domHandler.show(d), this.domHandler.hide(c), console.log("landscape" + window.innerWidth + "," + window.innerHeight));
        }
        ig.ua.mobile ? (this.resize(), this.resizeAds()) : this.resize();
      },
      resizeAds: function () {
        for (var b in this.adsToResize) {
          var c = ig.domHandler.getElementById("#" + b),
            d = ig.domHandler.getElementById("#" + b + "-Box"),
            e = (window.innerWidth - this.adsToResize[b]["box-width"]) / 2 + "px",
            f = (window.innerHeight - this.adsToResize[b]["box-height"]) / 2 + "px";
          c && ig.domHandler.css(c, {
            width: window.innerWidth,
            height: window.innerHeight
          });
          d && ig.domHandler.css(d, {
            left: e,
            top: f
          });
        }
      },
      samsungFix: function () {
        ig.ua.android && !(4.2 > parseFloat(navigator.userAgent.slice(navigator.userAgent.indexOf("Android") + 8, navigator.userAgent.indexOf("Android") + 11))) && !(0 > navigator.userAgent.indexOf("GT")) && !(0 < navigator.userAgent.indexOf("Chrome")) && !(0 < navigator.userAgent.indexOf("Firefox")) && (document.addEventListener("touchstart", function (b) {
          b.preventDefault();
          return !1;
        }, !1), document.addEventListener("touchmove", function (b) {
          b.preventDefault();
          return !1;
        }, !1), document.addEventListener("touchend", function (b) {
          b.preventDefault();
          return !1;
        }, !1));
      },
      orientationInterval: null,
      orientationTimeout: null,
      orientationHandler: function () {
        this.reorient();
        window.scrollTo(0, 1);
      },
      orientationDelayHandler: function () {
        null == this.orientationInterval && (this.orientationInterval = window.setInterval(this.orientationHandler.bind(this), 100));
        null == this.orientationTimeout && (this.orientationTimeout = window.setTimeout(function () {
          this.clearAllIntervals();
        }.bind(this), 2E3));
      },
      clearAllIntervals: function () {
        window.clearInterval(this.orientationInterval);
        this.orientationInterval = null;
        window.clearTimeout(this.orientationTimeout);
        this.orientationTimeout = null;
      },
      eventListenerSetup: function () {
        ig.ua.iOS ? (window.addEventListener("orientationchange", this.orientationDelayHandler.bind(this)), window.addEventListener("resize", this.orientationDelayHandler.bind(this))) : (window.addEventListener("orientationchange", this.orientationHandler.bind(this)), window.addEventListener("resize", this.orientationHandler.bind(this)));
        document.ontouchmove = function (b) {
          window.scrollTo(0, 1);
          b.preventDefault();
        };
        this.chromePullDownRefreshFix();
      },
      chromePullDownRefreshFix: function () {
        var b = window.chrome || navigator.userAgent.match("CriOS"),
          c = "ontouchstart" in document.documentElement;
        if (b && c) {
          var d = b = !1,
            e = 0,
            f = !1;
          try {
            CSS.supports("overscroll-behavior-y", "contain") && (b = !0);
          } catch (j) {}
          try {
            if (b) return document.body.style.overscrollBehaviorY = "contain";
          } catch (m) {}
          b = document.head || document.body;
          c = document.createElement("style");
          c.type = "text/css";
          c.styleSheet ? c.styleSheet.cssText = "\n      ::-webkit-scrollbar {\n        width: 500x;\n      }\n      ::-webkit-scrollbar-thumb {\n        border-radius: 500px;\n        background-color: rgba(0, 0, 0, 0.2);\n      }\n      body {\n        -webkit-overflow-scrolling: auto!important;\n      }\n    " : c.appendChild(document.createTextNode("\n      ::-webkit-scrollbar {\n        width: 500px;\n      }\n      ::-webkit-scrollbar-thumb {\n        border-radius: 500px;\n        background-color: rgba(0, 0, 0, 0.2);\n      }\n      body {\n        -webkit-overflow-scrolling: auto!important;\n      }\n    "));
          b.appendChild(c);
          try {
            addEventListener("test", null, {
              get passive() {
                d = !0;
              }
            });
          } catch (l) {}
          document.addEventListener("touchstart", function (b) {
            1 === b.touches.length && (e = b.touches[0].clientY, f = 0 === window.pageYOffset);
          }, !!d && {
            passive: !0
          });
          document.addEventListener("touchmove", function (b) {
            var c;
            if (c = f) {
              f = !1;
              c = b.touches[0].clientY;
              var d = c - e;
              c = (e = c, 0 < d);
            }
            if (c) return b.preventDefault();
          }, !!d && {
            passive: !1
          });
        }
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.handlers.api-handler").defines(function () {
    ig.ApiHandler = ig.Class.extend({
      apiAvailable: {
        MJSPreroll: function () {
          ig.ua.mobile && ig.domHandler.JQUERYAVAILABLE && _SETTINGS && _SETTINGS.Ad.Mobile.Preroll.Enabled && MobileAdInGamePreroll.Initialize();
        },
        MJSHeader: function () {
          ig.ua.mobile && ig.domHandler.JQUERYAVAILABLE && _SETTINGS.Ad.Mobile.Header.Enabled && MobileAdInGameHeader.Initialize();
        },
        MJSFooter: function () {
          ig.ua.mobile && ig.domHandler.JQUERYAVAILABLE && _SETTINGS.Ad.Mobile.Footer.Enabled && MobileAdInGameFooter.Initialize();
        },
        MJSEnd: function () {
          ig.ua.mobile && ig.domHandler.JQUERYAVAILABLE && _SETTINGS.Ad.Mobile.End.Enabled && MobileAdInGameEnd.Initialize();
        }
      },
      run: function (b, c) {
        if (this.apiAvailable[b]) this.apiAvailable[b](c);
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.audio.sound-player").defines(function () {
    SoundPlayer = ig.Class.extend({
      tagName: "SoundPlayer",
      stayMuteFlag: !1,
      debug: !1,
      init: function () {
        this.debug && console.log(this.tagName);
      },
      play: function (b) {
        this.debug && console.log("play sound ", b);
      },
      stop: function () {
        this.debug && console.log("stop sound ");
      },
      volume: function () {
        this.debug && console.log("set volume");
      },
      mute: function (b) {
        this.debug && console.log("mute");
        "undefined" === typeof b ? this.stayMuteFlag = !0 : b && (this.stayMuteFlag = !0);
      },
      unmute: function (b) {
        this.debug && console.log("unmute");
        "undefined" === typeof b ? this.stayMuteFlag = !1 : b && (this.stayMuteFlag = !1);
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.audio.impact-music-player").requires("plugins.audio.sound-player").defines(function () {
    ImpactMusicPlayer = SoundPlayer.extend({
      tagName: "ImpactMusicPlayer",
      bgmPlaying: !1,
      soundList: {},
      init: function (b, c) {
        this.parent(b, c);
        for (var d in b) this.soundList[d] = d, ig.music.add(b[d].path + ".*", d);
        c && c.loop && (ig.music.loop = c.loop);
      },
      play: function (b) {
        this.stayMuteFlag || (this.bgmPlaying = !0, "undefined" === typeof b ? ig.music.play(b) : ig.music.play());
      },
      stop: function () {
        this.bgmPlaying = !1;
        ig.music.pause();
      },
      volume: function (b) {
        console.log("impactmusic:", b);
        ig.music.volume = 0 > b ? 0 : isNaN(b) ? 1 : 1 < b ? 1 : b;
      },
      getVolume: function () {
        return ig.music.volume;
      },
      mute: function (b) {
        this.parent(b);
        this.bgmPlaying && this.stop();
      },
      unmute: function (b) {
        this.parent(b);
        this.play();
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.audio.impact-sound-player").requires("plugins.audio.sound-player").defines(function () {
    ImpactSoundPlayer = SoundPlayer.extend({
      tagName: "ImpactSoundPlayer",
      soundList: {},
      init: function (b, c) {
        this.parent(b, c);
        for (var d in b) {
          var e = new ig.Sound(b[d].path + ".*");
          this.soundList[d] = e;
        }
      },
      play: function (b) {
        this.stayMuteFlag || ("object" === typeof b ? (console.log(b + " exists"), b.play()) : "string" === typeof b && this.soundList[b].play());
      },
      stop: function (b) {
        this.parent(b);
        b.stop();
      },
      volume: function (b) {
        ig.soundManager.volume = 0 > b ? 0 : isNaN(b) ? 1 : 1 < b ? 1 : b;
      },
      getVolume: function () {
        return ig.soundManager.volume;
      },
      mute: function (b) {
        this.parent(b);
        ig.Sound.enabled = !1;
      },
      unmute: function (b) {
        this.parent(b);
        ig.Sound.enabled = !0;
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.audio.howler-player").requires("plugins.audio.sound-player").defines(function () {
    HowlerPlayer = SoundPlayer.extend({
      tagName: "HowlerPlayer",
      soundList: {},
      init: function (b, c) {
        this.parent(b, c);
        for (var d in b) {
          var e = b[d].path,
            e = new Howl({
              src: [e + "." + ig.Sound.FORMAT.OGG.ext, e + "." + ig.Sound.FORMAT.MP3.ext]
            });
          this.soundList[d] = e;
        }
      },
      play: function (b) {
        this.stayMuteFlag || ("object" === typeof b ? b.play() : "string" === typeof b && this.soundList[b].play());
      },
      stop: function (b) {
        this.parent(b);
        "object" === typeof b ? b.stop() : "string" === typeof b && this.soundList[b].stop();
      },
      volume: function (b) {
        for (var c in this.soundList) {
          if (0 > b) {
            this.soundList[c].volume(0);
            break;
          }
          isNaN(b) ? this.soundList[c].volume(1) : 1 < b ? this.soundList[c].volume(1) : this.soundList[c].volume(b);
        }
      },
      getVolume: function () {
        for (var b in this.soundList) return this.soundList[b].volume();
      },
      mute: function (b) {
        this.parent(b);
        Howler.mute(!0);
      },
      unmute: function (b) {
        this.parent(b);
        Howler.mute(!1);
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.audio.howler-music-player").requires("plugins.audio.sound-player").defines(function () {
    HowlerMusicPlayer = SoundPlayer.extend({
      tagName: "HowlerMusicPlayer",
      bgmPlaying: !1,
      soundList: {},
      init: function (b, c) {
        this.parent(b, c);
        for (var d in b) {
          var e = b[d].path,
            e = new Howl({
              src: [e + "." + ig.Sound.FORMAT.OGG.ext, e + "." + ig.Sound.FORMAT.MP3.ext],
              loop: !0,
              autoplay: !1,
              onend: function () {}.bind(this)
            });
          this.soundList[d] = e;
        }
      },
      play: function (b) {
        if (!this.stayMuteFlag && !this.bgmPlaying) if ("object" === typeof b) this.bgmPlaying = !0, b.play();else if ("string" === typeof b) this.bgmPlaying = !0, this.soundList[b].play();else for (var c in this.soundList) {
          this.soundList[c].play();
          this.bgmPlaying = !0;
          break;
        }
      },
      stop: function (b) {
        this.parent(b);
        if (this.bgmPlaying) {
          for (var c in this.soundList) this.soundList[c].stop();
          this.bgmPlaying = !1;
        }
      },
      volume: function (b) {
        console.log("howler", b);
        for (var c in this.soundList) {
          if (0 > b) {
            this.soundList[c].volume(0);
            break;
          }
          isNaN(b) ? this.soundList[c].volume(1) : 1 < b ? this.soundList[c].volume(1) : this.soundList[c].volume(b);
        }
      },
      getVolume: function () {
        for (var b in this.soundList) return this.soundList[b].volume();
      },
      mute: function (b) {
        this.parent(b);
        Howler.mute(!0);
      },
      unmute: function (b) {
        this.parent(b);
        Howler.mute(!1);
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.audio.jukebox-player").requires("plugins.audio.sound-player").defines(function () {
    JukeboxPlayer = SoundPlayer.extend({
      tagName: "JukeboxPlayer",
      bgmPlaying: !1,
      soundList: {},
      jukeboxPlayer: null,
      pausePosition: 0,
      premuteVolume: 0,
      minVolume: 0.001,
      init: function (b, c) {
        this.parent(b, c);
        for (var d in b) {
          this.soundList[d] = d;
          var e = b[d].path;
          this.jukeboxPlayer = new jukebox.Player({
            resources: [e + "." + ig.Sound.FORMAT.OGG.ext, e + "." + ig.Sound.FORMAT.MP3.ext],
            autoplay: !1,
            spritemap: {
              music: {
                start: b[d].startMp3,
                end: b[d].endMp3,
                loop: !0
              }
            }
          });
        }
      },
      play: function () {
        this.stayMuteFlag || (this.bgmPlaying = !0, this.pausePosition ? (console.log("resume"), this.jukeboxPlayer.resume(this.pausePosition)) : (console.log("play"), this.jukeboxPlayer.play(this.jukeboxPlayer.settings.spritemap.music.start, !0)), this.premuteVolume = this.getVolume());
      },
      stop: function () {
        this.bgmPlaying = !1;
        this.pausePosition = this.jukeboxPlayer.pause();
      },
      volume: function (b) {
        console.log("jukebox:", b);
        0 >= b ? this.jukeboxPlayer.setVolume(this.minVolume) : isNaN(b) ? this.jukeboxPlayer.setVolume(1) : 1 < b ? this.jukeboxPlayer.setVolume(1) : this.jukeboxPlayer.setVolume(b);
      },
      getVolume: function () {
        return this.jukeboxPlayer.getVolume();
      },
      mute: function (b) {
        this.parent(b);
        this.bgmPlaying && (console.log("jukebox", this.premuteVolume), this.stayMuteFlag || (this.premuteVolume = this.getVolume()), this.jukeboxPlayer.pause(), this.jukeboxPlayer.setVolume(this.minVolume));
      },
      unmute: function (b) {
        this.parent(b);
        this.stayMuteFlag || (console.log("jukebox", this.premuteVolume), this.jukeboxPlayer.setVolume(this.premuteVolume), this.jukeboxPlayer.resume());
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.audio.webaudio-music-player").requires("plugins.audio.sound-player").defines(function () {
    WebaudioMusicPlayer = SoundPlayer.extend({
      tagName: "WebaudioMusicPlayer",
      bgmPlaying: !1,
      isSupported: !1,
      muteFlag: !1,
      pausedTime: 0,
      webaudio: null,
      useHTML5Audio: !1,
      audio: null,
      inactiveAudio: null,
      codecs: null,
      reinitOnPlay: !1,
      inputList: null,
      _volume: 1,
      soundList: {},
      init: function (b) {
        this.webaudio = {
          compatibility: {},
          gainNode: null,
          buffer: null,
          source_loop: {},
          source_once: {}
        };
        try {
          Howler && Howler.ctx ? this.webaudio.context = Howler.ctx : ig && ig.webaudio_ctx ? this.webaudio.context = ig.webaudio_ctx : (this.AudioContext = window.AudioContext || window.webkitAudioContext, this.webaudio.context = new this.AudioContext(), ig.webaudio_ctx = this.webaudio.context), this.isSupported = !0;
        } catch (c) {
          console.log("Web Audio API not supported in this browser."), this.webaudio = null, this.useHTML5Audio = !0;
        }
        if (this.useHTML5Audio) if ("undefined" !== typeof Audio) try {
          new Audio();
        } catch (d) {
          this.useHTML5Audio = !1;
        } else this.useHTML5Audio = !1;
        this.useHTML5Audio && (this.audio = new Audio(), this.isSupported = !0, this.initHTML5Audio(b));
        if (!this.isSupported) return null;
        this.webaudio && (this.inputList = b, this.initWebAudio(b));
      },
      initWebAudio: function (b) {
        ig.ua.iOS && this.initIOSWebAudioUnlock();
        this.webaudio.gainNode = this.webaudio.context.createGain();
        this.webaudio.gainNode.connect(this.webaudio.context.destination);
        this.webaudio.gainNode.gain.value = this._volume;
        this.webaudio.buffer = null;
        var c = "start",
          d = "stop",
          e = this.webaudio.context.createBufferSource();
        "function" !== typeof e.start && (c = "noteOn");
        this.webaudio.compatibility.start = c;
        "function" !== typeof e.stop && (d = "noteOff");
        this.webaudio.compatibility.stop = d;
        for (var f in b) {
          this.soundList[f] = f;
          var d = b[f].path,
            c = d + "." + ig.Sound.FORMAT.MP3.ext,
            j = d + "." + ig.Sound.FORMAT.OGG.ext;
          ig.ua.mobile ? ig.ua.iOS && (j = c) : (d = navigator.userAgent.toLowerCase(), -1 != d.indexOf("safari") && -1 >= d.indexOf("chrome") && (j = c), d.indexOf("win64") && (j = c));
          var m = new XMLHttpRequest();
          m.open("GET", j, !0);
          m.responseType = "arraybuffer";
          m.onload = function () {
            this.webaudio.context.decodeAudioData(m.response, function (b) {
              this.webaudio.buffer = b;
              this.webaudio.source_loop = {};
              this.bgmPlaying ? this.play(null, !0) : this.stop();
            }.bind(this), function () {
              console.log("Error decoding audio \"" + j + "\".");
            });
          }.bind(this);
          m.send();
          if (4 == m.readyState && "undefined" !== typeof Audio) {
            this.useHTML5Audio = !0;
            try {
              new Audio();
            } catch (l) {
              this.useHTML5Audio = !1;
            }
            this.useHTML5Audio && (console.log("Using HTML5 Audio"), this.webaudio = null, this.audio = new Audio(), this.isSupported = !0, this.initHTML5Audio(b));
          }
          break;
        }
      },
      initIOSWebAudioUnlock: function () {
        if (this.webaudio) {
          webaudio = this.webaudio;
          var b = function () {
            var c = webaudio.context,
              d = c.createBuffer(1, 1, 22050),
              e = c.createBufferSource();
            e.buffer = d;
            e.connect(c.destination);
            "undefined" === typeof e.start ? e.noteOn(0) : e.start(0);
            setTimeout(function () {
              (e.playbackState === e.PLAYING_STATE || e.playbackState === e.FINISHED_STATE) && window.removeEventListener("touchend", b, !1);
            }.bind(this), 0);
          };
          window.addEventListener("touchend", b, !1);
        }
      },
      initHTML5Audio: function (b) {
        if (this.useHTML5Audio && this.audio) {
          var c = this.audio;
          this.codecs = {};
          this.codecs = {
            mp3: !!c.canPlayType("audio/mpeg;").replace(/^no$/, ""),
            opus: !!c.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
            ogg: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
            wav: !!c.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
            aac: !!c.canPlayType("audio/aac;").replace(/^no$/, ""),
            m4a: !!(c.canPlayType("audio/x-m4a;") || c.canPlayType("audio/m4a;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
            mp4: !!(c.canPlayType("audio/x-mp4;") || c.canPlayType("audio/mp4;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
            weba: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, "")
          };
          this.is = {
            ff: Boolean(null != window.mozInnerScreenX && /firefox/.test(navigator.userAgent.toLowerCase())),
            ie: Boolean(document.all && !window.opera),
            opera: Boolean(window.opera),
            chrome: Boolean(window.chrome),
            safari: Boolean(!window.chrome && /safari/.test(navigator.userAgent.toLowerCase()) && window.getComputedStyle && !window.globalStorage && !window.opera)
          };
          this.playDelay = -60;
          this.stopDelay = 30;
          this.is.chrome && (this.playDelay = -25);
          this.is.chrome && (this.stopDelay = 25);
          this.is.ff && (this.playDelay = -25);
          this.is.ff && (this.stopDelay = 85);
          this.is.opera && (this.playDelay = 5);
          this.is.opera && (this.stopDelay = 0);
          for (var d in b) {
            this.soundList[d] = d;
            var e = b[d].path,
              c = e + "." + ig.Sound.FORMAT.OGG.ext,
              e = e + "." + ig.Sound.FORMAT.MP3.ext,
              f = null;
            this.codecs[ig.Sound.FORMAT.OGG.ext.toLowerCase()] ? f = c : this.codecs[ig.Sound.FORMAT.MP3.ext.toLowerCase()] && (f = e);
            if (f) {
              ig.ua.mobile ? ig.ua.iOS && (f = e) : (b = navigator.userAgent.toLowerCase(), -1 != b.indexOf("safari") && -1 >= b.indexOf("chrome") && (f = e));
              this.audio.addEventListener("error", function () {
                this.audio.error && 4 === this.audio.error.code && (this.isSupported = !1);
              }, !1);
              this.audio.src = f;
              this.audio._pos = 0;
              this.audio.preload = "auto";
              this.audio.volume = this._volume;
              this.inactiveAudio = new Audio();
              this.inactiveAudio.src = f;
              this.inactiveAudio._pos = 0;
              this.inactiveAudio.preload = "auto";
              this.inactiveAudio.volume = this._volume;
              this.inactiveAudio.load();
              var j = function () {
                this._duration = this.audio.duration;
                this._loaded || (this._loaded = !0);
                this.bgmPlaying ? this.play(null, !0) : this.stop();
                this.audio.removeEventListener("canplaythrough", j, !1);
              }.bind(this);
              this.audio.addEventListener("canplaythrough", j, !1);
              this.audio.load();
              break;
            }
          }
        }
      },
      play: function (b, c) {
        if (this.isSupported) if (this.bgmPlaying = !0, this.webaudio) {
          if (!c && this.reinitOnPlay && this.webaudio.source_loop.buffer == this.webaudio.buffer) {
            if (this.webaudio.source_loop._playing && (this.webaudio.source_loop[this.webaudio.compatibility.stop](0), this.webaudio.source_loop._playing = !1, this.pausedTime += this.webaudio.context.currentTime - this.webaudio.source_loop._startTime, this.pausedTime %= this.webaudio.source_loop.buffer.duration, this.webaudio.source_loop._startTime = 0, "noteOn" === this.webaudio.compatibility.start)) this.webaudio.source_once[this.webaudio.compatibility.stop](0);
            try {
              this.webaudio.context.close();
              this.webaudio.context = new this.AudioContext();
              this.webaudio.gainNode = this.webaudio.context.createGain();
              this.webaudio.gainNode.connect(this.webaudio.context.destination);
              this.webaudio.gainNode.gain.value = this._volume;
              var d = "start",
                e = "stop",
                f = this.webaudio.context.createBufferSource();
              "function" !== typeof f.start && (d = "noteOn");
              this.webaudio.compatibility.start = d;
              "function" !== typeof f.stop && (e = "noteOff");
              this.webaudio.compatibility.stop = e;
              this.webaudio.source_loop = {};
              this.play(null, !0);
            } catch (j) {}
          }
          if (this.webaudio.buffer) {
            if (!this.muteFlag && (this.bgmPlaying = !0, !this.webaudio.source_loop._playing)) {
              this.webaudio.source_loop = this.webaudio.context.createBufferSource();
              this.webaudio.source_loop.buffer = this.webaudio.buffer;
              this.webaudio.source_loop.loop = !0;
              this.webaudio.source_loop.connect(this.webaudio.gainNode);
              if (null == b || isNaN(b)) b = 0, this.pausedTime && (b = this.pausedTime);
              this.webaudio.source_loop._startTime = this.webaudio.context.currentTime;
              if ("noteOn" === this.webaudio.compatibility.start) this.webaudio.source_once = this.webaudio.context.createBufferSource(), this.webaudio.source_once.buffer = this.webaudio.buffer, this.webaudio.source_once.connect(this.webaudio.gainNode), this.webaudio.source_once.noteGrainOn(0, b, this.webaudio.buffer.duration - b), this.webaudio.source_loop[this.webaudio.compatibility.start](this.webaudio.context.currentTime + (this.webaudio.buffer.duration - b));else this.webaudio.source_loop[this.webaudio.compatibility.start](0, b);
              this.webaudio.source_loop._playing = !0;
            }
          } else this.bgmPlaying = !0;
        } else if (this.audio) {
          var m = this.audio;
          if (!this.muteFlag) if (this.bgmPlaying = !0, isNaN(b) && (b = 0, this.pausedTime && (b = this.pausedTime)), d = this._duration - b, this._onEndTimer && (clearTimeout(this._onEndTimer), this._onEndTimer = null), this._onEndTimer = setTimeout(function () {
            this.audio.currentTime = 0;
            this.audio.pause();
            this.pausedTime = 0;
            if (this.inactiveAudio) {
              var b = this.audio;
              this.audio = this.inactiveAudio;
              this.inactiveAudio = b;
            }
            this.play();
          }.bind(this), 1E3 * d + this.playDelay), 4 === m.readyState || !m.readyState && navigator.isCocoonJS) m.readyState = 4, m.currentTime = b, m.muted = this.muteFlag || m.muted, m.volume = this._volume, setTimeout(function () {
            m.play();
          }, 0);else {
            clearTimeout(this._onEndTimer);
            this._onEndTimer = null;
            var l = function () {
              typeof ("function" == this.play) && (this.play(), m.removeEventListener("canplaythrough", l, !1));
            }.bind(this);
            m.addEventListener("canplaythrough", l, !1);
          }
        }
      },
      stop: function () {
        this.bgmPlaying = !1;
        if (this.isSupported) if (this.webaudio) {
          if (this.webaudio.source_loop._playing && (this.webaudio.source_loop[this.webaudio.compatibility.stop](0), this.webaudio.source_loop._playing = !1, this.pausedTime += this.webaudio.context.currentTime - this.webaudio.source_loop._startTime, this.pausedTime %= this.webaudio.source_loop.buffer.duration, this.webaudio.source_loop._startTime = 0, "noteOn" === this.webaudio.compatibility.start)) this.webaudio.source_once[this.webaudio.compatibility.stop](0);
        } else if (this.audio) {
          var b = this.audio;
          4 == b.readyState && (this.pausedTime = b.currentTime, b.currentTime = 0, b.pause(), clearTimeout(this._onEndTimer), this._onEndTimer = null);
        }
      },
      volume: function (b) {
        if (isNaN(b) || null == b) return this.getVolume();
        this.isSupported && (this._volume = b, 0 > this._volume ? this._volume = 0 : 1 < this._volume && (this._volume = 1), this.webaudio ? this.webaudio.gainNode && (this.webaudio.gainNode.gain.value = this._volume) : this.audio && (this.audio.volume = this._volume, this.inactiveAudio && (this.inactiveAudio.volume = this._volume)));
      },
      getVolume: function () {
        return !this.isSupported ? 0 : this._volume;
      },
      mute: function (b) {
        this.parent(b);
        !1 == this.muteFlag && (this.muteFlag = !0, this.bgmPlaying && (this.stop(), this.bgmPlaying = !0));
      },
      unmute: function (b) {
        this.parent(b);
        !this.stayMuteFlag && !0 == this.muteFlag && (this.muteFlag = !1, this.bgmPlaying && this.play());
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.audio.sound-info").defines(function () {
    SoundInfo = ig.Class.extend({
      FORMATS: {
        OGG: ".ogg",
        MP3: ".mp3"
      },
      sfx: {
        kittyopeningSound: {
          path: "media/audio/opening/kittyopening"
        },
        staticSound: {
          path: "media/audio/play/static"
        },
        openingSound: {
          path: "media/audio/opening/opening"
        },
        lightning1: {
          path: "media/audio/lightning1"
        },
        lightning2: {
          path: "media/audio/lightning2"
        },
        shieldThrow: {
          path: "media/audio/shield-throw"
        },
        woodBreak: {
          path: "media/audio/wood-break"
        },
        slingAim: {
          path: "media/audio/sling-aim"
        },
        slingFire: {
          path: "media/audio/sling-fire"
        },
        explode: {
          path: "media/audio/explode"
        },
        lazer: {
          path: "media/audio/lazer"
        },
        click: {
          path: "media/audio/click"
        },
        hit: {
          path: "media/audio/hit"
        },
        bighit: {
          path: "media/audio/bighit"
        },
        star_1: {
          path: "media/audio/star_1"
        },
        star_2: {
          path: "media/audio/star_2"
        },
        zap: {
          path: "media/audio/zap"
        },
        rolling: {
          path: "media/audio/rolling"
        },
        shieldHit: {
          path: "media/audio/shield-hit"
        },
        win: {
          path: "media/audio/win"
        },
        abilityMode: {
          path: "media/audio/ability-mode"
        },
        antMan_blowUp: {
          path: "media/audio/ant-man-blow-up"
        },
        antMan_shrink: {
          path: "media/audio/ant-man-shrink"
        },
        bp_dash: {
          path: "media/audio/black-panther-dash"
        },
        capMarvel_charge: {
          path: "media/audio/cap-marvel-charge"
        },
        capMarvel_fire: {
          path: "media/audio/cap-marvel-fire"
        },
        drStrange_portal: {
          path: "media/audio/dr-strange-portal"
        },
        drStrange_portalEnter: {
          path: "media/audio/dr-strange-portal-enter"
        },
        hulk_landing: {
          path: "media/audio/hulk-landing"
        },
        spiderMan_web: {
          path: "media/audio/spider-man-web"
        },
        groundHit: {
          path: "media/audio/ground-hit"
        }
      },
      bgm: {
        background: {
          path: "media/audio/bgm",
          startOgg: 0,
          endOgg: 28.996,
          startMp3: 0,
          endMp3: 28.996
        }
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.audio.sound-handler").requires("plugins.audio.impact-music-player", "plugins.audio.impact-sound-player", "plugins.audio.howler-player", "plugins.audio.howler-music-player", "plugins.audio.jukebox-player", "plugins.audio.webaudio-music-player", "plugins.audio.sound-info").defines(function () {
    ig.SoundHandler = ig.Class.extend({
      bgmPlayer: null,
      sfxPlayer: null,
      focusBlurMute: !1,
      soundInfo: new SoundInfo(),
      init: function () {
        console.log("Initiating sound handler");
        this.initWindowHandler();
        ig.ua.mobile ? (this.initPowerButtonFix(), this.bgmPlayer = new WebaudioMusicPlayer(this.soundInfo.bgm, {
          loop: !0
        }), this.bgmPlayer.isSupported || (this.bgmPlayer = new JukeboxPlayer(this.soundInfo.bgm, {
          loop: !0
        }))) : (this.bgmPlayer = new WebaudioMusicPlayer(this.soundInfo.bgm, {
          loop: !0
        }), this.bgmPlayer.isSupported || (this.bgmPlayer = new ImpactMusicPlayer(this.soundInfo.bgm, {
          loop: !0
        })));
        this.sfxPlayer = new HowlerPlayer(this.soundInfo.sfx);
      },
      checkBGM: function () {
        return this.bgmPlayer.stayMuteFlag;
      },
      checkSFX: function () {
        return this.sfxPlayer.stayMuteFlag;
      },
      muteSFX: function (b) {
        this.sfxPlayer && this.sfxPlayer.mute(b);
      },
      muteBGM: function (b) {
        this.bgmPlayer && this.bgmPlayer.mute(b);
      },
      unmuteSFX: function (b) {
        this.sfxPlayer && this.sfxPlayer.unmute(b);
      },
      unmuteBGM: function (b) {
        this.bgmPlayer && this.bgmPlayer.unmute(b);
      },
      muteAll: function (b) {
        this.muteSFX(b);
        this.muteBGM(b);
      },
      unmuteAll: function (b) {
        this.unmuteSFX(b);
        this.unmuteBGM(b);
      },
      forceMuteAll: function () {
        this.focusBlurMute || this.muteAll(!1);
        this.focusBlurMute = !0;
      },
      forceUnMuteAll: function () {
        this.focusBlurMute && (this.unmuteAll(!1), this.focusBlurMute = !1);
      },
      initWindowHandler: function () {
        "true" === ig.domHandler.getQueryVariable("webview") ? ($(window).focus(function () {
          ig.soundHandler && ig.soundHandler.forceUnMuteAll();
        }), $(window).blur(function () {
          ig.soundHandler && ig.soundHandler.forceMuteAll();
        })) : (window.onfocus = function () {
          ig.soundHandler && ig.soundHandler.forceUnMuteAll();
        }, window.onblur = function () {
          ig.soundHandler && ig.soundHandler.forceMuteAll();
        });
      },
      initPowerButtonFix: function () {
        var b = this.getHiddenProp();
        b && (b = b.replace(/[H|h]idden/, "") + "visibilitychange", document.addEventListener(b, this.visChange));
        window.addEventListener("pagehide", function () {
          ig.soundHandler && ig.soundHandler.forceMuteAll();
        }, !1);
        window.addEventListener("pageshow", function () {
          ig.soundHandler && ig.soundHandler.forceUnMuteAll();
        }, !1);
      },
      getHiddenProp: function () {
        var b = ["webkit", "moz", "ms", "o"];
        if ("hidden" in document) return "hidden";
        for (var c = 0; c < b.length; c++) if (b[c] + "Hidden" in document) return b[c] + "Hidden";
        return null;
      },
      isHidden: function () {
        var b = this.getHiddenProp();
        return !b ? !1 : document[b];
      },
      visChange: function () {
        ig.soundHandler.isHidden() ? ig.soundHandler && ig.soundHandler.forceMuteAll() : ig.soundHandler && ig.soundHandler.forceUnMuteAll();
      },
      saveVolume: function () {
        this.sfxPlayer && ig.game.io.storageSet("soundVolume", this.sfxPlayer.getVolume());
        this.bgmPlayer && ig.game.io.storageSet("musicVolume", this.bgmPlayer.getVolume());
      },
      forceLoopBGM: function () {
        var b;
        if (!this.focusBlurMute && this.bgmPlayer.bgmPlaying && this.bgmPlayer) {
          var c = this.bgmPlayer.jukeboxPlayer;
          if (c) {
            null != window.mozInnerScreenX && /firefox/.test(navigator.userAgent.toLowerCase());
            b = Boolean(window.chrome);
            !window.chrome && /safari/.test(navigator.userAgent.toLowerCase());
            var d = 0.1;
            ig.ua.mobile && (d = 0.115, ig.ua.android && (d = 0.45, b && (d = 0.3)));
            c.settings.spritemap.music && (b = c.settings.spritemap.music.end - d, c.getCurrentTime() >= b && (b = c.settings.spritemap.music.start, ig.ua.android ? this.forcelooped || (c.play(b, !0), this.forcelooped = !0, setTimeout(function () {
              ig.soundHandler.forcelooped = !1;
            }, d)) : c.setCurrentTime(b)));
          } else "ImpactMusicPlayer" == this.bgmPlayer.tagName && (null != window.mozInnerScreenX && /firefox/.test(navigator.userAgent.toLowerCase()), b = Boolean(window.chrome), !window.chrome && /safari/.test(navigator.userAgent.toLowerCase()), d = 0.1, ig.ua.mobile && (d = 0.115, ig.ua.android && (d = 0.45, b && (d = 0.3))), c = 0, "mp3" == ig.soundManager.format.ext && (c = 0.05), ig.music.currentTrack && (b = ig.music.currentTrack.duration - d, ig.music.currentTrack.currentTime >= b && (ig.ua.android ? this.forcelooped || (ig.music.currentTrack.pause(), ig.music.currentTrack.currentTime = c, ig.music.currentTrack.play(), this.forcelooped = !0, setTimeout(function () {
            ig.soundHandler.forcelooped = !1;
          }, d)) : ig.music.currentTrack.currentTime = c)));
        }
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.io.storage").defines(function () {
    ig.Storage = ig.Class.extend({
      staticInstantiate: function () {
        return !ig.Storage.instance ? null : ig.Storage.instance;
      },
      init: function () {
        ig.Storage.instance = this;
      },
      isCapable: function () {
        return "undefined" !== typeof window.localStorage;
      },
      isSet: function (b) {
        return null !== this.get(b);
      },
      initUnset: function (b, c) {
        null === this.get(b) && this.set(b, c);
      },
      get: function (b) {
        if (!this.isCapable()) return null;
        try {
          return JSON.parse(localStorage.getItem(b));
        } catch (c) {
          return window.localStorage.getItem(b);
        }
      },
      getInt: function (b) {
        return ~~this.get(b);
      },
      getFloat: function (b) {
        return parseFloat(this.get(b));
      },
      getBool: function (b) {
        return !!this.get(b);
      },
      key: function (b) {
        return this.isCapable() ? window.localStorage.key(b) : null;
      },
      set: function (b, c) {
        if (!this.isCapable()) return null;
        try {
          window.localStorage.setItem(b, JSON.stringify(c));
        } catch (d) {
          console.log(d);
        }
      },
      setHighest: function (b, c) {
        c > this.getFloat(b) && this.set(b, c);
      },
      remove: function (b) {
        if (!this.isCapable()) return null;
        window.localStorage.removeItem(b);
      },
      clear: function () {
        if (!this.isCapable()) return null;
        window.localStorage.clear();
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.io.mouse").defines(function () {
    Mouse = ig.Class.extend({
      bindings: {
        click: [ig.KEY.MOUSE1]
      },
      init: function () {
        ig.input.initMouse();
        for (var b in this.bindings) {
          this[b] = b;
          for (var c = 0; c < this.bindings[b].length; c++) ig.input.bind(this.bindings[b][c], b);
        }
      },
      getPos: function () {
        if (ig.ua.mobile) {
          var b = ig.input.mouse.x / ig.sizeHandler.sizeRatio.x,
            c = ig.input.mouse.y / ig.sizeHandler.sizeRatio.y;
          return new Vector2(b / ig.sizeHandler.scaleRatioMultiplier.x, c / ig.sizeHandler.scaleRatioMultiplier.y);
        }
        b = ig.input.mouse.x / ig.sizeHandler.sizeRatio.x;
        c = ig.input.mouse.y / ig.sizeHandler.sizeRatio.y;
        return new Vector2(b, c);
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.io.keyboard").defines(function () {
    Keyboard = ig.Class.extend({
      bindings: {
        jump: [ig.KEY.W, ig.KEY.UP_ARROW],
        moveright: [ig.KEY.D, ig.KEY.RIGHT_ARROW],
        moveleft: [ig.KEY.A, ig.KEY.LEFT_ARROW],
        shoot: [ig.KEY.S, ig.KEY.DOWN_ARROW, ig.KEY.SPACE]
      },
      init: function () {
        for (var b in this.bindings) {
          this[b] = b;
          for (var c = 0; c < this.bindings[b].length; c++) ig.input.bind(this.bindings[b][c], b);
        }
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.io.gamepad-input").defines(function () {
    ig.PADKEY = {
      BUTTON_0: 0,
      PADBUTTON_1: 1,
      BUTTON_2: 2,
      BUTTON_3: 3,
      BUTTON_LEFT_BUMPER: 4,
      BUTTON_RIGHT_BUMPER: 5,
      BUTTON_LEFT_TRIGGER: 6,
      BUTTON_RIGHT_TRIGGER: 7,
      BUTTON_LEFT_JOYSTICK: 10,
      BUTTON_RIGHT_JOYSTICK: 11,
      BUTTON_DPAD_UP: 12,
      BUTTON_DPAD_DOWN: 13,
      BUTTON_DPAD_LEFT: 14,
      BUTTON_DPAD_RIGHT: 15,
      BUTTON_MENU: 16,
      AXIS_LEFT_JOYSTICK_X: 0,
      AXIS_LEFT_JOYSTICK_Y: 1,
      AXIS_RIGHT_JOYSTICK_X: 2,
      AXIS_RIGHT_JOYSTICK_Y: 3
    };
    ig.GamepadInput = ig.Class.extend({
      isInit: !1,
      isSupported: !1,
      list: [],
      bindings: {},
      states: {},
      presses: {},
      releases: {},
      downLocks: {},
      upLocks: {},
      leftStick: {
        x: 0,
        y: 0
      },
      rightStick: {
        x: 0,
        y: 0
      },
      start: function () {
        if (!this.isInit) {
          this.isInit = !0;
          var b = navigator.getGamepads || navigator.webkitGetGamepads;
          b && (!navigator.getGamepads && navigator.webkitGetGamepads && (navigator.getGamepads = navigator.webkitGetGamepads), this.list = navigator.getGamepads());
          this.isSupported = b;
        }
      },
      isAvailable: function () {
        return this.isInit && this.isSupported;
      },
      buttonPressed: function (b) {
        return "object" == typeof b ? b.pressed : 1 == b;
      },
      buttonDown: function (b) {
        if (b = this.bindings[b]) this.states[b] = !0, this.downLocks[b] || (this.presses[b] = !0, this.downLocks[b] = !0);
      },
      buttonUp: function (b) {
        if ((b = this.bindings[b]) && this.downLocks[b] && !this.upLocks[b]) this.states[b] = !1, this.releases[b] = !0, this.upLocks[b] = !0;
      },
      clearPressed: function () {
        for (var b in this.releases) this.states[b] = !1, this.downLocks[b] = !1;
        this.releases = {};
        this.presses = {};
        this.upLocks = {};
      },
      bind: function (b, c) {
        this.bindings[b] = c;
      },
      unbind: function (b) {
        this.releases[this.bindings[b]] = !0;
        this.bindings[b] = null;
      },
      unbindAll: function () {
        this.bindings = {};
        this.states = {};
        this.presses = {};
        this.releases = {};
        this.downLocks = {};
        this.upLocks = {};
      },
      state: function (b) {
        return this.states[b];
      },
      pressed: function (b) {
        return this.presses[b];
      },
      released: function (b) {
        return this.releases[b];
      },
      clamp: function (b, c, d) {
        return b < c ? c : b > d ? d : b;
      },
      pollGamepads: function () {
        if (this.isSupported) {
          this.leftStick.x = 0;
          this.leftStick.y = 0;
          this.rightStick.x = 0;
          this.rightStick.y = 0;
          this.list = navigator.getGamepads();
          for (var b in this.bindings) {
            for (var c = !1, d = 0; d < this.list.length; d++) {
              var e = this.list[d];
              if (e && e.buttons && this.buttonPressed(e.buttons[b])) {
                c = !0;
                break;
              }
            }
            c ? this.buttonDown(b) : this.buttonUp(b);
          }
          for (d = 0; d < this.list.length; d++) if ((e = this.list[d]) && e.axes) {
            b = e.axes[ig.GAMEPADINPUT.AXIS_LEFT_JOYSTICK_X];
            var c = e.axes[ig.GAMEPADINPUT.AXIS_LEFT_JOYSTICK_Y],
              f = e.axes[ig.GAMEPADINPUT.AXIS_RIGHT_JOYSTICK_X],
              e = e.axes[ig.GAMEPADINPUT.AXIS_RIGHT_JOYSTICK_Y];
            this.leftStick.x += isNaN(b) ? 0 : b;
            this.leftStick.y += isNaN(c) ? 0 : c;
            this.rightStick.x += isNaN(f) ? 0 : f;
            this.rightStick.y += isNaN(e) ? 0 : e;
          }
          0 < this.list.length && (this.leftStick.x = this.clamp(this.leftStick.x, -1, 1), this.leftStick.y = this.clamp(this.leftStick.y, -1, 1), this.rightStick.x = this.clamp(this.rightStick.x, -1, 1), this.rightStick.y = this.clamp(this.rightStick.y, -1, 1));
        }
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.io.gamepad").requires("plugins.io.gamepad-input").defines(function () {
    Gamepad = ig.Class.extend({
      bindings: {
        padJump: [ig.PADKEY.BUTTON_0]
      },
      init: function () {
        ig.gamepadInput.start();
        for (var b in this.bindings) for (var c = 0; c < this.bindings[b].length; c++) ig.gamepadInput.bind(this.bindings[b][c], b);
      },
      press: function () {},
      held: function () {},
      release: function () {}
    });
  });
  ig.baked = !0;
  ig.module("plugins.io.multitouch").defines(function () {
    Multitouch = ig.Class.extend({
      init: function () {
        ig.multitouchInput.start();
      },
      getTouchesPos: function () {
        if (ig.ua.mobile) {
          if (0 < ig.multitouchInput.touches.length) {
            for (var b = [], c = 0; c < ig.multitouchInput.touches.length; c++) {
              var d = ig.multitouchInput.touches[c];
              b.push({
                x: d.x,
                y: d.y
              });
            }
            return b;
          }
          return null;
        }
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.io.multitouch-input").defines(function () {
    ig.MultitouchInput = ig.Class.extend({
      isStart: !1,
      touches: [],
      multitouchCapable: !1,
      lastEventUp: null,
      start: function () {
        this.isStart || (this.isStart = !0, navigator.maxTouchPoints && 1 < navigator.maxTouchPoints && (this.multitouchCapable = !0), ig.ua.touchDevice && (window.navigator.msPointerEnabled && (ig.system.canvas.addEventListener("MSPointerDown", this.touchdown.bind(this), !1), ig.system.canvas.addEventListener("MSPointerUp", this.touchup.bind(this), !1), ig.system.canvas.addEventListener("MSPointerMove", this.touchmove.bind(this), !1), ig.system.canvas.style.msContentZooming = "none", ig.system.canvas.style.msTouchAction = "none"), ig.system.canvas.addEventListener("touchstart", this.touchdown.bind(this), !1), ig.system.canvas.addEventListener("touchend", this.touchup.bind(this), !1), ig.system.canvas.addEventListener("touchmove", this.touchmove.bind(this), !1)));
      },
      touchmove: function (b) {
        if (ig.ua.touchDevice) {
          var c = parseInt(ig.system.canvas.offsetWidth) || ig.system.realWidth,
            d = parseInt(ig.system.canvas.offsetHeight) || ig.system.realHeight,
            c = ig.system.scale * (c / ig.system.realWidth),
            d = ig.system.scale * (d / ig.system.realHeight);
          if (b.touches) {
            for (; 0 < this.touches.length;) this.touches.pop();
            !this.multitouchCapable && 1 < b.touches.length && (this.multitouchCapable = !0);
            var e = {
              left: 0,
              top: 0
            };
            ig.system.canvas.getBoundingClientRect && (e = ig.system.canvas.getBoundingClientRect());
            for (var f = 0; f < b.touches.length; f++) {
              var j = b.touches[f];
              j && this.touches.push({
                x: (j.clientX - e.left) / c,
                y: (j.clientY - e.top) / d
              });
            }
          } else this.windowMove(b);
        }
      },
      touchdown: function (b) {
        var c = parseInt(ig.system.canvas.offsetWidth) || ig.system.realWidth,
          d = parseInt(ig.system.canvas.offsetHeight) || ig.system.realHeight,
          c = ig.system.scale * (c / ig.system.realWidth),
          d = ig.system.scale * (d / ig.system.realHeight);
        if (window.navigator.msPointerEnabled) this.windowKeyDown(b);else if (ig.ua.touchDevice && b.touches) {
          for (; 0 < this.touches.length;) this.touches.pop();
          !this.multitouchCapable && 1 < b.touches.length && (this.multitouchCapable = !0);
          var e = {
            left: 0,
            top: 0
          };
          ig.system.canvas.getBoundingClientRect && (e = ig.system.canvas.getBoundingClientRect());
          for (var f = 0; f < b.touches.length; f++) {
            var j = b.touches[f];
            j && this.touches.push({
              x: (j.clientX - e.left) / c,
              y: (j.clientY - e.top) / d
            });
          }
        }
      },
      touchup: function (b) {
        var c = parseInt(ig.system.canvas.offsetWidth) || ig.system.realWidth;
        parseInt(ig.system.canvas.offsetHeight);
        c = ig.system.scale * (c / ig.system.realWidth);
        if (window.navigator.msPointerEnabled) this.windowKeyUp(b);else {
          this.lastEventUp = b;
          var d = {
            left: 0,
            top: 0
          };
          ig.system.canvas.getBoundingClientRect && (d = ig.system.canvas.getBoundingClientRect());
          if (ig.ua.touchDevice) {
            b = (b.changedTouches[0].clientX - d.left) / c;
            for (c = 0; c < this.touches.length; c++) this.touches[c].x >= b - 40 && this.touches[c].x <= b + 40 && this.touches.splice(c, 1);
          }
        }
      },
      windowKeyDown: function (b) {
        var c = parseInt(ig.system.canvas.offsetWidth) || ig.system.realWidth,
          d = parseInt(ig.system.canvas.offsetHeight) || ig.system.realHeight,
          c = ig.system.scale * (c / ig.system.realWidth),
          d = ig.system.scale * (d / ig.system.realHeight);
        if (window.navigator.msPointerEnabled) {
          var e = {
            left: 0,
            top: 0
          };
          ig.system.canvas.getBoundingClientRect && (e = ig.system.canvas.getBoundingClientRect());
          b = b.changedTouches ? b.changedTouches : [b];
          for (var f = 0; f < b.length; ++f) {
            for (var j = b[f], m = "undefined" != typeof j.identifier ? j.identifier : "undefined" != typeof j.pointerId ? j.pointerId : 1, l = (j.clientX - e.left) / c, j = (j.clientY - e.top) / d, g = 0; g < this.touches.length; ++g) this.touches[g].identifier == m && this.touches.splice(g, 1);
            this.touches.push({
              x: l,
              y: j,
              identifier: m
            });
          }
          for (c = 0; c < this.touches.length; c++);
        }
      },
      windowKeyUp: function (b) {
        b = "undefined" != typeof b.identifier ? b.identifier : "undefined" != typeof b.pointerId ? b.pointerId : 1;
        for (var c = 0; c < this.touches.length; ++c) this.touches[c].identifier == b && this.touches.splice(c, 1);
        for (; 0 < this.touches.length;) this.touches.pop();
      },
      windowMove: function (b) {
        var c = parseInt(ig.system.canvas.offsetWidth) || ig.system.realWidth,
          d = parseInt(ig.system.canvas.offsetHeight) || ig.system.realHeight,
          c = ig.system.scale * (c / ig.system.realWidth),
          d = ig.system.scale * (d / ig.system.realHeight),
          e = {
            left: 0,
            top: 0
          };
        ig.system.canvas.getBoundingClientRect && (e = ig.system.canvas.getBoundingClientRect());
        if (window.navigator.msPointerEnabled) for (var f = "undefined" != typeof b.identifier ? b.identifier : "undefined" != typeof b.pointerId ? b.pointerId : 1, j = 0; j < this.touches.length; ++j) if (this.touches[j].identifier == f) {
          var m = (b.clientY - e.top) / d;
          this.touches[j].x = (b.clientX - e.left) / c;
          this.touches[j].y = m;
        }
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.io.fake-storage").requires("impact.game").defines(function () {
    ig.FakeStorage = ig.Class.extend({
      tempData: {},
      init: function () {
        ig.FakeStorage.instance = this;
      },
      initUnset: function (b, c) {
        null === this.get(b) && this.set(b, c);
      },
      set: function (b, c) {
        this.tempData[b] = JSON.stringify(c);
      },
      setHighest: function (b, c) {
        c > this.getFloat(b) && this.set(b, c);
      },
      get: function (b) {
        return "undefined" == typeof this.tempData[b] ? null : JSON.parse(this.tempData[b]);
      },
      getInt: function (b) {
        return ~~this.get(b);
      },
      getFloat: function (b) {
        return parseFloat(this.get(b));
      },
      getBool: function (b) {
        return !!this.get(b);
      },
      isSet: function (b) {
        return null !== this.get(b);
      },
      remove: function (b) {
        delete this.tempData[b];
      },
      clear: function () {
        this.tempData = {};
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.io.io-manager").requires("plugins.io.storage", "plugins.io.mouse", "plugins.io.keyboard", "plugins.io.gamepad", "plugins.io.multitouch", "plugins.io.multitouch-input", "plugins.io.gamepad-input", "plugins.io.fake-storage").defines(function () {
    IoManager = ig.Class.extend({
      storage: null,
      localStorageSupport: !1,
      mouse: null,
      keyboard: null,
      multitouch: null,
      gamepad: null,
      init: function () {
        ig.multitouchInput = new ig.MultitouchInput();
        ig.gamepadInput = new ig.GamepadInput();
        this.unbindAll();
        this.initStorage();
        this.initMouse();
        this.initKeyboard();
      },
      unbindAll: function () {
        ig.input.unbindAll();
        ig.gamepadInput.unbindAll();
      },
      initStorage: function () {
        try {
          window.localStorage.setItem("test", "test"), this.storage = new ig.Storage();
        } catch (b) {
          console.log("using fake storage"), this.storage = new ig.FakeStorage();
        } finally {
          window.localStorage.removeItem("test");
        }
      },
      initMouse: function () {
        this.mouse = new Mouse();
      },
      initKeyboard: function () {
        this.keyboard = new Keyboard();
      },
      initMultitouch: function () {
        this.multitouch = new Multitouch();
      },
      initGamepad: function () {
        this.gamepad = new Gamepad();
      },
      press: function (b) {
        return ig.input.pressed(b) || this.gamepad && this.gamepad.press(b) ? !0 : !1;
      },
      held: function (b) {
        return ig.input.state(b) || this.gamepad && this.gamepad.state(b) ? !0 : !1;
      },
      release: function (b) {
        return ig.input.released(b) || this.gamepad && this.gamepad.released(b) ? !0 : !1;
      },
      getClickPos: function () {
        return this.mouse.getPos();
      },
      getTouchesPos: function () {
        return this.multitouch.getTouchesPos();
      },
      checkOverlap: function (b, c, d, e, f) {
        return b.x > c + e || b.x < c || b.y > d + f || b.y < d ? !1 : !0;
      },
      _supportsLocalStorage: function () {
        try {
          return localStorage.setItem("test", "test"), localStorage.removeItem("test"), this.localStorageSupport = "localStorage" in window && null !== window.localStorage;
        } catch (b) {
          return this.localStorageSupport;
        }
      },
      storageIsSet: function (b) {
        return !this.localStorageSupport ? null : this.storage.isSet(b);
      },
      storageGet: function (b) {
        return !this.localStorageSupport ? null : this.storage.get(b);
      },
      storageSet: function (b, c) {
        if (!this.localStorageSupport) return null;
        this.storage.set(b, c);
      },
      assert: function (b, c, d) {
        if (c !== d) throw "actualValue:" + c + " not equal to testValue:" + d + " at " + b;
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.io.storage-manager").requires("impact.game", "plugins.io.io-manager").defines(function () {
    ig.Game.prototype.name = "MJS-Game";
    ig.Game.prototype.version = "1.0";
    ig.Game.prototype.sessionData = {};
    ig.Game.prototype.initData = function () {
      return this.sessionData = {
        sound: 0.5,
        music: 0.5,
        level: 1,
        score: 0
      };
    };
    ig.Game.prototype.setupStorageManager = function () {
      "undefined" === typeof this.name ? console.error("Cannot found Game Name, Storage Manager Cancelled.") : "undefined" === typeof this.version ? console.error("Cannot found Game Version, Storage Manager Cancelled.") : (this.io || (this.io = new IoManager(), console.log("IO Manager doesn't existed. Initialize...")), console.log("Plug in Storage Manager"), this.storage = this.io.storage, this.storageName = this.name + "-v" + this.version, this.loadAll());
    };
    ig.Game.prototype.loadAll = function () {
      var b = this.storage.get(this.storageName);
      if (null === b || "undefined" === typeof b) b = this.initData();
      for (var c in b) this.sessionData[c] = b[c];
      this.storage.set(this.storageName, b);
    };
    ig.Game.prototype.saveAll = function () {
      var b = this.storage.get(this.storageName),
        c;
      for (c in b) b[c] = this.sessionData[c];
      this.storage.set(this.storageName, b);
    };
    ig.Game.prototype.load = function (b) {
      return this.storage.get(this.storageName)[b];
    };
    ig.Game.prototype.save = function (b, c) {
      var d = this.storage.get(this.storageName);
      d[b] = c;
      this.storage.set(this.storageName, d);
    };
  });
  ig.baked = !0;
  ig.module("plugins.scale").requires("impact.entity").defines(function () {
    ig.Entity.inject({
      scale: {
        x: 1,
        y: 1
      },
      _offset: {
        x: 0,
        y: 0
      },
      _scale: {
        x: 1,
        y: 1
      },
      _size: {
        x: 0,
        y: 0
      },
      init: function (b, c, d) {
        this.parent(b, c, d);
        this._offset.x = this.offset.x;
        this._offset.y = this.offset.y;
        this._size.x = this.size.x;
        this._size.y = this.size.y;
        this.setScale(this.scale.x, this.scale.y);
      },
      draw: function () {
        var b = ig.system.context;
        b.save();
        b.translate(ig.system.getDrawPos(this.pos.x.round() - this.offset.x - ig.game.screen.x), ig.system.getDrawPos(this.pos.y.round() - this.offset.y - ig.game.screen.y));
        b.scale(this._scale.x, this._scale.y);
        null != this.currentAnim && this.currentAnim.draw(0, 0);
        b.restore();
      },
      setScale: function (b, c) {
        var d = this.size.x,
          e = this.size.y;
        this.scale.x = b || this.scale.x;
        this.scale.y = c || this.scale.y;
        this._scale.x = this.scale.x / ig.system.scale;
        this._scale.y = this.scale.y / ig.system.scale;
        this.offset.x = this._offset.x * this._scale.x;
        this.offset.y = this._offset.y * this._scale.y;
        this.size.x = this._size.x * this._scale.x;
        this.size.y = this._size.y * this._scale.y;
        this.pos.x += (d - this.size.x) / 2;
        this.pos.y += (e - this.size.y) / 2;
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.splash-loader").requires("impact.loader", "impact.animation").defines(function () {
    ig.SplashLoader = ig.Loader.extend({
      desktopCoverDIVID: "play-desktop",
      splashDesktop: new ig.Image("media/graphics/splash/desktop/cover.png"),
      loadBar: new ig.Image("media/graphics/splash/desktop/loadbar1.png"),
      loadBar_Base: new ig.Image("media/graphics/splash/desktop/loadbar2.png"),
      init: function (b, c) {
        this.parent(b, c);
        ig.apiHandler.run("MJSPreroll");
      },
      end: function () {
        this.parent();
        if (ig.ua.mobile) {
          var b = ig.domHandler.getElementById("#play");
          ig.domHandler.show(b);
          ig.system.setGame(MyGame);
        } else this.tapToStartDiv();
      },
      tapToStartDiv: function (b) {
        this.desktopCoverDIV = document.createElement("div");
        this.desktopCoverDIV.id = this.desktopCoverDIVID;
        this.desktopCoverDIV.setAttribute("class", "play");
        this.desktopCoverDIV.setAttribute("style", "position: absolute; display: block; z-index: 999999; background-color: rgba(23, 32, 53, 0.7); visibility: visible; font-size: 10vmin; text-align: center; vertical-align: middle; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;");
        this.desktopCoverDIV.innerHTML = "<div style='color:white;background-color: rgba(255, 255, 255, 0.3); border: 2px solid #fff; font-size:20px; border-radius: 5px; position: relative; float: left; top: 50%; left: 50%; transform: translate(-50%, -50%);'><div style='padding:20px 50px; font-family: Arial;'>" + _STRINGS.Splash.TapToStart + "</div></div>";
        (document.getElementById("play").parentNode || document.getElementById("ajaxbar")).appendChild(this.desktopCoverDIV);
        try {
          "undefined" !== typeof ig.sizeHandler ? "undefined" !== typeof ig.sizeHandler.coreDivsToResize && (ig.sizeHandler.coreDivsToResize.push("#" + this.desktopCoverDIVID), "function" === typeof ig.sizeHandler.reorient && ig.sizeHandler.reorient()) : "undefined" !== typeof coreDivsToResize && (coreDivsToResize.push(this.desktopCoverDIVID), "function" === typeof sizeHandler && sizeHandler());
        } catch (c) {
          console.log(c);
        }
        this.desktopCoverDIV.addEventListener("click", function () {
          try {
            "undefined" !== typeof ig.soundHandler ? ("undefined" !== typeof ig.soundHandler.bgmPlayer ? "undefined" !== typeof ig.soundHandler.bgmPlayer.webaudio && "undefined" !== typeof ig.soundHandler.bgmPlayer.webaudio.context && ig.soundHandler.bgmPlayer.webaudio.context.resume() : (ig.soundHandler = null, ig.soundHandler = "undefined" !== typeof ig.soundList ? new ig.SoundHandler(ig.soundList) : new ig.SoundHandler()), "undefined" !== typeof ig.soundHandler.sfxPlayer ? "function" === typeof ig.soundHandler.sfxPlayer.play && ig.soundHandler.sfxPlayer.play("staticSound") : "undefined" !== typeof ig.soundHandler.staticSound ? "function" === typeof ig.soundHandler.staticSound.play && ig.soundHandler.staticSound.play() : "function" === typeof ig.soundHandler.playSound && ig.soundHandler.playSound("staticSound")) : "undefined" !== typeof Howl ? (ig.global.staticSound = new Howl({
              src: ["media/audio/play/static.ogg", "media/audio/play/static.mp3"]
            }), ig.global.staticSound.play()) : "undefined" !== typeof createjs && "undefined" !== typeof createjs.Sound && "function" === typeof createjs.Sound.play && createjs.Sound.play("opening");
          } catch (c) {
            console.log(c);
          }
          this.setAttribute("style", "visibility: hidden;");
          "function" === typeof b && b();
          ig.system.setGame(MyGame);
        });
      },
      setupCustomAnimation: function () {},
      animate: function () {},
      draw: function () {
        this._drawStatus += (this.status - this._drawStatus) / 5;
        ig.system.context.fillStyle = "#000";
        ig.system.context.fillRect(0, 0, ig.system.width, ig.system.height);
        this.splashDesktop.draw(0, 0);
        this.loadBar_Base.draw(288, 460);
        this.loadBar.draw(290, 462, 0, 0, 376 * this._drawStatus * ig.system.scale, 15);
        ig.system.context.fillStyle = "#FFFFFF";
        ig.system.context.font = "29px soupofjustice";
        ig.system.context.fillText(_STRINGS.Splash.Loading, 412, 445);
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.tween").requires("impact.entity").defines(function () {
    Array.prototype.indexOf || (Array.prototype.indexOf = function (b) {
      for (var c = 0; c < this.length; ++c) if (this[c] === b) return c;
      return -1;
    });
    ig.Entity.prototype.tweens = [];
    ig.Entity.prototype._preTweenUpdate = ig.Entity.prototype.update;
    ig.Entity.prototype.update = function () {
      this._preTweenUpdate();
      if (0 < this.tweens.length) {
        for (var b = [], c = 0; c < this.tweens.length; c++) this.tweens[c].update(), this.tweens[c].complete || b.push(this.tweens[c]);
        this.tweens = b;
      }
    };
    ig.Entity.prototype.tween = function (b, c, d) {
      b = new ig.Tween(this, b, c, d);
      this.tweens.push(b);
      return b;
    };
    ig.Entity.prototype.pauseTweens = function () {
      for (var b = 0; b < this.tweens.length; b++) this.tweens[b].pause();
    };
    ig.Entity.prototype.resumeTweens = function () {
      for (var b = 0; b < this.tweens.length; b++) this.tweens[b].resume();
    };
    ig.Entity.prototype.stopTweens = function (b) {
      for (var c = 0; c < this.tweens.length; c++) this.tweens[c].stop(b);
    };
    ig.Tween = function (b, c, d, e) {
      var f = {},
        j = {},
        m = {},
        l = 0,
        g = !1,
        q = !1,
        y = !1;
      this.duration = d;
      this.paused = this.complete = !1;
      this.easing = ig.Tween.Easing.Linear.EaseNone;
      this.onComplete = !1;
      this.loop = this.delay = 0;
      this.loopCount = -1;
      ig.merge(this, e);
      this.loopNum = this.loopCount;
      this.chain = function (b) {
        y = b;
      };
      this.initEnd = function (b, c, d) {
        if ("object" !== typeof c[b]) d[b] = c[b];else for (subprop in c[b]) d[b] || (d[b] = {}), this.initEnd(subprop, c[b], d[b]);
      };
      this.initStart = function (b, c, d, e) {
        if ("object" !== typeof d[b]) "undefined" !== typeof c[b] && (e[b] = d[b]);else for (subprop in d[b]) e[b] || (e[b] = {}), "undefined" !== typeof c[b] && this.initStart(subprop, c[b], d[b], e[b]);
      };
      this.start = function () {
        this.paused = this.complete = !1;
        this.loopNum = this.loopCount;
        l = 0;
        -1 == b.tweens.indexOf(this) && b.tweens.push(this);
        q = !0;
        g = new ig.Timer();
        for (var d in c) this.initEnd(d, c, j);
        for (d in j) this.initStart(d, j, b, f), this.initDelta(d, m, b, j);
      };
      this.initDelta = function (b, c, d, e) {
        if ("object" !== typeof e[b]) c[b] = e[b] - d[b];else for (subprop in e[b]) c[b] || (c[b] = {}), this.initDelta(subprop, c[b], d[b], e[b]);
      };
      this.propUpdate = function (b, c, d, e, f) {
        if ("object" !== typeof d[b]) c[b] = "undefined" != typeof d[b] ? d[b] + e[b] * f : c[b];else for (subprop in d[b]) this.propUpdate(subprop, c[b], d[b], e[b], f);
      };
      this.propSet = function (b, c, d) {
        if ("object" !== typeof c[b]) d[b] = c[b];else for (subprop in c[b]) d[b] || (d[b] = {}), this.propSet(subprop, c[b], d[b]);
      };
      this.update = function () {
        if (!q) return !1;
        if (this.delay) {
          if (g.delta() < this.delay) return;
          this.delay = 0;
          g.reset();
        }
        if (this.paused || this.complete) return !1;
        var c = (g.delta() + l) / this.duration,
          c = 1 < c ? 1 : c,
          d = this.easing(c);
        for (property in m) this.propUpdate(property, b, f, m, d);
        if (1 <= c) {
          if (0 == this.loopNum || !this.loop) {
            this.complete = !0;
            if (this.onComplete) this.onComplete();
            y && y.start();
            return !1;
          }
          if (this.loop == ig.Tween.Loop.Revert) {
            for (property in f) this.propSet(property, f, b);
            l = 0;
            g.reset();
            -1 != this.loopNum && this.loopNum--;
          } else if (this.loop == ig.Tween.Loop.Reverse) {
            c = {};
            d = {};
            ig.merge(c, j);
            ig.merge(d, f);
            ig.merge(f, c);
            ig.merge(j, d);
            for (property in j) this.initDelta(property, m, b, j);
            l = 0;
            g.reset();
            -1 != this.loopNum && this.loopNum--;
          }
        }
      };
      this.pause = function () {
        this.paused = !0;
        g && g.delta && (l += g.delta());
      };
      this.resume = function () {
        this.paused = !1;
        g && g.reset && g.reset();
      };
      this.stop = function (b) {
        b && (this.loop = this.complete = this.paused = !1, l += d, this.update());
        this.complete = !0;
      };
    };
    ig.Tween.Loop = {
      Revert: 1,
      Reverse: 2
    };
    ig.Tween.Easing = {
      Linear: {},
      Quadratic: {},
      Cubic: {},
      Quartic: {},
      Quintic: {},
      Sinusoidal: {},
      Exponential: {},
      Circular: {},
      Elastic: {},
      Back: {},
      Bounce: {}
    };
    ig.Tween.Easing.Linear.EaseNone = function (b) {
      return b;
    };
    ig.Tween.Easing.Quadratic.EaseIn = function (b) {
      return b * b;
    };
    ig.Tween.Easing.Quadratic.EaseOut = function (b) {
      return -b * (b - 2);
    };
    ig.Tween.Easing.Quadratic.EaseInOut = function (b) {
      return 1 > (b *= 2) ? 0.5 * b * b : -0.5 * (--b * (b - 2) - 1);
    };
    ig.Tween.Easing.Cubic.EaseIn = function (b) {
      return b * b * b;
    };
    ig.Tween.Easing.Cubic.EaseOut = function (b) {
      return --b * b * b + 1;
    };
    ig.Tween.Easing.Cubic.EaseInOut = function (b) {
      return 1 > (b *= 2) ? 0.5 * b * b * b : 0.5 * ((b -= 2) * b * b + 2);
    };
    ig.Tween.Easing.Quartic.EaseIn = function (b) {
      return b * b * b * b;
    };
    ig.Tween.Easing.Quartic.EaseOut = function (b) {
      return -(--b * b * b * b - 1);
    };
    ig.Tween.Easing.Quartic.EaseInOut = function (b) {
      return 1 > (b *= 2) ? 0.5 * b * b * b * b : -0.5 * ((b -= 2) * b * b * b - 2);
    };
    ig.Tween.Easing.Quintic.EaseIn = function (b) {
      return b * b * b * b * b;
    };
    ig.Tween.Easing.Quintic.EaseOut = function (b) {
      return (b -= 1) * b * b * b * b + 1;
    };
    ig.Tween.Easing.Quintic.EaseInOut = function (b) {
      return 1 > (b *= 2) ? 0.5 * b * b * b * b * b : 0.5 * ((b -= 2) * b * b * b * b + 2);
    };
    ig.Tween.Easing.Sinusoidal.EaseIn = function (b) {
      return -Math.cos(b * Math.PI / 2) + 1;
    };
    ig.Tween.Easing.Sinusoidal.EaseOut = function (b) {
      return Math.sin(b * Math.PI / 2);
    };
    ig.Tween.Easing.Sinusoidal.EaseInOut = function (b) {
      return -0.5 * (Math.cos(Math.PI * b) - 1);
    };
    ig.Tween.Easing.Exponential.EaseIn = function (b) {
      return 0 == b ? 0 : Math.pow(2, 10 * (b - 1));
    };
    ig.Tween.Easing.Exponential.EaseOut = function (b) {
      return 1 == b ? 1 : -Math.pow(2, -10 * b) + 1;
    };
    ig.Tween.Easing.Exponential.EaseInOut = function (b) {
      return 0 == b ? 0 : 1 == b ? 1 : 1 > (b *= 2) ? 0.5 * Math.pow(2, 10 * (b - 1)) : 0.5 * (-Math.pow(2, -10 * (b - 1)) + 2);
    };
    ig.Tween.Easing.Circular.EaseIn = function (b) {
      return -(Math.sqrt(1 - b * b) - 1);
    };
    ig.Tween.Easing.Circular.EaseOut = function (b) {
      return Math.sqrt(1 - --b * b);
    };
    ig.Tween.Easing.Circular.EaseInOut = function (b) {
      return 1 > (b /= 0.5) ? -0.5 * (Math.sqrt(1 - b * b) - 1) : 0.5 * (Math.sqrt(1 - (b -= 2) * b) + 1);
    };
    ig.Tween.Easing.Elastic.EaseIn = function (b) {
      var c,
        d = 0.1,
        e = 0.4;
      if (0 == b) return 0;
      if (1 == b) return 1;
      e || (e = 0.3);
      !d || 1 > d ? (d = 1, c = e / 4) : c = e / (2 * Math.PI) * Math.asin(1 / d);
      return -(d * Math.pow(2, 10 * (b -= 1)) * Math.sin(2 * (b - c) * Math.PI / e));
    };
    ig.Tween.Easing.Elastic.EaseOut = function (b) {
      var c,
        d = 0.1,
        e = 0.4;
      if (0 == b) return 0;
      if (1 == b) return 1;
      e || (e = 0.3);
      !d || 1 > d ? (d = 1, c = e / 4) : c = e / (2 * Math.PI) * Math.asin(1 / d);
      return d * Math.pow(2, -10 * b) * Math.sin(2 * (b - c) * Math.PI / e) + 1;
    };
    ig.Tween.Easing.Elastic.EaseInOut = function (b) {
      var c,
        d = 0.1,
        e = 0.4;
      if (0 == b) return 0;
      if (1 == b) return 1;
      e || (e = 0.3);
      !d || 1 > d ? (d = 1, c = e / 4) : c = e / (2 * Math.PI) * Math.asin(1 / d);
      return 1 > (b *= 2) ? -0.5 * d * Math.pow(2, 10 * (b -= 1)) * Math.sin(2 * (b - c) * Math.PI / e) : 0.5 * d * Math.pow(2, -10 * (b -= 1)) * Math.sin(2 * (b - c) * Math.PI / e) + 1;
    };
    ig.Tween.Easing.Back.EaseIn = function (b) {
      return b * b * (2.70158 * b - 1.70158);
    };
    ig.Tween.Easing.Back.EaseOut = function (b) {
      return (b -= 1) * b * (2.70158 * b + 1.70158) + 1;
    };
    ig.Tween.Easing.Back.EaseInOut = function (b) {
      return 1 > (b *= 2) ? 0.5 * b * b * (3.5949095 * b - 2.5949095) : 0.5 * ((b -= 2) * b * (3.5949095 * b + 2.5949095) + 2);
    };
    ig.Tween.Easing.Bounce.EaseIn = function (b) {
      return 1 - ig.Tween.Easing.Bounce.EaseOut(1 - b);
    };
    ig.Tween.Easing.Bounce.EaseOut = function (b) {
      return (b /= 1) < 1 / 2.75 ? 7.5625 * b * b : b < 2 / 2.75 ? 7.5625 * (b -= 1.5 / 2.75) * b + 0.75 : b < 2.5 / 2.75 ? 7.5625 * (b -= 2.25 / 2.75) * b + 0.9375 : 7.5625 * (b -= 2.625 / 2.75) * b + 0.984375;
    };
    ig.Tween.Easing.Bounce.EaseInOut = function (b) {
      return 0.5 > b ? 0.5 * ig.Tween.Easing.Bounce.EaseIn(2 * b) : 0.5 * ig.Tween.Easing.Bounce.EaseOut(2 * b - 1) + 0.5;
    };
    ig.Tween.Interpolation = {
      Linear: function (b, c) {
        var d = b.length - 1,
          e = d * c,
          f = Math.floor(e),
          j = TWEEN.Interpolation.Utils.Linear;
        return 0 > c ? j(b[0], b[1], e) : 1 < c ? j(b[d], b[d - 1], d - e) : j(b[f], b[f + 1 > d ? d : f + 1], e - f);
      }
    };
  });
  ig.baked = !0;
  ig.module("plugins.patches.entity-patch").requires("impact.entity").defines(function () {
    ig.Entity.inject({
      handleMovementTrace: function (b) {
        this.standing = !1;
        b.collision.y && (0 < this.bounciness && Math.abs(this.vel.y) > this.minBounceVelocity ? this.vel.y *= -this.bounciness : (0 < this.vel.y && (this.standing = !0), this.vel.y = 0));
        b.collision.x && (this.vel.x = 0 < this.bounciness && Math.abs(this.vel.x) > this.minBounceVelocity ? this.vel.x * -this.bounciness : 0);
        if (b.collision.slope) {
          var c = b.collision.slope;
          if (0 < this.bounciness) {
            var d = this.vel.x * c.nx + this.vel.y * c.ny;
            this.vel.x = (this.vel.x - 2 * c.nx * d) * this.bounciness;
            this.vel.y = (this.vel.y - 2 * c.ny * d) * this.bounciness;
          } else d = (this.vel.x * c.x + this.vel.y * c.y) / (c.x * c.x + c.y * c.y), this.vel.x = c.x * d, this.vel.y = c.y * d, c = Math.atan2(c.x, c.y), c > this.slopeStanding.min && c < this.slopeStanding.max && (this.standing = !0);
        }
        this.pos.x = b.pos.x;
        this.pos.y = b.pos.y;
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.tweens-handler").requires("impact.entity", "plugins.tween", "plugins.patches.entity-patch").defines(function () {
    Array.prototype.indexOf || (Array.prototype.indexOf = function (b) {
      for (var d = 0; d < this.length; ++d) if (this[d] === b) return d;
      return -1;
    });
    ig.TweensHandler = ig.Class.extend({
      _tweens: [],
      _systemPausedTweens: [],
      init: function () {},
      getAll: function () {
        return this._tweens;
      },
      removeAll: function () {
        this._tweens = [];
      },
      add: function (b) {
        this._tweens.push(b);
      },
      remove: function (b) {
        b = this._tweens.indexOf(b);
        -1 !== b && this._tweens.splice(b, 1);
      },
      onSystemPause: function () {
        if (0 === this._tweens.length) return !1;
        for (var b = 0, d = null; b < this._tweens.length;) d = this._tweens[b], d._isPlaying && (this._systemPausedTweens.push(d), d.pause()), b++;
        return !0;
      },
      onSystemResume: function () {
        if (0 === this._systemPausedTweens.length) return !1;
        for (var b = 0; b < this._systemPausedTweens.length;) this._systemPausedTweens[b].resume(), b++;
        this._systemPausedTweens = [];
        return !0;
      },
      update: function (b, d) {
        if (0 === this._tweens.length) return !1;
        var e = 0;
        for (b = void 0 !== b ? b : ig.game.tweens.now(); e < this._tweens.length;) this._tweens[e].update(b) || d ? e++ : this._tweens.splice(e, 1);
        return !0;
      },
      now: function () {
        return Date.now();
      }
    });
    ig.TweenDef = ig.Class.extend({
      _ent: null,
      _valuesStart: {},
      _valuesEnd: {},
      _valuesStartRepeat: {},
      _duration: 1E3,
      _repeat: 0,
      _yoyo: !1,
      _isPlaying: !1,
      _reversed: !1,
      _delayTime: 0,
      _startTime: null,
      _pauseTime: null,
      _easingFunction: ig.Tween.Easing.Linear.EaseNone,
      _interpolationFunction: ig.Tween.Interpolation.Linear,
      _chainedTweens: [],
      _onStartCallback: null,
      _onStartCallbackFired: !1,
      _onUpdateCallback: null,
      _onCompleteCallback: null,
      _onStopCallback: null,
      _onPauseCallback: null,
      _onResumeCallback: null,
      _currentElapsed: 0,
      init: function (b) {
        this._object = b;
      },
      to: function (b, d) {
        this._valuesEnd = b;
        void 0 !== d && (this._duration = d);
        return this;
      },
      start: function (b) {
        if (this._isPlaying) return this;
        ig.game.tweens.add(this);
        this._isPlaying = !0;
        this._onStartCallbackFired = !1;
        this._startTime = void 0 !== b ? b : ig.game.tweens.now();
        this._startTime += this._delayTime;
        for (var d in this._valuesEnd) {
          if (this._valuesEnd[d] instanceof Array) {
            if (0 === this._valuesEnd[d].length) continue;
            this._valuesEnd[d] = [this._object[d]].concat(this._valuesEnd[d]);
          }
          void 0 !== this._object[d] && (this._valuesStart[d] = this._object[d], !1 === this._valuesStart[d] instanceof Array && (this._valuesStart[d] *= 1), this._valuesStartRepeat[d] = this._valuesStart[d] || 0);
        }
        return this;
      },
      stop: function () {
        if (!this._isPlaying) return this;
        ig.game.tweens.remove(this);
        this._isPlaying = !1;
        null !== this._onStopCallback && this._onStopCallback.call(this._object, this._object);
        this.stopChainedTweens();
        return this;
      },
      pause: function () {
        if (!this._isPlaying) return this;
        ig.game.tweens.remove(this);
        this._isPlaying = !1;
        this._pauseTime = ig.game.tweens.now();
        null !== this._onPauseCallback && this._onPauseCallback.call(this._object, this._object);
        return this;
      },
      resume: function () {
        if (this._isPlaying || !this._pauseTime) return this;
        var b = ig.game.tweens.now() - this._pauseTime;
        this._startTime += b;
        ig.game.tweens.add(this);
        this._isPlaying = !0;
        null !== this._onResumeCallback && this._onResumeCallback.call(this._object, this._object);
        this._pauseTime = null;
        return this;
      },
      end: function () {
        this.update(this._startTime + this._duration);
        return this;
      },
      stopChainedTweens: function () {
        for (var b = 0, d = this._chainedTweens.length; b < d; b++) this._chainedTweens[b].stop();
      },
      delay: function (b) {
        this._delayTime = b;
        return this;
      },
      repeat: function (b) {
        this._repeat = b;
        return this;
      },
      repeatDelay: function (b) {
        this._repeatDelayTime = b;
        return this;
      },
      yoyo: function (b) {
        this._yoyo = b;
        return this;
      },
      easing: function (b) {
        this._easingFunction = b;
        return this;
      },
      interpolation: function (b) {
        this._interpolationFunction = b;
        return this;
      },
      chain: function () {
        this._chainedTweens = arguments;
        return this;
      },
      onStart: function (b) {
        this._onStartCallback = b;
        return this;
      },
      onUpdate: function (b) {
        this._onUpdateCallback = b;
        return this;
      },
      onComplete: function (b) {
        this._onCompleteCallback = b;
        return this;
      },
      onStop: function (b) {
        this._onStopCallback = b;
        return this;
      },
      onPause: function (b) {
        this._onPauseCallback = b;
        return this;
      },
      onResume: function (b) {
        this._onResumeCallback = b;
        return this;
      },
      update: function (b) {
        var d, e, f;
        if (b < this._startTime) return !0;
        !1 === this._onStartCallbackFired && (null !== this._onStartCallback && this._onStartCallback.call(this._object, this._object), this._onStartCallbackFired = !0);
        e = (b - this._startTime) / this._duration;
        this._currentElapsed = e = 1 < e ? 1 : e;
        f = this._easingFunction(e);
        for (d in this._valuesEnd) if (void 0 !== this._valuesStart[d]) {
          var j = this._valuesStart[d] || 0,
            m = this._valuesEnd[d];
          m instanceof Array ? this._object[d] = this._interpolationFunction(m, f) : ("string" === typeof m && (m = "+" === m.charAt(0) || "-" === m.charAt(0) ? j + parseFloat(m) : parseFloat(m)), "number" === typeof m && (this._object[d] = j + (m - j) * f));
        }
        null !== this._onUpdateCallback && this._onUpdateCallback.call(this._object, this._object, f);
        if (1 === e) if (0 < this._repeat) {
          isFinite(this._repeat) && this._repeat--;
          for (d in this._valuesStartRepeat) "string" === typeof this._valuesEnd[d] && (this._valuesStartRepeat[d] = _valuesStartRepeat[d] + parseFloat(_valuesEnd[d])), this._yoyo && (e = this._valuesStartRepeat[d], this._valuesStartRepeat[d] = this._valuesEnd[d], this._valuesEnd[d] = e), this._valuesStart[d] = this._valuesStartRepeat[d];
          this._yoyo && (this._reversed = !this._reversed);
          this._startTime = void 0 !== this._repeatDelayTime ? b + this._repeatDelayTime : b + this._delayTime;
        } else {
          null !== this._onCompleteCallback && this._onCompleteCallback.call(this._object, this._object);
          b = 0;
          for (d = this._chainedTweens.length; b < d; b++) this._chainedTweens[b].start(this._startTime + this._duration);
          return !1;
        }
        return !0;
      }
    });
    var b = [1];
    ig.Tween.Interpolation = {
      Linear: function (b, d) {
        var e = b.length - 1,
          f = e * d,
          j = Math.floor(f),
          m = ig.Tween.Interpolation.Utils.Linear;
        return 0 > d ? m(b[0], b[1], f) : 1 < d ? m(b[e], b[e - 1], e - f) : m(b[j], b[j + 1 > e ? e : j + 1], f - j);
      },
      Bezier: function (b, d) {
        for (var e = 0, f = b.length - 1, j = Math.pow, m = ig.Tween.Interpolation.Utils.Bernstein, l = 0; l <= f; l++) e += j(1 - d, f - l) * j(d, l) * b[l] * m(f, l);
        return e;
      },
      CatmullRom: function (b, d) {
        var e = b.length - 1,
          f = e * d,
          j = Math.floor(f),
          m = ig.Tween.Interpolation.Utils.CatmullRom;
        return b[0] === b[e] ? (0 > d && (j = Math.floor(f = e * (1 + d))), m(b[(j - 1 + e) % e], b[j], b[(j + 1) % e], b[(j + 2) % e], f - j)) : 0 > d ? b[0] - (m(b[0], b[0], b[1], b[1], -f) - b[0]) : 1 < d ? b[e] - (m(b[e], b[e], b[e - 1], b[e - 1], f - e) - b[e]) : m(b[j ? j - 1 : 0], b[j], b[e < j + 1 ? e : j + 1], b[e < j + 2 ? e : j + 2], f - j);
      },
      Utils: {
        Linear: function (b, d, e) {
          return (d - b) * e + b;
        },
        Bernstein: function (b, d) {
          var e = ig.Tween.Interpolation.Utils.Factorial;
          return e(b) / e(d) / e(b - d);
        },
        Factorial: function (c) {
          var d = 1;
          if (b[c]) return b[c];
          for (var e = c; 1 < e; e--) d *= e;
          return b[c] = d;
        },
        CatmullRom: function (b, d, e, f, j) {
          b = 0.5 * (e - b);
          f = 0.5 * (f - d);
          var m = j * j;
          return (2 * d - 2 * e + b + f) * j * m + (-3 * d + 3 * e - 2 * b - f) * m + b * j + d;
        }
      }
    };
  });
  ig.baked = !0;
  ig.module("plugins.url-parameters").defines(function () {
    ig.UrlParameters = ig.Class.extend({
      init: function () {
        switch (getQueryVariable("iphone")) {
          case "true":
            ig.ua.iPhone = !0, console.log("iPhone mode");
        }
        var b = getQueryVariable("webview");
        if (b) switch (b) {
          case "true":
            ig.ua.is_uiwebview = !0, console.log("webview mode");
        }
        if (b = getQueryVariable("debug")) switch (b) {
          case "true":
            ig.game.showDebugMenu(), console.log("debug mode");
        }
        switch (getQueryVariable("view")) {
          case "stats":
            ig.game.resetPlayerStats(), ig.game.endGame();
        }
        getQueryVariable("ad");
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.director").requires("impact.impact").defines(function () {
    ig.Director = ig.Class.extend({
      init: function (b, c) {
        this.game = b;
        this.levels = [];
        this.currentLevel = 0;
        this.append(c);
      },
      loadLevel: function (b) {
        for (var c in ig.sizeHandler.dynamicClickableEntityDivs) {
          var d = ig.domHandler.getElementById("#" + c);
          ig.domHandler.hide(d);
        }
        this.currentLevel = b;
        this.game.loadLevel(this.levels[b]);
        return !0;
      },
      loadLevelWithoutEntities: function (b) {
        this.currentLevel = b;
        this.game.loadLevelWithoutEntities(this.levels[b]);
        return !0;
      },
      append: function (b) {
        newLevels = [];
        return "object" === typeof b ? (b.constructor === [].constructor ? newLevels = b : newLevels[0] = b, this.levels = this.levels.concat(newLevels), !0) : !1;
      },
      nextLevel: function () {
        return this.currentLevel + 1 < this.levels.length ? this.loadLevel(this.currentLevel + 1) : !1;
      },
      previousLevel: function () {
        return 0 <= this.currentLevel - 1 ? this.loadLevel(this.currentLevel - 1) : !1;
      },
      jumpTo: function (b) {
        var c = null;
        for (i = 0; i < this.levels.length; i++) this.levels[i] == b && (c = i);
        return 0 <= c ? this.loadLevel(c) : !1;
      },
      firstLevel: function () {
        return this.loadLevel(0);
      },
      lastLevel: function () {
        return this.loadLevel(this.levels.length - 1);
      },
      reloadLevel: function () {
        return this.loadLevel(this.currentLevel);
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.impact-storage").requires("impact.game").defines(function () {
    ig.Storage = ig.Class.extend({
      staticInstantiate: function () {
        return !ig.Storage.instance ? null : ig.Storage.instance;
      },
      init: function () {
        ig.Storage.instance = this;
      },
      isCapable: function () {
        return "undefined" !== typeof window.localStorage;
      },
      isSet: function (b) {
        return null !== this.get(b);
      },
      initUnset: function (b, c) {
        null === this.get(b) && this.set(b, c);
      },
      get: function (b) {
        if (!this.isCapable()) return null;
        try {
          return JSON.parse(localStorage.getItem(b));
        } catch (c) {
          return window.localStorage.getItem(b);
        }
      },
      getInt: function (b) {
        return ~~this.get(b);
      },
      getFloat: function (b) {
        return parseFloat(this.get(b));
      },
      getBool: function (b) {
        return !!this.get(b);
      },
      key: function (b) {
        return this.isCapable() ? window.localStorage.key(b) : null;
      },
      set: function (b, c) {
        if (!this.isCapable()) return null;
        try {
          window.localStorage.setItem(b, JSON.stringify(c));
        } catch (d) {
          console.log(d);
        }
      },
      setHighest: function (b, c) {
        c > this.getFloat(b) && this.set(b, c);
      },
      remove: function (b) {
        if (!this.isCapable()) return null;
        window.localStorage.removeItem(b);
      },
      clear: function () {
        if (!this.isCapable()) return null;
        window.localStorage.clear();
      }
    });
  });
  var Box2D = {
    SCALE: 0.1
  };
  (function (b, c) {
    function d() {}
    var e = function () {
      var b,
        c,
        d,
        e,
        g = Function.call,
        q = Object.prototype,
        y = g.bind(q.hasOwnProperty),
        z = g.bind(q.propertyIsEnumerable),
        A = g.bind(q.toString),
        B = y(q, "__defineGetter__");
      B && (b = g.bind(q.__defineGetter__), c = g.bind(q.__defineSetter__), d = g.bind(q.__lookupGetter__), e = g.bind(q.__lookupSetter__));
      var H = function (b) {
        return null == b || "object" != typeof b && "function" != typeof b;
      };
      Object.getPrototypeOf || (Object.getPrototypeOf = function (b) {
        var c = b.__proto__;
        return c || null === c ? c : "[object Function]" === A(b.constructor) ? b.constructor.prototype : b instanceof Object ? q : null;
      });
      g = function (b) {
        try {
          return b.sentinel = 0, 0 === Object.getOwnPropertyDescriptor(b, "sentinel").value;
        } catch (c) {
          return !1;
        }
      };
      if (Object.defineProperty) {
        var D = g({});
        if (!("undefined" == typeof document || g(document.createElement("div"))) || !D) var s = Object.getOwnPropertyDescriptor;
      }
      if (!Object.getOwnPropertyDescriptor || s) Object.getOwnPropertyDescriptor = function (b, c) {
        if (H(b)) throw new TypeError("Object.getOwnPropertyDescriptor called on a non-object: " + b);
        if (s) try {
          return s.call(Object, b, c);
        } catch (f) {}
        var g;
        if (!y(b, c)) return g;
        if (g = {
          enumerable: z(b, c),
          configurable: !0
        }, B) {
          var j = b.__proto__,
            F = b !== q;
          F && (b.__proto__ = q);
          var r = d(b, c),
            t = e(b, c);
          if (F && (b.__proto__ = j), r || t) return r && (g.get = r), t && (g.set = t), g;
        }
        return g.value = b[c], g.writable = !0, g;
      };
      if (Object.getOwnPropertyNames || (Object.getOwnPropertyNames = function (b) {
        return Object.keys(b);
      }), !Object.create) {
        var G;
        G = "undefined" == typeof document ? function () {
          return {
            __proto__: null
          };
        } : function () {
          var b,
            c,
            d,
            e,
            f,
            g = function () {
              if (!document.domain) return !1;
              try {
                return !!new ActiveXObject("htmlfile");
              } catch (b) {
                return !1;
              }
            }() ? ((f = new ActiveXObject("htmlfile")).write("<script></script>"), f.close(), e = f.parentWindow.Object.prototype, f = null, e) : (c = document.createElement("iframe"), d = document.body || document.documentElement, c.style.display = "none", d.appendChild(c), c.src = "javascript:", b = c.contentWindow.Object.prototype, d.removeChild(c), c = null, b);
          delete g.constructor;
          delete g.hasOwnProperty;
          delete g.propertyIsEnumerable;
          delete g.isPrototypeOf;
          delete g.toLocaleString;
          delete g.toString;
          delete g.valueOf;
          var l = function () {};
          return l.prototype = g, G = function () {
            return new l();
          }, new l();
        };
        Object.create = function (b, c) {
          var d;
          d = function () {};
          if (null === b) d = G();else {
            if (null !== b && H(b)) throw new TypeError("Object prototype may only be an Object or null");
            d.prototype = b;
            (d = new d()).__proto__ = b;
          }
          return void 0 !== c && Object.defineProperties(d, c), d;
        };
      }
      var F,
        D = function (b) {
          try {
            return Object.defineProperty(b, "sentinel", {}), "sentinel" in b;
          } catch (c) {
            return !1;
          }
        };
      if (Object.defineProperty && (g = D({}), D = "undefined" == typeof document || D(document.createElement("div")), !g || !D)) var K = Object.defineProperty,
        L = Object.defineProperties;
      if (!Object.defineProperty || K) Object.defineProperty = function (g, s, F) {
        if (H(g)) throw new TypeError("Object.defineProperty called on non-object: " + g);
        if (H(F)) throw new TypeError("Property description must be an object: " + F);
        if (K) try {
          return K.call(Object, g, s, F);
        } catch (G) {}
        if ("value" in F) {
          if (B && (d(g, s) || e(g, s))) {
            var z = g.__proto__;
            g.__proto__ = q;
            delete g[s];
            g[s] = F.value;
            g.__proto__ = z;
          } else g[s] = F.value;
        } else {
          var z = "get" in F,
            A = "set" in F;
          if (!B && (z || A)) throw new TypeError("getters & setters can not be defined on this javascript engine");
          z && b(g, s, F.get);
          A && c(g, s, F.set);
        }
        return g;
      };
      Object.defineProperties && !L || (Object.defineProperties = function (b, c) {
        if (L) try {
          return L.call(Object, b, c);
        } catch (d) {}
        return Object.keys(c).forEach(function (d) {
          "__proto__" !== d && Object.defineProperty(b, d, c[d]);
        }), b;
      });
      Object.seal || (Object.seal = function (b) {
        if (Object(b) !== b) throw new TypeError("Object.seal can only be called on Objects.");
        return b;
      });
      Object.freeze || (Object.freeze = function (b) {
        if (Object(b) !== b) throw new TypeError("Object.freeze can only be called on Objects.");
        return b;
      });
      try {
        Object.freeze(function () {});
      } catch (R) {
        Object.freeze = (F = Object.freeze, function (b) {
          return "function" == typeof b ? b : F(b);
        });
      }
      Object.preventExtensions || (Object.preventExtensions = function (b) {
        if (Object(b) !== b) throw new TypeError("Object.preventExtensions can only be called on Objects.");
        return b;
      });
      Object.isSealed || (Object.isSealed = function (b) {
        if (Object(b) !== b) throw new TypeError("Object.isSealed can only be called on Objects.");
        return !1;
      });
      Object.isFrozen || (Object.isFrozen = function (b) {
        if (Object(b) !== b) throw new TypeError("Object.isFrozen can only be called on Objects.");
        return !1;
      });
      Object.isExtensible || (Object.isExtensible = function (b) {
        if (Object(b) !== b) throw new TypeError("Object.isExtensible can only be called on Objects.");
        for (var c = ""; y(b, c);) c += "?";
        b[c] = !0;
        var d = y(b, c);
        return delete b[c], d;
      });
    };
    "function" == typeof define && define.amd ? define(e) : "object" == typeof exports ? module.exports = e() : this.returnExports = e();
    !0;
    b.inherit = function (b, c) {
      d.prototype = c.prototype;
      b.prototype = new d();
      b.prototype.constructor = b;
    };
    b.generateCallback = function (b, c) {
      return function () {
        c.apply(b, arguments);
      };
    };
    b.NVector = function (b) {
      b === c && (b = 0);
      for (var d = Array(b || 0), e = 0; e < b; ++e) d[e] = 0;
      return d;
    };
    b.is = function (b, d) {
      return null === b ? !1 : d instanceof Function && b instanceof d || b.constructor.__implements != c && b.constructor.__implements[d] ? !0 : !1;
    };
    b.parseUInt = function (b) {
      return Math.abs(parseInt(b));
    };
  })(Box2D);
  var Vector = Array,
    Vector_a2j_Number = Box2D.NVector;
  "undefined" === typeof Box2D && (Box2D = {});
  "undefined" === typeof Box2D.Collision && (Box2D.Collision = {});
  "undefined" === typeof Box2D.Collision.Shapes && (Box2D.Collision.Shapes = {});
  "undefined" === typeof Box2D.Common && (Box2D.Common = {});
  "undefined" === typeof Box2D.Common.Math && (Box2D.Common.Math = {});
  "undefined" === typeof Box2D.Dynamics && (Box2D.Dynamics = {});
  "undefined" === typeof Box2D.Dynamics.Contacts && (Box2D.Dynamics.Contacts = {});
  "undefined" === typeof Box2D.Dynamics.Controllers && (Box2D.Dynamics.Controllers = {});
  "undefined" === typeof Box2D.Dynamics.Joints && (Box2D.Dynamics.Joints = {});
  (function () {
    function b() {
      b.b2AABB.apply(this, arguments);
    }
    function c() {
      c.b2Bound.apply(this, arguments);
    }
    function d() {
      d.b2BoundValues.apply(this, arguments);
      this.constructor === d && this.b2BoundValues.apply(this, arguments);
    }
    function e() {
      e.b2Collision.apply(this, arguments);
    }
    function f() {
      f.b2ContactID.apply(this, arguments);
      this.constructor === f && this.b2ContactID.apply(this, arguments);
    }
    function j() {
      j.b2ContactPoint.apply(this, arguments);
    }
    function m() {
      m.b2Distance.apply(this, arguments);
    }
    function l() {
      l.b2DistanceInput.apply(this, arguments);
    }
    function g() {
      g.b2DistanceOutput.apply(this, arguments);
    }
    function q() {
      q.b2DistanceProxy.apply(this, arguments);
    }
    function y() {
      y.b2DynamicTree.apply(this, arguments);
      this.constructor === y && this.b2DynamicTree.apply(this, arguments);
    }
    function z() {
      z.b2DynamicTreeBroadPhase.apply(this, arguments);
    }
    function A() {
      A.b2DynamicTreeNode.apply(this, arguments);
    }
    function B() {
      B.b2DynamicTreePair.apply(this, arguments);
    }
    function H() {
      H.b2Manifold.apply(this, arguments);
      this.constructor === H && this.b2Manifold.apply(this, arguments);
    }
    function D() {
      D.b2ManifoldPoint.apply(this, arguments);
      this.constructor === D && this.b2ManifoldPoint.apply(this, arguments);
    }
    function s() {
      s.b2Point.apply(this, arguments);
    }
    function G() {
      G.b2RayCastInput.apply(this, arguments);
      this.constructor === G && this.b2RayCastInput.apply(this, arguments);
    }
    function F() {
      F.b2RayCastOutput.apply(this, arguments);
    }
    function K() {
      K.b2Segment.apply(this, arguments);
    }
    function L() {
      L.b2SeparationFunction.apply(this, arguments);
    }
    function R() {
      R.b2Simplex.apply(this, arguments);
      this.constructor === R && this.b2Simplex.apply(this, arguments);
    }
    function I() {
      I.b2SimplexCache.apply(this, arguments);
    }
    function fa() {
      fa.b2SimplexVertex.apply(this, arguments);
    }
    function N() {
      N.b2TimeOfImpact.apply(this, arguments);
    }
    function P() {
      P.b2TOIInput.apply(this, arguments);
    }
    function ba() {
      ba.b2WorldManifold.apply(this, arguments);
      this.constructor === ba && this.b2WorldManifold.apply(this, arguments);
    }
    function V() {
      V.ClipVertex.apply(this, arguments);
    }
    function r() {
      r.Features.apply(this, arguments);
    }
    function t() {
      t.b2CircleShape.apply(this, arguments);
      this.constructor === t && this.b2CircleShape.apply(this, arguments);
    }
    function E() {
      E.b2EdgeChainDef.apply(this, arguments);
      this.constructor === E && this.b2EdgeChainDef.apply(this, arguments);
    }
    function C() {
      C.b2EdgeShape.apply(this, arguments);
      this.constructor === C && this.b2EdgeShape.apply(this, arguments);
    }
    function O() {
      O.b2MassData.apply(this, arguments);
    }
    function aa() {
      aa.b2PolygonShape.apply(this, arguments);
      this.constructor === aa && this.b2PolygonShape.apply(this, arguments);
    }
    function Q() {
      Q.b2Shape.apply(this, arguments);
      this.constructor === Q && this.b2Shape.apply(this, arguments);
    }
    function n() {
      n.b2Color.apply(this, arguments);
      this.constructor === n && this.b2Color.apply(this, arguments);
    }
    function u() {
      u.b2Settings.apply(this, arguments);
    }
    function J() {
      J.b2Mat22.apply(this, arguments);
      this.constructor === J && this.b2Mat22.apply(this, arguments);
    }
    function x() {
      x.b2Mat33.apply(this, arguments);
      this.constructor === x && this.b2Mat33.apply(this, arguments);
    }
    function M() {
      M.b2Math.apply(this, arguments);
    }
    function W() {
      W.b2Sweep.apply(this, arguments);
    }
    function S() {
      S.b2Transform.apply(this, arguments);
      this.constructor === S && this.b2Transform.apply(this, arguments);
    }
    function ga() {
      ga.b2Vec2.apply(this, arguments);
      this.constructor === ga && this.b2Vec2.apply(this, arguments);
    }
    function ka() {
      ka.b2Vec3.apply(this, arguments);
      this.constructor === ka && this.b2Vec3.apply(this, arguments);
    }
    function na() {
      na.b2Body.apply(this, arguments);
      this.constructor === na && this.b2Body.apply(this, arguments);
    }
    function oa() {
      oa.b2BodyDef.apply(this, arguments);
      this.constructor === oa && this.b2BodyDef.apply(this, arguments);
    }
    function ua() {
      ua.b2ContactFilter.apply(this, arguments);
    }
    function Y() {
      Y.b2ContactImpulse.apply(this, arguments);
    }
    function Db() {
      Db.b2ContactListener.apply(this, arguments);
    }
    function ya() {
      ya.b2ContactManager.apply(this, arguments);
      this.constructor === ya && this.b2ContactManager.apply(this, arguments);
    }
    function ab() {
      ab.b2DebugDraw.apply(this, arguments);
      this.constructor === ab && this.b2DebugDraw.apply(this, arguments);
    }
    function cb() {
      cb.b2DestructionListener.apply(this, arguments);
    }
    function Ja() {
      Ja.b2FilterData.apply(this, arguments);
    }
    function Ka() {
      Ka.b2Fixture.apply(this, arguments);
      this.constructor === Ka && this.b2Fixture.apply(this, arguments);
    }
    function db() {
      db.b2FixtureDef.apply(this, arguments);
      this.constructor === db && this.b2FixtureDef.apply(this, arguments);
    }
    function La() {
      La.b2Island.apply(this, arguments);
      this.constructor === La && this.b2Island.apply(this, arguments);
    }
    function nb() {
      nb.b2TimeStep.apply(this, arguments);
    }
    function ob() {
      ob.b2World.apply(this, arguments);
      this.constructor === ob && this.b2World.apply(this, arguments);
    }
    function da() {
      da.b2CircleContact.apply(this, arguments);
    }
    function p() {
      p.b2Contact.apply(this, arguments);
      this.constructor === p && this.b2Contact.apply(this, arguments);
    }
    function pb() {
      pb.b2ContactConstraint.apply(this, arguments);
      this.constructor === pb && this.b2ContactConstraint.apply(this, arguments);
    }
    function Eb() {
      Eb.b2ContactConstraintPoint.apply(this, arguments);
    }
    function Fb() {
      Fb.b2ContactEdge.apply(this, arguments);
    }
    function qb() {
      qb.b2ContactFactory.apply(this, arguments);
      this.constructor === qb && this.b2ContactFactory.apply(this, arguments);
    }
    function za() {
      za.b2ContactRegister.apply(this, arguments);
    }
    function eb() {
      eb.b2ContactResult.apply(this, arguments);
    }
    function ca() {
      ca.b2ContactSolver.apply(this, arguments);
      this.constructor === ca && this.b2ContactSolver.apply(this, arguments);
    }
    function hb() {
      hb.b2EdgeAndCircleContact.apply(this, arguments);
    }
    function pa() {
      pa.b2NullContact.apply(this, arguments);
      this.constructor === pa && this.b2NullContact.apply(this, arguments);
    }
    function ra() {
      ra.b2PolyAndCircleContact.apply(this, arguments);
    }
    function ib() {
      ib.b2PolyAndEdgeContact.apply(this, arguments);
    }
    function sb() {
      sb.b2PolygonContact.apply(this, arguments);
    }
    function tb() {
      tb.b2PositionSolverManifold.apply(this, arguments);
      this.constructor === tb && this.b2PositionSolverManifold.apply(this, arguments);
    }
    function Ib() {
      Ib.b2BuoyancyController.apply(this, arguments);
    }
    function ub() {
      ub.b2ConstantAccelController.apply(this, arguments);
    }
    function Ca() {
      Ca.b2ConstantForceController.apply(this, arguments);
    }
    function fb() {
      fb.b2Controller.apply(this, arguments);
    }
    function vb() {
      vb.b2ControllerEdge.apply(this, arguments);
    }
    function Ta() {
      Ta.b2GravityController.apply(this, arguments);
    }
    function Ua() {
      Ua.b2TensorDampingController.apply(this, arguments);
    }
    function Va() {
      Va.b2DistanceJoint.apply(this, arguments);
      this.constructor === Va && this.b2DistanceJoint.apply(this, arguments);
    }
    function Oa() {
      Oa.b2DistanceJointDef.apply(this, arguments);
      this.constructor === Oa && this.b2DistanceJointDef.apply(this, arguments);
    }
    function Wa() {
      Wa.b2FrictionJoint.apply(this, arguments);
      this.constructor === Wa && this.b2FrictionJoint.apply(this, arguments);
    }
    function Ya() {
      Ya.b2FrictionJointDef.apply(this, arguments);
      this.constructor === Ya && this.b2FrictionJointDef.apply(this, arguments);
    }
    function Ea() {
      Ea.b2GearJoint.apply(this, arguments);
      this.constructor === Ea && this.b2GearJoint.apply(this, arguments);
    }
    function ea() {
      ea.b2GearJointDef.apply(this, arguments);
      this.constructor === ea && this.b2GearJointDef.apply(this, arguments);
    }
    function X() {
      X.b2Jacobian.apply(this, arguments);
    }
    function Qa() {
      Qa.b2Joint.apply(this, arguments);
      this.constructor === Qa && this.b2Joint.apply(this, arguments);
    }
    function jb() {
      jb.b2JointDef.apply(this, arguments);
      this.constructor === jb && this.b2JointDef.apply(this, arguments);
    }
    function Na() {
      Na.b2JointEdge.apply(this, arguments);
    }
    function Za() {
      Za.b2LineJoint.apply(this, arguments);
      this.constructor === Za && this.b2LineJoint.apply(this, arguments);
    }
    function gb() {
      gb.b2LineJointDef.apply(this, arguments);
      this.constructor === gb && this.b2LineJointDef.apply(this, arguments);
    }
    function Pa() {
      Pa.b2MouseJoint.apply(this, arguments);
      this.constructor === Pa && this.b2MouseJoint.apply(this, arguments);
    }
    function xa() {
      xa.b2MouseJointDef.apply(this, arguments);
      this.constructor === xa && this.b2MouseJointDef.apply(this, arguments);
    }
    function Fa() {
      Fa.b2PrismaticJoint.apply(this, arguments);
      this.constructor === Fa && this.b2PrismaticJoint.apply(this, arguments);
    }
    function wa() {
      wa.b2PrismaticJointDef.apply(this, arguments);
      this.constructor === wa && this.b2PrismaticJointDef.apply(this, arguments);
    }
    function Z() {
      Z.b2PulleyJoint.apply(this, arguments);
      this.constructor === Z && this.b2PulleyJoint.apply(this, arguments);
    }
    function ma() {
      ma.b2PulleyJointDef.apply(this, arguments);
      this.constructor === ma && this.b2PulleyJointDef.apply(this, arguments);
    }
    function la() {
      la.b2RevoluteJoint.apply(this, arguments);
      this.constructor === la && this.b2RevoluteJoint.apply(this, arguments);
    }
    function ia() {
      ia.b2RevoluteJointDef.apply(this, arguments);
      this.constructor === ia && this.b2RevoluteJointDef.apply(this, arguments);
    }
    function Aa() {
      Aa.b2WeldJoint.apply(this, arguments);
      this.constructor === Aa && this.b2WeldJoint.apply(this, arguments);
    }
    function Ra() {
      Ra.b2WeldJointDef.apply(this, arguments);
      this.constructor === Ra && this.b2WeldJointDef.apply(this, arguments);
    }
    Box2D.Collision.IBroadPhase = "Box2D.Collision.IBroadPhase";
    Box2D.Collision.b2AABB = b;
    Box2D.Collision.b2Bound = c;
    Box2D.Collision.b2BoundValues = d;
    Box2D.Collision.b2Collision = e;
    Box2D.Collision.b2ContactID = f;
    Box2D.Collision.b2ContactPoint = j;
    Box2D.Collision.b2Distance = m;
    Box2D.Collision.b2DistanceInput = l;
    Box2D.Collision.b2DistanceOutput = g;
    Box2D.Collision.b2DistanceProxy = q;
    Box2D.Collision.b2DynamicTree = y;
    Box2D.Collision.b2DynamicTreeBroadPhase = z;
    Box2D.Collision.b2DynamicTreeNode = A;
    Box2D.Collision.b2DynamicTreePair = B;
    Box2D.Collision.b2Manifold = H;
    Box2D.Collision.b2ManifoldPoint = D;
    Box2D.Collision.b2Point = s;
    Box2D.Collision.b2RayCastInput = G;
    Box2D.Collision.b2RayCastOutput = F;
    Box2D.Collision.b2Segment = K;
    Box2D.Collision.b2SeparationFunction = L;
    Box2D.Collision.b2Simplex = R;
    Box2D.Collision.b2SimplexCache = I;
    Box2D.Collision.b2SimplexVertex = fa;
    Box2D.Collision.b2TimeOfImpact = N;
    Box2D.Collision.b2TOIInput = P;
    Box2D.Collision.b2WorldManifold = ba;
    Box2D.Collision.ClipVertex = V;
    Box2D.Collision.Features = r;
    Box2D.Collision.Shapes.b2CircleShape = t;
    Box2D.Collision.Shapes.b2EdgeChainDef = E;
    Box2D.Collision.Shapes.b2EdgeShape = C;
    Box2D.Collision.Shapes.b2MassData = O;
    Box2D.Collision.Shapes.b2PolygonShape = aa;
    Box2D.Collision.Shapes.b2Shape = Q;
    Box2D.Common.b2internal = "Box2D.Common.b2internal";
    Box2D.Common.b2Color = n;
    Box2D.Common.b2Settings = u;
    Box2D.Common.Math.b2Mat22 = J;
    Box2D.Common.Math.b2Mat33 = x;
    Box2D.Common.Math.b2Math = M;
    Box2D.Common.Math.b2Sweep = W;
    Box2D.Common.Math.b2Transform = S;
    Box2D.Common.Math.b2Vec2 = ga;
    Box2D.Common.Math.b2Vec3 = ka;
    Box2D.Dynamics.b2Body = na;
    Box2D.Dynamics.b2BodyDef = oa;
    Box2D.Dynamics.b2ContactFilter = ua;
    Box2D.Dynamics.b2ContactImpulse = Y;
    Box2D.Dynamics.b2ContactListener = Db;
    Box2D.Dynamics.b2ContactManager = ya;
    Box2D.Dynamics.b2DebugDraw = ab;
    Box2D.Dynamics.b2DestructionListener = cb;
    Box2D.Dynamics.b2FilterData = Ja;
    Box2D.Dynamics.b2Fixture = Ka;
    Box2D.Dynamics.b2FixtureDef = db;
    Box2D.Dynamics.b2Island = La;
    Box2D.Dynamics.b2TimeStep = nb;
    Box2D.Dynamics.b2World = ob;
    Box2D.Dynamics.Contacts.b2CircleContact = da;
    Box2D.Dynamics.Contacts.b2Contact = p;
    Box2D.Dynamics.Contacts.b2ContactConstraint = pb;
    Box2D.Dynamics.Contacts.b2ContactConstraintPoint = Eb;
    Box2D.Dynamics.Contacts.b2ContactEdge = Fb;
    Box2D.Dynamics.Contacts.b2ContactFactory = qb;
    Box2D.Dynamics.Contacts.b2ContactRegister = za;
    Box2D.Dynamics.Contacts.b2ContactResult = eb;
    Box2D.Dynamics.Contacts.b2ContactSolver = ca;
    Box2D.Dynamics.Contacts.b2EdgeAndCircleContact = hb;
    Box2D.Dynamics.Contacts.b2NullContact = pa;
    Box2D.Dynamics.Contacts.b2PolyAndCircleContact = ra;
    Box2D.Dynamics.Contacts.b2PolyAndEdgeContact = ib;
    Box2D.Dynamics.Contacts.b2PolygonContact = sb;
    Box2D.Dynamics.Contacts.b2PositionSolverManifold = tb;
    Box2D.Dynamics.Controllers.b2BuoyancyController = Ib;
    Box2D.Dynamics.Controllers.b2ConstantAccelController = ub;
    Box2D.Dynamics.Controllers.b2ConstantForceController = Ca;
    Box2D.Dynamics.Controllers.b2Controller = fb;
    Box2D.Dynamics.Controllers.b2ControllerEdge = vb;
    Box2D.Dynamics.Controllers.b2GravityController = Ta;
    Box2D.Dynamics.Controllers.b2TensorDampingController = Ua;
    Box2D.Dynamics.Joints.b2DistanceJoint = Va;
    Box2D.Dynamics.Joints.b2DistanceJointDef = Oa;
    Box2D.Dynamics.Joints.b2FrictionJoint = Wa;
    Box2D.Dynamics.Joints.b2FrictionJointDef = Ya;
    Box2D.Dynamics.Joints.b2GearJoint = Ea;
    Box2D.Dynamics.Joints.b2GearJointDef = ea;
    Box2D.Dynamics.Joints.b2Jacobian = X;
    Box2D.Dynamics.Joints.b2Joint = Qa;
    Box2D.Dynamics.Joints.b2JointDef = jb;
    Box2D.Dynamics.Joints.b2JointEdge = Na;
    Box2D.Dynamics.Joints.b2LineJoint = Za;
    Box2D.Dynamics.Joints.b2LineJointDef = gb;
    Box2D.Dynamics.Joints.b2MouseJoint = Pa;
    Box2D.Dynamics.Joints.b2MouseJointDef = xa;
    Box2D.Dynamics.Joints.b2PrismaticJoint = Fa;
    Box2D.Dynamics.Joints.b2PrismaticJointDef = wa;
    Box2D.Dynamics.Joints.b2PulleyJoint = Z;
    Box2D.Dynamics.Joints.b2PulleyJointDef = ma;
    Box2D.Dynamics.Joints.b2RevoluteJoint = la;
    Box2D.Dynamics.Joints.b2RevoluteJointDef = ia;
    Box2D.Dynamics.Joints.b2WeldJoint = Aa;
    Box2D.Dynamics.Joints.b2WeldJointDef = Ra;
  })();
  Box2D.postDefs = [];
  (function () {
    var b = Box2D.Collision.Shapes.b2CircleShape,
      c = Box2D.Collision.Shapes.b2PolygonShape,
      d = Box2D.Collision.Shapes.b2Shape,
      e = Box2D.Common.b2Settings,
      f = Box2D.Common.Math.b2Math,
      j = Box2D.Common.Math.b2Sweep,
      m = Box2D.Common.Math.b2Transform,
      l = Box2D.Common.Math.b2Vec2,
      g = Box2D.Collision.b2AABB,
      q = Box2D.Collision.b2Bound,
      y = Box2D.Collision.b2BoundValues,
      z = Box2D.Collision.b2Collision,
      A = Box2D.Collision.b2ContactID,
      B = Box2D.Collision.b2ContactPoint,
      H = Box2D.Collision.b2Distance,
      D = Box2D.Collision.b2DistanceInput,
      s = Box2D.Collision.b2DistanceOutput,
      G = Box2D.Collision.b2DistanceProxy,
      F = Box2D.Collision.b2DynamicTree,
      K = Box2D.Collision.b2DynamicTreeBroadPhase,
      L = Box2D.Collision.b2DynamicTreeNode,
      R = Box2D.Collision.b2DynamicTreePair,
      I = Box2D.Collision.b2Manifold,
      fa = Box2D.Collision.b2ManifoldPoint,
      N = Box2D.Collision.b2Point,
      P = Box2D.Collision.b2RayCastInput,
      ba = Box2D.Collision.b2RayCastOutput,
      V = Box2D.Collision.b2Segment,
      r = Box2D.Collision.b2SeparationFunction,
      t = Box2D.Collision.b2Simplex,
      E = Box2D.Collision.b2SimplexCache,
      C = Box2D.Collision.b2SimplexVertex,
      O = Box2D.Collision.b2TimeOfImpact,
      aa = Box2D.Collision.b2TOIInput,
      Q = Box2D.Collision.b2WorldManifold,
      n = Box2D.Collision.ClipVertex,
      u = Box2D.Collision.Features,
      J = Box2D.Collision.IBroadPhase;
    g.b2AABB = function () {
      this.lowerBound = new l();
      this.upperBound = new l();
    };
    g.prototype.IsValid = function () {
      var b = this.upperBound.y - this.lowerBound.y;
      return 0 <= this.upperBound.x - this.lowerBound.x && 0 <= b && this.lowerBound.IsValid() && this.upperBound.IsValid();
    };
    g.prototype.GetCenter = function () {
      return new l((this.lowerBound.x + this.upperBound.x) / 2, (this.lowerBound.y + this.upperBound.y) / 2);
    };
    g.prototype.GetExtents = function () {
      return new l((this.upperBound.x - this.lowerBound.x) / 2, (this.upperBound.y - this.lowerBound.y) / 2);
    };
    g.prototype.Contains = function (b) {
      return this.lowerBound.x <= b.lowerBound.x && this.lowerBound.y <= b.lowerBound.y && b.upperBound.x <= this.upperBound.x && b.upperBound.y <= this.upperBound.y;
    };
    g.prototype.RayCast = function (b, c) {
      var d = -Number.MAX_VALUE,
        e = Number.MAX_VALUE,
        f = c.p1.x,
        n = c.p1.y,
        g = c.p2.x - c.p1.x,
        l = c.p2.y - c.p1.y,
        j = Math.abs(l),
        r = b.normal,
        u = 0,
        t = 0,
        C = 0;
      if (Math.abs(g) < Number.MIN_VALUE) {
        if (f < this.lowerBound.x || this.upperBound.x < f) return !1;
      } else if (u = 1 / g, t = (this.lowerBound.x - f) * u, u *= this.upperBound.x - f, C = -1, t > u && (C = t, t = u, u = C, C = 1), t > d && (r.x = C, r.y = 0, d = t), e = Math.min(e, u), d > e) return !1;
      if (j < Number.MIN_VALUE) {
        if (n < this.lowerBound.y || this.upperBound.y < n) return !1;
      } else if (u = 1 / l, t = (this.lowerBound.y - n) * u, u *= this.upperBound.y - n, C = -1, t > u && (C = t, t = u, u = C, C = 1), t > d && (r.y = C, r.x = 0, d = t), e = Math.min(e, u), d > e) return !1;
      b.fraction = d;
      return !0;
    };
    g.prototype.TestOverlap = function (b) {
      var c = b.lowerBound.y - this.upperBound.y,
        d = this.lowerBound.y - b.upperBound.y;
      return 0 < b.lowerBound.x - this.upperBound.x || 0 < c || 0 < this.lowerBound.x - b.upperBound.x || 0 < d ? !1 : !0;
    };
    g.Combine = function (b, c) {
      var d = new g();
      d.Combine(b, c);
      return d;
    };
    g.prototype.Combine = function (b, c) {
      this.lowerBound.x = Math.min(b.lowerBound.x, c.lowerBound.x);
      this.lowerBound.y = Math.min(b.lowerBound.y, c.lowerBound.y);
      this.upperBound.x = Math.max(b.upperBound.x, c.upperBound.x);
      this.upperBound.y = Math.max(b.upperBound.y, c.upperBound.y);
    };
    q.b2Bound = function () {};
    q.prototype.IsLower = function () {
      return 0 == (this.value & 1);
    };
    q.prototype.IsUpper = function () {
      return 1 == (this.value & 1);
    };
    q.prototype.Swap = function (b) {
      var c = this.value,
        d = this.proxy,
        e = this.stabbingCount;
      this.value = b.value;
      this.proxy = b.proxy;
      this.stabbingCount = b.stabbingCount;
      b.value = c;
      b.proxy = d;
      b.stabbingCount = e;
    };
    y.b2BoundValues = function () {};
    y.prototype.b2BoundValues = function () {
      this.lowerValues = new Vector_a2j_Number();
      this.lowerValues[0] = 0;
      this.lowerValues[1] = 0;
      this.upperValues = new Vector_a2j_Number();
      this.upperValues[0] = 0;
      this.upperValues[1] = 0;
    };
    z.b2Collision = function () {};
    z.ClipSegmentToLine = function (b, c, d, e) {
      void 0 === e && (e = 0);
      var f,
        n = 0;
      f = c[0];
      var g = f.v;
      f = c[1];
      var l = f.v,
        j = d.x * g.x + d.y * g.y - e;
      f = d.x * l.x + d.y * l.y - e;
      0 >= j && b[n++].Set(c[0]);
      0 >= f && b[n++].Set(c[1]);
      0 > j * f && (d = j / (j - f), f = b[n], f = f.v, f.x = g.x + d * (l.x - g.x), f.y = g.y + d * (l.y - g.y), f = b[n], f.id = (0 < j ? c[0] : c[1]).id, ++n);
      return n;
    };
    z.EdgeSeparation = function (b, c, d, e, f) {
      void 0 === d && (d = 0);
      parseInt(b.m_vertexCount);
      var n = b.m_vertices;
      b = b.m_normals;
      var g = parseInt(e.m_vertexCount),
        l = e.m_vertices,
        j,
        r;
      j = c.R;
      r = b[d];
      b = j.col1.x * r.x + j.col2.x * r.y;
      e = j.col1.y * r.x + j.col2.y * r.y;
      j = f.R;
      var u = j.col1.x * b + j.col1.y * e;
      j = j.col2.x * b + j.col2.y * e;
      for (var t = 0, C = Number.MAX_VALUE, J = 0; J < g; ++J) r = l[J], r = r.x * u + r.y * j, r < C && (C = r, t = J);
      r = n[d];
      j = c.R;
      d = c.position.x + (j.col1.x * r.x + j.col2.x * r.y);
      c = c.position.y + (j.col1.y * r.x + j.col2.y * r.y);
      r = l[t];
      j = f.R;
      n = f.position.x + (j.col1.x * r.x + j.col2.x * r.y);
      f = f.position.y + (j.col1.y * r.x + j.col2.y * r.y);
      return (n - d) * b + (f - c) * e;
    };
    z.FindMaxSeparation = function (b, c, d, e, f) {
      var n = parseInt(c.m_vertexCount),
        g = c.m_normals,
        j,
        l;
      l = f.R;
      j = e.m_centroid;
      var r = f.position.x + (l.col1.x * j.x + l.col2.x * j.y),
        u = f.position.y + (l.col1.y * j.x + l.col2.y * j.y);
      l = d.R;
      j = c.m_centroid;
      r -= d.position.x + (l.col1.x * j.x + l.col2.x * j.y);
      u -= d.position.y + (l.col1.y * j.x + l.col2.y * j.y);
      l = r * d.R.col1.x + u * d.R.col1.y;
      for (var u = r * d.R.col2.x + u * d.R.col2.y, r = 0, t = -Number.MAX_VALUE, C = 0; C < n; ++C) j = g[C], j = j.x * l + j.y * u, j > t && (t = j, r = C);
      g = z.EdgeSeparation(c, d, r, e, f);
      j = parseInt(0 <= r - 1 ? r - 1 : n - 1);
      l = z.EdgeSeparation(c, d, j, e, f);
      var u = parseInt(r + 1 < n ? r + 1 : 0),
        t = z.EdgeSeparation(c, d, u, e, f),
        J = 0,
        s = 0;
      if (l > g && l > t) s = -1, C = j, J = l;else if (t > g) s = 1, C = u, J = t;else return b[0] = r, g;
      for (;;) if (r = -1 == s ? 0 <= C - 1 ? C - 1 : n - 1 : C + 1 < n ? C + 1 : 0, g = z.EdgeSeparation(c, d, r, e, f), g > J) C = r, J = g;else break;
      b[0] = C;
      return J;
    };
    z.FindIncidentEdge = function (b, c, d, e, f, n) {
      void 0 === e && (e = 0);
      parseInt(c.m_vertexCount);
      var g = c.m_normals,
        j = parseInt(f.m_vertexCount);
      c = f.m_vertices;
      f = f.m_normals;
      var l;
      l = d.R;
      d = g[e];
      var g = l.col1.x * d.x + l.col2.x * d.y,
        r = l.col1.y * d.x + l.col2.y * d.y;
      l = n.R;
      d = l.col1.x * g + l.col1.y * r;
      r = l.col2.x * g + l.col2.y * r;
      g = d;
      l = 0;
      for (var u = Number.MAX_VALUE, t = 0; t < j; ++t) d = f[t], d = g * d.x + r * d.y, d < u && (u = d, l = t);
      f = parseInt(l);
      g = parseInt(f + 1 < j ? f + 1 : 0);
      j = b[0];
      d = c[f];
      l = n.R;
      j.v.x = n.position.x + (l.col1.x * d.x + l.col2.x * d.y);
      j.v.y = n.position.y + (l.col1.y * d.x + l.col2.y * d.y);
      j.id.features.referenceEdge = e;
      j.id.features.incidentEdge = f;
      j.id.features.incidentVertex = 0;
      j = b[1];
      d = c[g];
      l = n.R;
      j.v.x = n.position.x + (l.col1.x * d.x + l.col2.x * d.y);
      j.v.y = n.position.y + (l.col1.y * d.x + l.col2.y * d.y);
      j.id.features.referenceEdge = e;
      j.id.features.incidentEdge = g;
      j.id.features.incidentVertex = 1;
    };
    z.MakeClipPointVector = function () {
      var b = new Vector(2);
      b[0] = new n();
      b[1] = new n();
      return b;
    };
    z.CollidePolygons = function (b, c, d, f, n) {
      var g;
      b.m_pointCount = 0;
      var l = c.m_radius + f.m_radius;
      z.s_edgeAO[0] = 0;
      var j = z.FindMaxSeparation(z.s_edgeAO, c, d, f, n);
      g = z.s_edgeAO[0];
      if (!(j > l)) {
        var r;
        z.s_edgeBO[0] = 0;
        var u = z.FindMaxSeparation(z.s_edgeBO, f, n, c, d);
        r = z.s_edgeBO[0];
        if (!(u > l)) {
          var t = 0,
            C = 0;
          u > 0.98 * j + 0.001 ? (j = f, f = c, c = n, t = r, b.m_type = I.e_faceB, C = 1) : (j = c, c = d, d = n, t = g, b.m_type = I.e_faceA, C = 0);
          g = z.s_incidentEdge;
          z.FindIncidentEdge(g, j, c, t, f, d);
          r = parseInt(j.m_vertexCount);
          n = j.m_vertices;
          var j = n[t],
            J;
          J = t + 1 < r ? n[parseInt(t + 1)] : n[0];
          t = z.s_localTangent;
          t.Set(J.x - j.x, J.y - j.y);
          t.Normalize();
          n = z.s_localNormal;
          n.x = t.y;
          n.y = -t.x;
          f = z.s_planePoint;
          f.Set(0.5 * (j.x + J.x), 0.5 * (j.y + J.y));
          u = z.s_tangent;
          r = c.R;
          u.x = r.col1.x * t.x + r.col2.x * t.y;
          u.y = r.col1.y * t.x + r.col2.y * t.y;
          var s = z.s_tangent2;
          s.x = -u.x;
          s.y = -u.y;
          t = z.s_normal;
          t.x = u.y;
          t.y = -u.x;
          var m = z.s_v11,
            E = z.s_v12;
          m.x = c.position.x + (r.col1.x * j.x + r.col2.x * j.y);
          m.y = c.position.y + (r.col1.y * j.x + r.col2.y * j.y);
          E.x = c.position.x + (r.col1.x * J.x + r.col2.x * J.y);
          E.y = c.position.y + (r.col1.y * J.x + r.col2.y * J.y);
          c = t.x * m.x + t.y * m.y;
          r = u.x * E.x + u.y * E.y + l;
          J = z.s_clipPoints1;
          j = z.s_clipPoints2;
          E = z.ClipSegmentToLine(J, g, s, -u.x * m.x - u.y * m.y + l);
          if (!(2 > E) && (E = z.ClipSegmentToLine(j, J, u, r), !(2 > E))) {
            b.m_localPlaneNormal.SetV(n);
            b.m_localPoint.SetV(f);
            for (f = n = 0; f < e.b2_maxManifoldPoints; ++f) g = j[f], t.x * g.v.x + t.y * g.v.y - c <= l && (u = b.m_points[n], r = d.R, s = g.v.x - d.position.x, m = g.v.y - d.position.y, u.m_localPoint.x = s * r.col1.x + m * r.col1.y, u.m_localPoint.y = s * r.col2.x + m * r.col2.y, u.m_id.Set(g.id), u.m_id.features.flip = C, ++n);
            b.m_pointCount = n;
          }
        }
      }
    };
    z.CollideCircles = function (b, c, d, e, f) {
      b.m_pointCount = 0;
      var n, g;
      n = d.R;
      g = c.m_p;
      var j = d.position.x + (n.col1.x * g.x + n.col2.x * g.y);
      d = d.position.y + (n.col1.y * g.x + n.col2.y * g.y);
      n = f.R;
      g = e.m_p;
      j = f.position.x + (n.col1.x * g.x + n.col2.x * g.y) - j;
      f = f.position.y + (n.col1.y * g.x + n.col2.y * g.y) - d;
      n = c.m_radius + e.m_radius;
      j * j + f * f > n * n || (b.m_type = I.e_circles, b.m_localPoint.SetV(c.m_p), b.m_localPlaneNormal.SetZero(), b.m_pointCount = 1, b.m_points[0].m_localPoint.SetV(e.m_p), b.m_points[0].m_id.key = 0);
    };
    z.CollidePolygonAndCircle = function (b, c, d, e, f) {
      var n = b.m_pointCount = 0,
        g = 0,
        j,
        l;
      l = f.R;
      j = e.m_p;
      var r = f.position.y + (l.col1.y * j.x + l.col2.y * j.y),
        n = f.position.x + (l.col1.x * j.x + l.col2.x * j.y) - d.position.x,
        g = r - d.position.y;
      l = d.R;
      d = n * l.col1.x + g * l.col1.y;
      l = n * l.col2.x + g * l.col2.y;
      var u = 0,
        r = -Number.MAX_VALUE;
      f = c.m_radius + e.m_radius;
      var t = parseInt(c.m_vertexCount),
        C = c.m_vertices;
      c = c.m_normals;
      for (var J = 0; J < t; ++J) {
        j = C[J];
        n = d - j.x;
        g = l - j.y;
        j = c[J];
        n = j.x * n + j.y * g;
        if (n > f) return;
        n > r && (r = n, u = J);
      }
      n = parseInt(u);
      g = parseInt(n + 1 < t ? n + 1 : 0);
      j = C[n];
      C = C[g];
      if (r < Number.MIN_VALUE) b.m_pointCount = 1, b.m_type = I.e_faceA, b.m_localPlaneNormal.SetV(c[u]), b.m_localPoint.x = 0.5 * (j.x + C.x), b.m_localPoint.y = 0.5 * (j.y + C.y);else if (r = (d - C.x) * (j.x - C.x) + (l - C.y) * (j.y - C.y), 0 >= (d - j.x) * (C.x - j.x) + (l - j.y) * (C.y - j.y)) {
        if ((d - j.x) * (d - j.x) + (l - j.y) * (l - j.y) > f * f) return;
        b.m_pointCount = 1;
        b.m_type = I.e_faceA;
        b.m_localPlaneNormal.x = d - j.x;
        b.m_localPlaneNormal.y = l - j.y;
        b.m_localPlaneNormal.Normalize();
        b.m_localPoint.SetV(j);
      } else if (0 >= r) {
        if ((d - C.x) * (d - C.x) + (l - C.y) * (l - C.y) > f * f) return;
        b.m_pointCount = 1;
        b.m_type = I.e_faceA;
        b.m_localPlaneNormal.x = d - C.x;
        b.m_localPlaneNormal.y = l - C.y;
        b.m_localPlaneNormal.Normalize();
        b.m_localPoint.SetV(C);
      } else {
        u = 0.5 * (j.x + C.x);
        j = 0.5 * (j.y + C.y);
        r = (d - u) * c[n].x + (l - j) * c[n].y;
        if (r > f) return;
        b.m_pointCount = 1;
        b.m_type = I.e_faceA;
        b.m_localPlaneNormal.x = c[n].x;
        b.m_localPlaneNormal.y = c[n].y;
        b.m_localPlaneNormal.Normalize();
        b.m_localPoint.Set(u, j);
      }
      b.m_points[0].m_localPoint.SetV(e.m_p);
      b.m_points[0].m_id.key = 0;
    };
    z.TestOverlap = function (b, c) {
      var d = c.lowerBound,
        e = b.upperBound,
        f = d.x - e.x,
        n = d.y - e.y,
        d = b.lowerBound,
        e = c.upperBound,
        g = d.y - e.y;
      return 0 < f || 0 < n || 0 < d.x - e.x || 0 < g ? !1 : !0;
    };
    Box2D.postDefs.push(function () {
      Box2D.Collision.b2Collision.s_incidentEdge = z.MakeClipPointVector();
      Box2D.Collision.b2Collision.s_clipPoints1 = z.MakeClipPointVector();
      Box2D.Collision.b2Collision.s_clipPoints2 = z.MakeClipPointVector();
      Box2D.Collision.b2Collision.s_edgeAO = new Vector_a2j_Number(1);
      Box2D.Collision.b2Collision.s_edgeBO = new Vector_a2j_Number(1);
      Box2D.Collision.b2Collision.s_localTangent = new l();
      Box2D.Collision.b2Collision.s_localNormal = new l();
      Box2D.Collision.b2Collision.s_planePoint = new l();
      Box2D.Collision.b2Collision.s_normal = new l();
      Box2D.Collision.b2Collision.s_tangent = new l();
      Box2D.Collision.b2Collision.s_tangent2 = new l();
      Box2D.Collision.b2Collision.s_v11 = new l();
      Box2D.Collision.b2Collision.s_v12 = new l();
      Box2D.Collision.b2Collision.b2CollidePolyTempVec = new l();
      Box2D.Collision.b2Collision.b2_nullFeature = 255;
    });
    A.b2ContactID = function () {
      this.features = new u();
    };
    A.prototype.b2ContactID = function () {
      this.features._m_id = this;
    };
    A.prototype.Set = function (b) {
      this.key = b._key;
    };
    A.prototype.Copy = function () {
      var b = new A();
      b.key = this.key;
      return b;
    };
    Object.defineProperty(A.prototype, "key", {
      enumerable: !1,
      configurable: !0,
      get: function () {
        return this._key;
      }
    });
    Object.defineProperty(A.prototype, "key", {
      enumerable: !1,
      configurable: !0,
      set: function (b) {
        void 0 === b && (b = 0);
        this._key = b;
        this.features._referenceEdge = this._key & 255;
        this.features._incidentEdge = (this._key & 65280) >> 8 & 255;
        this.features._incidentVertex = (this._key & 16711680) >> 16 & 255;
        this.features._flip = (this._key & 4278190080) >> 24 & 255;
      }
    });
    B.b2ContactPoint = function () {
      this.position = new l();
      this.velocity = new l();
      this.normal = new l();
      this.id = new A();
    };
    H.b2Distance = function () {};
    H.Distance = function (b, c, d) {
      ++H.b2_gjkCalls;
      var n = d.proxyA,
        g = d.proxyB,
        j = d.transformA,
        r = d.transformB,
        u = H.s_simplex;
      u.ReadCache(c, n, j, g, r);
      var t = u.m_vertices,
        C = H.s_saveA,
        J = H.s_saveB,
        s = 0;
      u.GetClosestPoint().LengthSquared();
      for (var m = 0, E, Q = 0; 20 > Q;) {
        s = u.m_count;
        for (m = 0; m < s; m++) C[m] = t[m].indexA, J[m] = t[m].indexB;
        switch (u.m_count) {
          case 1:
            break;
          case 2:
            u.Solve2();
            break;
          case 3:
            u.Solve3();
            break;
          default:
            e.b2Assert(!1);
        }
        if (3 == u.m_count) break;
        E = u.GetClosestPoint();
        E.LengthSquared();
        m = u.GetSearchDirection();
        if (m.LengthSquared() < Number.MIN_VALUE * Number.MIN_VALUE) break;
        E = t[u.m_count];
        E.indexA = n.GetSupport(f.MulTMV(j.R, m.GetNegative()));
        E.wA = f.MulX(j, n.GetVertex(E.indexA));
        E.indexB = g.GetSupport(f.MulTMV(r.R, m));
        E.wB = f.MulX(r, g.GetVertex(E.indexB));
        E.w = f.SubtractVV(E.wB, E.wA);
        ++Q;
        ++H.b2_gjkIters;
        for (var O = !1, m = 0; m < s; m++) if (E.indexA == C[m] && E.indexB == J[m]) {
          O = !0;
          break;
        }
        if (O) break;
        ++u.m_count;
      }
      H.b2_gjkMaxIters = f.Max(H.b2_gjkMaxIters, Q);
      u.GetWitnessPoints(b.pointA, b.pointB);
      b.distance = f.SubtractVV(b.pointA, b.pointB).Length();
      b.iterations = Q;
      u.WriteCache(c);
      d.useRadii && (c = n.m_radius, g = g.m_radius, b.distance > c + g && b.distance > Number.MIN_VALUE ? (b.distance -= c + g, d = f.SubtractVV(b.pointB, b.pointA), d.Normalize(), b.pointA.x += c * d.x, b.pointA.y += c * d.y, b.pointB.x -= g * d.x, b.pointB.y -= g * d.y) : (E = new l(), E.x = 0.5 * (b.pointA.x + b.pointB.x), E.y = 0.5 * (b.pointA.y + b.pointB.y), b.pointA.x = b.pointB.x = E.x, b.pointA.y = b.pointB.y = E.y, b.distance = 0));
    };
    Box2D.postDefs.push(function () {
      Box2D.Collision.b2Distance.s_simplex = new t();
      Box2D.Collision.b2Distance.s_saveA = new Vector_a2j_Number(3);
      Box2D.Collision.b2Distance.s_saveB = new Vector_a2j_Number(3);
    });
    D.b2DistanceInput = function () {};
    s.b2DistanceOutput = function () {
      this.pointA = new l();
      this.pointB = new l();
    };
    G.b2DistanceProxy = function () {};
    G.prototype.Set = function (f) {
      switch (f.GetType()) {
        case d.e_circleShape:
          f = f instanceof b ? f : null;
          this.m_vertices = new Vector(1, !0);
          this.m_vertices[0] = f.m_p;
          this.m_count = 1;
          this.m_radius = f.m_radius;
          break;
        case d.e_polygonShape:
          f = f instanceof c ? f : null;
          this.m_vertices = f.m_vertices;
          this.m_count = f.m_vertexCount;
          this.m_radius = f.m_radius;
          break;
        default:
          e.b2Assert(!1);
      }
    };
    G.prototype.GetSupport = function (b) {
      for (var c = 0, d = this.m_vertices[0].x * b.x + this.m_vertices[0].y * b.y, e = 1; e < this.m_count; ++e) {
        var f = this.m_vertices[e].x * b.x + this.m_vertices[e].y * b.y;
        f > d && (c = e, d = f);
      }
      return c;
    };
    G.prototype.GetSupportVertex = function (b) {
      for (var c = 0, d = this.m_vertices[0].x * b.x + this.m_vertices[0].y * b.y, e = 1; e < this.m_count; ++e) {
        var f = this.m_vertices[e].x * b.x + this.m_vertices[e].y * b.y;
        f > d && (c = e, d = f);
      }
      return this.m_vertices[c];
    };
    G.prototype.GetVertexCount = function () {
      return this.m_count;
    };
    G.prototype.GetVertex = function (b) {
      void 0 === b && (b = 0);
      e.b2Assert(0 <= b && b < this.m_count);
      return this.m_vertices[b];
    };
    F.b2DynamicTree = function () {};
    F.prototype.b2DynamicTree = function () {
      this.m_freeList = this.m_root = null;
      this.m_insertionCount = this.m_path = 0;
    };
    F.prototype.CreateProxy = function (b, c) {
      var d = this.AllocateNode(),
        f = e.b2_aabbExtension,
        n = e.b2_aabbExtension;
      d.aabb.lowerBound.x = b.lowerBound.x - f;
      d.aabb.lowerBound.y = b.lowerBound.y - n;
      d.aabb.upperBound.x = b.upperBound.x + f;
      d.aabb.upperBound.y = b.upperBound.y + n;
      d.userData = c;
      this.InsertLeaf(d);
      return d;
    };
    F.prototype.DestroyProxy = function (b) {
      this.RemoveLeaf(b);
      this.FreeNode(b);
    };
    F.prototype.MoveProxy = function (b, c, d) {
      e.b2Assert(b.IsLeaf());
      if (b.aabb.Contains(c)) return !1;
      this.RemoveLeaf(b);
      var f = e.b2_aabbExtension + e.b2_aabbMultiplier * (0 < d.x ? d.x : -d.x);
      d = e.b2_aabbExtension + e.b2_aabbMultiplier * (0 < d.y ? d.y : -d.y);
      b.aabb.lowerBound.x = c.lowerBound.x - f;
      b.aabb.lowerBound.y = c.lowerBound.y - d;
      b.aabb.upperBound.x = c.upperBound.x + f;
      b.aabb.upperBound.y = c.upperBound.y + d;
      this.InsertLeaf(b);
      return !0;
    };
    F.prototype.Rebalance = function (b) {
      void 0 === b && (b = 0);
      if (null != this.m_root) for (var c = 0; c < b; c++) {
        for (var d = this.m_root, e = 0; !1 == d.IsLeaf();) d = this.m_path >> e & 1 ? d.child2 : d.child1, e = e + 1 & 31;
        ++this.m_path;
        this.RemoveLeaf(d);
        this.InsertLeaf(d);
      }
    };
    F.prototype.GetFatAABB = function (b) {
      return b.aabb;
    };
    F.prototype.GetUserData = function (b) {
      return b.userData;
    };
    F.prototype.Query = function (b, c) {
      if (null != this.m_root) {
        var d = new Vector(),
          e = 0;
        for (d[e++] = this.m_root; 0 < e;) {
          var f = d[--e];
          if (f.aabb.TestOverlap(c)) if (f.IsLeaf()) {
            if (!b(f)) break;
          } else d[e++] = f.child1, d[e++] = f.child2;
        }
      }
    };
    F.prototype.RayCast = function (b, c) {
      if (null != this.m_root) {
        var d = c.p1,
          e = c.p2,
          n = f.SubtractVV(d, e);
        n.Normalize();
        var n = f.CrossFV(1, n),
          j = f.AbsV(n),
          l = c.maxFraction,
          r = new g(),
          u = 0,
          t = 0,
          u = d.x + l * (e.x - d.x),
          t = d.y + l * (e.y - d.y);
        r.lowerBound.x = Math.min(d.x, u);
        r.lowerBound.y = Math.min(d.y, t);
        r.upperBound.x = Math.max(d.x, u);
        r.upperBound.y = Math.max(d.y, t);
        var C = new Vector(),
          J = 0;
        for (C[J++] = this.m_root; 0 < J;) if (l = C[--J], !1 != l.aabb.TestOverlap(r) && (u = l.aabb.GetCenter(), t = l.aabb.GetExtents(), !(0 < Math.abs(n.x * (d.x - u.x) + n.y * (d.y - u.y)) - j.x * t.x - j.y * t.y))) if (l.IsLeaf()) {
          u = new P();
          u.p1 = c.p1;
          u.p2 = c.p2;
          u.maxFraction = c.maxFraction;
          l = b(u, l);
          if (0 == l) break;
          0 < l && (u = d.x + l * (e.x - d.x), t = d.y + l * (e.y - d.y), r.lowerBound.x = Math.min(d.x, u), r.lowerBound.y = Math.min(d.y, t), r.upperBound.x = Math.max(d.x, u), r.upperBound.y = Math.max(d.y, t));
        } else C[J++] = l.child1, C[J++] = l.child2;
      }
    };
    F.prototype.AllocateNode = function () {
      if (this.m_freeList) {
        var b = this.m_freeList;
        this.m_freeList = b.parent;
        b.parent = null;
        b.child1 = null;
        b.child2 = null;
        return b;
      }
      return new L();
    };
    F.prototype.FreeNode = function (b) {
      b.parent = this.m_freeList;
      this.m_freeList = b;
    };
    F.prototype.InsertLeaf = function (b) {
      ++this.m_insertionCount;
      if (null == this.m_root) this.m_root = b, this.m_root.parent = null;else {
        var c = b.aabb.GetCenter(),
          d = this.m_root;
        if (!1 == d.IsLeaf()) {
          do var e = d.child1,
            d = d.child2,
            d = Math.abs((e.aabb.lowerBound.x + e.aabb.upperBound.x) / 2 - c.x) + Math.abs((e.aabb.lowerBound.y + e.aabb.upperBound.y) / 2 - c.y) < Math.abs((d.aabb.lowerBound.x + d.aabb.upperBound.x) / 2 - c.x) + Math.abs((d.aabb.lowerBound.y + d.aabb.upperBound.y) / 2 - c.y) ? e : d; while (!1 == d.IsLeaf());
        }
        c = d.parent;
        e = this.AllocateNode();
        e.parent = c;
        e.userData = null;
        e.aabb.Combine(b.aabb, d.aabb);
        if (c) {
          d.parent.child1 == d ? c.child1 = e : c.child2 = e;
          e.child1 = d;
          e.child2 = b;
          d.parent = e;
          b.parent = e;
          do {
            if (c.aabb.Contains(e.aabb)) break;
            c.aabb.Combine(c.child1.aabb, c.child2.aabb);
            e = c;
            c = c.parent;
          } while (c);
        } else e.child1 = d, e.child2 = b, d.parent = e, this.m_root = b.parent = e;
      }
    };
    F.prototype.RemoveLeaf = function (b) {
      if (b == this.m_root) this.m_root = null;else {
        var c = b.parent,
          d = c.parent;
        b = c.child1 == b ? c.child2 : c.child1;
        if (d) {
          d.child1 == c ? d.child1 = b : d.child2 = b;
          b.parent = d;
          for (this.FreeNode(c); d;) {
            c = d.aabb;
            d.aabb = g.Combine(d.child1.aabb, d.child2.aabb);
            if (c.Contains(d.aabb)) break;
            d = d.parent;
          }
        } else this.m_root = b, b.parent = null, this.FreeNode(c);
      }
    };
    K.b2DynamicTreeBroadPhase = function () {
      this.m_tree = new F();
      this.m_moveBuffer = new Vector();
      this.m_pairBuffer = new Vector();
      this.m_pairCount = 0;
    };
    K.prototype.CreateProxy = function (b, c) {
      var d = this.m_tree.CreateProxy(b, c);
      ++this.m_proxyCount;
      this.BufferMove(d);
      return d;
    };
    K.prototype.DestroyProxy = function (b) {
      this.UnBufferMove(b);
      --this.m_proxyCount;
      this.m_tree.DestroyProxy(b);
    };
    K.prototype.MoveProxy = function (b, c, d) {
      this.m_tree.MoveProxy(b, c, d) && this.BufferMove(b);
    };
    K.prototype.TestOverlap = function (b, c) {
      var d = this.m_tree.GetFatAABB(b),
        e = this.m_tree.GetFatAABB(c);
      return d.TestOverlap(e);
    };
    K.prototype.GetUserData = function (b) {
      return this.m_tree.GetUserData(b);
    };
    K.prototype.GetFatAABB = function (b) {
      return this.m_tree.GetFatAABB(b);
    };
    K.prototype.GetProxyCount = function () {
      return this.m_proxyCount;
    };
    K.prototype.UpdatePairs = function (b) {
      for (var c = this, d = c.m_pairCount = 0, e, d = 0; d < c.m_moveBuffer.length; ++d) {
        e = c.m_moveBuffer[d];
        var f = c.m_tree.GetFatAABB(e);
        c.m_tree.Query(function (b) {
          if (b == e) return !0;
          c.m_pairCount == c.m_pairBuffer.length && (c.m_pairBuffer[c.m_pairCount] = new R());
          var d = c.m_pairBuffer[c.m_pairCount];
          d.proxyA = b < e ? b : e;
          d.proxyB = b >= e ? b : e;
          ++c.m_pairCount;
          return !0;
        }, f);
      }
      for (d = c.m_moveBuffer.length = 0; d < c.m_pairCount;) {
        var f = c.m_pairBuffer[d],
          n = c.m_tree.GetUserData(f.proxyA),
          g = c.m_tree.GetUserData(f.proxyB);
        b(n, g);
        for (++d; d < c.m_pairCount;) {
          n = c.m_pairBuffer[d];
          if (n.proxyA != f.proxyA || n.proxyB != f.proxyB) break;
          ++d;
        }
      }
    };
    K.prototype.Query = function (b, c) {
      this.m_tree.Query(b, c);
    };
    K.prototype.RayCast = function (b, c) {
      this.m_tree.RayCast(b, c);
    };
    K.prototype.Validate = function () {};
    K.prototype.Rebalance = function (b) {
      void 0 === b && (b = 0);
      this.m_tree.Rebalance(b);
    };
    K.prototype.BufferMove = function (b) {
      this.m_moveBuffer[this.m_moveBuffer.length] = b;
    };
    K.prototype.UnBufferMove = function (b) {
      this.m_moveBuffer.splice(parseInt(this.m_moveBuffer.indexOf(b)), 1);
    };
    K.prototype.ComparePairs = function () {
      return 0;
    };
    K.__implements = {};
    K.__implements[J] = !0;
    L.b2DynamicTreeNode = function () {
      this.aabb = new g();
    };
    L.prototype.IsLeaf = function () {
      return null == this.child1;
    };
    R.b2DynamicTreePair = function () {};
    I.b2Manifold = function () {
      this.m_pointCount = 0;
    };
    I.prototype.b2Manifold = function () {
      this.m_points = new Vector(e.b2_maxManifoldPoints);
      for (var b = 0; b < e.b2_maxManifoldPoints; b++) this.m_points[b] = new fa();
      this.m_localPlaneNormal = new l();
      this.m_localPoint = new l();
    };
    I.prototype.Reset = function () {
      for (var b = 0; b < e.b2_maxManifoldPoints; b++) (this.m_points[b] instanceof fa ? this.m_points[b] : null).Reset();
      this.m_localPlaneNormal.SetZero();
      this.m_localPoint.SetZero();
      this.m_pointCount = this.m_type = 0;
    };
    I.prototype.Set = function (b) {
      this.m_pointCount = b.m_pointCount;
      for (var c = 0; c < e.b2_maxManifoldPoints; c++) (this.m_points[c] instanceof fa ? this.m_points[c] : null).Set(b.m_points[c]);
      this.m_localPlaneNormal.SetV(b.m_localPlaneNormal);
      this.m_localPoint.SetV(b.m_localPoint);
      this.m_type = b.m_type;
    };
    I.prototype.Copy = function () {
      var b = new I();
      b.Set(this);
      return b;
    };
    Box2D.postDefs.push(function () {
      Box2D.Collision.b2Manifold.e_circles = 1;
      Box2D.Collision.b2Manifold.e_faceA = 2;
      Box2D.Collision.b2Manifold.e_faceB = 4;
    });
    fa.b2ManifoldPoint = function () {
      this.m_localPoint = new l();
      this.m_id = new A();
    };
    fa.prototype.b2ManifoldPoint = function () {
      this.Reset();
    };
    fa.prototype.Reset = function () {
      this.m_localPoint.SetZero();
      this.m_tangentImpulse = this.m_normalImpulse = 0;
      this.m_id.key = 0;
    };
    fa.prototype.Set = function (b) {
      this.m_localPoint.SetV(b.m_localPoint);
      this.m_normalImpulse = b.m_normalImpulse;
      this.m_tangentImpulse = b.m_tangentImpulse;
      this.m_id.Set(b.m_id);
    };
    N.b2Point = function () {
      this.p = new l();
    };
    N.prototype.Support = function () {
      return this.p;
    };
    N.prototype.GetFirstVertex = function () {
      return this.p;
    };
    P.b2RayCastInput = function () {
      this.p1 = new l();
      this.p2 = new l();
    };
    P.prototype.b2RayCastInput = function (b, c, d) {
      void 0 === b && (b = null);
      void 0 === c && (c = null);
      void 0 === d && (d = 1);
      b && this.p1.SetV(b);
      c && this.p2.SetV(c);
      this.maxFraction = d;
    };
    ba.b2RayCastOutput = function () {
      this.normal = new l();
    };
    V.b2Segment = function () {
      this.p1 = new l();
      this.p2 = new l();
    };
    V.prototype.TestSegment = function (b, c, d, e) {
      void 0 === e && (e = 0);
      var f = d.p1,
        n = d.p2.x - f.x,
        g = d.p2.y - f.y;
      d = this.p2.y - this.p1.y;
      var j = -(this.p2.x - this.p1.x),
        l = 100 * Number.MIN_VALUE,
        r = -(n * d + g * j);
      if (r > l) {
        var u = f.x - this.p1.x,
          t = f.y - this.p1.y,
          f = u * d + t * j;
        if (0 <= f && f <= e * r && (e = -n * t + g * u, -l * r <= e && e <= r * (1 + l))) return f /= r, e = Math.sqrt(d * d + j * j), b[0] = f, c.Set(d / e, j / e), !0;
      }
      return !1;
    };
    V.prototype.Extend = function (b) {
      this.ExtendForward(b);
      this.ExtendBackward(b);
    };
    V.prototype.ExtendForward = function (b) {
      var c = this.p2.x - this.p1.x,
        d = this.p2.y - this.p1.y;
      b = Math.min(0 < c ? (b.upperBound.x - this.p1.x) / c : 0 > c ? (b.lowerBound.x - this.p1.x) / c : Number.POSITIVE_INFINITY, 0 < d ? (b.upperBound.y - this.p1.y) / d : 0 > d ? (b.lowerBound.y - this.p1.y) / d : Number.POSITIVE_INFINITY);
      this.p2.x = this.p1.x + c * b;
      this.p2.y = this.p1.y + d * b;
    };
    V.prototype.ExtendBackward = function (b) {
      var c = -this.p2.x + this.p1.x,
        d = -this.p2.y + this.p1.y;
      b = Math.min(0 < c ? (b.upperBound.x - this.p2.x) / c : 0 > c ? (b.lowerBound.x - this.p2.x) / c : Number.POSITIVE_INFINITY, 0 < d ? (b.upperBound.y - this.p2.y) / d : 0 > d ? (b.lowerBound.y - this.p2.y) / d : Number.POSITIVE_INFINITY);
      this.p1.x = this.p2.x + c * b;
      this.p1.y = this.p2.y + d * b;
    };
    r.b2SeparationFunction = function () {
      this.m_localPoint = new l();
      this.m_axis = new l();
    };
    r.prototype.Initialize = function (b, c, d, n, g) {
      this.m_proxyA = c;
      this.m_proxyB = n;
      var j = parseInt(b.count);
      e.b2Assert(0 < j && 3 > j);
      var u,
        t,
        C,
        J,
        E = 0,
        m = 0;
      1 == j ? (this.m_type = r.e_points, u = this.m_proxyA.GetVertex(b.indexA[0]), t = this.m_proxyB.GetVertex(b.indexB[0]), j = u, b = d.R, c = d.position.x + (b.col1.x * j.x + b.col2.x * j.y), n = d.position.y + (b.col1.y * j.x + b.col2.y * j.y), j = t, b = g.R, C = g.position.x + (b.col1.x * j.x + b.col2.x * j.y), J = g.position.y + (b.col1.y * j.x + b.col2.y * j.y), this.m_axis.x = C - c, this.m_axis.y = J - n, this.m_axis.Normalize()) : (b.indexB[0] == b.indexB[1] ? (this.m_type = r.e_faceA, c = this.m_proxyA.GetVertex(b.indexA[0]), n = this.m_proxyA.GetVertex(b.indexA[1]), t = this.m_proxyB.GetVertex(b.indexB[0]), this.m_localPoint.x = 0.5 * (c.x + n.x), this.m_localPoint.y = 0.5 * (c.y + n.y), this.m_axis = f.CrossVF(f.SubtractVV(n, c), 1), this.m_axis.Normalize(), j = this.m_axis, b = d.R, E = b.col1.x * j.x + b.col2.x * j.y, m = b.col1.y * j.x + b.col2.y * j.y, j = this.m_localPoint, b = d.R, c = d.position.x + (b.col1.x * j.x + b.col2.x * j.y), n = d.position.y + (b.col1.y * j.x + b.col2.y * j.y), j = t, b = g.R, C = g.position.x + (b.col1.x * j.x + b.col2.x * j.y), J = g.position.y + (b.col1.y * j.x + b.col2.y * j.y), E = (C - c) * E + (J - n) * m) : b.indexA[0] == b.indexA[0] ? (this.m_type = r.e_faceB, C = this.m_proxyB.GetVertex(b.indexB[0]), J = this.m_proxyB.GetVertex(b.indexB[1]), u = this.m_proxyA.GetVertex(b.indexA[0]), this.m_localPoint.x = 0.5 * (C.x + J.x), this.m_localPoint.y = 0.5 * (C.y + J.y), this.m_axis = f.CrossVF(f.SubtractVV(J, C), 1), this.m_axis.Normalize(), j = this.m_axis, b = g.R, E = b.col1.x * j.x + b.col2.x * j.y, m = b.col1.y * j.x + b.col2.y * j.y, j = this.m_localPoint, b = g.R, C = g.position.x + (b.col1.x * j.x + b.col2.x * j.y), J = g.position.y + (b.col1.y * j.x + b.col2.y * j.y), j = u, b = d.R, c = d.position.x + (b.col1.x * j.x + b.col2.x * j.y), n = d.position.y + (b.col1.y * j.x + b.col2.y * j.y), E = (c - C) * E + (n - J) * m) : (c = this.m_proxyA.GetVertex(b.indexA[0]), n = this.m_proxyA.GetVertex(b.indexA[1]), C = this.m_proxyB.GetVertex(b.indexB[0]), J = this.m_proxyB.GetVertex(b.indexB[1]), f.MulX(d, u), u = f.MulMV(d.R, f.SubtractVV(n, c)), f.MulX(g, t), E = f.MulMV(g.R, f.SubtractVV(J, C)), g = u.x * u.x + u.y * u.y, t = E.x * E.x + E.y * E.y, b = f.SubtractVV(E, u), d = u.x * b.x + u.y * b.y, b = E.x * b.x + E.y * b.y, u = u.x * E.x + u.y * E.y, m = g * t - u * u, E = 0, 0 != m && (E = f.Clamp((u * b - d * t) / m, 0, 1)), 0 > (u * E + b) / t && (E = f.Clamp((u - d) / g, 0, 1)), u = new l(), u.x = c.x + E * (n.x - c.x), u.y = c.y + E * (n.y - c.y), t = new l(), t.x = C.x + E * (J.x - C.x), t.y = C.y + E * (J.y - C.y), 0 == E || 1 == E ? (this.m_type = r.e_faceB, this.m_axis = f.CrossVF(f.SubtractVV(J, C), 1), this.m_axis.Normalize(), this.m_localPoint = t) : (this.m_type = r.e_faceA, this.m_axis = f.CrossVF(f.SubtractVV(n, c), 1), this.m_localPoint = u)), 0 > E && this.m_axis.NegativeSelf());
    };
    r.prototype.Evaluate = function (b, c) {
      var d,
        n,
        g = 0;
      switch (this.m_type) {
        case r.e_points:
          return d = f.MulTMV(b.R, this.m_axis), n = f.MulTMV(c.R, this.m_axis.GetNegative()), d = this.m_proxyA.GetSupportVertex(d), n = this.m_proxyB.GetSupportVertex(n), d = f.MulX(b, d), n = f.MulX(c, n), (n.x - d.x) * this.m_axis.x + (n.y - d.y) * this.m_axis.y;
        case r.e_faceA:
          return g = f.MulMV(b.R, this.m_axis), d = f.MulX(b, this.m_localPoint), n = f.MulTMV(c.R, g.GetNegative()), n = this.m_proxyB.GetSupportVertex(n), n = f.MulX(c, n), (n.x - d.x) * g.x + (n.y - d.y) * g.y;
        case r.e_faceB:
          return g = f.MulMV(c.R, this.m_axis), n = f.MulX(c, this.m_localPoint), d = f.MulTMV(b.R, g.GetNegative()), d = this.m_proxyA.GetSupportVertex(d), d = f.MulX(b, d), (d.x - n.x) * g.x + (d.y - n.y) * g.y;
        default:
          return e.b2Assert(!1), 0;
      }
    };
    Box2D.postDefs.push(function () {
      Box2D.Collision.b2SeparationFunction.e_points = 1;
      Box2D.Collision.b2SeparationFunction.e_faceA = 2;
      Box2D.Collision.b2SeparationFunction.e_faceB = 4;
    });
    t.b2Simplex = function () {
      this.m_v1 = new C();
      this.m_v2 = new C();
      this.m_v3 = new C();
      this.m_vertices = new Vector(3);
    };
    t.prototype.b2Simplex = function () {
      this.m_vertices[0] = this.m_v1;
      this.m_vertices[1] = this.m_v2;
      this.m_vertices[2] = this.m_v3;
    };
    t.prototype.ReadCache = function (b, c, d, n, g) {
      e.b2Assert(0 <= b.count && 3 >= b.count);
      var j, l;
      this.m_count = b.count;
      for (var r = this.m_vertices, u = 0; u < this.m_count; u++) {
        var t = r[u];
        t.indexA = b.indexA[u];
        t.indexB = b.indexB[u];
        j = c.GetVertex(t.indexA);
        l = n.GetVertex(t.indexB);
        t.wA = f.MulX(d, j);
        t.wB = f.MulX(g, l);
        t.w = f.SubtractVV(t.wB, t.wA);
        t.a = 0;
      }
      if (1 < this.m_count && (b = b.metric, j = this.GetMetric(), j < 0.5 * b || 2 * b < j || j < Number.MIN_VALUE)) this.m_count = 0;
      0 == this.m_count && (t = r[0], t.indexA = 0, t.indexB = 0, j = c.GetVertex(0), l = n.GetVertex(0), t.wA = f.MulX(d, j), t.wB = f.MulX(g, l), t.w = f.SubtractVV(t.wB, t.wA), this.m_count = 1);
    };
    t.prototype.WriteCache = function (b) {
      b.metric = this.GetMetric();
      b.count = Box2D.parseUInt(this.m_count);
      for (var c = this.m_vertices, d = 0; d < this.m_count; d++) b.indexA[d] = Box2D.parseUInt(c[d].indexA), b.indexB[d] = Box2D.parseUInt(c[d].indexB);
    };
    t.prototype.GetSearchDirection = function () {
      switch (this.m_count) {
        case 1:
          return this.m_v1.w.GetNegative();
        case 2:
          var b = f.SubtractVV(this.m_v2.w, this.m_v1.w);
          return 0 < f.CrossVV(b, this.m_v1.w.GetNegative()) ? f.CrossFV(1, b) : f.CrossVF(b, 1);
        default:
          return e.b2Assert(!1), new l();
      }
    };
    t.prototype.GetClosestPoint = function () {
      switch (this.m_count) {
        case 0:
          return e.b2Assert(!1), new l();
        case 1:
          return this.m_v1.w;
        case 2:
          return new l(this.m_v1.a * this.m_v1.w.x + this.m_v2.a * this.m_v2.w.x, this.m_v1.a * this.m_v1.w.y + this.m_v2.a * this.m_v2.w.y);
        default:
          return e.b2Assert(!1), new l();
      }
    };
    t.prototype.GetWitnessPoints = function (b, c) {
      switch (this.m_count) {
        case 0:
          e.b2Assert(!1);
          break;
        case 1:
          b.SetV(this.m_v1.wA);
          c.SetV(this.m_v1.wB);
          break;
        case 2:
          b.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x;
          b.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y;
          c.x = this.m_v1.a * this.m_v1.wB.x + this.m_v2.a * this.m_v2.wB.x;
          c.y = this.m_v1.a * this.m_v1.wB.y + this.m_v2.a * this.m_v2.wB.y;
          break;
        case 3:
          c.x = b.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x + this.m_v3.a * this.m_v3.wA.x;
          c.y = b.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y + this.m_v3.a * this.m_v3.wA.y;
          break;
        default:
          e.b2Assert(!1);
      }
    };
    t.prototype.GetMetric = function () {
      switch (this.m_count) {
        case 0:
          return e.b2Assert(!1), 0;
        case 1:
          return 0;
        case 2:
          return f.SubtractVV(this.m_v1.w, this.m_v2.w).Length();
        case 3:
          return f.CrossVV(f.SubtractVV(this.m_v2.w, this.m_v1.w), f.SubtractVV(this.m_v3.w, this.m_v1.w));
        default:
          return e.b2Assert(!1), 0;
      }
    };
    t.prototype.Solve2 = function () {
      var b = this.m_v1.w,
        c = this.m_v2.w,
        d = f.SubtractVV(c, b),
        b = -(b.x * d.x + b.y * d.y);
      0 >= b ? this.m_count = this.m_v1.a = 1 : (c = c.x * d.x + c.y * d.y, 0 >= c ? (this.m_count = this.m_v2.a = 1, this.m_v1.Set(this.m_v2)) : (d = 1 / (c + b), this.m_v1.a = c * d, this.m_v2.a = b * d, this.m_count = 2));
    };
    t.prototype.Solve3 = function () {
      var b = this.m_v1.w,
        c = this.m_v2.w,
        d = this.m_v3.w,
        e = f.SubtractVV(c, b),
        n = f.Dot(b, e),
        g = f.Dot(c, e),
        n = -n,
        j = f.SubtractVV(d, b),
        l = f.Dot(b, j),
        r = f.Dot(d, j),
        l = -l,
        u = f.SubtractVV(d, c),
        t = f.Dot(c, u),
        u = f.Dot(d, u),
        t = -t,
        j = f.CrossVV(e, j),
        e = j * f.CrossVV(c, d),
        d = j * f.CrossVV(d, b),
        b = j * f.CrossVV(b, c);
      0 >= n && 0 >= l ? this.m_count = this.m_v1.a = 1 : 0 < g && 0 < n && 0 >= b ? (r = 1 / (g + n), this.m_v1.a = g * r, this.m_v2.a = n * r, this.m_count = 2) : 0 < r && 0 < l && 0 >= d ? (g = 1 / (r + l), this.m_v1.a = r * g, this.m_v3.a = l * g, this.m_count = 2, this.m_v2.Set(this.m_v3)) : 0 >= g && 0 >= t ? (this.m_count = this.m_v2.a = 1, this.m_v1.Set(this.m_v2)) : 0 >= r && 0 >= u ? (this.m_count = this.m_v3.a = 1, this.m_v1.Set(this.m_v3)) : 0 < u && 0 < t && 0 >= e ? (g = 1 / (u + t), this.m_v2.a = u * g, this.m_v3.a = t * g, this.m_count = 2, this.m_v1.Set(this.m_v3)) : (g = 1 / (e + d + b), this.m_v1.a = e * g, this.m_v2.a = d * g, this.m_v3.a = b * g, this.m_count = 3);
    };
    E.b2SimplexCache = function () {
      this.indexA = new Vector_a2j_Number(3);
      this.indexB = new Vector_a2j_Number(3);
    };
    C.b2SimplexVertex = function () {};
    C.prototype.Set = function (b) {
      this.wA.SetV(b.wA);
      this.wB.SetV(b.wB);
      this.w.SetV(b.w);
      this.a = b.a;
      this.indexA = b.indexA;
      this.indexB = b.indexB;
    };
    O.b2TimeOfImpact = function () {};
    O.TimeOfImpact = function (b) {
      ++O.b2_toiCalls;
      var c = b.proxyA,
        d = b.proxyB,
        n = b.sweepA,
        g = b.sweepB;
      e.b2Assert(n.t0 == g.t0);
      e.b2Assert(1 - n.t0 > Number.MIN_VALUE);
      var j = c.m_radius + d.m_radius;
      b = b.tolerance;
      var l = 0,
        r = 0,
        u = 0;
      O.s_cache.count = 0;
      for (O.s_distanceInput.useRadii = !1;;) {
        n.GetTransform(O.s_xfA, l);
        g.GetTransform(O.s_xfB, l);
        O.s_distanceInput.proxyA = c;
        O.s_distanceInput.proxyB = d;
        O.s_distanceInput.transformA = O.s_xfA;
        O.s_distanceInput.transformB = O.s_xfB;
        H.Distance(O.s_distanceOutput, O.s_cache, O.s_distanceInput);
        if (0 >= O.s_distanceOutput.distance) {
          l = 1;
          break;
        }
        O.s_fcn.Initialize(O.s_cache, c, O.s_xfA, d, O.s_xfB);
        var t = O.s_fcn.Evaluate(O.s_xfA, O.s_xfB);
        if (0 >= t) {
          l = 1;
          break;
        }
        0 == r && (u = t > j ? f.Max(j - b, 0.75 * j) : f.Max(t - b, 0.02 * j));
        if (t - u < 0.5 * b) {
          if (0 == r) {
            l = 1;
            break;
          }
          break;
        }
        var C = l,
          J = l,
          E = 1;
        n.GetTransform(O.s_xfA, E);
        g.GetTransform(O.s_xfB, E);
        var m = O.s_fcn.Evaluate(O.s_xfA, O.s_xfB);
        if (m >= u) {
          l = 1;
          break;
        }
        for (var s = 0;;) {
          var Q = 0,
            Q = s & 1 ? J + (u - t) * (E - J) / (m - t) : 0.5 * (J + E);
          n.GetTransform(O.s_xfA, Q);
          g.GetTransform(O.s_xfB, Q);
          var aa = O.s_fcn.Evaluate(O.s_xfA, O.s_xfB);
          if (f.Abs(aa - u) < 0.025 * b) {
            C = Q;
            break;
          }
          aa > u ? (J = Q, t = aa) : (E = Q, m = aa);
          ++s;
          ++O.b2_toiRootIters;
          if (50 == s) break;
        }
        O.b2_toiMaxRootIters = f.Max(O.b2_toiMaxRootIters, s);
        if (C < (1 + 100 * Number.MIN_VALUE) * l) break;
        l = C;
        r++;
        ++O.b2_toiIters;
        if (1E3 == r) break;
      }
      O.b2_toiMaxIters = f.Max(O.b2_toiMaxIters, r);
      return l;
    };
    Box2D.postDefs.push(function () {
      Box2D.Collision.b2TimeOfImpact.b2_toiCalls = 0;
      Box2D.Collision.b2TimeOfImpact.b2_toiIters = 0;
      Box2D.Collision.b2TimeOfImpact.b2_toiMaxIters = 0;
      Box2D.Collision.b2TimeOfImpact.b2_toiRootIters = 0;
      Box2D.Collision.b2TimeOfImpact.b2_toiMaxRootIters = 0;
      Box2D.Collision.b2TimeOfImpact.s_cache = new E();
      Box2D.Collision.b2TimeOfImpact.s_distanceInput = new D();
      Box2D.Collision.b2TimeOfImpact.s_xfA = new m();
      Box2D.Collision.b2TimeOfImpact.s_xfB = new m();
      Box2D.Collision.b2TimeOfImpact.s_fcn = new r();
      Box2D.Collision.b2TimeOfImpact.s_distanceOutput = new s();
    });
    aa.b2TOIInput = function () {
      this.proxyA = new G();
      this.proxyB = new G();
      this.sweepA = new j();
      this.sweepB = new j();
    };
    Q.b2WorldManifold = function () {
      this.m_normal = new l();
    };
    Q.prototype.b2WorldManifold = function () {
      this.m_points = new Vector(e.b2_maxManifoldPoints);
      for (var b = 0; b < e.b2_maxManifoldPoints; b++) this.m_points[b] = new l();
    };
    Q.prototype.Initialize = function (b, c, d, e, f) {
      void 0 === d && (d = 0);
      void 0 === f && (f = 0);
      if (0 != b.m_pointCount) {
        var n = 0,
          g,
          j,
          l = 0,
          r = 0,
          u = 0,
          t = 0,
          C = 0;
        switch (b.m_type) {
          case I.e_circles:
            j = c.R;
            g = b.m_localPoint;
            n = c.position.x + j.col1.x * g.x + j.col2.x * g.y;
            c = c.position.y + j.col1.y * g.x + j.col2.y * g.y;
            j = e.R;
            g = b.m_points[0].m_localPoint;
            b = e.position.x + j.col1.x * g.x + j.col2.x * g.y;
            e = e.position.y + j.col1.y * g.x + j.col2.y * g.y;
            g = b - n;
            j = e - c;
            l = g * g + j * j;
            l > Number.MIN_VALUE * Number.MIN_VALUE ? (l = Math.sqrt(l), this.m_normal.x = g / l, this.m_normal.y = j / l) : (this.m_normal.x = 1, this.m_normal.y = 0);
            g = c + d * this.m_normal.y;
            e -= f * this.m_normal.y;
            this.m_points[0].x = 0.5 * (n + d * this.m_normal.x + (b - f * this.m_normal.x));
            this.m_points[0].y = 0.5 * (g + e);
            break;
          case I.e_faceA:
            j = c.R;
            g = b.m_localPlaneNormal;
            l = j.col1.x * g.x + j.col2.x * g.y;
            r = j.col1.y * g.x + j.col2.y * g.y;
            j = c.R;
            g = b.m_localPoint;
            u = c.position.x + j.col1.x * g.x + j.col2.x * g.y;
            t = c.position.y + j.col1.y * g.x + j.col2.y * g.y;
            this.m_normal.x = l;
            this.m_normal.y = r;
            for (n = 0; n < b.m_pointCount; n++) j = e.R, g = b.m_points[n].m_localPoint, C = e.position.x + j.col1.x * g.x + j.col2.x * g.y, g = e.position.y + j.col1.y * g.x + j.col2.y * g.y, this.m_points[n].x = C + 0.5 * (d - (C - u) * l - (g - t) * r - f) * l, this.m_points[n].y = g + 0.5 * (d - (C - u) * l - (g - t) * r - f) * r;
            break;
          case I.e_faceB:
            j = e.R;
            g = b.m_localPlaneNormal;
            l = j.col1.x * g.x + j.col2.x * g.y;
            r = j.col1.y * g.x + j.col2.y * g.y;
            j = e.R;
            g = b.m_localPoint;
            u = e.position.x + j.col1.x * g.x + j.col2.x * g.y;
            t = e.position.y + j.col1.y * g.x + j.col2.y * g.y;
            this.m_normal.x = -l;
            this.m_normal.y = -r;
            for (n = 0; n < b.m_pointCount; n++) j = c.R, g = b.m_points[n].m_localPoint, C = c.position.x + j.col1.x * g.x + j.col2.x * g.y, g = c.position.y + j.col1.y * g.x + j.col2.y * g.y, this.m_points[n].x = C + 0.5 * (f - (C - u) * l - (g - t) * r - d) * l, this.m_points[n].y = g + 0.5 * (f - (C - u) * l - (g - t) * r - d) * r;
        }
      }
    };
    n.ClipVertex = function () {
      this.v = new l();
      this.id = new A();
    };
    n.prototype.Set = function (b) {
      this.v.SetV(b.v);
      this.id.Set(b.id);
    };
    u.Features = function () {};
    Object.defineProperty(u.prototype, "referenceEdge", {
      enumerable: !1,
      configurable: !0,
      get: function () {
        return this._referenceEdge;
      }
    });
    Object.defineProperty(u.prototype, "referenceEdge", {
      enumerable: !1,
      configurable: !0,
      set: function (b) {
        void 0 === b && (b = 0);
        this._referenceEdge = b;
        this._m_id._key = this._m_id._key & 4294967040 | this._referenceEdge & 255;
      }
    });
    Object.defineProperty(u.prototype, "incidentEdge", {
      enumerable: !1,
      configurable: !0,
      get: function () {
        return this._incidentEdge;
      }
    });
    Object.defineProperty(u.prototype, "incidentEdge", {
      enumerable: !1,
      configurable: !0,
      set: function (b) {
        void 0 === b && (b = 0);
        this._incidentEdge = b;
        this._m_id._key = this._m_id._key & 4294902015 | this._incidentEdge << 8 & 65280;
      }
    });
    Object.defineProperty(u.prototype, "incidentVertex", {
      enumerable: !1,
      configurable: !0,
      get: function () {
        return this._incidentVertex;
      }
    });
    Object.defineProperty(u.prototype, "incidentVertex", {
      enumerable: !1,
      configurable: !0,
      set: function (b) {
        void 0 === b && (b = 0);
        this._incidentVertex = b;
        this._m_id._key = this._m_id._key & 4278255615 | this._incidentVertex << 16 & 16711680;
      }
    });
    Object.defineProperty(u.prototype, "flip", {
      enumerable: !1,
      configurable: !0,
      get: function () {
        return this._flip;
      }
    });
    Object.defineProperty(u.prototype, "flip", {
      enumerable: !1,
      configurable: !0,
      set: function (b) {
        void 0 === b && (b = 0);
        this._flip = b;
        this._m_id._key = this._m_id._key & 16777215 | this._flip << 24 & 4278190080;
      }
    });
  })();
  (function () {
    var b = Box2D.Common.b2Settings,
      c = Box2D.Collision.Shapes.b2CircleShape,
      d = Box2D.Collision.Shapes.b2EdgeChainDef,
      e = Box2D.Collision.Shapes.b2EdgeShape,
      f = Box2D.Collision.Shapes.b2MassData,
      j = Box2D.Collision.Shapes.b2PolygonShape,
      m = Box2D.Collision.Shapes.b2Shape,
      l = Box2D.Common.Math.b2Mat22,
      g = Box2D.Common.Math.b2Math,
      q = Box2D.Common.Math.b2Transform,
      y = Box2D.Common.Math.b2Vec2,
      z = Box2D.Collision.b2Distance,
      A = Box2D.Collision.b2DistanceInput,
      B = Box2D.Collision.b2DistanceOutput,
      H = Box2D.Collision.b2DistanceProxy,
      D = Box2D.Collision.b2SimplexCache;
    Box2D.inherit(c, Box2D.Collision.Shapes.b2Shape);
    c.prototype.__super = Box2D.Collision.Shapes.b2Shape.prototype;
    c.b2CircleShape = function () {
      Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this, arguments);
      this.m_p = new y();
    };
    c.prototype.Copy = function () {
      var b = new c();
      b.Set(this);
      return b;
    };
    c.prototype.Set = function (b) {
      this.__super.Set.call(this, b);
      Box2D.is(b, c) && this.m_p.SetV((b instanceof c ? b : null).m_p);
    };
    c.prototype.TestPoint = function (b, c) {
      var d = b.R,
        e = b.position.x + (d.col1.x * this.m_p.x + d.col2.x * this.m_p.y),
        d = b.position.y + (d.col1.y * this.m_p.x + d.col2.y * this.m_p.y),
        e = c.x - e,
        d = c.y - d;
      return e * e + d * d <= this.m_radius * this.m_radius;
    };
    c.prototype.RayCast = function (b, c, d) {
      var e = d.R,
        f = c.p1.x - (d.position.x + (e.col1.x * this.m_p.x + e.col2.x * this.m_p.y));
      d = c.p1.y - (d.position.y + (e.col1.y * this.m_p.x + e.col2.y * this.m_p.y));
      var e = c.p2.x - c.p1.x,
        g = c.p2.y - c.p1.y,
        j = f * e + d * g,
        l = e * e + g * g,
        m = j * j - l * (f * f + d * d - this.m_radius * this.m_radius);
      if (0 > m || l < Number.MIN_VALUE) return !1;
      j = -(j + Math.sqrt(m));
      return 0 <= j && j <= c.maxFraction * l ? (j /= l, b.fraction = j, b.normal.x = f + j * e, b.normal.y = d + j * g, b.normal.Normalize(), !0) : !1;
    };
    c.prototype.ComputeAABB = function (b, c) {
      var d = c.R,
        e = c.position.x + (d.col1.x * this.m_p.x + d.col2.x * this.m_p.y),
        d = c.position.y + (d.col1.y * this.m_p.x + d.col2.y * this.m_p.y);
      b.lowerBound.Set(e - this.m_radius, d - this.m_radius);
      b.upperBound.Set(e + this.m_radius, d + this.m_radius);
    };
    c.prototype.ComputeMass = function (c, d) {
      void 0 === d && (d = 0);
      c.mass = d * b.b2_pi * this.m_radius * this.m_radius;
      c.center.SetV(this.m_p);
      c.I = c.mass * (0.5 * this.m_radius * this.m_radius + (this.m_p.x * this.m_p.x + this.m_p.y * this.m_p.y));
    };
    c.prototype.ComputeSubmergedArea = function (b, c, d, e) {
      void 0 === c && (c = 0);
      d = g.MulX(d, this.m_p);
      var f = -(g.Dot(b, d) - c);
      if (f < -this.m_radius + Number.MIN_VALUE) return 0;
      if (f > this.m_radius) return e.SetV(d), Math.PI * this.m_radius * this.m_radius;
      c = this.m_radius * this.m_radius;
      var j = f * f,
        f = c * (Math.asin(f / this.m_radius) + Math.PI / 2) + f * Math.sqrt(c - j);
      c = -2 / 3 * Math.pow(c - j, 1.5) / f;
      e.x = d.x + b.x * c;
      e.y = d.y + b.y * c;
      return f;
    };
    c.prototype.GetLocalPosition = function () {
      return this.m_p;
    };
    c.prototype.SetLocalPosition = function (b) {
      this.m_p.SetV(b);
    };
    c.prototype.GetRadius = function () {
      return this.m_radius;
    };
    c.prototype.SetRadius = function (b) {
      void 0 === b && (b = 0);
      this.m_radius = b;
    };
    c.prototype.b2CircleShape = function (b) {
      void 0 === b && (b = 0);
      this.__super.b2Shape.call(this);
      this.m_type = m.e_circleShape;
      this.m_radius = b;
    };
    d.b2EdgeChainDef = function () {};
    d.prototype.b2EdgeChainDef = function () {
      this.vertexCount = 0;
      this.isALoop = !0;
      this.vertices = [];
    };
    Box2D.inherit(e, Box2D.Collision.Shapes.b2Shape);
    e.prototype.__super = Box2D.Collision.Shapes.b2Shape.prototype;
    e.b2EdgeShape = function () {
      Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this, arguments);
      this.s_supportVec = new y();
      this.m_v1 = new y();
      this.m_v2 = new y();
      this.m_coreV1 = new y();
      this.m_coreV2 = new y();
      this.m_normal = new y();
      this.m_direction = new y();
      this.m_cornerDir1 = new y();
      this.m_cornerDir2 = new y();
    };
    e.prototype.TestPoint = function () {
      return !1;
    };
    e.prototype.RayCast = function (b, c, d) {
      var e,
        f = c.p2.x - c.p1.x,
        g = c.p2.y - c.p1.y;
      e = d.R;
      var j = d.position.x + (e.col1.x * this.m_v1.x + e.col2.x * this.m_v1.y),
        l = d.position.y + (e.col1.y * this.m_v1.x + e.col2.y * this.m_v1.y),
        m = d.position.y + (e.col1.y * this.m_v2.x + e.col2.y * this.m_v2.y) - l;
      d = -(d.position.x + (e.col1.x * this.m_v2.x + e.col2.x * this.m_v2.y) - j);
      e = 100 * Number.MIN_VALUE;
      var q = -(f * m + g * d);
      if (q > e) {
        var j = c.p1.x - j,
          z = c.p1.y - l,
          l = j * m + z * d;
        if (0 <= l && l <= c.maxFraction * q && (c = -f * z + g * j, -e * q <= c && c <= q * (1 + e))) return b.fraction = l / q, c = Math.sqrt(m * m + d * d), b.normal.x = m / c, b.normal.y = d / c, !0;
      }
      return !1;
    };
    e.prototype.ComputeAABB = function (b, c) {
      var d = c.R,
        e = c.position.x + (d.col1.x * this.m_v1.x + d.col2.x * this.m_v1.y),
        f = c.position.y + (d.col1.y * this.m_v1.x + d.col2.y * this.m_v1.y),
        g = c.position.x + (d.col1.x * this.m_v2.x + d.col2.x * this.m_v2.y),
        d = c.position.y + (d.col1.y * this.m_v2.x + d.col2.y * this.m_v2.y);
      e < g ? (b.lowerBound.x = e, b.upperBound.x = g) : (b.lowerBound.x = g, b.upperBound.x = e);
      f < d ? (b.lowerBound.y = f, b.upperBound.y = d) : (b.lowerBound.y = d, b.upperBound.y = f);
    };
    e.prototype.ComputeMass = function (b) {
      b.mass = 0;
      b.center.SetV(this.m_v1);
      b.I = 0;
    };
    e.prototype.ComputeSubmergedArea = function (b, c, d, e) {
      void 0 === c && (c = 0);
      var f = new y(b.x * c, b.y * c),
        j = g.MulX(d, this.m_v1);
      d = g.MulX(d, this.m_v2);
      var l = g.Dot(b, j) - c;
      b = g.Dot(b, d) - c;
      if (0 < l) {
        if (0 < b) return 0;
        j.x = -b / (l - b) * j.x + l / (l - b) * d.x;
        j.y = -b / (l - b) * j.y + l / (l - b) * d.y;
      } else 0 < b && (d.x = -b / (l - b) * j.x + l / (l - b) * d.x, d.y = -b / (l - b) * j.y + l / (l - b) * d.y);
      e.x = (f.x + j.x + d.x) / 3;
      e.y = (f.y + j.y + d.y) / 3;
      return 0.5 * ((j.x - f.x) * (d.y - f.y) - (j.y - f.y) * (d.x - f.x));
    };
    e.prototype.GetLength = function () {
      return this.m_length;
    };
    e.prototype.GetVertex1 = function () {
      return this.m_v1;
    };
    e.prototype.GetVertex2 = function () {
      return this.m_v2;
    };
    e.prototype.GetCoreVertex1 = function () {
      return this.m_coreV1;
    };
    e.prototype.GetCoreVertex2 = function () {
      return this.m_coreV2;
    };
    e.prototype.GetNormalVector = function () {
      return this.m_normal;
    };
    e.prototype.GetDirectionVector = function () {
      return this.m_direction;
    };
    e.prototype.GetCorner1Vector = function () {
      return this.m_cornerDir1;
    };
    e.prototype.GetCorner2Vector = function () {
      return this.m_cornerDir2;
    };
    e.prototype.Corner1IsConvex = function () {
      return this.m_cornerConvex1;
    };
    e.prototype.Corner2IsConvex = function () {
      return this.m_cornerConvex2;
    };
    e.prototype.GetFirstVertex = function (b) {
      var c = b.R;
      return new y(b.position.x + (c.col1.x * this.m_coreV1.x + c.col2.x * this.m_coreV1.y), b.position.y + (c.col1.y * this.m_coreV1.x + c.col2.y * this.m_coreV1.y));
    };
    e.prototype.GetNextEdge = function () {
      return this.m_nextEdge;
    };
    e.prototype.GetPrevEdge = function () {
      return this.m_prevEdge;
    };
    e.prototype.Support = function (b, c, d) {
      void 0 === c && (c = 0);
      void 0 === d && (d = 0);
      var e = b.R,
        f = b.position.x + (e.col1.x * this.m_coreV1.x + e.col2.x * this.m_coreV1.y),
        g = b.position.y + (e.col1.y * this.m_coreV1.x + e.col2.y * this.m_coreV1.y),
        j = b.position.x + (e.col1.x * this.m_coreV2.x + e.col2.x * this.m_coreV2.y);
      b = b.position.y + (e.col1.y * this.m_coreV2.x + e.col2.y * this.m_coreV2.y);
      f * c + g * d > j * c + b * d ? (this.s_supportVec.x = f, this.s_supportVec.y = g) : (this.s_supportVec.x = j, this.s_supportVec.y = b);
      return this.s_supportVec;
    };
    e.prototype.b2EdgeShape = function (c, d) {
      this.__super.b2Shape.call(this);
      this.m_type = m.e_edgeShape;
      this.m_nextEdge = this.m_prevEdge = null;
      this.m_v1 = c;
      this.m_v2 = d;
      this.m_direction.Set(this.m_v2.x - this.m_v1.x, this.m_v2.y - this.m_v1.y);
      this.m_length = this.m_direction.Normalize();
      this.m_normal.Set(this.m_direction.y, -this.m_direction.x);
      this.m_coreV1.Set(-b.b2_toiSlop * (this.m_normal.x - this.m_direction.x) + this.m_v1.x, -b.b2_toiSlop * (this.m_normal.y - this.m_direction.y) + this.m_v1.y);
      this.m_coreV2.Set(-b.b2_toiSlop * (this.m_normal.x + this.m_direction.x) + this.m_v2.x, -b.b2_toiSlop * (this.m_normal.y + this.m_direction.y) + this.m_v2.y);
      this.m_cornerDir1 = this.m_normal;
      this.m_cornerDir2.Set(-this.m_normal.x, -this.m_normal.y);
    };
    e.prototype.SetPrevEdge = function (b, c, d, e) {
      this.m_prevEdge = b;
      this.m_coreV1 = c;
      this.m_cornerDir1 = d;
      this.m_cornerConvex1 = e;
    };
    e.prototype.SetNextEdge = function (b, c, d, e) {
      this.m_nextEdge = b;
      this.m_coreV2 = c;
      this.m_cornerDir2 = d;
      this.m_cornerConvex2 = e;
    };
    f.b2MassData = function () {
      this.mass = 0;
      this.center = new y(0, 0);
      this.I = 0;
    };
    Box2D.inherit(j, Box2D.Collision.Shapes.b2Shape);
    j.prototype.__super = Box2D.Collision.Shapes.b2Shape.prototype;
    j.b2PolygonShape = function () {
      Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this, arguments);
    };
    j.prototype.Copy = function () {
      var b = new j();
      b.Set(this);
      return b;
    };
    j.prototype.Set = function (b) {
      this.__super.Set.call(this, b);
      if (Box2D.is(b, j)) {
        b = b instanceof j ? b : null;
        this.m_centroid.SetV(b.m_centroid);
        this.m_vertexCount = b.m_vertexCount;
        this.Reserve(this.m_vertexCount);
        for (var c = 0; c < this.m_vertexCount; c++) this.m_vertices[c].SetV(b.m_vertices[c]), this.m_normals[c].SetV(b.m_normals[c]);
      }
    };
    j.prototype.SetAsArray = function (b, c) {
      void 0 === c && (c = 0);
      for (var d = new Vector(), e = 0, f, e = 0; e < b.length; ++e) f = b[e], d.push(f);
      this.SetAsVector(d, c);
    };
    j.AsArray = function (b, c) {
      void 0 === c && (c = 0);
      var d = new j();
      d.SetAsArray(b, c);
      return d;
    };
    j.prototype.SetAsVector = function (c, d) {
      void 0 === d && (d = 0);
      0 == d && (d = c.length);
      b.b2Assert(2 <= d);
      this.m_vertexCount = d;
      this.Reserve(d);
      for (var e = 0, e = 0; e < this.m_vertexCount; e++) this.m_vertices[e].SetV(c[e]);
      for (e = 0; e < this.m_vertexCount; ++e) {
        var f = parseInt(e),
          l = parseInt(e + 1 < this.m_vertexCount ? e + 1 : 0),
          f = g.SubtractVV(this.m_vertices[l], this.m_vertices[f]);
        b.b2Assert(f.LengthSquared() > Number.MIN_VALUE);
        this.m_normals[e].SetV(g.CrossVF(f, 1));
        this.m_normals[e].Normalize();
      }
      this.m_centroid = j.ComputeCentroid(this.m_vertices, this.m_vertexCount);
    };
    j.AsVector = function (b, c) {
      void 0 === c && (c = 0);
      var d = new j();
      d.SetAsVector(b, c);
      return d;
    };
    j.prototype.SetAsBox = function (b, c) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      this.m_vertexCount = 4;
      this.Reserve(4);
      this.m_vertices[0].Set(-b, -c);
      this.m_vertices[1].Set(b, -c);
      this.m_vertices[2].Set(b, c);
      this.m_vertices[3].Set(-b, c);
      this.m_normals[0].Set(0, -1);
      this.m_normals[1].Set(1, 0);
      this.m_normals[2].Set(0, 1);
      this.m_normals[3].Set(-1, 0);
      this.m_centroid.SetZero();
    };
    j.AsBox = function (b, c) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      var d = new j();
      d.SetAsBox(b, c);
      return d;
    };
    j.prototype.SetAsOrientedBox = function (b, c, d, e) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      void 0 === d && (d = null);
      void 0 === e && (e = 0);
      this.m_vertexCount = 4;
      this.Reserve(4);
      this.m_vertices[0].Set(-b, -c);
      this.m_vertices[1].Set(b, -c);
      this.m_vertices[2].Set(b, c);
      this.m_vertices[3].Set(-b, c);
      this.m_normals[0].Set(0, -1);
      this.m_normals[1].Set(1, 0);
      this.m_normals[2].Set(0, 1);
      this.m_normals[3].Set(-1, 0);
      this.m_centroid = d;
      b = new q();
      b.position = d;
      b.R.Set(e);
      for (d = 0; d < this.m_vertexCount; ++d) this.m_vertices[d] = g.MulX(b, this.m_vertices[d]), this.m_normals[d] = g.MulMV(b.R, this.m_normals[d]);
    };
    j.AsOrientedBox = function (b, c, d, e) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      void 0 === d && (d = null);
      void 0 === e && (e = 0);
      var f = new j();
      f.SetAsOrientedBox(b, c, d, e);
      return f;
    };
    j.prototype.SetAsEdge = function (b, c) {
      this.m_vertexCount = 2;
      this.Reserve(2);
      this.m_vertices[0].SetV(b);
      this.m_vertices[1].SetV(c);
      this.m_centroid.x = 0.5 * (b.x + c.x);
      this.m_centroid.y = 0.5 * (b.y + c.y);
      this.m_normals[0] = g.CrossVF(g.SubtractVV(c, b), 1);
      this.m_normals[0].Normalize();
      this.m_normals[1].x = -this.m_normals[0].x;
      this.m_normals[1].y = -this.m_normals[0].y;
    };
    j.AsEdge = function (b, c) {
      var d = new j();
      d.SetAsEdge(b, c);
      return d;
    };
    j.prototype.TestPoint = function (b, c) {
      var d;
      d = b.R;
      for (var e = c.x - b.position.x, f = c.y - b.position.y, g = e * d.col1.x + f * d.col1.y, j = e * d.col2.x + f * d.col2.y, l = 0; l < this.m_vertexCount; ++l) if (d = this.m_vertices[l], e = g - d.x, f = j - d.y, d = this.m_normals[l], 0 < d.x * e + d.y * f) return !1;
      return !0;
    };
    j.prototype.RayCast = function (b, c, d) {
      var e = 0,
        f = c.maxFraction,
        g = 0,
        j = 0,
        l,
        m,
        g = c.p1.x - d.position.x,
        j = c.p1.y - d.position.y;
      l = d.R;
      var q = g * l.col1.x + j * l.col1.y,
        z = g * l.col2.x + j * l.col2.y,
        g = c.p2.x - d.position.x,
        j = c.p2.y - d.position.y;
      l = d.R;
      c = g * l.col1.x + j * l.col1.y - q;
      l = g * l.col2.x + j * l.col2.y - z;
      for (var A = -1, r = 0; r < this.m_vertexCount; ++r) {
        m = this.m_vertices[r];
        g = m.x - q;
        j = m.y - z;
        m = this.m_normals[r];
        g = m.x * g + m.y * j;
        j = m.x * c + m.y * l;
        if (0 == j) {
          if (0 > g) return !1;
        } else 0 > j && g < e * j ? (e = g / j, A = r) : 0 < j && g < f * j && (f = g / j);
        if (f < e - Number.MIN_VALUE) return !1;
      }
      return 0 <= A ? (b.fraction = e, l = d.R, m = this.m_normals[A], b.normal.x = l.col1.x * m.x + l.col2.x * m.y, b.normal.y = l.col1.y * m.x + l.col2.y * m.y, !0) : !1;
    };
    j.prototype.ComputeAABB = function (b, c) {
      for (var d = c.R, e = this.m_vertices[0], f = c.position.x + (d.col1.x * e.x + d.col2.x * e.y), g = c.position.y + (d.col1.y * e.x + d.col2.y * e.y), j = f, l = g, m = 1; m < this.m_vertexCount; ++m) var e = this.m_vertices[m], q = c.position.x + (d.col1.x * e.x + d.col2.x * e.y), e = c.position.y + (d.col1.y * e.x + d.col2.y * e.y), f = f < q ? f : q, g = g < e ? g : e, j = j > q ? j : q, l = l > e ? l : e;
      b.lowerBound.x = f - this.m_radius;
      b.lowerBound.y = g - this.m_radius;
      b.upperBound.x = j + this.m_radius;
      b.upperBound.y = l + this.m_radius;
    };
    j.prototype.ComputeMass = function (b, c) {
      void 0 === c && (c = 0);
      if (2 == this.m_vertexCount) b.center.x = 0.5 * (this.m_vertices[0].x + this.m_vertices[1].x), b.center.y = 0.5 * (this.m_vertices[0].y + this.m_vertices[1].y), b.mass = 0, b.I = 0;else {
        for (var d = 0, e = 0, f = 0, g = 0, j = 1 / 3, l = 0; l < this.m_vertexCount; ++l) var m = this.m_vertices[l], q = l + 1 < this.m_vertexCount ? this.m_vertices[parseInt(l + 1)] : this.m_vertices[0], z = m.x - 0, A = m.y - 0, r = q.x - 0, t = q.y - 0, E = z * t - A * r, C = 0.5 * E, f = f + C, d = d + C * j * (0 + m.x + q.x), e = e + C * j * (0 + m.y + q.y), m = z, g = g + E * (j * (0.25 * (m * m + r * m + r * r) + (0 * m + 0 * r)) + 0 + (j * (0.25 * (A * A + t * A + t * t) + (0 * A + 0 * t)) + 0));
        b.mass = c * f;
        b.center.Set(d * (1 / f), e * (1 / f));
        b.I = c * g;
      }
    };
    j.prototype.ComputeSubmergedArea = function (b, c, d, e) {
      void 0 === c && (c = 0);
      var j = g.MulTMV(d.R, b),
        l = c - g.Dot(b, d.position),
        m = new Vector_a2j_Number(),
        q = 0,
        z = -1;
      c = -1;
      var A = !1;
      for (b = b = 0; b < this.m_vertexCount; ++b) {
        m[b] = g.Dot(j, this.m_vertices[b]) - l;
        var B = m[b] < -Number.MIN_VALUE;
        0 < b && (B ? A || (z = b - 1, q++) : A && (c = b - 1, q++));
        A = B;
      }
      switch (q) {
        case 0:
          return A ? (b = new f(), this.ComputeMass(b, 1), e.SetV(g.MulX(d, b.center)), b.mass) : 0;
        case 1:
          -1 == z ? z = this.m_vertexCount - 1 : c = this.m_vertexCount - 1;
      }
      b = parseInt((z + 1) % this.m_vertexCount);
      j = parseInt((c + 1) % this.m_vertexCount);
      l = (0 - m[z]) / (m[b] - m[z]);
      m = (0 - m[c]) / (m[j] - m[c]);
      z = new y(this.m_vertices[z].x * (1 - l) + this.m_vertices[b].x * l, this.m_vertices[z].y * (1 - l) + this.m_vertices[b].y * l);
      c = new y(this.m_vertices[c].x * (1 - m) + this.m_vertices[j].x * m, this.m_vertices[c].y * (1 - m) + this.m_vertices[j].y * m);
      m = 0;
      l = new y();
      for (q = this.m_vertices[b]; b != j;) b = (b + 1) % this.m_vertexCount, A = b == j ? c : this.m_vertices[b], B = 0.5 * ((q.x - z.x) * (A.y - z.y) - (q.y - z.y) * (A.x - z.x)), m += B, l.x += B * (z.x + q.x + A.x) / 3, l.y += B * (z.y + q.y + A.y) / 3, q = A;
      l.Multiply(1 / m);
      e.SetV(g.MulX(d, l));
      return m;
    };
    j.prototype.GetVertexCount = function () {
      return this.m_vertexCount;
    };
    j.prototype.GetVertices = function () {
      return this.m_vertices;
    };
    j.prototype.GetNormals = function () {
      return this.m_normals;
    };
    j.prototype.GetSupport = function (b) {
      for (var c = 0, d = this.m_vertices[0].x * b.x + this.m_vertices[0].y * b.y, e = 1; e < this.m_vertexCount; ++e) {
        var f = this.m_vertices[e].x * b.x + this.m_vertices[e].y * b.y;
        f > d && (c = e, d = f);
      }
      return c;
    };
    j.prototype.GetSupportVertex = function (b) {
      for (var c = 0, d = this.m_vertices[0].x * b.x + this.m_vertices[0].y * b.y, e = 1; e < this.m_vertexCount; ++e) {
        var f = this.m_vertices[e].x * b.x + this.m_vertices[e].y * b.y;
        f > d && (c = e, d = f);
      }
      return this.m_vertices[c];
    };
    j.prototype.Validate = function () {
      return !1;
    };
    j.prototype.b2PolygonShape = function () {
      this.__super.b2Shape.call(this);
      this.m_type = m.e_polygonShape;
      this.m_centroid = new y();
      this.m_vertices = new Vector();
      this.m_normals = new Vector();
    };
    j.prototype.Reserve = function (b) {
      void 0 === b && (b = 0);
      for (var c = parseInt(this.m_vertices.length); c < b; c++) this.m_vertices[c] = new y(), this.m_normals[c] = new y();
    };
    j.ComputeCentroid = function (b, c) {
      void 0 === c && (c = 0);
      for (var d = new y(), e = 0, f = 1 / 3, g = 0; g < c; ++g) {
        var j = b[g],
          l = g + 1 < c ? b[parseInt(g + 1)] : b[0],
          m = 0.5 * ((j.x - 0) * (l.y - 0) - (j.y - 0) * (l.x - 0)),
          e = e + m;
        d.x += m * f * (0 + j.x + l.x);
        d.y += m * f * (0 + j.y + l.y);
      }
      d.x *= 1 / e;
      d.y *= 1 / e;
      return d;
    };
    j.ComputeOBB = function (b, c, d) {
      void 0 === d && (d = 0);
      for (var e = 0, f = new Vector(d + 1), e = 0; e < d; ++e) f[e] = c[e];
      f[d] = f[0];
      c = Number.MAX_VALUE;
      for (e = 1; e <= d; ++e) {
        for (var g = f[parseInt(e - 1)], j = f[e].x - g.x, l = f[e].y - g.y, m = Math.sqrt(j * j + l * l), j = j / m, l = l / m, q = -l, z = j, A = m = Number.MAX_VALUE, r = -Number.MAX_VALUE, t = -Number.MAX_VALUE, E = 0; E < d; ++E) {
          var C = f[E].x - g.x,
            O = f[E].y - g.y,
            aa = j * C + l * O,
            C = q * C + z * O;
          aa < m && (m = aa);
          C < A && (A = C);
          aa > r && (r = aa);
          C > t && (t = C);
        }
        E = (r - m) * (t - A);
        E < 0.95 * c && (c = E, b.R.col1.x = j, b.R.col1.y = l, b.R.col2.x = q, b.R.col2.y = z, j = 0.5 * (m + r), l = 0.5 * (A + t), q = b.R, b.center.x = g.x + (q.col1.x * j + q.col2.x * l), b.center.y = g.y + (q.col1.y * j + q.col2.y * l), b.extents.x = 0.5 * (r - m), b.extents.y = 0.5 * (t - A));
      }
    };
    Box2D.postDefs.push(function () {
      Box2D.Collision.Shapes.b2PolygonShape.s_mat = new l();
    });
    m.b2Shape = function () {};
    m.prototype.Copy = function () {
      return null;
    };
    m.prototype.Set = function (b) {
      this.m_radius = b.m_radius;
    };
    m.prototype.GetType = function () {
      return this.m_type;
    };
    m.prototype.TestPoint = function () {
      return !1;
    };
    m.prototype.RayCast = function () {
      return !1;
    };
    m.prototype.ComputeAABB = function () {};
    m.prototype.ComputeMass = function () {};
    m.prototype.ComputeSubmergedArea = function () {
      return 0;
    };
    m.TestOverlap = function (b, c, d, e) {
      var f = new A();
      f.proxyA = new H();
      f.proxyA.Set(b);
      f.proxyB = new H();
      f.proxyB.Set(d);
      f.transformA = c;
      f.transformB = e;
      f.useRadii = !0;
      b = new D();
      b.count = 0;
      c = new B();
      z.Distance(c, b, f);
      return c.distance < 10 * Number.MIN_VALUE;
    };
    m.prototype.b2Shape = function () {
      this.m_type = m.e_unknownShape;
      this.m_radius = b.b2_linearSlop;
    };
    Box2D.postDefs.push(function () {
      Box2D.Collision.Shapes.b2Shape.e_unknownShape = -1;
      Box2D.Collision.Shapes.b2Shape.e_circleShape = 0;
      Box2D.Collision.Shapes.b2Shape.e_polygonShape = 1;
      Box2D.Collision.Shapes.b2Shape.e_edgeShape = 2;
      Box2D.Collision.Shapes.b2Shape.e_shapeTypeCount = 3;
      Box2D.Collision.Shapes.b2Shape.e_hitCollide = 1;
      Box2D.Collision.Shapes.b2Shape.e_missCollide = 0;
      Box2D.Collision.Shapes.b2Shape.e_startsInsideCollide = -1;
    });
  })();
  (function () {
    var b = Box2D.Common.b2Color,
      c = Box2D.Common.b2Settings,
      d = Box2D.Common.Math.b2Math;
    b.b2Color = function () {
      this._b = this._g = this._r = 0;
    };
    b.prototype.b2Color = function (b, c, j) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      void 0 === j && (j = 0);
      this._r = Box2D.parseUInt(255 * d.Clamp(b, 0, 1));
      this._g = Box2D.parseUInt(255 * d.Clamp(c, 0, 1));
      this._b = Box2D.parseUInt(255 * d.Clamp(j, 0, 1));
    };
    b.prototype.Set = function (b, c, j) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      void 0 === j && (j = 0);
      this._r = Box2D.parseUInt(255 * d.Clamp(b, 0, 1));
      this._g = Box2D.parseUInt(255 * d.Clamp(c, 0, 1));
      this._b = Box2D.parseUInt(255 * d.Clamp(j, 0, 1));
    };
    Object.defineProperty(b.prototype, "r", {
      enumerable: !1,
      configurable: !0,
      set: function (b) {
        void 0 === b && (b = 0);
        this._r = Box2D.parseUInt(255 * d.Clamp(b, 0, 1));
      }
    });
    Object.defineProperty(b.prototype, "g", {
      enumerable: !1,
      configurable: !0,
      set: function (b) {
        void 0 === b && (b = 0);
        this._g = Box2D.parseUInt(255 * d.Clamp(b, 0, 1));
      }
    });
    Object.defineProperty(b.prototype, "b", {
      enumerable: !1,
      configurable: !0,
      set: function (b) {
        void 0 === b && (b = 0);
        this._b = Box2D.parseUInt(255 * d.Clamp(b, 0, 1));
      }
    });
    Object.defineProperty(b.prototype, "color", {
      enumerable: !1,
      configurable: !0,
      get: function () {
        return this._r << 16 | this._g << 8 | this._b;
      }
    });
    c.b2Settings = function () {};
    c.b2MixFriction = function (b, c) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      return Math.sqrt(b * c);
    };
    c.b2MixRestitution = function (b, c) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      return b > c ? b : c;
    };
    c.b2Assert = function (b) {
      if (!b) throw "Assertion Failed";
    };
    Box2D.postDefs.push(function () {
      Box2D.Common.b2Settings.VERSION = "2.1alpha";
      Box2D.Common.b2Settings.USHRT_MAX = 65535;
      Box2D.Common.b2Settings.b2_pi = Math.PI;
      Box2D.Common.b2Settings.b2_maxManifoldPoints = 2;
      Box2D.Common.b2Settings.b2_aabbExtension = 0.1;
      Box2D.Common.b2Settings.b2_aabbMultiplier = 2;
      Box2D.Common.b2Settings.b2_polygonRadius = 2 * c.b2_linearSlop;
      Box2D.Common.b2Settings.b2_linearSlop = 0.005;
      Box2D.Common.b2Settings.b2_angularSlop = 2 / 180 * c.b2_pi;
      Box2D.Common.b2Settings.b2_toiSlop = 8 * c.b2_linearSlop;
      Box2D.Common.b2Settings.b2_maxTOIContactsPerIsland = 32;
      Box2D.Common.b2Settings.b2_maxTOIJointsPerIsland = 32;
      Box2D.Common.b2Settings.b2_velocityThreshold = 1;
      Box2D.Common.b2Settings.b2_maxLinearCorrection = 0.2;
      Box2D.Common.b2Settings.b2_maxAngularCorrection = 8 / 180 * c.b2_pi;
      Box2D.Common.b2Settings.b2_maxTranslation = 2;
      Box2D.Common.b2Settings.b2_maxTranslationSquared = c.b2_maxTranslation * c.b2_maxTranslation;
      Box2D.Common.b2Settings.b2_maxRotation = 0.5 * c.b2_pi;
      Box2D.Common.b2Settings.b2_maxRotationSquared = c.b2_maxRotation * c.b2_maxRotation;
      Box2D.Common.b2Settings.b2_contactBaumgarte = 0.2;
      Box2D.Common.b2Settings.b2_timeToSleep = 0.5;
      Box2D.Common.b2Settings.b2_linearSleepTolerance = 0.01;
      Box2D.Common.b2Settings.b2_angularSleepTolerance = 2 / 180 * c.b2_pi;
    });
  })();
  (function () {
    var b = Box2D.Common.Math.b2Mat22,
      c = Box2D.Common.Math.b2Mat33,
      d = Box2D.Common.Math.b2Math,
      e = Box2D.Common.Math.b2Sweep,
      f = Box2D.Common.Math.b2Transform,
      j = Box2D.Common.Math.b2Vec2,
      m = Box2D.Common.Math.b2Vec3;
    b.b2Mat22 = function () {
      this.col1 = new j();
      this.col2 = new j();
    };
    b.prototype.b2Mat22 = function () {
      this.SetIdentity();
    };
    b.FromAngle = function (c) {
      void 0 === c && (c = 0);
      var d = new b();
      d.Set(c);
      return d;
    };
    b.FromVV = function (c, d) {
      var e = new b();
      e.SetVV(c, d);
      return e;
    };
    b.prototype.Set = function (b) {
      void 0 === b && (b = 0);
      var c = Math.cos(b);
      b = Math.sin(b);
      this.col1.x = c;
      this.col2.x = -b;
      this.col1.y = b;
      this.col2.y = c;
    };
    b.prototype.SetVV = function (b, c) {
      this.col1.SetV(b);
      this.col2.SetV(c);
    };
    b.prototype.Copy = function () {
      var c = new b();
      c.SetM(this);
      return c;
    };
    b.prototype.SetM = function (b) {
      this.col1.SetV(b.col1);
      this.col2.SetV(b.col2);
    };
    b.prototype.AddM = function (b) {
      this.col1.x += b.col1.x;
      this.col1.y += b.col1.y;
      this.col2.x += b.col2.x;
      this.col2.y += b.col2.y;
    };
    b.prototype.SetIdentity = function () {
      this.col1.x = 1;
      this.col2.x = 0;
      this.col1.y = 0;
      this.col2.y = 1;
    };
    b.prototype.SetZero = function () {
      this.col1.x = 0;
      this.col2.x = 0;
      this.col1.y = 0;
      this.col2.y = 0;
    };
    b.prototype.GetAngle = function () {
      return Math.atan2(this.col1.y, this.col1.x);
    };
    b.prototype.GetInverse = function (b) {
      var c = this.col1.x,
        d = this.col2.x,
        e = this.col1.y,
        f = this.col2.y,
        j = c * f - d * e;
      0 != j && (j = 1 / j);
      b.col1.x = j * f;
      b.col2.x = -j * d;
      b.col1.y = -j * e;
      b.col2.y = j * c;
      return b;
    };
    b.prototype.Solve = function (b, c, d) {
      void 0 === c && (c = 0);
      void 0 === d && (d = 0);
      var e = this.col1.x,
        f = this.col2.x,
        j = this.col1.y,
        m = this.col2.y,
        H = e * m - f * j;
      0 != H && (H = 1 / H);
      b.x = H * (m * c - f * d);
      b.y = H * (e * d - j * c);
      return b;
    };
    b.prototype.Abs = function () {
      this.col1.Abs();
      this.col2.Abs();
    };
    c.b2Mat33 = function () {
      this.col1 = new m();
      this.col2 = new m();
      this.col3 = new m();
    };
    c.prototype.b2Mat33 = function (b, c, d) {
      void 0 === b && (b = null);
      void 0 === c && (c = null);
      void 0 === d && (d = null);
      !b && !c && !d ? (this.col1.SetZero(), this.col2.SetZero(), this.col3.SetZero()) : (this.col1.SetV(b), this.col2.SetV(c), this.col3.SetV(d));
    };
    c.prototype.SetVVV = function (b, c, d) {
      this.col1.SetV(b);
      this.col2.SetV(c);
      this.col3.SetV(d);
    };
    c.prototype.Copy = function () {
      return new c(this.col1, this.col2, this.col3);
    };
    c.prototype.SetM = function (b) {
      this.col1.SetV(b.col1);
      this.col2.SetV(b.col2);
      this.col3.SetV(b.col3);
    };
    c.prototype.AddM = function (b) {
      this.col1.x += b.col1.x;
      this.col1.y += b.col1.y;
      this.col1.z += b.col1.z;
      this.col2.x += b.col2.x;
      this.col2.y += b.col2.y;
      this.col2.z += b.col2.z;
      this.col3.x += b.col3.x;
      this.col3.y += b.col3.y;
      this.col3.z += b.col3.z;
    };
    c.prototype.SetIdentity = function () {
      this.col1.x = 1;
      this.col2.x = 0;
      this.col3.x = 0;
      this.col1.y = 0;
      this.col2.y = 1;
      this.col3.y = 0;
      this.col1.z = 0;
      this.col2.z = 0;
      this.col3.z = 1;
    };
    c.prototype.SetZero = function () {
      this.col1.x = 0;
      this.col2.x = 0;
      this.col3.x = 0;
      this.col1.y = 0;
      this.col2.y = 0;
      this.col3.y = 0;
      this.col1.z = 0;
      this.col2.z = 0;
      this.col3.z = 0;
    };
    c.prototype.Solve22 = function (b, c, d) {
      void 0 === c && (c = 0);
      void 0 === d && (d = 0);
      var e = this.col1.x,
        f = this.col2.x,
        j = this.col1.y,
        m = this.col2.y,
        H = e * m - f * j;
      0 != H && (H = 1 / H);
      b.x = H * (m * c - f * d);
      b.y = H * (e * d - j * c);
      return b;
    };
    c.prototype.Solve33 = function (b, c, d, e) {
      void 0 === c && (c = 0);
      void 0 === d && (d = 0);
      void 0 === e && (e = 0);
      var f = this.col1.x,
        j = this.col1.y,
        m = this.col1.z,
        H = this.col2.x,
        D = this.col2.y,
        s = this.col2.z,
        G = this.col3.x,
        F = this.col3.y,
        K = this.col3.z,
        L = f * (D * K - s * F) + j * (s * G - H * K) + m * (H * F - D * G);
      0 != L && (L = 1 / L);
      b.x = L * (c * (D * K - s * F) + d * (s * G - H * K) + e * (H * F - D * G));
      b.y = L * (f * (d * K - e * F) + j * (e * G - c * K) + m * (c * F - d * G));
      b.z = L * (f * (D * e - s * d) + j * (s * c - H * e) + m * (H * d - D * c));
      return b;
    };
    d.b2Math = function () {};
    d.IsValid = function (b) {
      void 0 === b && (b = 0);
      return isFinite(b);
    };
    d.Dot = function (b, c) {
      return b.x * c.x + b.y * c.y;
    };
    d.CrossVV = function (b, c) {
      return b.x * c.y - b.y * c.x;
    };
    d.CrossVF = function (b, c) {
      void 0 === c && (c = 0);
      return new j(c * b.y, -c * b.x);
    };
    d.CrossFV = function (b, c) {
      void 0 === b && (b = 0);
      return new j(-b * c.y, b * c.x);
    };
    d.MulMV = function (b, c) {
      return new j(b.col1.x * c.x + b.col2.x * c.y, b.col1.y * c.x + b.col2.y * c.y);
    };
    d.MulTMV = function (b, c) {
      return new j(d.Dot(c, b.col1), d.Dot(c, b.col2));
    };
    d.MulX = function (b, c) {
      var e = d.MulMV(b.R, c);
      e.x += b.position.x;
      e.y += b.position.y;
      return e;
    };
    d.MulXT = function (b, c) {
      var e = d.SubtractVV(c, b.position),
        f = e.x * b.R.col1.x + e.y * b.R.col1.y;
      e.y = e.x * b.R.col2.x + e.y * b.R.col2.y;
      e.x = f;
      return e;
    };
    d.AddVV = function (b, c) {
      return new j(b.x + c.x, b.y + c.y);
    };
    d.SubtractVV = function (b, c) {
      return new j(b.x - c.x, b.y - c.y);
    };
    d.Distance = function (b, c) {
      var d = b.x - c.x,
        e = b.y - c.y;
      return Math.sqrt(d * d + e * e);
    };
    d.DistanceSquared = function (b, c) {
      var d = b.x - c.x,
        e = b.y - c.y;
      return d * d + e * e;
    };
    d.MulFV = function (b, c) {
      void 0 === b && (b = 0);
      return new j(b * c.x, b * c.y);
    };
    d.AddMM = function (c, e) {
      return b.FromVV(d.AddVV(c.col1, e.col1), d.AddVV(c.col2, e.col2));
    };
    d.MulMM = function (c, e) {
      return b.FromVV(d.MulMV(c, e.col1), d.MulMV(c, e.col2));
    };
    d.MulTMM = function (c, e) {
      var f = new j(d.Dot(c.col1, e.col1), d.Dot(c.col2, e.col1)),
        m = new j(d.Dot(c.col1, e.col2), d.Dot(c.col2, e.col2));
      return b.FromVV(f, m);
    };
    d.Abs = function (b) {
      void 0 === b && (b = 0);
      return 0 < b ? b : -b;
    };
    d.AbsV = function (b) {
      return new j(d.Abs(b.x), d.Abs(b.y));
    };
    d.AbsM = function (c) {
      return b.FromVV(d.AbsV(c.col1), d.AbsV(c.col2));
    };
    d.Min = function (b, c) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      return b < c ? b : c;
    };
    d.MinV = function (b, c) {
      return new j(d.Min(b.x, c.x), d.Min(b.y, c.y));
    };
    d.Max = function (b, c) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      return b > c ? b : c;
    };
    d.MaxV = function (b, c) {
      return new j(d.Max(b.x, c.x), d.Max(b.y, c.y));
    };
    d.Clamp = function (b, c, d) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      void 0 === d && (d = 0);
      return b < c ? c : b > d ? d : b;
    };
    d.ClampV = function (b, c, e) {
      return d.MaxV(c, d.MinV(b, e));
    };
    d.Swap = function (b, c) {
      var d = b[0];
      b[0] = c[0];
      c[0] = d;
    };
    d.Random = function () {
      return 2 * Math.random() - 1;
    };
    d.RandomRange = function (b, c) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      var d = Math.random();
      return (c - b) * d + b;
    };
    d.NextPowerOfTwo = function (b) {
      void 0 === b && (b = 0);
      b |= b >> 1 & 2147483647;
      b |= b >> 2 & 1073741823;
      b |= b >> 4 & 268435455;
      b |= b >> 8 & 16777215;
      return (b | b >> 16 & 65535) + 1;
    };
    d.IsPowerOfTwo = function (b) {
      void 0 === b && (b = 0);
      return 0 < b && 0 == (b & b - 1);
    };
    Box2D.postDefs.push(function () {
      Box2D.Common.Math.b2Math.b2Vec2_zero = new j(0, 0);
      Box2D.Common.Math.b2Math.b2Mat22_identity = b.FromVV(new j(1, 0), new j(0, 1));
      Box2D.Common.Math.b2Math.b2Transform_identity = new f(d.b2Vec2_zero, d.b2Mat22_identity);
    });
    e.b2Sweep = function () {
      this.localCenter = new j();
      this.c0 = new j();
      this.c = new j();
    };
    e.prototype.Set = function (b) {
      this.localCenter.SetV(b.localCenter);
      this.c0.SetV(b.c0);
      this.c.SetV(b.c);
      this.a0 = b.a0;
      this.a = b.a;
      this.t0 = b.t0;
    };
    e.prototype.Copy = function () {
      var b = new e();
      b.localCenter.SetV(this.localCenter);
      b.c0.SetV(this.c0);
      b.c.SetV(this.c);
      b.a0 = this.a0;
      b.a = this.a;
      b.t0 = this.t0;
      return b;
    };
    e.prototype.GetTransform = function (b, c) {
      void 0 === c && (c = 0);
      b.position.x = (1 - c) * this.c0.x + c * this.c.x;
      b.position.y = (1 - c) * this.c0.y + c * this.c.y;
      b.R.Set((1 - c) * this.a0 + c * this.a);
      var d = b.R;
      b.position.x -= d.col1.x * this.localCenter.x + d.col2.x * this.localCenter.y;
      b.position.y -= d.col1.y * this.localCenter.x + d.col2.y * this.localCenter.y;
    };
    e.prototype.Advance = function (b) {
      void 0 === b && (b = 0);
      if (this.t0 < b && 1 - this.t0 > Number.MIN_VALUE) {
        var c = (b - this.t0) / (1 - this.t0);
        this.c0.x = (1 - c) * this.c0.x + c * this.c.x;
        this.c0.y = (1 - c) * this.c0.y + c * this.c.y;
        this.a0 = (1 - c) * this.a0 + c * this.a;
        this.t0 = b;
      }
    };
    f.b2Transform = function () {
      this.position = new j();
      this.R = new b();
    };
    f.prototype.b2Transform = function (b, c) {
      void 0 === b && (b = null);
      void 0 === c && (c = null);
      b && (this.position.SetV(b), this.R.SetM(c));
    };
    f.prototype.Initialize = function (b, c) {
      this.position.SetV(b);
      this.R.SetM(c);
    };
    f.prototype.SetIdentity = function () {
      this.position.SetZero();
      this.R.SetIdentity();
    };
    f.prototype.Set = function (b) {
      this.position.SetV(b.position);
      this.R.SetM(b.R);
    };
    f.prototype.GetAngle = function () {
      return Math.atan2(this.R.col1.y, this.R.col1.x);
    };
    j.b2Vec2 = function () {};
    j.prototype.b2Vec2 = function (b, c) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      this.x = b;
      this.y = c;
    };
    j.prototype.SetZero = function () {
      this.y = this.x = 0;
    };
    j.prototype.Set = function (b, c) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      this.x = b;
      this.y = c;
    };
    j.prototype.SetV = function (b) {
      this.x = b.x;
      this.y = b.y;
    };
    j.prototype.GetNegative = function () {
      return new j(-this.x, -this.y);
    };
    j.prototype.NegativeSelf = function () {
      this.x = -this.x;
      this.y = -this.y;
    };
    j.Make = function (b, c) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      return new j(b, c);
    };
    j.prototype.Copy = function () {
      return new j(this.x, this.y);
    };
    j.prototype.Add = function (b) {
      this.x += b.x;
      this.y += b.y;
    };
    j.prototype.Subtract = function (b) {
      this.x -= b.x;
      this.y -= b.y;
    };
    j.prototype.Multiply = function (b) {
      void 0 === b && (b = 0);
      this.x *= b;
      this.y *= b;
    };
    j.prototype.MulM = function (b) {
      var c = this.x;
      this.x = b.col1.x * c + b.col2.x * this.y;
      this.y = b.col1.y * c + b.col2.y * this.y;
    };
    j.prototype.MulTM = function (b) {
      var c = d.Dot(this, b.col1);
      this.y = d.Dot(this, b.col2);
      this.x = c;
    };
    j.prototype.CrossVF = function (b) {
      void 0 === b && (b = 0);
      var c = this.x;
      this.x = b * this.y;
      this.y = -b * c;
    };
    j.prototype.CrossFV = function (b) {
      void 0 === b && (b = 0);
      var c = this.x;
      this.x = -b * this.y;
      this.y = b * c;
    };
    j.prototype.MinV = function (b) {
      this.x = this.x < b.x ? this.x : b.x;
      this.y = this.y < b.y ? this.y : b.y;
    };
    j.prototype.MaxV = function (b) {
      this.x = this.x > b.x ? this.x : b.x;
      this.y = this.y > b.y ? this.y : b.y;
    };
    j.prototype.Abs = function () {
      0 > this.x && (this.x = -this.x);
      0 > this.y && (this.y = -this.y);
    };
    j.prototype.Length = function () {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    };
    j.prototype.LengthSquared = function () {
      return this.x * this.x + this.y * this.y;
    };
    j.prototype.Normalize = function () {
      var b = Math.sqrt(this.x * this.x + this.y * this.y);
      if (b < Number.MIN_VALUE) return 0;
      var c = 1 / b;
      this.x *= c;
      this.y *= c;
      return b;
    };
    j.prototype.IsValid = function () {
      return d.IsValid(this.x) && d.IsValid(this.y);
    };
    m.b2Vec3 = function () {};
    m.prototype.b2Vec3 = function (b, c, d) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      void 0 === d && (d = 0);
      this.x = b;
      this.y = c;
      this.z = d;
    };
    m.prototype.SetZero = function () {
      this.x = this.y = this.z = 0;
    };
    m.prototype.Set = function (b, c, d) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      void 0 === d && (d = 0);
      this.x = b;
      this.y = c;
      this.z = d;
    };
    m.prototype.SetV = function (b) {
      this.x = b.x;
      this.y = b.y;
      this.z = b.z;
    };
    m.prototype.GetNegative = function () {
      return new m(-this.x, -this.y, -this.z);
    };
    m.prototype.NegativeSelf = function () {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
    };
    m.prototype.Copy = function () {
      return new m(this.x, this.y, this.z);
    };
    m.prototype.Add = function (b) {
      this.x += b.x;
      this.y += b.y;
      this.z += b.z;
    };
    m.prototype.Subtract = function (b) {
      this.x -= b.x;
      this.y -= b.y;
      this.z -= b.z;
    };
    m.prototype.Multiply = function (b) {
      void 0 === b && (b = 0);
      this.x *= b;
      this.y *= b;
      this.z *= b;
    };
  })();
  (function () {
    var b = Box2D.Common.Math.b2Math,
      c = Box2D.Common.Math.b2Sweep,
      d = Box2D.Common.Math.b2Transform,
      e = Box2D.Common.Math.b2Vec2,
      f = Box2D.Common.b2Color,
      j = Box2D.Common.b2Settings,
      m = Box2D.Collision.b2AABB,
      l = Box2D.Collision.b2ContactPoint,
      g = Box2D.Collision.b2DynamicTreeBroadPhase,
      q = Box2D.Collision.b2RayCastInput,
      y = Box2D.Collision.b2RayCastOutput,
      z = Box2D.Collision.Shapes.b2CircleShape,
      A = Box2D.Collision.Shapes.b2EdgeShape,
      B = Box2D.Collision.Shapes.b2MassData,
      H = Box2D.Collision.Shapes.b2PolygonShape,
      D = Box2D.Collision.Shapes.b2Shape,
      s = Box2D.Dynamics.b2Body,
      G = Box2D.Dynamics.b2BodyDef,
      F = Box2D.Dynamics.b2ContactFilter,
      K = Box2D.Dynamics.b2ContactImpulse,
      L = Box2D.Dynamics.b2ContactListener,
      R = Box2D.Dynamics.b2ContactManager,
      I = Box2D.Dynamics.b2DebugDraw,
      fa = Box2D.Dynamics.b2DestructionListener,
      N = Box2D.Dynamics.b2FilterData,
      P = Box2D.Dynamics.b2Fixture,
      ba = Box2D.Dynamics.b2FixtureDef,
      V = Box2D.Dynamics.b2Island,
      r = Box2D.Dynamics.b2TimeStep,
      t = Box2D.Dynamics.b2World,
      E = Box2D.Dynamics.Contacts.b2Contact,
      C = Box2D.Dynamics.Contacts.b2ContactFactory,
      O = Box2D.Dynamics.Contacts.b2ContactSolver,
      aa = Box2D.Dynamics.Joints.b2Joint,
      Q = Box2D.Dynamics.Joints.b2PulleyJoint;
    s.b2Body = function () {
      this.m_xf = new d();
      this.m_sweep = new c();
      this.m_linearVelocity = new e();
      this.m_force = new e();
    };
    s.prototype.connectEdges = function (c, d, e) {
      void 0 === e && (e = 0);
      var f = Math.atan2(d.GetDirectionVector().y, d.GetDirectionVector().x);
      e = b.MulFV(Math.tan(0.5 * (f - e)), d.GetDirectionVector());
      e = b.SubtractVV(e, d.GetNormalVector());
      e = b.MulFV(j.b2_toiSlop, e);
      e = b.AddVV(e, d.GetVertex1());
      var g = b.AddVV(c.GetDirectionVector(), d.GetDirectionVector());
      g.Normalize();
      var r = 0 < b.Dot(c.GetDirectionVector(), d.GetNormalVector());
      c.SetNextEdge(d, e, g, r);
      d.SetPrevEdge(c, e, g, r);
      return f;
    };
    s.prototype.CreateFixture = function (b) {
      if (!0 == this.m_world.IsLocked()) return null;
      var c = new P();
      c.Create(this, this.m_xf, b);
      this.m_flags & s.e_activeFlag && c.CreateProxy(this.m_world.m_contactManager.m_broadPhase, this.m_xf);
      c.m_next = this.m_fixtureList;
      this.m_fixtureList = c;
      ++this.m_fixtureCount;
      c.m_body = this;
      0 < c.m_density && this.ResetMassData();
      this.m_world.m_flags |= t.e_newFixture;
      return c;
    };
    s.prototype.CreateFixture2 = function (b, c) {
      void 0 === c && (c = 0);
      var d = new ba();
      d.shape = b;
      d.density = c;
      return this.CreateFixture(d);
    };
    s.prototype.DestroyFixture = function (b) {
      if (!0 != this.m_world.IsLocked()) {
        for (var c = this.m_fixtureList, d = null; null != c;) {
          if (c == b) {
            d ? d.m_next = b.m_next : this.m_fixtureList = b.m_next;
            break;
          }
          d = c;
          c = c.m_next;
        }
        for (c = this.m_contactList; c;) {
          var d = c.contact,
            c = c.next,
            e = d.GetFixtureA(),
            f = d.GetFixtureB();
          (b == e || b == f) && this.m_world.m_contactManager.Destroy(d);
        }
        this.m_flags & s.e_activeFlag && b.DestroyProxy(this.m_world.m_contactManager.m_broadPhase);
        b.Destroy();
        b.m_body = null;
        b.m_next = null;
        --this.m_fixtureCount;
        this.ResetMassData();
      }
    };
    s.prototype.SetPositionAndAngle = function (b, c) {
      void 0 === c && (c = 0);
      var d;
      if (!0 != this.m_world.IsLocked()) {
        this.m_xf.R.Set(c);
        this.m_xf.position.SetV(b);
        d = this.m_xf.R;
        var e = this.m_sweep.localCenter;
        this.m_sweep.c.x = d.col1.x * e.x + d.col2.x * e.y;
        this.m_sweep.c.y = d.col1.y * e.x + d.col2.y * e.y;
        this.m_sweep.c.x += this.m_xf.position.x;
        this.m_sweep.c.y += this.m_xf.position.y;
        this.m_sweep.c0.SetV(this.m_sweep.c);
        this.m_sweep.a0 = this.m_sweep.a = c;
        e = this.m_world.m_contactManager.m_broadPhase;
        for (d = this.m_fixtureList; d; d = d.m_next) d.Synchronize(e, this.m_xf, this.m_xf);
        this.m_world.m_contactManager.FindNewContacts();
      }
    };
    s.prototype.SetTransform = function (b) {
      this.SetPositionAndAngle(b.position, b.GetAngle());
    };
    s.prototype.GetTransform = function () {
      return this.m_xf;
    };
    s.prototype.GetPosition = function () {
      return this.m_xf.position;
    };
    s.prototype.SetPosition = function (b) {
      this.SetPositionAndAngle(b, this.GetAngle());
    };
    s.prototype.GetAngle = function () {
      return this.m_sweep.a;
    };
    s.prototype.SetAngle = function (b) {
      void 0 === b && (b = 0);
      this.SetPositionAndAngle(this.GetPosition(), b);
    };
    s.prototype.GetWorldCenter = function () {
      return this.m_sweep.c;
    };
    s.prototype.GetLocalCenter = function () {
      return this.m_sweep.localCenter;
    };
    s.prototype.SetLinearVelocity = function (b) {
      this.m_type != s.b2_staticBody && this.m_linearVelocity.SetV(b);
    };
    s.prototype.GetLinearVelocity = function () {
      return this.m_linearVelocity;
    };
    s.prototype.SetAngularVelocity = function (b) {
      void 0 === b && (b = 0);
      this.m_type != s.b2_staticBody && (this.m_angularVelocity = b);
    };
    s.prototype.GetAngularVelocity = function () {
      return this.m_angularVelocity;
    };
    s.prototype.GetDefinition = function () {
      var b = new G();
      b.type = this.GetType();
      b.allowSleep = (this.m_flags & s.e_allowSleepFlag) == s.e_allowSleepFlag;
      b.angle = this.GetAngle();
      b.angularDamping = this.m_angularDamping;
      b.angularVelocity = this.m_angularVelocity;
      b.fixedRotation = (this.m_flags & s.e_fixedRotationFlag) == s.e_fixedRotationFlag;
      b.bullet = (this.m_flags & s.e_bulletFlag) == s.e_bulletFlag;
      b.awake = (this.m_flags & s.e_awakeFlag) == s.e_awakeFlag;
      b.linearDamping = this.m_linearDamping;
      b.linearVelocity.SetV(this.GetLinearVelocity());
      b.position = this.GetPosition();
      b.userData = this.GetUserData();
      return b;
    };
    s.prototype.ApplyForce = function (b, c) {
      this.m_type == s.b2_dynamicBody && (!1 == this.IsAwake() && this.SetAwake(!0), this.m_force.x += b.x, this.m_force.y += b.y, this.m_torque += (c.x - this.m_sweep.c.x) * b.y - (c.y - this.m_sweep.c.y) * b.x);
    };
    s.prototype.ApplyTorque = function (b) {
      void 0 === b && (b = 0);
      this.m_type == s.b2_dynamicBody && (!1 == this.IsAwake() && this.SetAwake(!0), this.m_torque += b);
    };
    s.prototype.ApplyImpulse = function (b, c) {
      this.m_type == s.b2_dynamicBody && (!1 == this.IsAwake() && this.SetAwake(!0), this.m_linearVelocity.x += this.m_invMass * b.x, this.m_linearVelocity.y += this.m_invMass * b.y, this.m_angularVelocity += this.m_invI * ((c.x - this.m_sweep.c.x) * b.y - (c.y - this.m_sweep.c.y) * b.x));
    };
    s.prototype.Split = function (c) {
      for (var d = this.GetLinearVelocity().Copy(), e = this.GetAngularVelocity(), f = this.GetWorldCenter(), j = this.m_world.CreateBody(this.GetDefinition()), g, r = this.m_fixtureList; r;) if (c(r)) {
        var l = r.m_next;
        g ? g.m_next = l : this.m_fixtureList = l;
        this.m_fixtureCount--;
        r.m_next = j.m_fixtureList;
        j.m_fixtureList = r;
        j.m_fixtureCount++;
        r.m_body = j;
        r = l;
      } else g = r, r = r.m_next;
      this.ResetMassData();
      j.ResetMassData();
      g = this.GetWorldCenter();
      c = j.GetWorldCenter();
      g = b.AddVV(d, b.CrossFV(e, b.SubtractVV(g, f)));
      d = b.AddVV(d, b.CrossFV(e, b.SubtractVV(c, f)));
      this.SetLinearVelocity(g);
      j.SetLinearVelocity(d);
      this.SetAngularVelocity(e);
      j.SetAngularVelocity(e);
      this.SynchronizeFixtures();
      j.SynchronizeFixtures();
      return j;
    };
    s.prototype.Merge = function (b) {
      var c;
      for (c = b.m_fixtureList; c;) {
        var d = c.m_next;
        b.m_fixtureCount--;
        c.m_next = this.m_fixtureList;
        this.m_fixtureList = c;
        this.m_fixtureCount++;
        c.m_body = f;
        c = d;
      }
      e.m_fixtureCount = 0;
      var e = this,
        f = b;
      e.GetWorldCenter();
      f.GetWorldCenter();
      e.GetLinearVelocity().Copy();
      f.GetLinearVelocity().Copy();
      e.GetAngularVelocity();
      f.GetAngularVelocity();
      e.ResetMassData();
      this.SynchronizeFixtures();
    };
    s.prototype.GetMass = function () {
      return this.m_mass;
    };
    s.prototype.GetInertia = function () {
      return this.m_I;
    };
    s.prototype.GetMassData = function (b) {
      b.mass = this.m_mass;
      b.I = this.m_I;
      b.center.SetV(this.m_sweep.localCenter);
    };
    s.prototype.SetMassData = function (c) {
      j.b2Assert(!1 == this.m_world.IsLocked());
      if (!0 != this.m_world.IsLocked() && this.m_type == s.b2_dynamicBody) {
        this.m_invI = this.m_I = this.m_invMass = 0;
        this.m_mass = c.mass;
        0 >= this.m_mass && (this.m_mass = 1);
        this.m_invMass = 1 / this.m_mass;
        0 < c.I && 0 == (this.m_flags & s.e_fixedRotationFlag) && (this.m_I = c.I - this.m_mass * (c.center.x * c.center.x + c.center.y * c.center.y), this.m_invI = 1 / this.m_I);
        var d = this.m_sweep.c.Copy();
        this.m_sweep.localCenter.SetV(c.center);
        this.m_sweep.c0.SetV(b.MulX(this.m_xf, this.m_sweep.localCenter));
        this.m_sweep.c.SetV(this.m_sweep.c0);
        this.m_linearVelocity.x += this.m_angularVelocity * -(this.m_sweep.c.y - d.y);
        this.m_linearVelocity.y += this.m_angularVelocity * +(this.m_sweep.c.x - d.x);
      }
    };
    s.prototype.ResetMassData = function () {
      this.m_invI = this.m_I = this.m_invMass = this.m_mass = 0;
      this.m_sweep.localCenter.SetZero();
      if (!(this.m_type == s.b2_staticBody || this.m_type == s.b2_kinematicBody)) {
        for (var c = e.Make(0, 0), d = this.m_fixtureList; d; d = d.m_next) if (0 != d.m_density) {
          var f = d.GetMassData();
          this.m_mass += f.mass;
          c.x += f.center.x * f.mass;
          c.y += f.center.y * f.mass;
          this.m_I += f.I;
        }
        0 < this.m_mass ? (this.m_invMass = 1 / this.m_mass, c.x *= this.m_invMass, c.y *= this.m_invMass) : this.m_invMass = this.m_mass = 1;
        0 < this.m_I && 0 == (this.m_flags & s.e_fixedRotationFlag) ? (this.m_I -= this.m_mass * (c.x * c.x + c.y * c.y), this.m_I *= this.m_inertiaScale, j.b2Assert(0 < this.m_I), this.m_invI = 1 / this.m_I) : this.m_invI = this.m_I = 0;
        d = this.m_sweep.c.Copy();
        this.m_sweep.localCenter.SetV(c);
        this.m_sweep.c0.SetV(b.MulX(this.m_xf, this.m_sweep.localCenter));
        this.m_sweep.c.SetV(this.m_sweep.c0);
        this.m_linearVelocity.x += this.m_angularVelocity * -(this.m_sweep.c.y - d.y);
        this.m_linearVelocity.y += this.m_angularVelocity * +(this.m_sweep.c.x - d.x);
      }
    };
    s.prototype.GetWorldPoint = function (b) {
      var c = this.m_xf.R;
      b = new e(c.col1.x * b.x + c.col2.x * b.y, c.col1.y * b.x + c.col2.y * b.y);
      b.x += this.m_xf.position.x;
      b.y += this.m_xf.position.y;
      return b;
    };
    s.prototype.GetWorldVector = function (c) {
      return b.MulMV(this.m_xf.R, c);
    };
    s.prototype.GetLocalPoint = function (c) {
      return b.MulXT(this.m_xf, c);
    };
    s.prototype.GetLocalVector = function (c) {
      return b.MulTMV(this.m_xf.R, c);
    };
    s.prototype.GetLinearVelocityFromWorldPoint = function (b) {
      return new e(this.m_linearVelocity.x - this.m_angularVelocity * (b.y - this.m_sweep.c.y), this.m_linearVelocity.y + this.m_angularVelocity * (b.x - this.m_sweep.c.x));
    };
    s.prototype.GetLinearVelocityFromLocalPoint = function (b) {
      var c = this.m_xf.R;
      b = new e(c.col1.x * b.x + c.col2.x * b.y, c.col1.y * b.x + c.col2.y * b.y);
      b.x += this.m_xf.position.x;
      b.y += this.m_xf.position.y;
      return new e(this.m_linearVelocity.x - this.m_angularVelocity * (b.y - this.m_sweep.c.y), this.m_linearVelocity.y + this.m_angularVelocity * (b.x - this.m_sweep.c.x));
    };
    s.prototype.GetLinearDamping = function () {
      return this.m_linearDamping;
    };
    s.prototype.SetLinearDamping = function (b) {
      void 0 === b && (b = 0);
      this.m_linearDamping = b;
    };
    s.prototype.GetAngularDamping = function () {
      return this.m_angularDamping;
    };
    s.prototype.SetAngularDamping = function (b) {
      void 0 === b && (b = 0);
      this.m_angularDamping = b;
    };
    s.prototype.SetType = function (b) {
      void 0 === b && (b = 0);
      if (this.m_type != b) {
        this.m_type = b;
        this.ResetMassData();
        this.m_type == s.b2_staticBody && (this.m_linearVelocity.SetZero(), this.m_angularVelocity = 0);
        this.SetAwake(!0);
        this.m_force.SetZero();
        this.m_torque = 0;
        for (b = this.m_contactList; b; b = b.next) b.contact.FlagForFiltering();
      }
    };
    s.prototype.GetType = function () {
      return this.m_type;
    };
    s.prototype.SetBullet = function (b) {
      this.m_flags = b ? this.m_flags | s.e_bulletFlag : this.m_flags & ~s.e_bulletFlag;
    };
    s.prototype.IsBullet = function () {
      return (this.m_flags & s.e_bulletFlag) == s.e_bulletFlag;
    };
    s.prototype.SetSleepingAllowed = function (b) {
      b ? this.m_flags |= s.e_allowSleepFlag : (this.m_flags &= ~s.e_allowSleepFlag, this.SetAwake(!0));
    };
    s.prototype.SetAwake = function (b) {
      b ? (this.m_flags |= s.e_awakeFlag, this.m_sleepTime = 0) : (this.m_flags &= ~s.e_awakeFlag, this.m_sleepTime = 0, this.m_linearVelocity.SetZero(), this.m_angularVelocity = 0, this.m_force.SetZero(), this.m_torque = 0);
    };
    s.prototype.IsAwake = function () {
      return (this.m_flags & s.e_awakeFlag) == s.e_awakeFlag;
    };
    s.prototype.SetFixedRotation = function (b) {
      this.m_flags = b ? this.m_flags | s.e_fixedRotationFlag : this.m_flags & ~s.e_fixedRotationFlag;
      this.ResetMassData();
    };
    s.prototype.IsFixedRotation = function () {
      return (this.m_flags & s.e_fixedRotationFlag) == s.e_fixedRotationFlag;
    };
    s.prototype.SetActive = function (b) {
      if (b != this.IsActive()) {
        var c;
        if (b) {
          this.m_flags |= s.e_activeFlag;
          b = this.m_world.m_contactManager.m_broadPhase;
          for (c = this.m_fixtureList; c; c = c.m_next) c.CreateProxy(b, this.m_xf);
        } else {
          this.m_flags &= ~s.e_activeFlag;
          b = this.m_world.m_contactManager.m_broadPhase;
          for (c = this.m_fixtureList; c; c = c.m_next) c.DestroyProxy(b);
          for (b = this.m_contactList; b;) c = b, b = b.next, this.m_world.m_contactManager.Destroy(c.contact);
          this.m_contactList = null;
        }
      }
    };
    s.prototype.IsActive = function () {
      return (this.m_flags & s.e_activeFlag) == s.e_activeFlag;
    };
    s.prototype.IsSleepingAllowed = function () {
      return (this.m_flags & s.e_allowSleepFlag) == s.e_allowSleepFlag;
    };
    s.prototype.GetFixtureList = function () {
      return this.m_fixtureList;
    };
    s.prototype.GetJointList = function () {
      return this.m_jointList;
    };
    s.prototype.GetControllerList = function () {
      return this.m_controllerList;
    };
    s.prototype.GetContactList = function () {
      return this.m_contactList;
    };
    s.prototype.GetNext = function () {
      return this.m_next;
    };
    s.prototype.GetUserData = function () {
      return this.m_userData;
    };
    s.prototype.SetUserData = function (b) {
      this.m_userData = b;
    };
    s.prototype.GetWorld = function () {
      return this.m_world;
    };
    s.prototype.b2Body = function (b, c) {
      this.m_flags = 0;
      b.bullet && (this.m_flags |= s.e_bulletFlag);
      b.fixedRotation && (this.m_flags |= s.e_fixedRotationFlag);
      b.allowSleep && (this.m_flags |= s.e_allowSleepFlag);
      b.awake && (this.m_flags |= s.e_awakeFlag);
      b.active && (this.m_flags |= s.e_activeFlag);
      this.m_world = c;
      this.m_xf.position.SetV(b.position);
      this.m_xf.R.Set(b.angle);
      this.m_sweep.localCenter.SetZero();
      this.m_sweep.t0 = 1;
      this.m_sweep.a0 = this.m_sweep.a = b.angle;
      var d = this.m_xf.R,
        e = this.m_sweep.localCenter;
      this.m_sweep.c.x = d.col1.x * e.x + d.col2.x * e.y;
      this.m_sweep.c.y = d.col1.y * e.x + d.col2.y * e.y;
      this.m_sweep.c.x += this.m_xf.position.x;
      this.m_sweep.c.y += this.m_xf.position.y;
      this.m_sweep.c0.SetV(this.m_sweep.c);
      this.m_contactList = this.m_controllerList = this.m_jointList = null;
      this.m_controllerCount = 0;
      this.m_next = this.m_prev = null;
      this.m_linearVelocity.SetV(b.linearVelocity);
      this.m_angularVelocity = b.angularVelocity;
      this.m_linearDamping = b.linearDamping;
      this.m_angularDamping = b.angularDamping;
      this.m_force.Set(0, 0);
      this.m_sleepTime = this.m_torque = 0;
      this.m_type = b.type;
      this.m_invMass = this.m_type == s.b2_dynamicBody ? this.m_mass = 1 : this.m_mass = 0;
      this.m_invI = this.m_I = 0;
      this.m_inertiaScale = b.inertiaScale;
      this.m_userData = b.userData;
      this.m_fixtureList = null;
      this.m_fixtureCount = 0;
    };
    s.prototype.SynchronizeFixtures = function () {
      var b = s.s_xf1;
      b.R.Set(this.m_sweep.a0);
      var c = b.R,
        d = this.m_sweep.localCenter;
      b.position.x = this.m_sweep.c0.x - (c.col1.x * d.x + c.col2.x * d.y);
      b.position.y = this.m_sweep.c0.y - (c.col1.y * d.x + c.col2.y * d.y);
      d = this.m_world.m_contactManager.m_broadPhase;
      for (c = this.m_fixtureList; c; c = c.m_next) c.Synchronize(d, b, this.m_xf);
    };
    s.prototype.SynchronizeTransform = function () {
      this.m_xf.R.Set(this.m_sweep.a);
      var b = this.m_xf.R,
        c = this.m_sweep.localCenter;
      this.m_xf.position.x = this.m_sweep.c.x - (b.col1.x * c.x + b.col2.x * c.y);
      this.m_xf.position.y = this.m_sweep.c.y - (b.col1.y * c.x + b.col2.y * c.y);
    };
    s.prototype.ShouldCollide = function (b) {
      if (this.m_type != s.b2_dynamicBody && b.m_type != s.b2_dynamicBody) return !1;
      for (var c = this.m_jointList; c; c = c.next) if (c.other == b && !1 == c.joint.m_collideConnected) return !1;
      return !0;
    };
    s.prototype.Advance = function (b) {
      void 0 === b && (b = 0);
      this.m_sweep.Advance(b);
      this.m_sweep.c.SetV(this.m_sweep.c0);
      this.m_sweep.a = this.m_sweep.a0;
      this.SynchronizeTransform();
    };
    Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2Body.s_xf1 = new d();
      Box2D.Dynamics.b2Body.e_islandFlag = 1;
      Box2D.Dynamics.b2Body.e_awakeFlag = 2;
      Box2D.Dynamics.b2Body.e_allowSleepFlag = 4;
      Box2D.Dynamics.b2Body.e_bulletFlag = 8;
      Box2D.Dynamics.b2Body.e_fixedRotationFlag = 16;
      Box2D.Dynamics.b2Body.e_activeFlag = 32;
      Box2D.Dynamics.b2Body.b2_staticBody = 0;
      Box2D.Dynamics.b2Body.b2_kinematicBody = 1;
      Box2D.Dynamics.b2Body.b2_dynamicBody = 2;
    });
    G.b2BodyDef = function () {
      this.position = new e();
      this.linearVelocity = new e();
    };
    G.prototype.b2BodyDef = function () {
      this.userData = null;
      this.position.Set(0, 0);
      this.angle = 0;
      this.linearVelocity.Set(0, 0);
      this.angularDamping = this.linearDamping = this.angularVelocity = 0;
      this.awake = this.allowSleep = !0;
      this.bullet = this.fixedRotation = !1;
      this.type = s.b2_staticBody;
      this.active = !0;
      this.inertiaScale = 1;
    };
    F.b2ContactFilter = function () {};
    F.prototype.ShouldCollide = function (b, c) {
      var d = b.GetFilterData(),
        e = c.GetFilterData();
      return d.groupIndex == e.groupIndex && 0 != d.groupIndex ? 0 < d.groupIndex : 0 != (d.maskBits & e.categoryBits) && 0 != (d.categoryBits & e.maskBits);
    };
    F.prototype.RayCollide = function (b, c) {
      return !b ? !0 : this.ShouldCollide(b instanceof P ? b : null, c);
    };
    Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2ContactFilter.b2_defaultFilter = new F();
    });
    K.b2ContactImpulse = function () {
      this.normalImpulses = new Vector_a2j_Number(j.b2_maxManifoldPoints);
      this.tangentImpulses = new Vector_a2j_Number(j.b2_maxManifoldPoints);
    };
    L.b2ContactListener = function () {};
    L.prototype.BeginContact = function () {};
    L.prototype.EndContact = function () {};
    L.prototype.PreSolve = function () {};
    L.prototype.PostSolve = function () {};
    Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2ContactListener.b2_defaultListener = new L();
    });
    R.b2ContactManager = function () {};
    R.prototype.b2ContactManager = function () {
      this.m_world = null;
      this.m_contactCount = 0;
      this.m_contactFilter = F.b2_defaultFilter;
      this.m_contactListener = L.b2_defaultListener;
      this.m_contactFactory = new C(this.m_allocator);
      this.m_broadPhase = new g();
    };
    R.prototype.AddPair = function (b, c) {
      var d = b instanceof P ? b : null,
        e = c instanceof P ? c : null,
        f = d.GetBody(),
        j = e.GetBody();
      if (f != j) {
        for (var g = j.GetContactList(); g;) {
          if (g.other == f) {
            var r = g.contact.GetFixtureA(),
              l = g.contact.GetFixtureB();
            if (r == d && l == e || r == e && l == d) return;
          }
          g = g.next;
        }
        !1 != j.ShouldCollide(f) && !1 != this.m_contactFilter.ShouldCollide(d, e) && (g = this.m_contactFactory.Create(d, e), d = g.GetFixtureA(), e = g.GetFixtureB(), f = d.m_body, j = e.m_body, g.m_prev = null, g.m_next = this.m_world.m_contactList, null != this.m_world.m_contactList && (this.m_world.m_contactList.m_prev = g), this.m_world.m_contactList = g, g.m_nodeA.contact = g, g.m_nodeA.other = j, g.m_nodeA.prev = null, g.m_nodeA.next = f.m_contactList, null != f.m_contactList && (f.m_contactList.prev = g.m_nodeA), f.m_contactList = g.m_nodeA, g.m_nodeB.contact = g, g.m_nodeB.other = f, g.m_nodeB.prev = null, g.m_nodeB.next = j.m_contactList, null != j.m_contactList && (j.m_contactList.prev = g.m_nodeB), j.m_contactList = g.m_nodeB, ++this.m_world.m_contactCount);
      }
    };
    R.prototype.FindNewContacts = function () {
      this.m_broadPhase.UpdatePairs(Box2D.generateCallback(this, this.AddPair));
    };
    R.prototype.Destroy = function (b) {
      var c = b.GetFixtureA(),
        d = b.GetFixtureB(),
        c = c.GetBody(),
        d = d.GetBody();
      b.IsTouching() && this.m_contactListener.EndContact(b);
      b.m_prev && (b.m_prev.m_next = b.m_next);
      b.m_next && (b.m_next.m_prev = b.m_prev);
      b == this.m_world.m_contactList && (this.m_world.m_contactList = b.m_next);
      b.m_nodeA.prev && (b.m_nodeA.prev.next = b.m_nodeA.next);
      b.m_nodeA.next && (b.m_nodeA.next.prev = b.m_nodeA.prev);
      b.m_nodeA == c.m_contactList && (c.m_contactList = b.m_nodeA.next);
      b.m_nodeB.prev && (b.m_nodeB.prev.next = b.m_nodeB.next);
      b.m_nodeB.next && (b.m_nodeB.next.prev = b.m_nodeB.prev);
      b.m_nodeB == d.m_contactList && (d.m_contactList = b.m_nodeB.next);
      this.m_contactFactory.Destroy(b);
      --this.m_contactCount;
    };
    R.prototype.Collide = function () {
      for (var b = this.m_world.m_contactList; b;) {
        var c = b.GetFixtureA(),
          d = b.GetFixtureB(),
          e = c.GetBody(),
          f = d.GetBody();
        if (!1 == e.IsAwake() && !1 == f.IsAwake()) b = b.GetNext();else {
          if (b.m_flags & E.e_filterFlag) {
            if (!1 == f.ShouldCollide(e)) {
              c = b;
              b = c.GetNext();
              this.Destroy(c);
              continue;
            }
            if (!1 == this.m_contactFilter.ShouldCollide(c, d)) {
              c = b;
              b = c.GetNext();
              this.Destroy(c);
              continue;
            }
            b.m_flags &= ~E.e_filterFlag;
          }
          !1 == this.m_broadPhase.TestOverlap(c.m_proxy, d.m_proxy) ? (c = b, b = c.GetNext(), this.Destroy(c)) : (b.Update(this.m_contactListener), b = b.GetNext());
        }
      }
    };
    Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2ContactManager.s_evalCP = new l();
    });
    I.b2DebugDraw = function () {};
    I.prototype.b2DebugDraw = function () {};
    I.prototype.SetFlags = function () {};
    I.prototype.GetFlags = function () {};
    I.prototype.AppendFlags = function () {};
    I.prototype.ClearFlags = function () {};
    I.prototype.SetSprite = function () {};
    I.prototype.GetSprite = function () {};
    I.prototype.SetDrawScale = function () {};
    I.prototype.GetDrawScale = function () {};
    I.prototype.SetLineThickness = function () {};
    I.prototype.GetLineThickness = function () {};
    I.prototype.SetAlpha = function () {};
    I.prototype.GetAlpha = function () {};
    I.prototype.SetFillAlpha = function () {};
    I.prototype.GetFillAlpha = function () {};
    I.prototype.SetXFormScale = function () {};
    I.prototype.GetXFormScale = function () {};
    I.prototype.DrawPolygon = function () {};
    I.prototype.DrawSolidPolygon = function () {};
    I.prototype.DrawCircle = function () {};
    I.prototype.DrawSolidCircle = function () {};
    I.prototype.DrawSegment = function () {};
    I.prototype.DrawTransform = function () {};
    Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2DebugDraw.e_shapeBit = 1;
      Box2D.Dynamics.b2DebugDraw.e_jointBit = 2;
      Box2D.Dynamics.b2DebugDraw.e_aabbBit = 4;
      Box2D.Dynamics.b2DebugDraw.e_pairBit = 8;
      Box2D.Dynamics.b2DebugDraw.e_centerOfMassBit = 16;
      Box2D.Dynamics.b2DebugDraw.e_controllerBit = 32;
    });
    fa.b2DestructionListener = function () {};
    fa.prototype.SayGoodbyeJoint = function () {};
    fa.prototype.SayGoodbyeFixture = function () {};
    N.b2FilterData = function () {
      this.categoryBits = 1;
      this.maskBits = 65535;
      this.groupIndex = 0;
    };
    N.prototype.Copy = function () {
      var b = new N();
      b.categoryBits = this.categoryBits;
      b.maskBits = this.maskBits;
      b.groupIndex = this.groupIndex;
      return b;
    };
    P.b2Fixture = function () {
      this.m_filter = new N();
    };
    P.prototype.GetType = function () {
      return this.m_shape.GetType();
    };
    P.prototype.GetShape = function () {
      return this.m_shape;
    };
    P.prototype.SetSensor = function (b) {
      if (this.m_isSensor != b && (this.m_isSensor = b, null != this.m_body)) for (b = this.m_body.GetContactList(); b;) {
        var c = b.contact,
          d = c.GetFixtureA(),
          e = c.GetFixtureB();
        if (d == this || e == this) c.SetSensor(d.IsSensor() || e.IsSensor());
        b = b.next;
      }
    };
    P.prototype.IsSensor = function () {
      return this.m_isSensor;
    };
    P.prototype.SetFilterData = function (b) {
      this.m_filter = b.Copy();
      if (!this.m_body) for (b = this.m_body.GetContactList(); b;) {
        var c = b.contact,
          d = c.GetFixtureA(),
          e = c.GetFixtureB();
        (d == this || e == this) && c.FlagForFiltering();
        b = b.next;
      }
    };
    P.prototype.GetFilterData = function () {
      return this.m_filter.Copy();
    };
    P.prototype.GetBody = function () {
      return this.m_body;
    };
    P.prototype.GetNext = function () {
      return this.m_next;
    };
    P.prototype.GetUserData = function () {
      return this.m_userData;
    };
    P.prototype.SetUserData = function (b) {
      this.m_userData = b;
    };
    P.prototype.TestPoint = function (b) {
      return this.m_shape.TestPoint(this.m_body.GetTransform(), b);
    };
    P.prototype.RayCast = function (b, c) {
      return this.m_shape.RayCast(b, c, this.m_body.GetTransform());
    };
    P.prototype.GetMassData = function (b) {
      void 0 === b && (b = null);
      null == b && (b = new B());
      this.m_shape.ComputeMass(b, this.m_density);
      return b;
    };
    P.prototype.SetDensity = function (b) {
      void 0 === b && (b = 0);
      this.m_density = b;
    };
    P.prototype.GetDensity = function () {
      return this.m_density;
    };
    P.prototype.GetFriction = function () {
      return this.m_friction;
    };
    P.prototype.SetFriction = function (b) {
      void 0 === b && (b = 0);
      this.m_friction = b;
    };
    P.prototype.GetRestitution = function () {
      return this.m_restitution;
    };
    P.prototype.SetRestitution = function (b) {
      void 0 === b && (b = 0);
      this.m_restitution = b;
    };
    P.prototype.GetAABB = function () {
      return this.m_aabb;
    };
    P.prototype.b2Fixture = function () {
      this.m_aabb = new m();
      this.m_shape = this.m_next = this.m_body = this.m_userData = null;
      this.m_restitution = this.m_friction = this.m_density = 0;
    };
    P.prototype.Create = function (b, c, d) {
      this.m_userData = d.userData;
      this.m_friction = d.friction;
      this.m_restitution = d.restitution;
      this.m_body = b;
      this.m_next = null;
      this.m_filter = d.filter.Copy();
      this.m_isSensor = d.isSensor;
      this.m_shape = d.shape.Copy();
      this.m_density = d.density;
    };
    P.prototype.Destroy = function () {
      this.m_shape = null;
    };
    P.prototype.CreateProxy = function (b, c) {
      this.m_shape.ComputeAABB(this.m_aabb, c);
      this.m_proxy = b.CreateProxy(this.m_aabb, this);
    };
    P.prototype.DestroyProxy = function (b) {
      null != this.m_proxy && (b.DestroyProxy(this.m_proxy), this.m_proxy = null);
    };
    P.prototype.Synchronize = function (c, d, e) {
      if (this.m_proxy) {
        var f = new m(),
          j = new m();
        this.m_shape.ComputeAABB(f, d);
        this.m_shape.ComputeAABB(j, e);
        this.m_aabb.Combine(f, j);
        d = b.SubtractVV(e.position, d.position);
        c.MoveProxy(this.m_proxy, this.m_aabb, d);
      }
    };
    ba.b2FixtureDef = function () {
      this.filter = new N();
    };
    ba.prototype.b2FixtureDef = function () {
      this.userData = this.shape = null;
      this.friction = 0.2;
      this.density = this.restitution = 0;
      this.filter.categoryBits = 1;
      this.filter.maskBits = 65535;
      this.filter.groupIndex = 0;
      this.isSensor = !1;
    };
    V.b2Island = function () {};
    V.prototype.b2Island = function () {
      this.m_bodies = new Vector();
      this.m_contacts = new Vector();
      this.m_joints = new Vector();
    };
    V.prototype.Initialize = function (b, c, d, e, f, j) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      void 0 === d && (d = 0);
      var g = 0;
      this.m_bodyCapacity = b;
      this.m_contactCapacity = c;
      this.m_jointCapacity = d;
      this.m_jointCount = this.m_contactCount = this.m_bodyCount = 0;
      this.m_allocator = e;
      this.m_listener = f;
      this.m_contactSolver = j;
      for (g = this.m_bodies.length; g < b; g++) this.m_bodies[g] = null;
      for (g = this.m_contacts.length; g < c; g++) this.m_contacts[g] = null;
      for (g = this.m_joints.length; g < d; g++) this.m_joints[g] = null;
    };
    V.prototype.Clear = function () {
      this.m_jointCount = this.m_contactCount = this.m_bodyCount = 0;
    };
    V.prototype.Solve = function (c, d, e) {
      for (var f = 0, g = 0, r, f = 0; f < this.m_bodyCount; ++f) g = this.m_bodies[f], g.GetType() == s.b2_dynamicBody && (g.m_linearVelocity.x += c.dt * (d.x + g.m_invMass * g.m_force.x), g.m_linearVelocity.y += c.dt * (d.y + g.m_invMass * g.m_force.y), g.m_angularVelocity += c.dt * g.m_invI * g.m_torque, g.m_linearVelocity.Multiply(b.Clamp(1 - c.dt * g.m_linearDamping, 0, 1)), g.m_angularVelocity *= b.Clamp(1 - c.dt * g.m_angularDamping, 0, 1));
      this.m_contactSolver.Initialize(c, this.m_contacts, this.m_contactCount, this.m_allocator);
      d = this.m_contactSolver;
      d.InitVelocityConstraints(c);
      for (f = 0; f < this.m_jointCount; ++f) r = this.m_joints[f], r.InitVelocityConstraints(c);
      for (f = 0; f < c.velocityIterations; ++f) {
        for (g = 0; g < this.m_jointCount; ++g) r = this.m_joints[g], r.SolveVelocityConstraints(c);
        d.SolveVelocityConstraints();
      }
      for (f = 0; f < this.m_jointCount; ++f) r = this.m_joints[f], r.FinalizeVelocityConstraints();
      d.FinalizeVelocityConstraints();
      for (f = 0; f < this.m_bodyCount; ++f) if (g = this.m_bodies[f], g.GetType() != s.b2_staticBody) {
        var l = c.dt * g.m_linearVelocity.x,
          t = c.dt * g.m_linearVelocity.y;
        l * l + t * t > j.b2_maxTranslationSquared && (g.m_linearVelocity.Normalize(), g.m_linearVelocity.x *= j.b2_maxTranslation * c.inv_dt, g.m_linearVelocity.y *= j.b2_maxTranslation * c.inv_dt);
        l = c.dt * g.m_angularVelocity;
        l * l > j.b2_maxRotationSquared && (g.m_angularVelocity = 0 > g.m_angularVelocity ? -j.b2_maxRotation * c.inv_dt : j.b2_maxRotation * c.inv_dt);
        g.m_sweep.c0.SetV(g.m_sweep.c);
        g.m_sweep.a0 = g.m_sweep.a;
        g.m_sweep.c.x += c.dt * g.m_linearVelocity.x;
        g.m_sweep.c.y += c.dt * g.m_linearVelocity.y;
        g.m_sweep.a += c.dt * g.m_angularVelocity;
        g.SynchronizeTransform();
      }
      for (f = 0; f < c.positionIterations; ++f) {
        l = d.SolvePositionConstraints(j.b2_contactBaumgarte);
        t = !0;
        for (g = 0; g < this.m_jointCount; ++g) r = this.m_joints[g], r = r.SolvePositionConstraints(j.b2_contactBaumgarte), t = t && r;
        if (l && t) break;
      }
      this.Report(d.m_constraints);
      if (e) {
        e = Number.MAX_VALUE;
        d = j.b2_linearSleepTolerance * j.b2_linearSleepTolerance;
        l = j.b2_angularSleepTolerance * j.b2_angularSleepTolerance;
        for (f = 0; f < this.m_bodyCount; ++f) g = this.m_bodies[f], g.GetType() != s.b2_staticBody && (0 == (g.m_flags & s.e_allowSleepFlag) && (e = g.m_sleepTime = 0), 0 == (g.m_flags & s.e_allowSleepFlag) || g.m_angularVelocity * g.m_angularVelocity > l || b.Dot(g.m_linearVelocity, g.m_linearVelocity) > d ? e = g.m_sleepTime = 0 : (g.m_sleepTime += c.dt, e = b.Min(e, g.m_sleepTime)));
        if (e >= j.b2_timeToSleep) for (f = 0; f < this.m_bodyCount; ++f) g = this.m_bodies[f], g.SetAwake(!1);
      }
    };
    V.prototype.SolveTOI = function (b) {
      var c = 0,
        d = 0;
      this.m_contactSolver.Initialize(b, this.m_contacts, this.m_contactCount, this.m_allocator);
      for (var e = this.m_contactSolver, c = 0; c < this.m_jointCount; ++c) this.m_joints[c].InitVelocityConstraints(b);
      for (c = 0; c < b.velocityIterations; ++c) {
        e.SolveVelocityConstraints();
        for (d = 0; d < this.m_jointCount; ++d) this.m_joints[d].SolveVelocityConstraints(b);
      }
      for (c = 0; c < this.m_bodyCount; ++c) if (d = this.m_bodies[c], d.GetType() != s.b2_staticBody) {
        var f = b.dt * d.m_linearVelocity.x,
          g = b.dt * d.m_linearVelocity.y;
        f * f + g * g > j.b2_maxTranslationSquared && (d.m_linearVelocity.Normalize(), d.m_linearVelocity.x *= j.b2_maxTranslation * b.inv_dt, d.m_linearVelocity.y *= j.b2_maxTranslation * b.inv_dt);
        f = b.dt * d.m_angularVelocity;
        f * f > j.b2_maxRotationSquared && (d.m_angularVelocity = 0 > d.m_angularVelocity ? -j.b2_maxRotation * b.inv_dt : j.b2_maxRotation * b.inv_dt);
        d.m_sweep.c0.SetV(d.m_sweep.c);
        d.m_sweep.a0 = d.m_sweep.a;
        d.m_sweep.c.x += b.dt * d.m_linearVelocity.x;
        d.m_sweep.c.y += b.dt * d.m_linearVelocity.y;
        d.m_sweep.a += b.dt * d.m_angularVelocity;
        d.SynchronizeTransform();
      }
      for (c = 0; c < b.positionIterations; ++c) {
        f = e.SolvePositionConstraints(0.75);
        g = !0;
        for (d = 0; d < this.m_jointCount; ++d) var r = this.m_joints[d].SolvePositionConstraints(j.b2_contactBaumgarte), g = g && r;
        if (f && g) break;
      }
      this.Report(e.m_constraints);
    };
    V.prototype.Report = function (b) {
      if (null != this.m_listener) for (var c = 0; c < this.m_contactCount; ++c) {
        for (var d = this.m_contacts[c], e = b[c], f = 0; f < e.pointCount; ++f) V.s_impulse.normalImpulses[f] = e.points[f].normalImpulse, V.s_impulse.tangentImpulses[f] = e.points[f].tangentImpulse;
        this.m_listener.PostSolve(d, V.s_impulse);
      }
    };
    V.prototype.AddBody = function (b) {
      b.m_islandIndex = this.m_bodyCount;
      this.m_bodies[this.m_bodyCount++] = b;
    };
    V.prototype.AddContact = function (b) {
      this.m_contacts[this.m_contactCount++] = b;
    };
    V.prototype.AddJoint = function (b) {
      this.m_joints[this.m_jointCount++] = b;
    };
    Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2Island.s_impulse = new K();
    });
    r.b2TimeStep = function () {};
    r.prototype.Set = function (b) {
      this.dt = b.dt;
      this.inv_dt = b.inv_dt;
      this.positionIterations = b.positionIterations;
      this.velocityIterations = b.velocityIterations;
      this.warmStarting = b.warmStarting;
    };
    t.b2World = function () {
      this.s_stack = new Vector();
      this.m_contactManager = new R();
      this.m_contactSolver = new O();
      this.m_island = new V();
    };
    t.prototype.b2World = function (b, c) {
      this.m_controllerList = this.m_jointList = this.m_contactList = this.m_bodyList = this.m_debugDraw = this.m_destructionListener = null;
      this.m_controllerCount = this.m_jointCount = this.m_contactCount = this.m_bodyCount = 0;
      t.m_warmStarting = !0;
      t.m_continuousPhysics = !0;
      this.m_allowSleep = c;
      this.m_gravity = b;
      this.m_inv_dt0 = 0;
      this.m_contactManager.m_world = this;
      this.m_groundBody = this.CreateBody(new G());
    };
    t.prototype.SetDestructionListener = function (b) {
      this.m_destructionListener = b;
    };
    t.prototype.SetContactFilter = function (b) {
      this.m_contactManager.m_contactFilter = b;
    };
    t.prototype.SetContactListener = function (b) {
      this.m_contactManager.m_contactListener = b;
    };
    t.prototype.SetDebugDraw = function (b) {
      this.m_debugDraw = b;
    };
    t.prototype.SetBroadPhase = function (b) {
      var c = this.m_contactManager.m_broadPhase;
      this.m_contactManager.m_broadPhase = b;
      for (var d = this.m_bodyList; d; d = d.m_next) for (var e = d.m_fixtureList; e; e = e.m_next) e.m_proxy = b.CreateProxy(c.GetFatAABB(e.m_proxy), e);
    };
    t.prototype.Validate = function () {
      this.m_contactManager.m_broadPhase.Validate();
    };
    t.prototype.GetProxyCount = function () {
      return this.m_contactManager.m_broadPhase.GetProxyCount();
    };
    t.prototype.CreateBody = function (b) {
      if (!0 == this.IsLocked()) return null;
      b = new s(b, this);
      b.m_prev = null;
      if (b.m_next = this.m_bodyList) this.m_bodyList.m_prev = b;
      this.m_bodyList = b;
      ++this.m_bodyCount;
      return b;
    };
    t.prototype.DestroyBody = function (b) {
      if (!0 != this.IsLocked()) {
        for (var c = b.m_jointList; c;) {
          var d = c,
            c = c.next;
          this.m_destructionListener && this.m_destructionListener.SayGoodbyeJoint(d.joint);
          this.DestroyJoint(d.joint);
        }
        for (c = b.m_controllerList; c;) d = c, c = c.nextController, d.controller.RemoveBody(b);
        for (c = b.m_contactList; c;) d = c, c = c.next, this.m_contactManager.Destroy(d.contact);
        b.m_contactList = null;
        for (c = b.m_fixtureList; c;) d = c, c = c.m_next, this.m_destructionListener && this.m_destructionListener.SayGoodbyeFixture(d), d.DestroyProxy(this.m_contactManager.m_broadPhase), d.Destroy();
        b.m_fixtureList = null;
        b.m_fixtureCount = 0;
        b.m_prev && (b.m_prev.m_next = b.m_next);
        b.m_next && (b.m_next.m_prev = b.m_prev);
        b == this.m_bodyList && (this.m_bodyList = b.m_next);
        --this.m_bodyCount;
      }
    };
    t.prototype.CreateJoint = function (b) {
      var c = aa.Create(b, null);
      c.m_prev = null;
      if (c.m_next = this.m_jointList) this.m_jointList.m_prev = c;
      this.m_jointList = c;
      ++this.m_jointCount;
      c.m_edgeA.joint = c;
      c.m_edgeA.other = c.m_bodyB;
      c.m_edgeA.prev = null;
      if (c.m_edgeA.next = c.m_bodyA.m_jointList) c.m_bodyA.m_jointList.prev = c.m_edgeA;
      c.m_bodyA.m_jointList = c.m_edgeA;
      c.m_edgeB.joint = c;
      c.m_edgeB.other = c.m_bodyA;
      c.m_edgeB.prev = null;
      if (c.m_edgeB.next = c.m_bodyB.m_jointList) c.m_bodyB.m_jointList.prev = c.m_edgeB;
      c.m_bodyB.m_jointList = c.m_edgeB;
      var d = b.bodyA,
        e = b.bodyB;
      if (!1 == b.collideConnected) for (b = e.GetContactList(); b;) b.other == d && b.contact.FlagForFiltering(), b = b.next;
      return c;
    };
    t.prototype.DestroyJoint = function (b) {
      var c = b.m_collideConnected;
      b.m_prev && (b.m_prev.m_next = b.m_next);
      b.m_next && (b.m_next.m_prev = b.m_prev);
      b == this.m_jointList && (this.m_jointList = b.m_next);
      var d = b.m_bodyA,
        e = b.m_bodyB;
      d.SetAwake(!0);
      e.SetAwake(!0);
      b.m_edgeA.prev && (b.m_edgeA.prev.next = b.m_edgeA.next);
      b.m_edgeA.next && (b.m_edgeA.next.prev = b.m_edgeA.prev);
      b.m_edgeA == d.m_jointList && (d.m_jointList = b.m_edgeA.next);
      b.m_edgeA.prev = null;
      b.m_edgeA.next = null;
      b.m_edgeB.prev && (b.m_edgeB.prev.next = b.m_edgeB.next);
      b.m_edgeB.next && (b.m_edgeB.next.prev = b.m_edgeB.prev);
      b.m_edgeB == e.m_jointList && (e.m_jointList = b.m_edgeB.next);
      b.m_edgeB.prev = null;
      b.m_edgeB.next = null;
      aa.Destroy(b, null);
      --this.m_jointCount;
      if (!1 == c) for (b = e.GetContactList(); b;) b.other == d && b.contact.FlagForFiltering(), b = b.next;
    };
    t.prototype.AddController = function (b) {
      b.m_next = this.m_controllerList;
      b.m_prev = null;
      this.m_controllerList = b;
      b.m_world = this;
      this.m_controllerCount++;
      return b;
    };
    t.prototype.RemoveController = function (b) {
      b.m_prev && (b.m_prev.m_next = b.m_next);
      b.m_next && (b.m_next.m_prev = b.m_prev);
      this.m_controllerList == b && (this.m_controllerList = b.m_next);
      this.m_controllerCount--;
    };
    t.prototype.CreateController = function (b) {
      if (b.m_world != this) throw Error("Controller can only be a member of one world");
      b.m_next = this.m_controllerList;
      b.m_prev = null;
      this.m_controllerList && (this.m_controllerList.m_prev = b);
      this.m_controllerList = b;
      ++this.m_controllerCount;
      b.m_world = this;
      return b;
    };
    t.prototype.DestroyController = function (b) {
      b.Clear();
      b.m_next && (b.m_next.m_prev = b.m_prev);
      b.m_prev && (b.m_prev.m_next = b.m_next);
      b == this.m_controllerList && (this.m_controllerList = b.m_next);
      --this.m_controllerCount;
    };
    t.prototype.SetWarmStarting = function (b) {
      t.m_warmStarting = b;
    };
    t.prototype.SetContinuousPhysics = function (b) {
      t.m_continuousPhysics = b;
    };
    t.prototype.GetBodyCount = function () {
      return this.m_bodyCount;
    };
    t.prototype.GetJointCount = function () {
      return this.m_jointCount;
    };
    t.prototype.GetContactCount = function () {
      return this.m_contactCount;
    };
    t.prototype.SetGravity = function (b) {
      this.m_gravity = b;
    };
    t.prototype.GetGravity = function () {
      return this.m_gravity;
    };
    t.prototype.GetGroundBody = function () {
      return this.m_groundBody;
    };
    t.prototype.Step = function (b, c, d) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      void 0 === d && (d = 0);
      this.m_flags & t.e_newFixture && (this.m_contactManager.FindNewContacts(), this.m_flags &= ~t.e_newFixture);
      this.m_flags |= t.e_locked;
      var e = t.s_timestep2;
      e.dt = b;
      e.velocityIterations = c;
      e.positionIterations = d;
      e.inv_dt = 0 < b ? 1 / b : 0;
      e.dtRatio = this.m_inv_dt0 * b;
      e.warmStarting = t.m_warmStarting;
      this.m_contactManager.Collide();
      0 < e.dt && this.Solve(e);
      t.m_continuousPhysics && 0 < e.dt && this.SolveTOI(e);
      0 < e.dt && (this.m_inv_dt0 = e.inv_dt);
      this.m_flags &= ~t.e_locked;
    };
    t.prototype.ClearForces = function () {
      for (var b = this.m_bodyList; b; b = b.m_next) b.m_force.SetZero(), b.m_torque = 0;
    };
    t.prototype.DrawDebugData = function () {
      if (null != this.m_debugDraw) {
        this.m_debugDraw.m_sprite.graphics.clear();
        var b = this.m_debugDraw.GetFlags(),
          c,
          d,
          g;
        new e();
        new e();
        new e();
        var j;
        new m();
        new m();
        new e();
        new e();
        new e();
        new e();
        var r = new f(0, 0, 0);
        if (b & I.e_shapeBit) for (c = this.m_bodyList; c; c = c.m_next) {
          j = c.m_xf;
          for (d = c.GetFixtureList(); d; d = d.m_next) g = d.GetShape(), !1 == c.IsActive() ? r.Set(0.5, 0.5, 0.3) : c.GetType() == s.b2_staticBody ? r.Set(0.5, 0.9, 0.5) : c.GetType() == s.b2_kinematicBody ? r.Set(0.5, 0.5, 0.9) : !1 == c.IsAwake() ? r.Set(0.6, 0.6, 0.6) : r.Set(0.9, 0.7, 0.7), this.DrawShape(g, j, r);
        }
        if (b & I.e_jointBit) for (c = this.m_jointList; c; c = c.m_next) this.DrawJoint(c);
        if (b & I.e_controllerBit) for (c = this.m_controllerList; c; c = c.m_next) c.Draw(this.m_debugDraw);
        if (b & I.e_pairBit) {
          r.Set(0.3, 0.9, 0.9);
          for (c = this.m_contactManager.m_contactList; c; c = c.GetNext()) g = c.GetFixtureA(), d = c.GetFixtureB(), g = g.GetAABB().GetCenter(), d = d.GetAABB().GetCenter(), this.m_debugDraw.DrawSegment(g, d, r);
        }
        if (b & I.e_aabbBit) {
          g = this.m_contactManager.m_broadPhase;
          j = [new e(), new e(), new e(), new e()];
          for (c = this.m_bodyList; c; c = c.GetNext()) if (!1 != c.IsActive()) for (d = c.GetFixtureList(); d; d = d.GetNext()) {
            var l = g.GetFatAABB(d.m_proxy);
            j[0].Set(l.lowerBound.x, l.lowerBound.y);
            j[1].Set(l.upperBound.x, l.lowerBound.y);
            j[2].Set(l.upperBound.x, l.upperBound.y);
            j[3].Set(l.lowerBound.x, l.upperBound.y);
            this.m_debugDraw.DrawPolygon(j, 4, r);
          }
        }
        if (b & I.e_centerOfMassBit) for (c = this.m_bodyList; c; c = c.m_next) j = t.s_xf, j.R = c.m_xf.R, j.position = c.GetWorldCenter(), this.m_debugDraw.DrawTransform(j);
      }
    };
    t.prototype.QueryAABB = function (b, c) {
      var d = this.m_contactManager.m_broadPhase;
      d.Query(function (c) {
        return b(d.GetUserData(c));
      }, c);
    };
    t.prototype.QueryShape = function (b, c, e) {
      void 0 === e && (e = null);
      null == e && (e = new d(), e.SetIdentity());
      var f = this.m_contactManager.m_broadPhase,
        g = new m();
      c.ComputeAABB(g, e);
      f.Query(function (d) {
        d = f.GetUserData(d) instanceof P ? f.GetUserData(d) : null;
        return D.TestOverlap(c, e, d.GetShape(), d.GetBody().GetTransform()) ? b(d) : !0;
      }, g);
    };
    t.prototype.QueryPoint = function (b, c) {
      var d = this.m_contactManager.m_broadPhase,
        e = new m();
      e.lowerBound.Set(c.x - j.b2_linearSlop, c.y - j.b2_linearSlop);
      e.upperBound.Set(c.x + j.b2_linearSlop, c.y + j.b2_linearSlop);
      d.Query(function (e) {
        e = d.GetUserData(e) instanceof P ? d.GetUserData(e) : null;
        return e.TestPoint(c) ? b(e) : !0;
      }, e);
    };
    t.prototype.RayCast = function (b, c, d) {
      var f = this.m_contactManager.m_broadPhase,
        g = new y(),
        j = new q(c, d);
      f.RayCast(function (j, r) {
        var l = f.GetUserData(r),
          l = l instanceof P ? l : null;
        if (l.RayCast(g, j)) {
          var t = g.fraction,
            C = new e((1 - t) * c.x + t * d.x, (1 - t) * c.y + t * d.y);
          return b(l, C, g.normal, t);
        }
        return j.maxFraction;
      }, j);
    };
    t.prototype.RayCastOne = function (b, c) {
      var d;
      this.RayCast(function (b, c, e, f) {
        void 0 === f && (f = 0);
        d = b;
        return f;
      }, b, c);
      return d;
    };
    t.prototype.RayCastAll = function (b, c) {
      var d = new Vector();
      this.RayCast(function (b) {
        d[d.length] = b;
        return 1;
      }, b, c);
      return d;
    };
    t.prototype.GetBodyList = function () {
      return this.m_bodyList;
    };
    t.prototype.GetJointList = function () {
      return this.m_jointList;
    };
    t.prototype.GetContactList = function () {
      return this.m_contactList;
    };
    t.prototype.IsLocked = function () {
      return 0 < (this.m_flags & t.e_locked);
    };
    t.prototype.Solve = function (b) {
      for (var c, d = this.m_controllerList; d; d = d.m_next) d.Step(b);
      d = this.m_island;
      d.Initialize(this.m_bodyCount, this.m_contactCount, this.m_jointCount, null, this.m_contactManager.m_contactListener, this.m_contactSolver);
      for (c = this.m_bodyList; c; c = c.m_next) c.m_flags &= ~s.e_islandFlag;
      for (var e = this.m_contactList; e; e = e.m_next) e.m_flags &= ~E.e_islandFlag;
      for (e = this.m_jointList; e; e = e.m_next) e.m_islandFlag = !1;
      parseInt(this.m_bodyCount);
      for (var e = this.s_stack, f = this.m_bodyList; f; f = f.m_next) if (!(f.m_flags & s.e_islandFlag) && !(!1 == f.IsAwake() || !1 == f.IsActive()) && f.GetType() != s.b2_staticBody) {
        d.Clear();
        var g = 0;
        e[g++] = f;
        for (f.m_flags |= s.e_islandFlag; 0 < g;) if (c = e[--g], d.AddBody(c), !1 == c.IsAwake() && c.SetAwake(!0), c.GetType() != s.b2_staticBody) {
          for (var j, r = c.m_contactList; r; r = r.next) if (!(r.contact.m_flags & E.e_islandFlag) && !(!0 == r.contact.IsSensor() || !1 == r.contact.IsEnabled() || !1 == r.contact.IsTouching())) d.AddContact(r.contact), r.contact.m_flags |= E.e_islandFlag, j = r.other, j.m_flags & s.e_islandFlag || (e[g++] = j, j.m_flags |= s.e_islandFlag);
          for (c = c.m_jointList; c; c = c.next) !0 != c.joint.m_islandFlag && (j = c.other, !1 != j.IsActive() && (d.AddJoint(c.joint), c.joint.m_islandFlag = !0, j.m_flags & s.e_islandFlag || (e[g++] = j, j.m_flags |= s.e_islandFlag)));
        }
        d.Solve(b, this.m_gravity, this.m_allowSleep);
        for (g = 0; g < d.m_bodyCount; ++g) c = d.m_bodies[g], c.GetType() == s.b2_staticBody && (c.m_flags &= ~s.e_islandFlag);
      }
      for (g = 0; g < e.length && e[g]; ++g) e[g] = null;
      for (c = this.m_bodyList; c; c = c.m_next) !1 == c.IsAwake() || !1 == c.IsActive() || c.GetType() != s.b2_staticBody && c.SynchronizeFixtures();
      this.m_contactManager.FindNewContacts();
    };
    t.prototype.SolveTOI = function (b) {
      var c,
        d,
        e,
        f = this.m_island;
      f.Initialize(this.m_bodyCount, j.b2_maxTOIContactsPerIsland, j.b2_maxTOIJointsPerIsland, null, this.m_contactManager.m_contactListener, this.m_contactSolver);
      var g = t.s_queue;
      for (c = this.m_bodyList; c; c = c.m_next) c.m_flags &= ~s.e_islandFlag, c.m_sweep.t0 = 0;
      for (e = this.m_contactList; e; e = e.m_next) e.m_flags &= ~(E.e_toiFlag | E.e_islandFlag);
      for (e = this.m_jointList; e; e = e.m_next) e.m_islandFlag = !1;
      for (;;) {
        var r = null,
          l = 1;
        for (e = this.m_contactList; e; e = e.m_next) if (!(!0 == e.IsSensor() || !1 == e.IsEnabled() || !1 == e.IsContinuous())) {
          if (e.m_flags & E.e_toiFlag) c = e.m_toi;else {
            c = e.m_fixtureA;
            d = e.m_fixtureB;
            c = c.m_body;
            d = d.m_body;
            if ((c.GetType() != s.b2_dynamicBody || !1 == c.IsAwake()) && (d.GetType() != s.b2_dynamicBody || !1 == d.IsAwake())) continue;
            var C = c.m_sweep.t0;
            c.m_sweep.t0 < d.m_sweep.t0 ? (C = d.m_sweep.t0, c.m_sweep.Advance(C)) : d.m_sweep.t0 < c.m_sweep.t0 && (C = c.m_sweep.t0, d.m_sweep.Advance(C));
            c = e.ComputeTOI(c.m_sweep, d.m_sweep);
            j.b2Assert(0 <= c && 1 >= c);
            0 < c && 1 > c && (c = (1 - c) * C + c, 1 < c && (c = 1));
            e.m_toi = c;
            e.m_flags |= E.e_toiFlag;
          }
          Number.MIN_VALUE < c && c < l && (r = e, l = c);
        }
        if (null == r || 1 - 100 * Number.MIN_VALUE < l) break;
        c = r.m_fixtureA;
        d = r.m_fixtureB;
        c = c.m_body;
        d = d.m_body;
        t.s_backupA.Set(c.m_sweep);
        t.s_backupB.Set(d.m_sweep);
        c.Advance(l);
        d.Advance(l);
        r.Update(this.m_contactManager.m_contactListener);
        r.m_flags &= ~E.e_toiFlag;
        if (!0 == r.IsSensor() || !1 == r.IsEnabled()) c.m_sweep.Set(t.s_backupA), d.m_sweep.Set(t.s_backupB), c.SynchronizeTransform(), d.SynchronizeTransform();else if (!1 != r.IsTouching()) {
          c.GetType() != s.b2_dynamicBody && (c = d);
          f.Clear();
          r = e = 0;
          g[e + r++] = c;
          for (c.m_flags |= s.e_islandFlag; 0 < r;) if (c = g[e++], --r, f.AddBody(c), !1 == c.IsAwake() && c.SetAwake(!0), c.GetType() == s.b2_dynamicBody) {
            for (d = c.m_contactList; d && f.m_contactCount != f.m_contactCapacity; d = d.next) if (!(d.contact.m_flags & E.e_islandFlag) && !(!0 == d.contact.IsSensor() || !1 == d.contact.IsEnabled() || !1 == d.contact.IsTouching())) f.AddContact(d.contact), d.contact.m_flags |= E.e_islandFlag, C = d.other, C.m_flags & s.e_islandFlag || (C.GetType() != s.b2_staticBody && (C.Advance(l), C.SetAwake(!0)), g[e + r] = C, ++r, C.m_flags |= s.e_islandFlag);
            for (c = c.m_jointList; c; c = c.next) f.m_jointCount != f.m_jointCapacity && !0 != c.joint.m_islandFlag && (C = c.other, !1 != C.IsActive() && (f.AddJoint(c.joint), c.joint.m_islandFlag = !0, C.m_flags & s.e_islandFlag || (C.GetType() != s.b2_staticBody && (C.Advance(l), C.SetAwake(!0)), g[e + r] = C, ++r, C.m_flags |= s.e_islandFlag)));
          }
          e = t.s_timestep;
          e.warmStarting = !1;
          e.dt = (1 - l) * b.dt;
          e.inv_dt = 1 / e.dt;
          e.dtRatio = 0;
          e.velocityIterations = b.velocityIterations;
          e.positionIterations = b.positionIterations;
          f.SolveTOI(e);
          for (l = l = 0; l < f.m_bodyCount; ++l) if (c = f.m_bodies[l], c.m_flags &= ~s.e_islandFlag, !1 != c.IsAwake() && c.GetType() == s.b2_dynamicBody) {
            c.SynchronizeFixtures();
            for (d = c.m_contactList; d; d = d.next) d.contact.m_flags &= ~E.e_toiFlag;
          }
          for (l = 0; l < f.m_contactCount; ++l) e = f.m_contacts[l], e.m_flags &= ~(E.e_toiFlag | E.e_islandFlag);
          for (l = 0; l < f.m_jointCount; ++l) e = f.m_joints[l], e.m_islandFlag = !1;
          this.m_contactManager.FindNewContacts();
        }
      }
    };
    t.prototype.DrawJoint = function (b) {
      var c = b.GetBodyA(),
        d = b.GetBodyB(),
        e = c.m_xf.position,
        f = d.m_xf.position,
        g = b.GetAnchorA(),
        j = b.GetAnchorB(),
        r = t.s_jointColor;
      switch (b.m_type) {
        case aa.e_distanceJoint:
          this.m_debugDraw.DrawSegment(g, j, r);
          break;
        case aa.e_pulleyJoint:
          c = b instanceof Q ? b : null;
          b = c.GetGroundAnchorA();
          c = c.GetGroundAnchorB();
          this.m_debugDraw.DrawSegment(b, g, r);
          this.m_debugDraw.DrawSegment(c, j, r);
          this.m_debugDraw.DrawSegment(b, c, r);
          break;
        case aa.e_mouseJoint:
          this.m_debugDraw.DrawSegment(g, j, r);
          break;
        default:
          c != this.m_groundBody && this.m_debugDraw.DrawSegment(e, g, r), this.m_debugDraw.DrawSegment(g, j, r), d != this.m_groundBody && this.m_debugDraw.DrawSegment(f, j, r);
      }
    };
    t.prototype.DrawShape = function (c, d, e) {
      switch (c.m_type) {
        case D.e_circleShape:
          var f = c instanceof z ? c : null;
          this.m_debugDraw.DrawSolidCircle(b.MulX(d, f.m_p), f.m_radius, d.R.col1, e);
          break;
        case D.e_polygonShape:
          f = c instanceof H ? c : null;
          c = parseInt(f.GetVertexCount());
          for (var g = f.GetVertices(), j = new Vector(c), f = 0; f < c; ++f) j[f] = b.MulX(d, g[f]);
          this.m_debugDraw.DrawSolidPolygon(j, c, e);
          break;
        case D.e_edgeShape:
          f = c instanceof A ? c : null, this.m_debugDraw.DrawSegment(b.MulX(d, f.GetVertex1()), b.MulX(d, f.GetVertex2()), e);
      }
    };
    Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2World.s_timestep2 = new r();
      Box2D.Dynamics.b2World.s_xf = new d();
      Box2D.Dynamics.b2World.s_backupA = new c();
      Box2D.Dynamics.b2World.s_backupB = new c();
      Box2D.Dynamics.b2World.s_timestep = new r();
      Box2D.Dynamics.b2World.s_queue = new Vector();
      Box2D.Dynamics.b2World.s_jointColor = new f(0.5, 0.8, 0.8);
      Box2D.Dynamics.b2World.e_newFixture = 1;
      Box2D.Dynamics.b2World.e_locked = 2;
    });
  })();
  (function () {
    var b = Box2D.Collision.Shapes.b2CircleShape,
      c = Box2D.Collision.Shapes.b2EdgeShape,
      d = Box2D.Collision.Shapes.b2PolygonShape,
      e = Box2D.Collision.Shapes.b2Shape,
      f = Box2D.Dynamics.Contacts.b2CircleContact,
      j = Box2D.Dynamics.Contacts.b2Contact,
      m = Box2D.Dynamics.Contacts.b2ContactConstraint,
      l = Box2D.Dynamics.Contacts.b2ContactConstraintPoint,
      g = Box2D.Dynamics.Contacts.b2ContactEdge,
      q = Box2D.Dynamics.Contacts.b2ContactFactory,
      y = Box2D.Dynamics.Contacts.b2ContactRegister,
      z = Box2D.Dynamics.Contacts.b2ContactResult,
      A = Box2D.Dynamics.Contacts.b2ContactSolver,
      B = Box2D.Dynamics.Contacts.b2EdgeAndCircleContact,
      H = Box2D.Dynamics.Contacts.b2NullContact,
      D = Box2D.Dynamics.Contacts.b2PolyAndCircleContact,
      s = Box2D.Dynamics.Contacts.b2PolyAndEdgeContact,
      G = Box2D.Dynamics.Contacts.b2PolygonContact,
      F = Box2D.Dynamics.Contacts.b2PositionSolverManifold,
      K = Box2D.Dynamics.b2Body,
      L = Box2D.Dynamics.b2TimeStep,
      R = Box2D.Common.b2Settings,
      I = Box2D.Common.Math.b2Mat22,
      fa = Box2D.Common.Math.b2Math,
      N = Box2D.Common.Math.b2Vec2,
      P = Box2D.Collision.b2Collision,
      ba = Box2D.Collision.b2ContactID,
      V = Box2D.Collision.b2Manifold,
      r = Box2D.Collision.b2TimeOfImpact,
      t = Box2D.Collision.b2TOIInput,
      E = Box2D.Collision.b2WorldManifold;
    Box2D.inherit(f, Box2D.Dynamics.Contacts.b2Contact);
    f.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
    f.b2CircleContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
    };
    f.Create = function () {
      return new f();
    };
    f.Destroy = function () {};
    f.prototype.Reset = function (b, c) {
      this.__super.Reset.call(this, b, c);
    };
    f.prototype.Evaluate = function () {
      var c = this.m_fixtureA.GetBody(),
        d = this.m_fixtureB.GetBody();
      P.CollideCircles(this.m_manifold, this.m_fixtureA.GetShape() instanceof b ? this.m_fixtureA.GetShape() : null, c.m_xf, this.m_fixtureB.GetShape() instanceof b ? this.m_fixtureB.GetShape() : null, d.m_xf);
    };
    j.b2Contact = function () {
      this.m_nodeA = new g();
      this.m_nodeB = new g();
      this.m_manifold = new V();
      this.m_oldManifold = new V();
    };
    j.prototype.GetManifold = function () {
      return this.m_manifold;
    };
    j.prototype.GetWorldManifold = function (b) {
      var c = this.m_fixtureA.GetBody(),
        d = this.m_fixtureB.GetBody(),
        e = this.m_fixtureA.GetShape(),
        f = this.m_fixtureB.GetShape();
      b.Initialize(this.m_manifold, c.GetTransform(), e.m_radius, d.GetTransform(), f.m_radius);
    };
    j.prototype.IsTouching = function () {
      return (this.m_flags & j.e_touchingFlag) == j.e_touchingFlag;
    };
    j.prototype.IsContinuous = function () {
      return (this.m_flags & j.e_continuousFlag) == j.e_continuousFlag;
    };
    j.prototype.SetSensor = function (b) {
      this.m_flags = b ? this.m_flags | j.e_sensorFlag : this.m_flags & ~j.e_sensorFlag;
    };
    j.prototype.IsSensor = function () {
      return (this.m_flags & j.e_sensorFlag) == j.e_sensorFlag;
    };
    j.prototype.SetEnabled = function (b) {
      this.m_flags = b ? this.m_flags | j.e_enabledFlag : this.m_flags & ~j.e_enabledFlag;
    };
    j.prototype.IsEnabled = function () {
      return (this.m_flags & j.e_enabledFlag) == j.e_enabledFlag;
    };
    j.prototype.GetNext = function () {
      return this.m_next;
    };
    j.prototype.GetFixtureA = function () {
      return this.m_fixtureA;
    };
    j.prototype.GetFixtureB = function () {
      return this.m_fixtureB;
    };
    j.prototype.FlagForFiltering = function () {
      this.m_flags |= j.e_filterFlag;
    };
    j.prototype.b2Contact = function () {};
    j.prototype.Reset = function (b, c) {
      void 0 === b && (b = null);
      void 0 === c && (c = null);
      this.m_flags = j.e_enabledFlag;
      if (!b || !c) this.m_fixtureB = this.m_fixtureA = null;else {
        if (b.IsSensor() || c.IsSensor()) this.m_flags |= j.e_sensorFlag;
        var d = b.GetBody(),
          e = c.GetBody();
        if (d.GetType() != K.b2_dynamicBody || d.IsBullet() || e.GetType() != K.b2_dynamicBody || e.IsBullet()) this.m_flags |= j.e_continuousFlag;
        this.m_fixtureA = b;
        this.m_fixtureB = c;
        this.m_manifold.m_pointCount = 0;
        this.m_next = this.m_prev = null;
        this.m_nodeA.contact = null;
        this.m_nodeA.prev = null;
        this.m_nodeA.next = null;
        this.m_nodeA.other = null;
        this.m_nodeB.contact = null;
        this.m_nodeB.prev = null;
        this.m_nodeB.next = null;
        this.m_nodeB.other = null;
      }
    };
    j.prototype.Update = function (b) {
      var c = this.m_oldManifold;
      this.m_oldManifold = this.m_manifold;
      this.m_manifold = c;
      this.m_flags |= j.e_enabledFlag;
      var d = !1,
        c = (this.m_flags & j.e_touchingFlag) == j.e_touchingFlag,
        f = this.m_fixtureA.m_body,
        g = this.m_fixtureB.m_body,
        r = this.m_fixtureA.m_aabb.TestOverlap(this.m_fixtureB.m_aabb);
      if (this.m_flags & j.e_sensorFlag) r && (d = this.m_fixtureA.GetShape(), r = this.m_fixtureB.GetShape(), f = f.GetTransform(), g = g.GetTransform(), d = e.TestOverlap(d, f, r, g)), this.m_manifold.m_pointCount = 0;else {
        this.m_flags = f.GetType() != K.b2_dynamicBody || f.IsBullet() || g.GetType() != K.b2_dynamicBody || g.IsBullet() ? this.m_flags | j.e_continuousFlag : this.m_flags & ~j.e_continuousFlag;
        if (r) {
          this.Evaluate();
          d = 0 < this.m_manifold.m_pointCount;
          for (r = 0; r < this.m_manifold.m_pointCount; ++r) {
            var l = this.m_manifold.m_points[r];
            l.m_normalImpulse = 0;
            l.m_tangentImpulse = 0;
            for (var t = l.m_id, m = 0; m < this.m_oldManifold.m_pointCount; ++m) {
              var E = this.m_oldManifold.m_points[m];
              if (E.m_id.key == t.key) {
                l.m_normalImpulse = E.m_normalImpulse;
                l.m_tangentImpulse = E.m_tangentImpulse;
                break;
              }
            }
          }
        } else this.m_manifold.m_pointCount = 0;
        d != c && (f.SetAwake(!0), g.SetAwake(!0));
      }
      this.m_flags = d ? this.m_flags | j.e_touchingFlag : this.m_flags & ~j.e_touchingFlag;
      !1 == c && !0 == d && b.BeginContact(this);
      !0 == c && !1 == d && b.EndContact(this);
      0 == (this.m_flags & j.e_sensorFlag) && b.PreSolve(this, this.m_oldManifold);
    };
    j.prototype.Evaluate = function () {};
    j.prototype.ComputeTOI = function (b, c) {
      j.s_input.proxyA.Set(this.m_fixtureA.GetShape());
      j.s_input.proxyB.Set(this.m_fixtureB.GetShape());
      j.s_input.sweepA = b;
      j.s_input.sweepB = c;
      j.s_input.tolerance = R.b2_linearSlop;
      return r.TimeOfImpact(j.s_input);
    };
    Box2D.postDefs.push(function () {
      Box2D.Dynamics.Contacts.b2Contact.e_sensorFlag = 1;
      Box2D.Dynamics.Contacts.b2Contact.e_continuousFlag = 2;
      Box2D.Dynamics.Contacts.b2Contact.e_islandFlag = 4;
      Box2D.Dynamics.Contacts.b2Contact.e_toiFlag = 8;
      Box2D.Dynamics.Contacts.b2Contact.e_touchingFlag = 16;
      Box2D.Dynamics.Contacts.b2Contact.e_enabledFlag = 32;
      Box2D.Dynamics.Contacts.b2Contact.e_filterFlag = 64;
      Box2D.Dynamics.Contacts.b2Contact.s_input = new t();
    });
    m.b2ContactConstraint = function () {
      this.localPlaneNormal = new N();
      this.localPoint = new N();
      this.normal = new N();
      this.normalMass = new I();
      this.K = new I();
    };
    m.prototype.b2ContactConstraint = function () {
      this.points = new Vector(R.b2_maxManifoldPoints);
      for (var b = 0; b < R.b2_maxManifoldPoints; b++) this.points[b] = new l();
    };
    l.b2ContactConstraintPoint = function () {
      this.localPoint = new N();
      this.rA = new N();
      this.rB = new N();
    };
    g.b2ContactEdge = function () {};
    q.b2ContactFactory = function () {};
    q.prototype.b2ContactFactory = function (b) {
      this.m_allocator = b;
      this.InitializeRegisters();
    };
    q.prototype.AddType = function (b, c, d, e) {
      void 0 === d && (d = 0);
      void 0 === e && (e = 0);
      this.m_registers[d][e].createFcn = b;
      this.m_registers[d][e].destroyFcn = c;
      this.m_registers[d][e].primary = !0;
      d != e && (this.m_registers[e][d].createFcn = b, this.m_registers[e][d].destroyFcn = c, this.m_registers[e][d].primary = !1);
    };
    q.prototype.InitializeRegisters = function () {
      this.m_registers = new Vector(e.e_shapeTypeCount);
      for (var b = 0; b < e.e_shapeTypeCount; b++) {
        this.m_registers[b] = new Vector(e.e_shapeTypeCount);
        for (var c = 0; c < e.e_shapeTypeCount; c++) this.m_registers[b][c] = new y();
      }
      this.AddType(f.Create, f.Destroy, e.e_circleShape, e.e_circleShape);
      this.AddType(D.Create, D.Destroy, e.e_polygonShape, e.e_circleShape);
      this.AddType(G.Create, G.Destroy, e.e_polygonShape, e.e_polygonShape);
      this.AddType(B.Create, B.Destroy, e.e_edgeShape, e.e_circleShape);
      this.AddType(s.Create, s.Destroy, e.e_polygonShape, e.e_edgeShape);
    };
    q.prototype.Create = function (b, c) {
      var d = parseInt(b.GetType()),
        e = parseInt(c.GetType()),
        d = this.m_registers[d][e];
      if (d.pool) return e = d.pool, d.pool = e.m_next, d.poolCount--, e.Reset(b, c), e;
      e = d.createFcn;
      return null != e ? (d.primary ? (e = e(this.m_allocator), e.Reset(b, c)) : (e = e(this.m_allocator), e.Reset(c, b)), e) : null;
    };
    q.prototype.Destroy = function (b) {
      0 < b.m_manifold.m_pointCount && (b.m_fixtureA.m_body.SetAwake(!0), b.m_fixtureB.m_body.SetAwake(!0));
      var c = parseInt(b.m_fixtureA.GetType()),
        d = parseInt(b.m_fixtureB.GetType()),
        c = this.m_registers[c][d];
      c.poolCount++;
      b.m_next = c.pool;
      c.pool = b;
      c = c.destroyFcn;
      c(b, this.m_allocator);
    };
    y.b2ContactRegister = function () {};
    z.b2ContactResult = function () {
      this.position = new N();
      this.normal = new N();
      this.id = new ba();
    };
    A.b2ContactSolver = function () {
      this.m_step = new L();
      this.m_constraints = new Vector();
    };
    A.prototype.b2ContactSolver = function () {};
    A.prototype.Initialize = function (b, c, d, e) {
      void 0 === d && (d = 0);
      var f;
      this.m_step.Set(b);
      this.m_allocator = e;
      for (this.m_constraintCount = d; this.m_constraints.length < this.m_constraintCount;) this.m_constraints[this.m_constraints.length] = new m();
      for (b = 0; b < d; ++b) {
        f = c[b];
        e = f.m_fixtureA;
        var g = f.m_fixtureB,
          j = e.m_shape.m_radius,
          r = g.m_shape.m_radius,
          l = e.m_body,
          t = g.m_body,
          E = f.GetManifold(),
          q = R.b2MixFriction(e.GetFriction(), g.GetFriction()),
          s = R.b2MixRestitution(e.GetRestitution(), g.GetRestitution()),
          z = l.m_linearVelocity.x,
          B = l.m_linearVelocity.y,
          y = t.m_linearVelocity.x,
          D = t.m_linearVelocity.y,
          F = l.m_angularVelocity,
          H = t.m_angularVelocity;
        R.b2Assert(0 < E.m_pointCount);
        A.s_worldManifold.Initialize(E, l.m_xf, j, t.m_xf, r);
        g = A.s_worldManifold.m_normal.x;
        f = A.s_worldManifold.m_normal.y;
        e = this.m_constraints[b];
        e.bodyA = l;
        e.bodyB = t;
        e.manifold = E;
        e.normal.x = g;
        e.normal.y = f;
        e.pointCount = E.m_pointCount;
        e.friction = q;
        e.restitution = s;
        e.localPlaneNormal.x = E.m_localPlaneNormal.x;
        e.localPlaneNormal.y = E.m_localPlaneNormal.y;
        e.localPoint.x = E.m_localPoint.x;
        e.localPoint.y = E.m_localPoint.y;
        e.radius = j + r;
        e.type = E.m_type;
        for (j = 0; j < e.pointCount; ++j) {
          q = E.m_points[j];
          r = e.points[j];
          r.normalImpulse = q.m_normalImpulse;
          r.tangentImpulse = q.m_tangentImpulse;
          r.localPoint.SetV(q.m_localPoint);
          var q = r.rA.x = A.s_worldManifold.m_points[j].x - l.m_sweep.c.x,
            s = r.rA.y = A.s_worldManifold.m_points[j].y - l.m_sweep.c.y,
            G = r.rB.x = A.s_worldManifold.m_points[j].x - t.m_sweep.c.x,
            K = r.rB.y = A.s_worldManifold.m_points[j].y - t.m_sweep.c.y,
            I = q * f - s * g,
            L = G * f - K * g,
            I = I * I,
            L = L * L;
          r.normalMass = 1 / (l.m_invMass + t.m_invMass + l.m_invI * I + t.m_invI * L);
          var N = l.m_mass * l.m_invMass + t.m_mass * t.m_invMass,
            N = N + (l.m_mass * l.m_invI * I + t.m_mass * t.m_invI * L);
          r.equalizedMass = 1 / N;
          L = f;
          N = -g;
          I = q * N - s * L;
          L = G * N - K * L;
          I *= I;
          L *= L;
          r.tangentMass = 1 / (l.m_invMass + t.m_invMass + l.m_invI * I + t.m_invI * L);
          r.velocityBias = 0;
          q = e.normal.x * (y + -H * K - z - -F * s) + e.normal.y * (D + H * G - B - F * q);
          q < -R.b2_velocityThreshold && (r.velocityBias += -e.restitution * q);
        }
        2 == e.pointCount && (D = e.points[0], y = e.points[1], E = l.m_invMass, l = l.m_invI, z = t.m_invMass, t = t.m_invI, B = D.rA.x * f - D.rA.y * g, D = D.rB.x * f - D.rB.y * g, F = y.rA.x * f - y.rA.y * g, y = y.rB.x * f - y.rB.y * g, g = E + z + l * B * B + t * D * D, f = E + z + l * F * F + t * y * y, t = E + z + l * B * F + t * D * y, g * g < 100 * (g * f - t * t) ? (e.K.col1.Set(g, t), e.K.col2.Set(t, f), e.K.GetInverse(e.normalMass)) : e.pointCount = 1);
      }
    };
    A.prototype.InitVelocityConstraints = function (b) {
      for (var c = 0; c < this.m_constraintCount; ++c) {
        var d = this.m_constraints[c],
          e = d.bodyA,
          f = d.bodyB,
          g = e.m_invMass,
          j = e.m_invI,
          r = f.m_invMass,
          l = f.m_invI,
          t = d.normal.x,
          m = d.normal.y,
          E = m,
          q = -t,
          s = 0,
          z = 0;
        if (b.warmStarting) {
          z = d.pointCount;
          for (s = 0; s < z; ++s) {
            var A = d.points[s];
            A.normalImpulse *= b.dtRatio;
            A.tangentImpulse *= b.dtRatio;
            var y = A.normalImpulse * t + A.tangentImpulse * E,
              B = A.normalImpulse * m + A.tangentImpulse * q;
            e.m_angularVelocity -= j * (A.rA.x * B - A.rA.y * y);
            e.m_linearVelocity.x -= g * y;
            e.m_linearVelocity.y -= g * B;
            f.m_angularVelocity += l * (A.rB.x * B - A.rB.y * y);
            f.m_linearVelocity.x += r * y;
            f.m_linearVelocity.y += r * B;
          }
        } else {
          z = d.pointCount;
          for (s = 0; s < z; ++s) e = d.points[s], e.normalImpulse = 0, e.tangentImpulse = 0;
        }
      }
    };
    A.prototype.SolveVelocityConstraints = function () {
      for (var b = 0, c, d = 0, e = 0, f = 0, g = 0, j = 0, r = 0, l = 0, t, m = 0; m < this.m_constraintCount; ++m) {
        var f = this.m_constraints[m],
          E = f.bodyA,
          q = f.bodyB,
          s = E.m_angularVelocity,
          z = q.m_angularVelocity,
          A = E.m_linearVelocity,
          y = q.m_linearVelocity,
          B = E.m_invMass,
          D = E.m_invI,
          F = q.m_invMass,
          H = q.m_invI,
          r = f.normal.x,
          G = l = f.normal.y;
        t = -r;
        j = f.friction;
        for (b = 0; b < f.pointCount; b++) c = f.points[b], d = y.x - z * c.rB.y - A.x + s * c.rA.y, e = y.y + z * c.rB.x - A.y - s * c.rA.x, d = d * G + e * t, d = c.tangentMass * -d, e = j * c.normalImpulse, e = fa.Clamp(c.tangentImpulse + d, -e, e), d = e - c.tangentImpulse, g = d * G, d *= t, A.x -= B * g, A.y -= B * d, s -= D * (c.rA.x * d - c.rA.y * g), y.x += F * g, y.y += F * d, z += H * (c.rB.x * d - c.rB.y * g), c.tangentImpulse = e;
        parseInt(f.pointCount);
        if (1 == f.pointCount) c = f.points[0], d = y.x + -z * c.rB.y - A.x - -s * c.rA.y, e = y.y + z * c.rB.x - A.y - s * c.rA.x, f = d * r + e * l, d = -c.normalMass * (f - c.velocityBias), e = c.normalImpulse + d, e = 0 < e ? e : 0, d = e - c.normalImpulse, g = d * r, d *= l, A.x -= B * g, A.y -= B * d, s -= D * (c.rA.x * d - c.rA.y * g), y.x += F * g, y.y += F * d, z += H * (c.rB.x * d - c.rB.y * g), c.normalImpulse = e;else {
          c = f.points[0];
          var b = f.points[1],
            d = c.normalImpulse,
            j = b.normalImpulse,
            K = (y.x - z * c.rB.y - A.x + s * c.rA.y) * r + (y.y + z * c.rB.x - A.y - s * c.rA.x) * l,
            I = (y.x - z * b.rB.y - A.x + s * b.rA.y) * r + (y.y + z * b.rB.x - A.y - s * b.rA.x) * l,
            e = K - c.velocityBias,
            g = I - b.velocityBias;
          t = f.K;
          e -= t.col1.x * d + t.col2.x * j;
          for (g -= t.col1.y * d + t.col2.y * j;;) {
            t = f.normalMass;
            G = -(t.col1.x * e + t.col2.x * g);
            t = -(t.col1.y * e + t.col2.y * g);
            if (0 <= G && 0 <= t) {
              d = G - d;
              j = t - j;
              f = d * r;
              d *= l;
              r *= j;
              l *= j;
              A.x -= B * (f + r);
              A.y -= B * (d + l);
              s -= D * (c.rA.x * d - c.rA.y * f + b.rA.x * l - b.rA.y * r);
              y.x += F * (f + r);
              y.y += F * (d + l);
              z += H * (c.rB.x * d - c.rB.y * f + b.rB.x * l - b.rB.y * r);
              c.normalImpulse = G;
              b.normalImpulse = t;
              break;
            }
            G = -c.normalMass * e;
            t = 0;
            I = f.K.col1.y * G + g;
            if (0 <= G && 0 <= I) {
              d = G - d;
              j = t - j;
              f = d * r;
              d *= l;
              r *= j;
              l *= j;
              A.x -= B * (f + r);
              A.y -= B * (d + l);
              s -= D * (c.rA.x * d - c.rA.y * f + b.rA.x * l - b.rA.y * r);
              y.x += F * (f + r);
              y.y += F * (d + l);
              z += H * (c.rB.x * d - c.rB.y * f + b.rB.x * l - b.rB.y * r);
              c.normalImpulse = G;
              b.normalImpulse = t;
              break;
            }
            G = 0;
            t = -b.normalMass * g;
            K = f.K.col2.x * t + e;
            if (0 <= t && 0 <= K) {
              d = G - d;
              j = t - j;
              f = d * r;
              d *= l;
              r *= j;
              l *= j;
              A.x -= B * (f + r);
              A.y -= B * (d + l);
              s -= D * (c.rA.x * d - c.rA.y * f + b.rA.x * l - b.rA.y * r);
              y.x += F * (f + r);
              y.y += F * (d + l);
              z += H * (c.rB.x * d - c.rB.y * f + b.rB.x * l - b.rB.y * r);
              c.normalImpulse = G;
              b.normalImpulse = t;
              break;
            }
            t = G = 0;
            K = e;
            I = g;
            if (0 <= K && 0 <= I) {
              d = G - d;
              j = t - j;
              f = d * r;
              d *= l;
              r *= j;
              l *= j;
              A.x -= B * (f + r);
              A.y -= B * (d + l);
              s -= D * (c.rA.x * d - c.rA.y * f + b.rA.x * l - b.rA.y * r);
              y.x += F * (f + r);
              y.y += F * (d + l);
              z += H * (c.rB.x * d - c.rB.y * f + b.rB.x * l - b.rB.y * r);
              c.normalImpulse = G;
              b.normalImpulse = t;
              break;
            }
            break;
          }
        }
        E.m_angularVelocity = s;
        q.m_angularVelocity = z;
      }
    };
    A.prototype.FinalizeVelocityConstraints = function () {
      for (var b = 0; b < this.m_constraintCount; ++b) for (var c = this.m_constraints[b], d = c.manifold, e = 0; e < c.pointCount; ++e) {
        var f = d.m_points[e],
          g = c.points[e];
        f.m_normalImpulse = g.normalImpulse;
        f.m_tangentImpulse = g.tangentImpulse;
      }
    };
    A.prototype.SolvePositionConstraints = function (b) {
      void 0 === b && (b = 0);
      for (var c = 0, d = 0; d < this.m_constraintCount; d++) {
        var e = this.m_constraints[d],
          f = e.bodyA,
          g = e.bodyB,
          j = f.m_mass * f.m_invMass,
          r = f.m_mass * f.m_invI,
          l = g.m_mass * g.m_invMass,
          t = g.m_mass * g.m_invI;
        A.s_psm.Initialize(e);
        for (var m = A.s_psm.m_normal, E = 0; E < e.pointCount; E++) {
          var q = e.points[E],
            s = A.s_psm.m_points[E],
            z = A.s_psm.m_separations[E],
            y = s.x - f.m_sweep.c.x,
            B = s.y - f.m_sweep.c.y,
            D = s.x - g.m_sweep.c.x,
            s = s.y - g.m_sweep.c.y,
            c = c < z ? c : z,
            z = fa.Clamp(b * (z + R.b2_linearSlop), -R.b2_maxLinearCorrection, 0),
            z = -q.equalizedMass * z,
            q = z * m.x,
            z = z * m.y;
          f.m_sweep.c.x -= j * q;
          f.m_sweep.c.y -= j * z;
          f.m_sweep.a -= r * (y * z - B * q);
          f.SynchronizeTransform();
          g.m_sweep.c.x += l * q;
          g.m_sweep.c.y += l * z;
          g.m_sweep.a += t * (D * z - s * q);
          g.SynchronizeTransform();
        }
      }
      return c > -1.5 * R.b2_linearSlop;
    };
    Box2D.postDefs.push(function () {
      Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold = new E();
      Box2D.Dynamics.Contacts.b2ContactSolver.s_psm = new F();
    });
    Box2D.inherit(B, Box2D.Dynamics.Contacts.b2Contact);
    B.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
    B.b2EdgeAndCircleContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
    };
    B.Create = function () {
      return new B();
    };
    B.Destroy = function () {};
    B.prototype.Reset = function (b, c) {
      this.__super.Reset.call(this, b, c);
    };
    B.prototype.Evaluate = function () {
      var d = this.m_fixtureA.GetBody(),
        e = this.m_fixtureB.GetBody();
      this.b2CollideEdgeAndCircle(this.m_manifold, this.m_fixtureA.GetShape() instanceof c ? this.m_fixtureA.GetShape() : null, d.m_xf, this.m_fixtureB.GetShape() instanceof b ? this.m_fixtureB.GetShape() : null, e.m_xf);
    };
    B.prototype.b2CollideEdgeAndCircle = function () {};
    Box2D.inherit(H, Box2D.Dynamics.Contacts.b2Contact);
    H.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
    H.b2NullContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
    };
    H.prototype.b2NullContact = function () {
      this.__super.b2Contact.call(this);
    };
    H.prototype.Evaluate = function () {};
    Box2D.inherit(D, Box2D.Dynamics.Contacts.b2Contact);
    D.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
    D.b2PolyAndCircleContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
    };
    D.Create = function () {
      return new D();
    };
    D.Destroy = function () {};
    D.prototype.Reset = function (b, c) {
      this.__super.Reset.call(this, b, c);
      R.b2Assert(b.GetType() == e.e_polygonShape);
      R.b2Assert(c.GetType() == e.e_circleShape);
    };
    D.prototype.Evaluate = function () {
      var c = this.m_fixtureA.m_body,
        e = this.m_fixtureB.m_body;
      P.CollidePolygonAndCircle(this.m_manifold, this.m_fixtureA.GetShape() instanceof d ? this.m_fixtureA.GetShape() : null, c.m_xf, this.m_fixtureB.GetShape() instanceof b ? this.m_fixtureB.GetShape() : null, e.m_xf);
    };
    Box2D.inherit(s, Box2D.Dynamics.Contacts.b2Contact);
    s.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
    s.b2PolyAndEdgeContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
    };
    s.Create = function () {
      return new s();
    };
    s.Destroy = function () {};
    s.prototype.Reset = function (b, c) {
      this.__super.Reset.call(this, b, c);
      R.b2Assert(b.GetType() == e.e_polygonShape);
      R.b2Assert(c.GetType() == e.e_edgeShape);
    };
    s.prototype.Evaluate = function () {
      var b = this.m_fixtureA.GetBody(),
        e = this.m_fixtureB.GetBody();
      this.b2CollidePolyAndEdge(this.m_manifold, this.m_fixtureA.GetShape() instanceof d ? this.m_fixtureA.GetShape() : null, b.m_xf, this.m_fixtureB.GetShape() instanceof c ? this.m_fixtureB.GetShape() : null, e.m_xf);
    };
    s.prototype.b2CollidePolyAndEdge = function () {};
    Box2D.inherit(G, Box2D.Dynamics.Contacts.b2Contact);
    G.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
    G.b2PolygonContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
    };
    G.Create = function () {
      return new G();
    };
    G.Destroy = function () {};
    G.prototype.Reset = function (b, c) {
      this.__super.Reset.call(this, b, c);
    };
    G.prototype.Evaluate = function () {
      var b = this.m_fixtureA.GetBody(),
        c = this.m_fixtureB.GetBody();
      P.CollidePolygons(this.m_manifold, this.m_fixtureA.GetShape() instanceof d ? this.m_fixtureA.GetShape() : null, b.m_xf, this.m_fixtureB.GetShape() instanceof d ? this.m_fixtureB.GetShape() : null, c.m_xf);
    };
    F.b2PositionSolverManifold = function () {};
    F.prototype.b2PositionSolverManifold = function () {
      this.m_normal = new N();
      this.m_separations = new Vector_a2j_Number(R.b2_maxManifoldPoints);
      this.m_points = new Vector(R.b2_maxManifoldPoints);
      for (var b = 0; b < R.b2_maxManifoldPoints; b++) this.m_points[b] = new N();
    };
    F.prototype.Initialize = function (b) {
      R.b2Assert(0 < b.pointCount);
      var c = 0,
        d = 0,
        e = 0,
        f,
        g = 0,
        j = 0;
      switch (b.type) {
        case V.e_circles:
          f = b.bodyA.m_xf.R;
          e = b.localPoint;
          c = b.bodyA.m_xf.position.x + (f.col1.x * e.x + f.col2.x * e.y);
          d = b.bodyA.m_xf.position.y + (f.col1.y * e.x + f.col2.y * e.y);
          f = b.bodyB.m_xf.R;
          e = b.points[0].localPoint;
          g = b.bodyB.m_xf.position.x + (f.col1.x * e.x + f.col2.x * e.y);
          f = b.bodyB.m_xf.position.y + (f.col1.y * e.x + f.col2.y * e.y);
          var e = g - c,
            j = f - d,
            r = e * e + j * j;
          r > Number.MIN_VALUE * Number.MIN_VALUE ? (r = Math.sqrt(r), this.m_normal.x = e / r, this.m_normal.y = j / r) : (this.m_normal.x = 1, this.m_normal.y = 0);
          this.m_points[0].x = 0.5 * (c + g);
          this.m_points[0].y = 0.5 * (d + f);
          this.m_separations[0] = e * this.m_normal.x + j * this.m_normal.y - b.radius;
          break;
        case V.e_faceA:
          f = b.bodyA.m_xf.R;
          e = b.localPlaneNormal;
          this.m_normal.x = f.col1.x * e.x + f.col2.x * e.y;
          this.m_normal.y = f.col1.y * e.x + f.col2.y * e.y;
          f = b.bodyA.m_xf.R;
          e = b.localPoint;
          g = b.bodyA.m_xf.position.x + (f.col1.x * e.x + f.col2.x * e.y);
          j = b.bodyA.m_xf.position.y + (f.col1.y * e.x + f.col2.y * e.y);
          f = b.bodyB.m_xf.R;
          for (c = 0; c < b.pointCount; ++c) e = b.points[c].localPoint, d = b.bodyB.m_xf.position.x + (f.col1.x * e.x + f.col2.x * e.y), e = b.bodyB.m_xf.position.y + (f.col1.y * e.x + f.col2.y * e.y), this.m_separations[c] = (d - g) * this.m_normal.x + (e - j) * this.m_normal.y - b.radius, this.m_points[c].x = d, this.m_points[c].y = e;
          break;
        case V.e_faceB:
          f = b.bodyB.m_xf.R;
          e = b.localPlaneNormal;
          this.m_normal.x = f.col1.x * e.x + f.col2.x * e.y;
          this.m_normal.y = f.col1.y * e.x + f.col2.y * e.y;
          f = b.bodyB.m_xf.R;
          e = b.localPoint;
          g = b.bodyB.m_xf.position.x + (f.col1.x * e.x + f.col2.x * e.y);
          j = b.bodyB.m_xf.position.y + (f.col1.y * e.x + f.col2.y * e.y);
          f = b.bodyA.m_xf.R;
          for (c = 0; c < b.pointCount; ++c) e = b.points[c].localPoint, d = b.bodyA.m_xf.position.x + (f.col1.x * e.x + f.col2.x * e.y), e = b.bodyA.m_xf.position.y + (f.col1.y * e.x + f.col2.y * e.y), this.m_separations[c] = (d - g) * this.m_normal.x + (e - j) * this.m_normal.y - b.radius, this.m_points[c].Set(d, e);
          this.m_normal.x *= -1;
          this.m_normal.y *= -1;
      }
    };
    Box2D.postDefs.push(function () {
      Box2D.Dynamics.Contacts.b2PositionSolverManifold.circlePointA = new N();
      Box2D.Dynamics.Contacts.b2PositionSolverManifold.circlePointB = new N();
    });
  })();
  (function () {
    var b = Box2D.Common.Math.b2Mat22,
      c = Box2D.Common.Math.b2Math,
      d = Box2D.Common.Math.b2Vec2,
      e = Box2D.Common.b2Color,
      f = Box2D.Dynamics.Controllers.b2BuoyancyController,
      j = Box2D.Dynamics.Controllers.b2ConstantAccelController,
      m = Box2D.Dynamics.Controllers.b2ConstantForceController,
      l = Box2D.Dynamics.Controllers.b2Controller,
      g = Box2D.Dynamics.Controllers.b2ControllerEdge,
      q = Box2D.Dynamics.Controllers.b2GravityController,
      y = Box2D.Dynamics.Controllers.b2TensorDampingController;
    Box2D.inherit(f, Box2D.Dynamics.Controllers.b2Controller);
    f.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
    f.b2BuoyancyController = function () {
      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
      this.normal = new d(0, -1);
      this.density = this.offset = 0;
      this.velocity = new d(0, 0);
      this.linearDrag = 2;
      this.angularDrag = 1;
      this.useDensity = !1;
      this.useWorldGravity = !0;
      this.gravity = null;
    };
    f.prototype.Step = function () {
      if (this.m_bodyList) {
        this.useWorldGravity && (this.gravity = this.GetWorld().GetGravity().Copy());
        for (var b = this.m_bodyList; b; b = b.nextBody) {
          var c = b.body;
          if (!1 != c.IsAwake()) {
            for (var e = new d(), f = new d(), g = 0, j = 0, l = c.GetFixtureList(); l; l = l.GetNext()) {
              var m = new d(),
                q = l.GetShape().ComputeSubmergedArea(this.normal, this.offset, c.GetTransform(), m),
                g = g + q;
              e.x += q * m.x;
              e.y += q * m.y;
              var y = 0,
                y = 1,
                j = j + q * y;
              f.x += q * m.x * y;
              f.y += q * m.y * y;
            }
            e.x /= g;
            e.y /= g;
            f.x /= j;
            f.y /= j;
            g < Number.MIN_VALUE || (j = this.gravity.GetNegative(), j.Multiply(this.density * g), c.ApplyForce(j, f), f = c.GetLinearVelocityFromWorldPoint(e), f.Subtract(this.velocity), f.Multiply(-this.linearDrag * g), c.ApplyForce(f, e), c.ApplyTorque(-c.GetInertia() / c.GetMass() * g * c.GetAngularVelocity() * this.angularDrag));
          }
        }
      }
    };
    f.prototype.Draw = function (b) {
      var c = new d(),
        f = new d();
      c.x = this.normal.x * this.offset + 1E3 * this.normal.y;
      c.y = this.normal.y * this.offset - 1E3 * this.normal.x;
      f.x = this.normal.x * this.offset - 1E3 * this.normal.y;
      f.y = this.normal.y * this.offset + 1E3 * this.normal.x;
      var g = new e(0, 0, 1);
      b.DrawSegment(c, f, g);
    };
    Box2D.inherit(j, Box2D.Dynamics.Controllers.b2Controller);
    j.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
    j.b2ConstantAccelController = function () {
      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
      this.A = new d(0, 0);
    };
    j.prototype.Step = function (b) {
      b = new d(this.A.x * b.dt, this.A.y * b.dt);
      for (var c = this.m_bodyList; c; c = c.nextBody) {
        var e = c.body;
        e.IsAwake() && e.SetLinearVelocity(new d(e.GetLinearVelocity().x + b.x, e.GetLinearVelocity().y + b.y));
      }
    };
    Box2D.inherit(m, Box2D.Dynamics.Controllers.b2Controller);
    m.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
    m.b2ConstantForceController = function () {
      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
      this.F = new d(0, 0);
    };
    m.prototype.Step = function () {
      for (var b = this.m_bodyList; b; b = b.nextBody) {
        var c = b.body;
        c.IsAwake() && c.ApplyForce(this.F, c.GetWorldCenter());
      }
    };
    l.b2Controller = function () {};
    l.prototype.Step = function () {};
    l.prototype.Draw = function () {};
    l.prototype.AddBody = function (b) {
      var c = new g();
      c.controller = this;
      c.body = b;
      c.nextBody = this.m_bodyList;
      c.prevBody = null;
      this.m_bodyList = c;
      c.nextBody && (c.nextBody.prevBody = c);
      this.m_bodyCount++;
      c.nextController = b.m_controllerList;
      c.prevController = null;
      b.m_controllerList = c;
      c.nextController && (c.nextController.prevController = c);
      b.m_controllerCount++;
    };
    l.prototype.RemoveBody = function (b) {
      for (var c = b.m_controllerList; c && c.controller != this;) c = c.nextController;
      c.prevBody && (c.prevBody.nextBody = c.nextBody);
      c.nextBody && (c.nextBody.prevBody = c.prevBody);
      c.nextController && (c.nextController.prevController = c.prevController);
      c.prevController && (c.prevController.nextController = c.nextController);
      this.m_bodyList == c && (this.m_bodyList = c.nextBody);
      b.m_controllerList == c && (b.m_controllerList = c.nextController);
      b.m_controllerCount--;
      this.m_bodyCount--;
    };
    l.prototype.Clear = function () {
      for (; this.m_bodyList;) this.RemoveBody(this.m_bodyList.body);
    };
    l.prototype.GetNext = function () {
      return this.m_next;
    };
    l.prototype.GetWorld = function () {
      return this.m_world;
    };
    l.prototype.GetBodyList = function () {
      return this.m_bodyList;
    };
    g.b2ControllerEdge = function () {};
    Box2D.inherit(q, Box2D.Dynamics.Controllers.b2Controller);
    q.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
    q.b2GravityController = function () {
      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
      this.G = 1;
      this.invSqr = !0;
    };
    q.prototype.Step = function () {
      var b = null,
        c = null,
        e = null,
        f = 0,
        g = null,
        j = null,
        l = null,
        m = 0,
        q = 0,
        y = 0;
      if (this.invSqr) for (b = this.m_bodyList; b; b = b.nextBody) {
        c = b.body;
        e = c.GetWorldCenter();
        f = c.GetMass();
        for (g = this.m_bodyList; g != b; g = g.nextBody) j = g.body, l = j.GetWorldCenter(), m = l.x - e.x, q = l.y - e.y, y = m * m + q * q, y < Number.MIN_VALUE || (m = new d(m, q), m.Multiply(this.G / y / Math.sqrt(y) * f * j.GetMass()), c.IsAwake() && c.ApplyForce(m, e), m.Multiply(-1), j.IsAwake() && j.ApplyForce(m, l));
      } else for (b = this.m_bodyList; b; b = b.nextBody) {
        c = b.body;
        e = c.GetWorldCenter();
        f = c.GetMass();
        for (g = this.m_bodyList; g != b; g = g.nextBody) j = g.body, l = j.GetWorldCenter(), m = l.x - e.x, q = l.y - e.y, y = m * m + q * q, y < Number.MIN_VALUE || (m = new d(m, q), m.Multiply(this.G / y * f * j.GetMass()), c.IsAwake() && c.ApplyForce(m, e), m.Multiply(-1), j.IsAwake() && j.ApplyForce(m, l));
      }
    };
    Box2D.inherit(y, Box2D.Dynamics.Controllers.b2Controller);
    y.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
    y.b2TensorDampingController = function () {
      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
      this.T = new b();
      this.maxTimestep = 0;
    };
    y.prototype.SetAxisAligned = function (b, c) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      this.T.col1.x = -b;
      this.T.col1.y = 0;
      this.T.col2.x = 0;
      this.T.col2.y = -c;
      this.maxTimestep = 0 < b || 0 < c ? 1 / Math.max(b, c) : 0;
    };
    y.prototype.Step = function (b) {
      b = b.dt;
      if (!(b <= Number.MIN_VALUE)) {
        b > this.maxTimestep && 0 < this.maxTimestep && (b = this.maxTimestep);
        for (var e = this.m_bodyList; e; e = e.nextBody) {
          var f = e.body;
          if (f.IsAwake()) {
            var g = f.GetWorldVector(c.MulMV(this.T, f.GetLocalVector(f.GetLinearVelocity())));
            f.SetLinearVelocity(new d(f.GetLinearVelocity().x + g.x * b, f.GetLinearVelocity().y + g.y * b));
          }
        }
      }
    };
  })();
  (function () {
    var b = Box2D.Common.b2Settings,
      c = Box2D.Common.Math.b2Mat22,
      d = Box2D.Common.Math.b2Mat33,
      e = Box2D.Common.Math.b2Math,
      f = Box2D.Common.Math.b2Vec2,
      j = Box2D.Common.Math.b2Vec3,
      m = Box2D.Dynamics.Joints.b2DistanceJoint,
      l = Box2D.Dynamics.Joints.b2DistanceJointDef,
      g = Box2D.Dynamics.Joints.b2FrictionJoint,
      q = Box2D.Dynamics.Joints.b2FrictionJointDef,
      y = Box2D.Dynamics.Joints.b2GearJoint,
      z = Box2D.Dynamics.Joints.b2GearJointDef,
      A = Box2D.Dynamics.Joints.b2Jacobian,
      B = Box2D.Dynamics.Joints.b2Joint,
      H = Box2D.Dynamics.Joints.b2JointDef,
      D = Box2D.Dynamics.Joints.b2JointEdge,
      s = Box2D.Dynamics.Joints.b2LineJoint,
      G = Box2D.Dynamics.Joints.b2LineJointDef,
      F = Box2D.Dynamics.Joints.b2MouseJoint,
      K = Box2D.Dynamics.Joints.b2MouseJointDef,
      L = Box2D.Dynamics.Joints.b2PrismaticJoint,
      R = Box2D.Dynamics.Joints.b2PrismaticJointDef,
      I = Box2D.Dynamics.Joints.b2PulleyJoint,
      fa = Box2D.Dynamics.Joints.b2PulleyJointDef,
      N = Box2D.Dynamics.Joints.b2RevoluteJoint,
      P = Box2D.Dynamics.Joints.b2RevoluteJointDef,
      ba = Box2D.Dynamics.Joints.b2WeldJoint,
      V = Box2D.Dynamics.Joints.b2WeldJointDef;
    Box2D.inherit(m, Box2D.Dynamics.Joints.b2Joint);
    m.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
    m.b2DistanceJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_localAnchor1 = new f();
      this.m_localAnchor2 = new f();
      this.m_u = new f();
    };
    m.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
    };
    m.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
    };
    m.prototype.GetReactionForce = function (b) {
      void 0 === b && (b = 0);
      return new f(b * this.m_impulse * this.m_u.x, b * this.m_impulse * this.m_u.y);
    };
    m.prototype.GetReactionTorque = function () {
      return 0;
    };
    m.prototype.GetLength = function () {
      return this.m_length;
    };
    m.prototype.SetLength = function (b) {
      void 0 === b && (b = 0);
      this.m_length = b;
    };
    m.prototype.GetFrequency = function () {
      return this.m_frequencyHz;
    };
    m.prototype.SetFrequency = function (b) {
      void 0 === b && (b = 0);
      this.m_frequencyHz = b;
    };
    m.prototype.GetDampingRatio = function () {
      return this.m_dampingRatio;
    };
    m.prototype.SetDampingRatio = function (b) {
      void 0 === b && (b = 0);
      this.m_dampingRatio = b;
    };
    m.prototype.b2DistanceJoint = function (b) {
      this.__super.b2Joint.call(this, b);
      this.m_localAnchor1.SetV(b.localAnchorA);
      this.m_localAnchor2.SetV(b.localAnchorB);
      this.m_length = b.length;
      this.m_frequencyHz = b.frequencyHz;
      this.m_dampingRatio = b.dampingRatio;
      this.m_bias = this.m_gamma = this.m_impulse = 0;
    };
    m.prototype.InitVelocityConstraints = function (c) {
      var d,
        e = 0,
        f = this.m_bodyA,
        g = this.m_bodyB;
      d = f.m_xf.R;
      var j = this.m_localAnchor1.x - f.m_sweep.localCenter.x,
        l = this.m_localAnchor1.y - f.m_sweep.localCenter.y,
        e = d.col1.x * j + d.col2.x * l,
        l = d.col1.y * j + d.col2.y * l,
        j = e;
      d = g.m_xf.R;
      var n = this.m_localAnchor2.x - g.m_sweep.localCenter.x,
        m = this.m_localAnchor2.y - g.m_sweep.localCenter.y,
        e = d.col1.x * n + d.col2.x * m,
        m = d.col1.y * n + d.col2.y * m,
        n = e;
      this.m_u.x = g.m_sweep.c.x + n - f.m_sweep.c.x - j;
      this.m_u.y = g.m_sweep.c.y + m - f.m_sweep.c.y - l;
      e = Math.sqrt(this.m_u.x * this.m_u.x + this.m_u.y * this.m_u.y);
      e > b.b2_linearSlop ? this.m_u.Multiply(1 / e) : this.m_u.SetZero();
      d = j * this.m_u.y - l * this.m_u.x;
      var q = n * this.m_u.y - m * this.m_u.x;
      d = f.m_invMass + f.m_invI * d * d + g.m_invMass + g.m_invI * q * q;
      this.m_mass = 0 != d ? 1 / d : 0;
      if (0 < this.m_frequencyHz) {
        var e = e - this.m_length,
          q = 2 * Math.PI * this.m_frequencyHz,
          x = this.m_mass * q * q;
        this.m_gamma = c.dt * (2 * this.m_mass * this.m_dampingRatio * q + c.dt * x);
        this.m_gamma = 0 != this.m_gamma ? 1 / this.m_gamma : 0;
        this.m_bias = e * c.dt * x * this.m_gamma;
        this.m_mass = d + this.m_gamma;
        this.m_mass = 0 != this.m_mass ? 1 / this.m_mass : 0;
      }
      c.warmStarting ? (this.m_impulse *= c.dtRatio, c = this.m_impulse * this.m_u.x, d = this.m_impulse * this.m_u.y, f.m_linearVelocity.x -= f.m_invMass * c, f.m_linearVelocity.y -= f.m_invMass * d, f.m_angularVelocity -= f.m_invI * (j * d - l * c), g.m_linearVelocity.x += g.m_invMass * c, g.m_linearVelocity.y += g.m_invMass * d, g.m_angularVelocity += g.m_invI * (n * d - m * c)) : this.m_impulse = 0;
    };
    m.prototype.SolveVelocityConstraints = function () {
      var b,
        c = this.m_bodyA,
        d = this.m_bodyB;
      b = c.m_xf.R;
      var e = this.m_localAnchor1.x - c.m_sweep.localCenter.x,
        f = this.m_localAnchor1.y - c.m_sweep.localCenter.y,
        g = b.col1.x * e + b.col2.x * f,
        f = b.col1.y * e + b.col2.y * f,
        e = g;
      b = d.m_xf.R;
      var j = this.m_localAnchor2.x - d.m_sweep.localCenter.x,
        l = this.m_localAnchor2.y - d.m_sweep.localCenter.y,
        g = b.col1.x * j + b.col2.x * l,
        l = b.col1.y * j + b.col2.y * l,
        j = g,
        g = -this.m_mass * (this.m_u.x * (d.m_linearVelocity.x + -d.m_angularVelocity * l - (c.m_linearVelocity.x + -c.m_angularVelocity * f)) + this.m_u.y * (d.m_linearVelocity.y + d.m_angularVelocity * j - (c.m_linearVelocity.y + c.m_angularVelocity * e)) + this.m_bias + this.m_gamma * this.m_impulse);
      this.m_impulse += g;
      b = g * this.m_u.x;
      g *= this.m_u.y;
      c.m_linearVelocity.x -= c.m_invMass * b;
      c.m_linearVelocity.y -= c.m_invMass * g;
      c.m_angularVelocity -= c.m_invI * (e * g - f * b);
      d.m_linearVelocity.x += d.m_invMass * b;
      d.m_linearVelocity.y += d.m_invMass * g;
      d.m_angularVelocity += d.m_invI * (j * g - l * b);
    };
    m.prototype.SolvePositionConstraints = function () {
      var c;
      if (0 < this.m_frequencyHz) return !0;
      var d = this.m_bodyA,
        f = this.m_bodyB;
      c = d.m_xf.R;
      var g = this.m_localAnchor1.x - d.m_sweep.localCenter.x,
        j = this.m_localAnchor1.y - d.m_sweep.localCenter.y,
        l = c.col1.x * g + c.col2.x * j,
        j = c.col1.y * g + c.col2.y * j,
        g = l;
      c = f.m_xf.R;
      var m = this.m_localAnchor2.x - f.m_sweep.localCenter.x,
        n = this.m_localAnchor2.y - f.m_sweep.localCenter.y,
        l = c.col1.x * m + c.col2.x * n,
        n = c.col1.y * m + c.col2.y * n,
        m = l,
        l = f.m_sweep.c.x + m - d.m_sweep.c.x - g,
        u = f.m_sweep.c.y + n - d.m_sweep.c.y - j;
      c = Math.sqrt(l * l + u * u);
      l /= c;
      u /= c;
      c -= this.m_length;
      c = e.Clamp(c, -b.b2_maxLinearCorrection, b.b2_maxLinearCorrection);
      var q = -this.m_mass * c;
      this.m_u.Set(l, u);
      l = q * this.m_u.x;
      u = q * this.m_u.y;
      d.m_sweep.c.x -= d.m_invMass * l;
      d.m_sweep.c.y -= d.m_invMass * u;
      d.m_sweep.a -= d.m_invI * (g * u - j * l);
      f.m_sweep.c.x += f.m_invMass * l;
      f.m_sweep.c.y += f.m_invMass * u;
      f.m_sweep.a += f.m_invI * (m * u - n * l);
      d.SynchronizeTransform();
      f.SynchronizeTransform();
      return e.Abs(c) < b.b2_linearSlop;
    };
    Box2D.inherit(l, Box2D.Dynamics.Joints.b2JointDef);
    l.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
    l.b2DistanceJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new f();
      this.localAnchorB = new f();
    };
    l.prototype.b2DistanceJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = B.e_distanceJoint;
      this.length = 1;
      this.dampingRatio = this.frequencyHz = 0;
    };
    l.prototype.Initialize = function (b, c, d, e) {
      this.bodyA = b;
      this.bodyB = c;
      this.localAnchorA.SetV(this.bodyA.GetLocalPoint(d));
      this.localAnchorB.SetV(this.bodyB.GetLocalPoint(e));
      b = e.x - d.x;
      d = e.y - d.y;
      this.length = Math.sqrt(b * b + d * d);
      this.dampingRatio = this.frequencyHz = 0;
    };
    Box2D.inherit(g, Box2D.Dynamics.Joints.b2Joint);
    g.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
    g.b2FrictionJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_localAnchorA = new f();
      this.m_localAnchorB = new f();
      this.m_linearMass = new c();
      this.m_linearImpulse = new f();
    };
    g.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
    };
    g.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
    };
    g.prototype.GetReactionForce = function (b) {
      void 0 === b && (b = 0);
      return new f(b * this.m_linearImpulse.x, b * this.m_linearImpulse.y);
    };
    g.prototype.GetReactionTorque = function (b) {
      void 0 === b && (b = 0);
      return b * this.m_angularImpulse;
    };
    g.prototype.SetMaxForce = function (b) {
      void 0 === b && (b = 0);
      this.m_maxForce = b;
    };
    g.prototype.GetMaxForce = function () {
      return this.m_maxForce;
    };
    g.prototype.SetMaxTorque = function (b) {
      void 0 === b && (b = 0);
      this.m_maxTorque = b;
    };
    g.prototype.GetMaxTorque = function () {
      return this.m_maxTorque;
    };
    g.prototype.b2FrictionJoint = function (b) {
      this.__super.b2Joint.call(this, b);
      this.m_localAnchorA.SetV(b.localAnchorA);
      this.m_localAnchorB.SetV(b.localAnchorB);
      this.m_linearMass.SetZero();
      this.m_angularMass = 0;
      this.m_linearImpulse.SetZero();
      this.m_angularImpulse = 0;
      this.m_maxForce = b.maxForce;
      this.m_maxTorque = b.maxTorque;
    };
    g.prototype.InitVelocityConstraints = function (b) {
      var d,
        e = 0,
        f = this.m_bodyA,
        g = this.m_bodyB;
      d = f.m_xf.R;
      var j = this.m_localAnchorA.x - f.m_sweep.localCenter.x,
        l = this.m_localAnchorA.y - f.m_sweep.localCenter.y,
        e = d.col1.x * j + d.col2.x * l,
        l = d.col1.y * j + d.col2.y * l,
        j = e;
      d = g.m_xf.R;
      var n = this.m_localAnchorB.x - g.m_sweep.localCenter.x,
        m = this.m_localAnchorB.y - g.m_sweep.localCenter.y,
        e = d.col1.x * n + d.col2.x * m,
        m = d.col1.y * n + d.col2.y * m,
        n = e;
      d = f.m_invMass;
      var e = g.m_invMass,
        q = f.m_invI,
        x = g.m_invI,
        s = new c();
      s.col1.x = d + e;
      s.col2.x = 0;
      s.col1.y = 0;
      s.col2.y = d + e;
      s.col1.x += q * l * l;
      s.col2.x += -q * j * l;
      s.col1.y += -q * j * l;
      s.col2.y += q * j * j;
      s.col1.x += x * m * m;
      s.col2.x += -x * n * m;
      s.col1.y += -x * n * m;
      s.col2.y += x * n * n;
      s.GetInverse(this.m_linearMass);
      this.m_angularMass = q + x;
      0 < this.m_angularMass && (this.m_angularMass = 1 / this.m_angularMass);
      b.warmStarting ? (this.m_linearImpulse.x *= b.dtRatio, this.m_linearImpulse.y *= b.dtRatio, this.m_angularImpulse *= b.dtRatio, b = this.m_linearImpulse, f.m_linearVelocity.x -= d * b.x, f.m_linearVelocity.y -= d * b.y, f.m_angularVelocity -= q * (j * b.y - l * b.x + this.m_angularImpulse), g.m_linearVelocity.x += e * b.x, g.m_linearVelocity.y += e * b.y, g.m_angularVelocity += x * (n * b.y - m * b.x + this.m_angularImpulse)) : (this.m_linearImpulse.SetZero(), this.m_angularImpulse = 0);
    };
    g.prototype.SolveVelocityConstraints = function (b) {
      var c,
        d = 0,
        g = this.m_bodyA,
        j = this.m_bodyB,
        l = g.m_linearVelocity,
        m = g.m_angularVelocity,
        n = j.m_linearVelocity,
        u = j.m_angularVelocity,
        q = g.m_invMass,
        x = j.m_invMass,
        s = g.m_invI,
        y = j.m_invI;
      c = g.m_xf.R;
      var z = this.m_localAnchorA.x - g.m_sweep.localCenter.x,
        A = this.m_localAnchorA.y - g.m_sweep.localCenter.y,
        d = c.col1.x * z + c.col2.x * A,
        A = c.col1.y * z + c.col2.y * A,
        z = d;
      c = j.m_xf.R;
      var B = this.m_localAnchorB.x - j.m_sweep.localCenter.x,
        D = this.m_localAnchorB.y - j.m_sweep.localCenter.y,
        d = c.col1.x * B + c.col2.x * D,
        D = c.col1.y * B + c.col2.y * D,
        B = d,
        d = -this.m_angularMass * (u - m),
        F = this.m_angularImpulse;
      c = b.dt * this.m_maxTorque;
      this.m_angularImpulse = e.Clamp(this.m_angularImpulse + d, -c, c);
      d = this.m_angularImpulse - F;
      m -= s * d;
      u += y * d;
      c = e.MulMV(this.m_linearMass, new f(-(n.x - u * D - l.x + m * A), -(n.y + u * B - l.y - m * z)));
      d = this.m_linearImpulse.Copy();
      this.m_linearImpulse.Add(c);
      c = b.dt * this.m_maxForce;
      this.m_linearImpulse.LengthSquared() > c * c && (this.m_linearImpulse.Normalize(), this.m_linearImpulse.Multiply(c));
      c = e.SubtractVV(this.m_linearImpulse, d);
      l.x -= q * c.x;
      l.y -= q * c.y;
      m -= s * (z * c.y - A * c.x);
      n.x += x * c.x;
      n.y += x * c.y;
      u += y * (B * c.y - D * c.x);
      g.m_angularVelocity = m;
      j.m_angularVelocity = u;
    };
    g.prototype.SolvePositionConstraints = function () {
      return !0;
    };
    Box2D.inherit(q, Box2D.Dynamics.Joints.b2JointDef);
    q.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
    q.b2FrictionJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new f();
      this.localAnchorB = new f();
    };
    q.prototype.b2FrictionJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = B.e_frictionJoint;
      this.maxTorque = this.maxForce = 0;
    };
    q.prototype.Initialize = function (b, c, d) {
      this.bodyA = b;
      this.bodyB = c;
      this.localAnchorA.SetV(this.bodyA.GetLocalPoint(d));
      this.localAnchorB.SetV(this.bodyB.GetLocalPoint(d));
    };
    Box2D.inherit(y, Box2D.Dynamics.Joints.b2Joint);
    y.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
    y.b2GearJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_groundAnchor1 = new f();
      this.m_groundAnchor2 = new f();
      this.m_localAnchor1 = new f();
      this.m_localAnchor2 = new f();
      this.m_J = new A();
    };
    y.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
    };
    y.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
    };
    y.prototype.GetReactionForce = function (b) {
      void 0 === b && (b = 0);
      return new f(b * this.m_impulse * this.m_J.linearB.x, b * this.m_impulse * this.m_J.linearB.y);
    };
    y.prototype.GetReactionTorque = function (b) {
      void 0 === b && (b = 0);
      var c = this.m_bodyB.m_xf.R,
        d = this.m_localAnchor1.x - this.m_bodyB.m_sweep.localCenter.x,
        e = this.m_localAnchor1.y - this.m_bodyB.m_sweep.localCenter.y,
        f = c.col1.x * d + c.col2.x * e,
        e = c.col1.y * d + c.col2.y * e;
      return b * (this.m_impulse * this.m_J.angularB - f * this.m_impulse * this.m_J.linearB.y + e * this.m_impulse * this.m_J.linearB.x);
    };
    y.prototype.GetRatio = function () {
      return this.m_ratio;
    };
    y.prototype.SetRatio = function (b) {
      void 0 === b && (b = 0);
      this.m_ratio = b;
    };
    y.prototype.b2GearJoint = function (b) {
      this.__super.b2Joint.call(this, b);
      var c = parseInt(b.joint1.m_type),
        d = parseInt(b.joint2.m_type);
      this.m_prismatic2 = this.m_revolute2 = this.m_prismatic1 = this.m_revolute1 = null;
      var e = 0,
        f = 0;
      this.m_ground1 = b.joint1.GetBodyA();
      this.m_bodyA = b.joint1.GetBodyB();
      c == B.e_revoluteJoint ? (this.m_revolute1 = b.joint1 instanceof N ? b.joint1 : null, this.m_groundAnchor1.SetV(this.m_revolute1.m_localAnchor1), this.m_localAnchor1.SetV(this.m_revolute1.m_localAnchor2), e = this.m_revolute1.GetJointAngle()) : (this.m_prismatic1 = b.joint1 instanceof L ? b.joint1 : null, this.m_groundAnchor1.SetV(this.m_prismatic1.m_localAnchor1), this.m_localAnchor1.SetV(this.m_prismatic1.m_localAnchor2), e = this.m_prismatic1.GetJointTranslation());
      this.m_ground2 = b.joint2.GetBodyA();
      this.m_bodyB = b.joint2.GetBodyB();
      d == B.e_revoluteJoint ? (this.m_revolute2 = b.joint2 instanceof N ? b.joint2 : null, this.m_groundAnchor2.SetV(this.m_revolute2.m_localAnchor1), this.m_localAnchor2.SetV(this.m_revolute2.m_localAnchor2), f = this.m_revolute2.GetJointAngle()) : (this.m_prismatic2 = b.joint2 instanceof L ? b.joint2 : null, this.m_groundAnchor2.SetV(this.m_prismatic2.m_localAnchor1), this.m_localAnchor2.SetV(this.m_prismatic2.m_localAnchor2), f = this.m_prismatic2.GetJointTranslation());
      this.m_ratio = b.ratio;
      this.m_constant = e + this.m_ratio * f;
      this.m_impulse = 0;
    };
    y.prototype.InitVelocityConstraints = function (b) {
      var c = this.m_ground1,
        d = this.m_ground2,
        e = this.m_bodyA,
        f = this.m_bodyB,
        g = 0,
        j = 0,
        l = 0,
        m = 0,
        q = 0,
        x = 0;
      this.m_J.SetZero();
      this.m_revolute1 ? (this.m_J.angularA = -1, x += e.m_invI) : (c = c.m_xf.R, j = this.m_prismatic1.m_localXAxis1, g = c.col1.x * j.x + c.col2.x * j.y, j = c.col1.y * j.x + c.col2.y * j.y, c = e.m_xf.R, l = this.m_localAnchor1.x - e.m_sweep.localCenter.x, m = this.m_localAnchor1.y - e.m_sweep.localCenter.y, q = c.col1.x * l + c.col2.x * m, m = c.col1.y * l + c.col2.y * m, l = q * j - m * g, this.m_J.linearA.Set(-g, -j), this.m_J.angularA = -l, x += e.m_invMass + e.m_invI * l * l);
      this.m_revolute2 ? (this.m_J.angularB = -this.m_ratio, x += this.m_ratio * this.m_ratio * f.m_invI) : (c = d.m_xf.R, j = this.m_prismatic2.m_localXAxis1, g = c.col1.x * j.x + c.col2.x * j.y, j = c.col1.y * j.x + c.col2.y * j.y, c = f.m_xf.R, l = this.m_localAnchor2.x - f.m_sweep.localCenter.x, m = this.m_localAnchor2.y - f.m_sweep.localCenter.y, q = c.col1.x * l + c.col2.x * m, m = c.col1.y * l + c.col2.y * m, l = q * j - m * g, this.m_J.linearB.Set(-this.m_ratio * g, -this.m_ratio * j), this.m_J.angularB = -this.m_ratio * l, x += this.m_ratio * this.m_ratio * (f.m_invMass + f.m_invI * l * l));
      this.m_mass = 0 < x ? 1 / x : 0;
      b.warmStarting ? (e.m_linearVelocity.x += e.m_invMass * this.m_impulse * this.m_J.linearA.x, e.m_linearVelocity.y += e.m_invMass * this.m_impulse * this.m_J.linearA.y, e.m_angularVelocity += e.m_invI * this.m_impulse * this.m_J.angularA, f.m_linearVelocity.x += f.m_invMass * this.m_impulse * this.m_J.linearB.x, f.m_linearVelocity.y += f.m_invMass * this.m_impulse * this.m_J.linearB.y, f.m_angularVelocity += f.m_invI * this.m_impulse * this.m_J.angularB) : this.m_impulse = 0;
    };
    y.prototype.SolveVelocityConstraints = function () {
      var b = this.m_bodyA,
        c = this.m_bodyB,
        d = -this.m_mass * this.m_J.Compute(b.m_linearVelocity, b.m_angularVelocity, c.m_linearVelocity, c.m_angularVelocity);
      this.m_impulse += d;
      b.m_linearVelocity.x += b.m_invMass * d * this.m_J.linearA.x;
      b.m_linearVelocity.y += b.m_invMass * d * this.m_J.linearA.y;
      b.m_angularVelocity += b.m_invI * d * this.m_J.angularA;
      c.m_linearVelocity.x += c.m_invMass * d * this.m_J.linearB.x;
      c.m_linearVelocity.y += c.m_invMass * d * this.m_J.linearB.y;
      c.m_angularVelocity += c.m_invI * d * this.m_J.angularB;
    };
    y.prototype.SolvePositionConstraints = function () {
      var c = this.m_bodyA,
        d = this.m_bodyB,
        e = 0,
        f = 0,
        e = this.m_revolute1 ? this.m_revolute1.GetJointAngle() : this.m_prismatic1.GetJointTranslation(),
        f = this.m_revolute2 ? this.m_revolute2.GetJointAngle() : this.m_prismatic2.GetJointTranslation(),
        e = -this.m_mass * (this.m_constant - (e + this.m_ratio * f));
      c.m_sweep.c.x += c.m_invMass * e * this.m_J.linearA.x;
      c.m_sweep.c.y += c.m_invMass * e * this.m_J.linearA.y;
      c.m_sweep.a += c.m_invI * e * this.m_J.angularA;
      d.m_sweep.c.x += d.m_invMass * e * this.m_J.linearB.x;
      d.m_sweep.c.y += d.m_invMass * e * this.m_J.linearB.y;
      d.m_sweep.a += d.m_invI * e * this.m_J.angularB;
      c.SynchronizeTransform();
      d.SynchronizeTransform();
      return 0 < b.b2_linearSlop;
    };
    Box2D.inherit(z, Box2D.Dynamics.Joints.b2JointDef);
    z.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
    z.b2GearJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
    };
    z.prototype.b2GearJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = B.e_gearJoint;
      this.joint2 = this.joint1 = null;
      this.ratio = 1;
    };
    A.b2Jacobian = function () {
      this.linearA = new f();
      this.linearB = new f();
    };
    A.prototype.SetZero = function () {
      this.linearA.SetZero();
      this.angularA = 0;
      this.linearB.SetZero();
      this.angularB = 0;
    };
    A.prototype.Set = function (b, c, d, e) {
      void 0 === c && (c = 0);
      void 0 === e && (e = 0);
      this.linearA.SetV(b);
      this.angularA = c;
      this.linearB.SetV(d);
      this.angularB = e;
    };
    A.prototype.Compute = function (b, c, d, e) {
      void 0 === c && (c = 0);
      void 0 === e && (e = 0);
      return this.linearA.x * b.x + this.linearA.y * b.y + this.angularA * c + (this.linearB.x * d.x + this.linearB.y * d.y) + this.angularB * e;
    };
    B.b2Joint = function () {
      this.m_edgeA = new D();
      this.m_edgeB = new D();
      this.m_localCenterA = new f();
      this.m_localCenterB = new f();
    };
    B.prototype.GetType = function () {
      return this.m_type;
    };
    B.prototype.GetAnchorA = function () {
      return null;
    };
    B.prototype.GetAnchorB = function () {
      return null;
    };
    B.prototype.GetReactionForce = function () {
      return null;
    };
    B.prototype.GetReactionTorque = function () {
      return 0;
    };
    B.prototype.GetBodyA = function () {
      return this.m_bodyA;
    };
    B.prototype.GetBodyB = function () {
      return this.m_bodyB;
    };
    B.prototype.GetNext = function () {
      return this.m_next;
    };
    B.prototype.GetUserData = function () {
      return this.m_userData;
    };
    B.prototype.SetUserData = function (b) {
      this.m_userData = b;
    };
    B.prototype.IsActive = function () {
      return this.m_bodyA.IsActive() && this.m_bodyB.IsActive();
    };
    B.Create = function (b) {
      var c = null;
      switch (b.type) {
        case B.e_distanceJoint:
          c = new m(b instanceof l ? b : null);
          break;
        case B.e_mouseJoint:
          c = new F(b instanceof K ? b : null);
          break;
        case B.e_prismaticJoint:
          c = new L(b instanceof R ? b : null);
          break;
        case B.e_revoluteJoint:
          c = new N(b instanceof P ? b : null);
          break;
        case B.e_pulleyJoint:
          c = new I(b instanceof fa ? b : null);
          break;
        case B.e_gearJoint:
          c = new y(b instanceof z ? b : null);
          break;
        case B.e_lineJoint:
          c = new s(b instanceof G ? b : null);
          break;
        case B.e_weldJoint:
          c = new ba(b instanceof V ? b : null);
          break;
        case B.e_frictionJoint:
          c = new g(b instanceof q ? b : null);
      }
      return c;
    };
    B.Destroy = function () {};
    B.prototype.b2Joint = function (c) {
      b.b2Assert(c.bodyA != c.bodyB);
      this.m_type = c.type;
      this.m_next = this.m_prev = null;
      this.m_bodyA = c.bodyA;
      this.m_bodyB = c.bodyB;
      this.m_collideConnected = c.collideConnected;
      this.m_islandFlag = !1;
      this.m_userData = c.userData;
    };
    B.prototype.InitVelocityConstraints = function () {};
    B.prototype.SolveVelocityConstraints = function () {};
    B.prototype.FinalizeVelocityConstraints = function () {};
    B.prototype.SolvePositionConstraints = function () {
      return !1;
    };
    Box2D.postDefs.push(function () {
      Box2D.Dynamics.Joints.b2Joint.e_unknownJoint = 0;
      Box2D.Dynamics.Joints.b2Joint.e_revoluteJoint = 1;
      Box2D.Dynamics.Joints.b2Joint.e_prismaticJoint = 2;
      Box2D.Dynamics.Joints.b2Joint.e_distanceJoint = 3;
      Box2D.Dynamics.Joints.b2Joint.e_pulleyJoint = 4;
      Box2D.Dynamics.Joints.b2Joint.e_mouseJoint = 5;
      Box2D.Dynamics.Joints.b2Joint.e_gearJoint = 6;
      Box2D.Dynamics.Joints.b2Joint.e_lineJoint = 7;
      Box2D.Dynamics.Joints.b2Joint.e_weldJoint = 8;
      Box2D.Dynamics.Joints.b2Joint.e_frictionJoint = 9;
      Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit = 0;
      Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit = 1;
      Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit = 2;
      Box2D.Dynamics.Joints.b2Joint.e_equalLimits = 3;
    });
    H.b2JointDef = function () {};
    H.prototype.b2JointDef = function () {
      this.type = B.e_unknownJoint;
      this.bodyB = this.bodyA = this.userData = null;
      this.collideConnected = !1;
    };
    D.b2JointEdge = function () {};
    Box2D.inherit(s, Box2D.Dynamics.Joints.b2Joint);
    s.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
    s.b2LineJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_localAnchor1 = new f();
      this.m_localAnchor2 = new f();
      this.m_localXAxis1 = new f();
      this.m_localYAxis1 = new f();
      this.m_axis = new f();
      this.m_perp = new f();
      this.m_K = new c();
      this.m_impulse = new f();
    };
    s.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
    };
    s.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
    };
    s.prototype.GetReactionForce = function (b) {
      void 0 === b && (b = 0);
      return new f(b * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x), b * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y));
    };
    s.prototype.GetReactionTorque = function (b) {
      void 0 === b && (b = 0);
      return b * this.m_impulse.y;
    };
    s.prototype.GetJointTranslation = function () {
      var b = this.m_bodyA,
        c = this.m_bodyB,
        d = b.GetWorldPoint(this.m_localAnchor1),
        e = c.GetWorldPoint(this.m_localAnchor2),
        c = e.x - d.x,
        d = e.y - d.y,
        b = b.GetWorldVector(this.m_localXAxis1);
      return b.x * c + b.y * d;
    };
    s.prototype.GetJointSpeed = function () {
      var b = this.m_bodyA,
        c = this.m_bodyB,
        d;
      d = b.m_xf.R;
      var e = this.m_localAnchor1.x - b.m_sweep.localCenter.x,
        f = this.m_localAnchor1.y - b.m_sweep.localCenter.y,
        g = d.col1.x * e + d.col2.x * f,
        f = d.col1.y * e + d.col2.y * f,
        e = g;
      d = c.m_xf.R;
      var j = this.m_localAnchor2.x - c.m_sweep.localCenter.x,
        l = this.m_localAnchor2.y - c.m_sweep.localCenter.y,
        g = d.col1.x * j + d.col2.x * l,
        l = d.col1.y * j + d.col2.y * l,
        j = g;
      d = c.m_sweep.c.x + j - (b.m_sweep.c.x + e);
      var g = c.m_sweep.c.y + l - (b.m_sweep.c.y + f),
        m = b.GetWorldVector(this.m_localXAxis1),
        q = b.m_linearVelocity,
        x = c.m_linearVelocity,
        b = b.m_angularVelocity,
        c = c.m_angularVelocity;
      return d * -b * m.y + g * b * m.x + (m.x * (x.x + -c * l - q.x - -b * f) + m.y * (x.y + c * j - q.y - b * e));
    };
    s.prototype.IsLimitEnabled = function () {
      return this.m_enableLimit;
    };
    s.prototype.EnableLimit = function (b) {
      this.m_bodyA.SetAwake(!0);
      this.m_bodyB.SetAwake(!0);
      this.m_enableLimit = b;
    };
    s.prototype.GetLowerLimit = function () {
      return this.m_lowerTranslation;
    };
    s.prototype.GetUpperLimit = function () {
      return this.m_upperTranslation;
    };
    s.prototype.SetLimits = function (b, c) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      this.m_bodyA.SetAwake(!0);
      this.m_bodyB.SetAwake(!0);
      this.m_lowerTranslation = b;
      this.m_upperTranslation = c;
    };
    s.prototype.IsMotorEnabled = function () {
      return this.m_enableMotor;
    };
    s.prototype.EnableMotor = function (b) {
      this.m_bodyA.SetAwake(!0);
      this.m_bodyB.SetAwake(!0);
      this.m_enableMotor = b;
    };
    s.prototype.SetMotorSpeed = function (b) {
      void 0 === b && (b = 0);
      this.m_bodyA.SetAwake(!0);
      this.m_bodyB.SetAwake(!0);
      this.m_motorSpeed = b;
    };
    s.prototype.GetMotorSpeed = function () {
      return this.m_motorSpeed;
    };
    s.prototype.SetMaxMotorForce = function (b) {
      void 0 === b && (b = 0);
      this.m_bodyA.SetAwake(!0);
      this.m_bodyB.SetAwake(!0);
      this.m_maxMotorForce = b;
    };
    s.prototype.GetMaxMotorForce = function () {
      return this.m_maxMotorForce;
    };
    s.prototype.GetMotorForce = function () {
      return this.m_motorImpulse;
    };
    s.prototype.b2LineJoint = function (b) {
      this.__super.b2Joint.call(this, b);
      this.m_localAnchor1.SetV(b.localAnchorA);
      this.m_localAnchor2.SetV(b.localAnchorB);
      this.m_localXAxis1.SetV(b.localAxisA);
      this.m_localYAxis1.x = -this.m_localXAxis1.y;
      this.m_localYAxis1.y = this.m_localXAxis1.x;
      this.m_impulse.SetZero();
      this.m_motorImpulse = this.m_motorMass = 0;
      this.m_lowerTranslation = b.lowerTranslation;
      this.m_upperTranslation = b.upperTranslation;
      this.m_maxMotorForce = b.maxMotorForce;
      this.m_motorSpeed = b.motorSpeed;
      this.m_enableLimit = b.enableLimit;
      this.m_enableMotor = b.enableMotor;
      this.m_limitState = B.e_inactiveLimit;
      this.m_axis.SetZero();
      this.m_perp.SetZero();
    };
    s.prototype.InitVelocityConstraints = function (c) {
      var d = this.m_bodyA,
        f = this.m_bodyB,
        g,
        j = 0;
      this.m_localCenterA.SetV(d.GetLocalCenter());
      this.m_localCenterB.SetV(f.GetLocalCenter());
      var l = d.GetTransform();
      f.GetTransform();
      g = d.m_xf.R;
      var m = this.m_localAnchor1.x - this.m_localCenterA.x,
        n = this.m_localAnchor1.y - this.m_localCenterA.y,
        j = g.col1.x * m + g.col2.x * n,
        n = g.col1.y * m + g.col2.y * n,
        m = j;
      g = f.m_xf.R;
      var u = this.m_localAnchor2.x - this.m_localCenterB.x,
        q = this.m_localAnchor2.y - this.m_localCenterB.y,
        j = g.col1.x * u + g.col2.x * q,
        q = g.col1.y * u + g.col2.y * q,
        u = j;
      g = f.m_sweep.c.x + u - d.m_sweep.c.x - m;
      j = f.m_sweep.c.y + q - d.m_sweep.c.y - n;
      this.m_invMassA = d.m_invMass;
      this.m_invMassB = f.m_invMass;
      this.m_invIA = d.m_invI;
      this.m_invIB = f.m_invI;
      this.m_axis.SetV(e.MulMV(l.R, this.m_localXAxis1));
      this.m_a1 = (g + m) * this.m_axis.y - (j + n) * this.m_axis.x;
      this.m_a2 = u * this.m_axis.y - q * this.m_axis.x;
      this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;
      this.m_motorMass = this.m_motorMass > Number.MIN_VALUE ? 1 / this.m_motorMass : 0;
      this.m_perp.SetV(e.MulMV(l.R, this.m_localYAxis1));
      this.m_s1 = (g + m) * this.m_perp.y - (j + n) * this.m_perp.x;
      this.m_s2 = u * this.m_perp.y - q * this.m_perp.x;
      l = this.m_invMassA;
      m = this.m_invMassB;
      n = this.m_invIA;
      u = this.m_invIB;
      this.m_K.col1.x = l + m + n * this.m_s1 * this.m_s1 + u * this.m_s2 * this.m_s2;
      this.m_K.col1.y = n * this.m_s1 * this.m_a1 + u * this.m_s2 * this.m_a2;
      this.m_K.col2.x = this.m_K.col1.y;
      this.m_K.col2.y = l + m + n * this.m_a1 * this.m_a1 + u * this.m_a2 * this.m_a2;
      this.m_enableLimit ? (g = this.m_axis.x * g + this.m_axis.y * j, e.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b.b2_linearSlop ? this.m_limitState = B.e_equalLimits : g <= this.m_lowerTranslation ? this.m_limitState != B.e_atLowerLimit && (this.m_limitState = B.e_atLowerLimit, this.m_impulse.y = 0) : g >= this.m_upperTranslation ? this.m_limitState != B.e_atUpperLimit && (this.m_limitState = B.e_atUpperLimit, this.m_impulse.y = 0) : (this.m_limitState = B.e_inactiveLimit, this.m_impulse.y = 0)) : this.m_limitState = B.e_inactiveLimit;
      !1 == this.m_enableMotor && (this.m_motorImpulse = 0);
      c.warmStarting ? (this.m_impulse.x *= c.dtRatio, this.m_impulse.y *= c.dtRatio, this.m_motorImpulse *= c.dtRatio, c = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x, g = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y, j = this.m_impulse.x * this.m_s1 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a1, l = this.m_impulse.x * this.m_s2 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a2, d.m_linearVelocity.x -= this.m_invMassA * c, d.m_linearVelocity.y -= this.m_invMassA * g, d.m_angularVelocity -= this.m_invIA * j, f.m_linearVelocity.x += this.m_invMassB * c, f.m_linearVelocity.y += this.m_invMassB * g, f.m_angularVelocity += this.m_invIB * l) : (this.m_impulse.SetZero(), this.m_motorImpulse = 0);
    };
    s.prototype.SolveVelocityConstraints = function (b) {
      var c = this.m_bodyA,
        d = this.m_bodyB,
        g = c.m_linearVelocity,
        j = c.m_angularVelocity,
        l = d.m_linearVelocity,
        m = d.m_angularVelocity,
        n = 0,
        u = 0,
        q = 0,
        x = 0;
      this.m_enableMotor && this.m_limitState != B.e_equalLimits && (x = this.m_motorMass * (this.m_motorSpeed - (this.m_axis.x * (l.x - g.x) + this.m_axis.y * (l.y - g.y) + this.m_a2 * m - this.m_a1 * j)), n = this.m_motorImpulse, u = b.dt * this.m_maxMotorForce, this.m_motorImpulse = e.Clamp(this.m_motorImpulse + x, -u, u), x = this.m_motorImpulse - n, n = x * this.m_axis.x, u = x * this.m_axis.y, q = x * this.m_a1, x *= this.m_a2, g.x -= this.m_invMassA * n, g.y -= this.m_invMassA * u, j -= this.m_invIA * q, l.x += this.m_invMassB * n, l.y += this.m_invMassB * u, m += this.m_invIB * x);
      u = this.m_perp.x * (l.x - g.x) + this.m_perp.y * (l.y - g.y) + this.m_s2 * m - this.m_s1 * j;
      this.m_enableLimit && this.m_limitState != B.e_inactiveLimit ? (q = this.m_axis.x * (l.x - g.x) + this.m_axis.y * (l.y - g.y) + this.m_a2 * m - this.m_a1 * j, n = this.m_impulse.Copy(), b = this.m_K.Solve(new f(), -u, -q), this.m_impulse.Add(b), this.m_limitState == B.e_atLowerLimit ? this.m_impulse.y = e.Max(this.m_impulse.y, 0) : this.m_limitState == B.e_atUpperLimit && (this.m_impulse.y = e.Min(this.m_impulse.y, 0)), u = -u - (this.m_impulse.y - n.y) * this.m_K.col2.x, q = 0 != this.m_K.col1.x ? u / this.m_K.col1.x + n.x : n.x, this.m_impulse.x = q, b.x = this.m_impulse.x - n.x, b.y = this.m_impulse.y - n.y, n = b.x * this.m_perp.x + b.y * this.m_axis.x, u = b.x * this.m_perp.y + b.y * this.m_axis.y, q = b.x * this.m_s1 + b.y * this.m_a1, x = b.x * this.m_s2 + b.y * this.m_a2) : (b = 0 != this.m_K.col1.x ? -u / this.m_K.col1.x : 0, this.m_impulse.x += b, n = b * this.m_perp.x, u = b * this.m_perp.y, q = b * this.m_s1, x = b * this.m_s2);
      g.x -= this.m_invMassA * n;
      g.y -= this.m_invMassA * u;
      j -= this.m_invIA * q;
      l.x += this.m_invMassB * n;
      l.y += this.m_invMassB * u;
      m += this.m_invIB * x;
      c.m_linearVelocity.SetV(g);
      c.m_angularVelocity = j;
      d.m_linearVelocity.SetV(l);
      d.m_angularVelocity = m;
    };
    s.prototype.SolvePositionConstraints = function () {
      var d = this.m_bodyA,
        g = this.m_bodyB,
        j = d.m_sweep.c,
        l = d.m_sweep.a,
        m = g.m_sweep.c,
        q = g.m_sweep.a,
        s,
        n = 0,
        u = 0,
        y = 0,
        x = 0,
        z = 0,
        A = 0,
        u = !1,
        B = 0,
        D = c.FromAngle(l),
        y = c.FromAngle(q);
      s = D;
      var A = this.m_localAnchor1.x - this.m_localCenterA.x,
        F = this.m_localAnchor1.y - this.m_localCenterA.y,
        n = s.col1.x * A + s.col2.x * F,
        F = s.col1.y * A + s.col2.y * F,
        A = n;
      s = y;
      y = this.m_localAnchor2.x - this.m_localCenterB.x;
      x = this.m_localAnchor2.y - this.m_localCenterB.y;
      n = s.col1.x * y + s.col2.x * x;
      x = s.col1.y * y + s.col2.y * x;
      y = n;
      s = m.x + y - j.x - A;
      n = m.y + x - j.y - F;
      if (this.m_enableLimit) {
        this.m_axis = e.MulMV(D, this.m_localXAxis1);
        this.m_a1 = (s + A) * this.m_axis.y - (n + F) * this.m_axis.x;
        this.m_a2 = y * this.m_axis.y - x * this.m_axis.x;
        var G = this.m_axis.x * s + this.m_axis.y * n;
        e.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b.b2_linearSlop ? (B = e.Clamp(G, -b.b2_maxLinearCorrection, b.b2_maxLinearCorrection), z = e.Abs(G), u = !0) : G <= this.m_lowerTranslation ? (B = e.Clamp(G - this.m_lowerTranslation + b.b2_linearSlop, -b.b2_maxLinearCorrection, 0), z = this.m_lowerTranslation - G, u = !0) : G >= this.m_upperTranslation && (B = e.Clamp(G - this.m_upperTranslation + b.b2_linearSlop, 0, b.b2_maxLinearCorrection), z = G - this.m_upperTranslation, u = !0);
      }
      this.m_perp = e.MulMV(D, this.m_localYAxis1);
      this.m_s1 = (s + A) * this.m_perp.y - (n + F) * this.m_perp.x;
      this.m_s2 = y * this.m_perp.y - x * this.m_perp.x;
      D = new f();
      F = this.m_perp.x * s + this.m_perp.y * n;
      z = e.Max(z, e.Abs(F));
      A = 0;
      u ? (u = this.m_invMassA, y = this.m_invMassB, x = this.m_invIA, s = this.m_invIB, this.m_K.col1.x = u + y + x * this.m_s1 * this.m_s1 + s * this.m_s2 * this.m_s2, this.m_K.col1.y = x * this.m_s1 * this.m_a1 + s * this.m_s2 * this.m_a2, this.m_K.col2.x = this.m_K.col1.y, this.m_K.col2.y = u + y + x * this.m_a1 * this.m_a1 + s * this.m_a2 * this.m_a2, this.m_K.Solve(D, -F, -B)) : (u = this.m_invMassA, y = this.m_invMassB, x = this.m_invIA, s = this.m_invIB, B = u + y + x * this.m_s1 * this.m_s1 + s * this.m_s2 * this.m_s2, D.x = 0 != B ? -F / B : 0, D.y = 0);
      B = D.x * this.m_perp.x + D.y * this.m_axis.x;
      u = D.x * this.m_perp.y + D.y * this.m_axis.y;
      F = D.x * this.m_s1 + D.y * this.m_a1;
      D = D.x * this.m_s2 + D.y * this.m_a2;
      j.x -= this.m_invMassA * B;
      j.y -= this.m_invMassA * u;
      l -= this.m_invIA * F;
      m.x += this.m_invMassB * B;
      m.y += this.m_invMassB * u;
      q += this.m_invIB * D;
      d.m_sweep.a = l;
      g.m_sweep.a = q;
      d.SynchronizeTransform();
      g.SynchronizeTransform();
      return z <= b.b2_linearSlop && A <= b.b2_angularSlop;
    };
    Box2D.inherit(G, Box2D.Dynamics.Joints.b2JointDef);
    G.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
    G.b2LineJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new f();
      this.localAnchorB = new f();
      this.localAxisA = new f();
    };
    G.prototype.b2LineJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = B.e_lineJoint;
      this.localAxisA.Set(1, 0);
      this.enableLimit = !1;
      this.upperTranslation = this.lowerTranslation = 0;
      this.enableMotor = !1;
      this.motorSpeed = this.maxMotorForce = 0;
    };
    G.prototype.Initialize = function (b, c, d, e) {
      this.bodyA = b;
      this.bodyB = c;
      this.localAnchorA = this.bodyA.GetLocalPoint(d);
      this.localAnchorB = this.bodyB.GetLocalPoint(d);
      this.localAxisA = this.bodyA.GetLocalVector(e);
    };
    Box2D.inherit(F, Box2D.Dynamics.Joints.b2Joint);
    F.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
    F.b2MouseJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.K = new c();
      this.K1 = new c();
      this.K2 = new c();
      this.m_localAnchor = new f();
      this.m_target = new f();
      this.m_impulse = new f();
      this.m_mass = new c();
      this.m_C = new f();
    };
    F.prototype.GetAnchorA = function () {
      return this.m_target;
    };
    F.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor);
    };
    F.prototype.GetReactionForce = function (b) {
      void 0 === b && (b = 0);
      return new f(b * this.m_impulse.x, b * this.m_impulse.y);
    };
    F.prototype.GetReactionTorque = function () {
      return 0;
    };
    F.prototype.GetTarget = function () {
      return this.m_target;
    };
    F.prototype.SetTarget = function (b) {
      !1 == this.m_bodyB.IsAwake() && this.m_bodyB.SetAwake(!0);
      this.m_target = b;
    };
    F.prototype.GetMaxForce = function () {
      return this.m_maxForce;
    };
    F.prototype.SetMaxForce = function (b) {
      void 0 === b && (b = 0);
      this.m_maxForce = b;
    };
    F.prototype.GetFrequency = function () {
      return this.m_frequencyHz;
    };
    F.prototype.SetFrequency = function (b) {
      void 0 === b && (b = 0);
      this.m_frequencyHz = b;
    };
    F.prototype.GetDampingRatio = function () {
      return this.m_dampingRatio;
    };
    F.prototype.SetDampingRatio = function (b) {
      void 0 === b && (b = 0);
      this.m_dampingRatio = b;
    };
    F.prototype.b2MouseJoint = function (b) {
      this.__super.b2Joint.call(this, b);
      this.m_target.SetV(b.target);
      var c = this.m_target.x - this.m_bodyB.m_xf.position.x,
        d = this.m_target.y - this.m_bodyB.m_xf.position.y,
        e = this.m_bodyB.m_xf.R;
      this.m_localAnchor.x = c * e.col1.x + d * e.col1.y;
      this.m_localAnchor.y = c * e.col2.x + d * e.col2.y;
      this.m_maxForce = b.maxForce;
      this.m_impulse.SetZero();
      this.m_frequencyHz = b.frequencyHz;
      this.m_dampingRatio = b.dampingRatio;
      this.m_gamma = this.m_beta = 0;
    };
    F.prototype.InitVelocityConstraints = function (b) {
      var c = this.m_bodyB,
        d = c.GetMass(),
        e = 2 * Math.PI * this.m_frequencyHz,
        f = d * e * e;
      this.m_gamma = b.dt * (2 * d * this.m_dampingRatio * e + b.dt * f);
      this.m_gamma = 0 != this.m_gamma ? 1 / this.m_gamma : 0;
      this.m_beta = b.dt * f * this.m_gamma;
      var f = c.m_xf.R,
        d = this.m_localAnchor.x - c.m_sweep.localCenter.x,
        e = this.m_localAnchor.y - c.m_sweep.localCenter.y,
        g = f.col1.x * d + f.col2.x * e,
        e = f.col1.y * d + f.col2.y * e,
        d = g,
        f = c.m_invMass,
        g = c.m_invI;
      this.K1.col1.x = f;
      this.K1.col2.x = 0;
      this.K1.col1.y = 0;
      this.K1.col2.y = f;
      this.K2.col1.x = g * e * e;
      this.K2.col2.x = -g * d * e;
      this.K2.col1.y = -g * d * e;
      this.K2.col2.y = g * d * d;
      this.K.SetM(this.K1);
      this.K.AddM(this.K2);
      this.K.col1.x += this.m_gamma;
      this.K.col2.y += this.m_gamma;
      this.K.GetInverse(this.m_mass);
      this.m_C.x = c.m_sweep.c.x + d - this.m_target.x;
      this.m_C.y = c.m_sweep.c.y + e - this.m_target.y;
      c.m_angularVelocity *= 0.98;
      this.m_impulse.x *= b.dtRatio;
      this.m_impulse.y *= b.dtRatio;
      c.m_linearVelocity.x += f * this.m_impulse.x;
      c.m_linearVelocity.y += f * this.m_impulse.y;
      c.m_angularVelocity += g * (d * this.m_impulse.y - e * this.m_impulse.x);
    };
    F.prototype.SolveVelocityConstraints = function (b) {
      var c = this.m_bodyB,
        d,
        e = 0,
        f = 0;
      d = c.m_xf.R;
      var g = this.m_localAnchor.x - c.m_sweep.localCenter.x,
        j = this.m_localAnchor.y - c.m_sweep.localCenter.y,
        e = d.col1.x * g + d.col2.x * j,
        j = d.col1.y * g + d.col2.y * j,
        g = e,
        e = c.m_linearVelocity.x + -c.m_angularVelocity * j,
        l = c.m_linearVelocity.y + c.m_angularVelocity * g;
      d = this.m_mass;
      e = e + this.m_beta * this.m_C.x + this.m_gamma * this.m_impulse.x;
      f = l + this.m_beta * this.m_C.y + this.m_gamma * this.m_impulse.y;
      l = -(d.col1.x * e + d.col2.x * f);
      f = -(d.col1.y * e + d.col2.y * f);
      d = this.m_impulse.x;
      e = this.m_impulse.y;
      this.m_impulse.x += l;
      this.m_impulse.y += f;
      b = b.dt * this.m_maxForce;
      this.m_impulse.LengthSquared() > b * b && this.m_impulse.Multiply(b / this.m_impulse.Length());
      l = this.m_impulse.x - d;
      f = this.m_impulse.y - e;
      c.m_linearVelocity.x += c.m_invMass * l;
      c.m_linearVelocity.y += c.m_invMass * f;
      c.m_angularVelocity += c.m_invI * (g * f - j * l);
    };
    F.prototype.SolvePositionConstraints = function () {
      return !0;
    };
    Box2D.inherit(K, Box2D.Dynamics.Joints.b2JointDef);
    K.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
    K.b2MouseJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.target = new f();
    };
    K.prototype.b2MouseJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = B.e_mouseJoint;
      this.maxForce = 0;
      this.frequencyHz = 5;
      this.dampingRatio = 0.7;
    };
    Box2D.inherit(L, Box2D.Dynamics.Joints.b2Joint);
    L.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
    L.b2PrismaticJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_localAnchor1 = new f();
      this.m_localAnchor2 = new f();
      this.m_localXAxis1 = new f();
      this.m_localYAxis1 = new f();
      this.m_axis = new f();
      this.m_perp = new f();
      this.m_K = new d();
      this.m_impulse = new j();
    };
    L.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
    };
    L.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
    };
    L.prototype.GetReactionForce = function (b) {
      void 0 === b && (b = 0);
      return new f(b * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x), b * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y));
    };
    L.prototype.GetReactionTorque = function (b) {
      void 0 === b && (b = 0);
      return b * this.m_impulse.y;
    };
    L.prototype.GetJointTranslation = function () {
      var b = this.m_bodyA,
        c = this.m_bodyB,
        d = b.GetWorldPoint(this.m_localAnchor1),
        e = c.GetWorldPoint(this.m_localAnchor2),
        c = e.x - d.x,
        d = e.y - d.y,
        b = b.GetWorldVector(this.m_localXAxis1);
      return b.x * c + b.y * d;
    };
    L.prototype.GetJointSpeed = function () {
      var b = this.m_bodyA,
        c = this.m_bodyB,
        d;
      d = b.m_xf.R;
      var e = this.m_localAnchor1.x - b.m_sweep.localCenter.x,
        f = this.m_localAnchor1.y - b.m_sweep.localCenter.y,
        g = d.col1.x * e + d.col2.x * f,
        f = d.col1.y * e + d.col2.y * f,
        e = g;
      d = c.m_xf.R;
      var j = this.m_localAnchor2.x - c.m_sweep.localCenter.x,
        l = this.m_localAnchor2.y - c.m_sweep.localCenter.y,
        g = d.col1.x * j + d.col2.x * l,
        l = d.col1.y * j + d.col2.y * l,
        j = g;
      d = c.m_sweep.c.x + j - (b.m_sweep.c.x + e);
      var g = c.m_sweep.c.y + l - (b.m_sweep.c.y + f),
        m = b.GetWorldVector(this.m_localXAxis1),
        q = b.m_linearVelocity,
        x = c.m_linearVelocity,
        b = b.m_angularVelocity,
        c = c.m_angularVelocity;
      return d * -b * m.y + g * b * m.x + (m.x * (x.x + -c * l - q.x - -b * f) + m.y * (x.y + c * j - q.y - b * e));
    };
    L.prototype.IsLimitEnabled = function () {
      return this.m_enableLimit;
    };
    L.prototype.EnableLimit = function (b) {
      this.m_bodyA.SetAwake(!0);
      this.m_bodyB.SetAwake(!0);
      this.m_enableLimit = b;
    };
    L.prototype.GetLowerLimit = function () {
      return this.m_lowerTranslation;
    };
    L.prototype.GetUpperLimit = function () {
      return this.m_upperTranslation;
    };
    L.prototype.SetLimits = function (b, c) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      this.m_bodyA.SetAwake(!0);
      this.m_bodyB.SetAwake(!0);
      this.m_lowerTranslation = b;
      this.m_upperTranslation = c;
    };
    L.prototype.IsMotorEnabled = function () {
      return this.m_enableMotor;
    };
    L.prototype.EnableMotor = function (b) {
      this.m_bodyA.SetAwake(!0);
      this.m_bodyB.SetAwake(!0);
      this.m_enableMotor = b;
    };
    L.prototype.SetMotorSpeed = function (b) {
      void 0 === b && (b = 0);
      this.m_bodyA.SetAwake(!0);
      this.m_bodyB.SetAwake(!0);
      this.m_motorSpeed = b;
    };
    L.prototype.GetMotorSpeed = function () {
      return this.m_motorSpeed;
    };
    L.prototype.SetMaxMotorForce = function (b) {
      void 0 === b && (b = 0);
      this.m_bodyA.SetAwake(!0);
      this.m_bodyB.SetAwake(!0);
      this.m_maxMotorForce = b;
    };
    L.prototype.GetMotorForce = function () {
      return this.m_motorImpulse;
    };
    L.prototype.b2PrismaticJoint = function (b) {
      this.__super.b2Joint.call(this, b);
      this.m_localAnchor1.SetV(b.localAnchorA);
      this.m_localAnchor2.SetV(b.localAnchorB);
      this.m_localXAxis1.SetV(b.localAxisA);
      this.m_localYAxis1.x = -this.m_localXAxis1.y;
      this.m_localYAxis1.y = this.m_localXAxis1.x;
      this.m_refAngle = b.referenceAngle;
      this.m_impulse.SetZero();
      this.m_motorImpulse = this.m_motorMass = 0;
      this.m_lowerTranslation = b.lowerTranslation;
      this.m_upperTranslation = b.upperTranslation;
      this.m_maxMotorForce = b.maxMotorForce;
      this.m_motorSpeed = b.motorSpeed;
      this.m_enableLimit = b.enableLimit;
      this.m_enableMotor = b.enableMotor;
      this.m_limitState = B.e_inactiveLimit;
      this.m_axis.SetZero();
      this.m_perp.SetZero();
    };
    L.prototype.InitVelocityConstraints = function (c) {
      var d = this.m_bodyA,
        f = this.m_bodyB,
        g,
        j = 0;
      this.m_localCenterA.SetV(d.GetLocalCenter());
      this.m_localCenterB.SetV(f.GetLocalCenter());
      var l = d.GetTransform();
      f.GetTransform();
      g = d.m_xf.R;
      var m = this.m_localAnchor1.x - this.m_localCenterA.x,
        n = this.m_localAnchor1.y - this.m_localCenterA.y,
        j = g.col1.x * m + g.col2.x * n,
        n = g.col1.y * m + g.col2.y * n,
        m = j;
      g = f.m_xf.R;
      var u = this.m_localAnchor2.x - this.m_localCenterB.x,
        q = this.m_localAnchor2.y - this.m_localCenterB.y,
        j = g.col1.x * u + g.col2.x * q,
        q = g.col1.y * u + g.col2.y * q,
        u = j;
      g = f.m_sweep.c.x + u - d.m_sweep.c.x - m;
      j = f.m_sweep.c.y + q - d.m_sweep.c.y - n;
      this.m_invMassA = d.m_invMass;
      this.m_invMassB = f.m_invMass;
      this.m_invIA = d.m_invI;
      this.m_invIB = f.m_invI;
      this.m_axis.SetV(e.MulMV(l.R, this.m_localXAxis1));
      this.m_a1 = (g + m) * this.m_axis.y - (j + n) * this.m_axis.x;
      this.m_a2 = u * this.m_axis.y - q * this.m_axis.x;
      this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;
      this.m_motorMass > Number.MIN_VALUE && (this.m_motorMass = 1 / this.m_motorMass);
      this.m_perp.SetV(e.MulMV(l.R, this.m_localYAxis1));
      this.m_s1 = (g + m) * this.m_perp.y - (j + n) * this.m_perp.x;
      this.m_s2 = u * this.m_perp.y - q * this.m_perp.x;
      l = this.m_invMassA;
      m = this.m_invMassB;
      n = this.m_invIA;
      u = this.m_invIB;
      this.m_K.col1.x = l + m + n * this.m_s1 * this.m_s1 + u * this.m_s2 * this.m_s2;
      this.m_K.col1.y = n * this.m_s1 + u * this.m_s2;
      this.m_K.col1.z = n * this.m_s1 * this.m_a1 + u * this.m_s2 * this.m_a2;
      this.m_K.col2.x = this.m_K.col1.y;
      this.m_K.col2.y = n + u;
      this.m_K.col2.z = n * this.m_a1 + u * this.m_a2;
      this.m_K.col3.x = this.m_K.col1.z;
      this.m_K.col3.y = this.m_K.col2.z;
      this.m_K.col3.z = l + m + n * this.m_a1 * this.m_a1 + u * this.m_a2 * this.m_a2;
      this.m_enableLimit ? (g = this.m_axis.x * g + this.m_axis.y * j, e.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b.b2_linearSlop ? this.m_limitState = B.e_equalLimits : g <= this.m_lowerTranslation ? this.m_limitState != B.e_atLowerLimit && (this.m_limitState = B.e_atLowerLimit, this.m_impulse.z = 0) : g >= this.m_upperTranslation ? this.m_limitState != B.e_atUpperLimit && (this.m_limitState = B.e_atUpperLimit, this.m_impulse.z = 0) : (this.m_limitState = B.e_inactiveLimit, this.m_impulse.z = 0)) : this.m_limitState = B.e_inactiveLimit;
      !1 == this.m_enableMotor && (this.m_motorImpulse = 0);
      c.warmStarting ? (this.m_impulse.x *= c.dtRatio, this.m_impulse.y *= c.dtRatio, this.m_motorImpulse *= c.dtRatio, c = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x, g = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y, j = this.m_impulse.x * this.m_s1 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1, l = this.m_impulse.x * this.m_s2 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2, d.m_linearVelocity.x -= this.m_invMassA * c, d.m_linearVelocity.y -= this.m_invMassA * g, d.m_angularVelocity -= this.m_invIA * j, f.m_linearVelocity.x += this.m_invMassB * c, f.m_linearVelocity.y += this.m_invMassB * g, f.m_angularVelocity += this.m_invIB * l) : (this.m_impulse.SetZero(), this.m_motorImpulse = 0);
    };
    L.prototype.SolveVelocityConstraints = function (b) {
      var c = this.m_bodyA,
        d = this.m_bodyB,
        g = c.m_linearVelocity,
        l = c.m_angularVelocity,
        m = d.m_linearVelocity,
        q = d.m_angularVelocity,
        n = 0,
        u = 0,
        s = 0,
        x = 0;
      this.m_enableMotor && this.m_limitState != B.e_equalLimits && (x = this.m_motorMass * (this.m_motorSpeed - (this.m_axis.x * (m.x - g.x) + this.m_axis.y * (m.y - g.y) + this.m_a2 * q - this.m_a1 * l)), n = this.m_motorImpulse, b = b.dt * this.m_maxMotorForce, this.m_motorImpulse = e.Clamp(this.m_motorImpulse + x, -b, b), x = this.m_motorImpulse - n, n = x * this.m_axis.x, u = x * this.m_axis.y, s = x * this.m_a1, x *= this.m_a2, g.x -= this.m_invMassA * n, g.y -= this.m_invMassA * u, l -= this.m_invIA * s, m.x += this.m_invMassB * n, m.y += this.m_invMassB * u, q += this.m_invIB * x);
      s = this.m_perp.x * (m.x - g.x) + this.m_perp.y * (m.y - g.y) + this.m_s2 * q - this.m_s1 * l;
      u = q - l;
      this.m_enableLimit && this.m_limitState != B.e_inactiveLimit ? (b = this.m_axis.x * (m.x - g.x) + this.m_axis.y * (m.y - g.y) + this.m_a2 * q - this.m_a1 * l, n = this.m_impulse.Copy(), b = this.m_K.Solve33(new j(), -s, -u, -b), this.m_impulse.Add(b), this.m_limitState == B.e_atLowerLimit ? this.m_impulse.z = e.Max(this.m_impulse.z, 0) : this.m_limitState == B.e_atUpperLimit && (this.m_impulse.z = e.Min(this.m_impulse.z, 0)), s = -s - (this.m_impulse.z - n.z) * this.m_K.col3.x, u = -u - (this.m_impulse.z - n.z) * this.m_K.col3.y, u = this.m_K.Solve22(new f(), s, u), u.x += n.x, u.y += n.y, this.m_impulse.x = u.x, this.m_impulse.y = u.y, b.x = this.m_impulse.x - n.x, b.y = this.m_impulse.y - n.y, b.z = this.m_impulse.z - n.z, n = b.x * this.m_perp.x + b.z * this.m_axis.x, u = b.x * this.m_perp.y + b.z * this.m_axis.y, s = b.x * this.m_s1 + b.y + b.z * this.m_a1, x = b.x * this.m_s2 + b.y + b.z * this.m_a2) : (b = this.m_K.Solve22(new f(), -s, -u), this.m_impulse.x += b.x, this.m_impulse.y += b.y, n = b.x * this.m_perp.x, u = b.x * this.m_perp.y, s = b.x * this.m_s1 + b.y, x = b.x * this.m_s2 + b.y);
      g.x -= this.m_invMassA * n;
      g.y -= this.m_invMassA * u;
      l -= this.m_invIA * s;
      m.x += this.m_invMassB * n;
      m.y += this.m_invMassB * u;
      q += this.m_invIB * x;
      c.m_linearVelocity.SetV(g);
      c.m_angularVelocity = l;
      d.m_linearVelocity.SetV(m);
      d.m_angularVelocity = q;
    };
    L.prototype.SolvePositionConstraints = function () {
      var d = this.m_bodyA,
        g = this.m_bodyB,
        l = d.m_sweep.c,
        m = d.m_sweep.a,
        q = g.m_sweep.c,
        s = g.m_sweep.a,
        y,
        n = 0,
        u = 0,
        z = 0,
        x = 0,
        A = 0,
        u = !1,
        B = 0,
        D = c.FromAngle(m),
        F = c.FromAngle(s);
      y = D;
      var A = this.m_localAnchor1.x - this.m_localCenterA.x,
        G = this.m_localAnchor1.y - this.m_localCenterA.y,
        n = y.col1.x * A + y.col2.x * G,
        G = y.col1.y * A + y.col2.y * G,
        A = n;
      y = F;
      F = this.m_localAnchor2.x - this.m_localCenterB.x;
      z = this.m_localAnchor2.y - this.m_localCenterB.y;
      n = y.col1.x * F + y.col2.x * z;
      z = y.col1.y * F + y.col2.y * z;
      F = n;
      y = q.x + F - l.x - A;
      n = q.y + z - l.y - G;
      if (this.m_enableLimit) {
        this.m_axis = e.MulMV(D, this.m_localXAxis1);
        this.m_a1 = (y + A) * this.m_axis.y - (n + G) * this.m_axis.x;
        this.m_a2 = F * this.m_axis.y - z * this.m_axis.x;
        var H = this.m_axis.x * y + this.m_axis.y * n;
        e.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b.b2_linearSlop ? (B = e.Clamp(H, -b.b2_maxLinearCorrection, b.b2_maxLinearCorrection), x = e.Abs(H), u = !0) : H <= this.m_lowerTranslation ? (B = e.Clamp(H - this.m_lowerTranslation + b.b2_linearSlop, -b.b2_maxLinearCorrection, 0), x = this.m_lowerTranslation - H, u = !0) : H >= this.m_upperTranslation && (B = e.Clamp(H - this.m_upperTranslation + b.b2_linearSlop, 0, b.b2_maxLinearCorrection), x = H - this.m_upperTranslation, u = !0);
      }
      this.m_perp = e.MulMV(D, this.m_localYAxis1);
      this.m_s1 = (y + A) * this.m_perp.y - (n + G) * this.m_perp.x;
      this.m_s2 = F * this.m_perp.y - z * this.m_perp.x;
      D = new j();
      G = this.m_perp.x * y + this.m_perp.y * n;
      F = s - m - this.m_refAngle;
      x = e.Max(x, e.Abs(G));
      A = e.Abs(F);
      u ? (u = this.m_invMassA, z = this.m_invMassB, y = this.m_invIA, n = this.m_invIB, this.m_K.col1.x = u + z + y * this.m_s1 * this.m_s1 + n * this.m_s2 * this.m_s2, this.m_K.col1.y = y * this.m_s1 + n * this.m_s2, this.m_K.col1.z = y * this.m_s1 * this.m_a1 + n * this.m_s2 * this.m_a2, this.m_K.col2.x = this.m_K.col1.y, this.m_K.col2.y = y + n, this.m_K.col2.z = y * this.m_a1 + n * this.m_a2, this.m_K.col3.x = this.m_K.col1.z, this.m_K.col3.y = this.m_K.col2.z, this.m_K.col3.z = u + z + y * this.m_a1 * this.m_a1 + n * this.m_a2 * this.m_a2, this.m_K.Solve33(D, -G, -F, -B)) : (u = this.m_invMassA, z = this.m_invMassB, y = this.m_invIA, n = this.m_invIB, B = y * this.m_s1 + n * this.m_s2, H = y + n, this.m_K.col1.Set(u + z + y * this.m_s1 * this.m_s1 + n * this.m_s2 * this.m_s2, B, 0), this.m_K.col2.Set(B, H, 0), B = this.m_K.Solve22(new f(), -G, -F), D.x = B.x, D.y = B.y, D.z = 0);
      B = D.x * this.m_perp.x + D.z * this.m_axis.x;
      u = D.x * this.m_perp.y + D.z * this.m_axis.y;
      G = D.x * this.m_s1 + D.y + D.z * this.m_a1;
      D = D.x * this.m_s2 + D.y + D.z * this.m_a2;
      l.x -= this.m_invMassA * B;
      l.y -= this.m_invMassA * u;
      m -= this.m_invIA * G;
      q.x += this.m_invMassB * B;
      q.y += this.m_invMassB * u;
      s += this.m_invIB * D;
      d.m_sweep.a = m;
      g.m_sweep.a = s;
      d.SynchronizeTransform();
      g.SynchronizeTransform();
      return x <= b.b2_linearSlop && A <= b.b2_angularSlop;
    };
    Box2D.inherit(R, Box2D.Dynamics.Joints.b2JointDef);
    R.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
    R.b2PrismaticJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new f();
      this.localAnchorB = new f();
      this.localAxisA = new f();
    };
    R.prototype.b2PrismaticJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = B.e_prismaticJoint;
      this.localAxisA.Set(1, 0);
      this.referenceAngle = 0;
      this.enableLimit = !1;
      this.upperTranslation = this.lowerTranslation = 0;
      this.enableMotor = !1;
      this.motorSpeed = this.maxMotorForce = 0;
    };
    R.prototype.Initialize = function (b, c, d, e) {
      this.bodyA = b;
      this.bodyB = c;
      this.localAnchorA = this.bodyA.GetLocalPoint(d);
      this.localAnchorB = this.bodyB.GetLocalPoint(d);
      this.localAxisA = this.bodyA.GetLocalVector(e);
      this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
    };
    Box2D.inherit(I, Box2D.Dynamics.Joints.b2Joint);
    I.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
    I.b2PulleyJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_groundAnchor1 = new f();
      this.m_groundAnchor2 = new f();
      this.m_localAnchor1 = new f();
      this.m_localAnchor2 = new f();
      this.m_u1 = new f();
      this.m_u2 = new f();
    };
    I.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
    };
    I.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
    };
    I.prototype.GetReactionForce = function (b) {
      void 0 === b && (b = 0);
      return new f(b * this.m_impulse * this.m_u2.x, b * this.m_impulse * this.m_u2.y);
    };
    I.prototype.GetReactionTorque = function () {
      return 0;
    };
    I.prototype.GetGroundAnchorA = function () {
      var b = this.m_ground.m_xf.position.Copy();
      b.Add(this.m_groundAnchor1);
      return b;
    };
    I.prototype.GetGroundAnchorB = function () {
      var b = this.m_ground.m_xf.position.Copy();
      b.Add(this.m_groundAnchor2);
      return b;
    };
    I.prototype.GetLength1 = function () {
      var b = this.m_bodyA.GetWorldPoint(this.m_localAnchor1),
        c = b.x - (this.m_ground.m_xf.position.x + this.m_groundAnchor1.x),
        b = b.y - (this.m_ground.m_xf.position.y + this.m_groundAnchor1.y);
      return Math.sqrt(c * c + b * b);
    };
    I.prototype.GetLength2 = function () {
      var b = this.m_bodyB.GetWorldPoint(this.m_localAnchor2),
        c = b.x - (this.m_ground.m_xf.position.x + this.m_groundAnchor2.x),
        b = b.y - (this.m_ground.m_xf.position.y + this.m_groundAnchor2.y);
      return Math.sqrt(c * c + b * b);
    };
    I.prototype.GetRatio = function () {
      return this.m_ratio;
    };
    I.prototype.b2PulleyJoint = function (b) {
      this.__super.b2Joint.call(this, b);
      this.m_ground = this.m_bodyA.m_world.m_groundBody;
      this.m_groundAnchor1.x = b.groundAnchorA.x - this.m_ground.m_xf.position.x;
      this.m_groundAnchor1.y = b.groundAnchorA.y - this.m_ground.m_xf.position.y;
      this.m_groundAnchor2.x = b.groundAnchorB.x - this.m_ground.m_xf.position.x;
      this.m_groundAnchor2.y = b.groundAnchorB.y - this.m_ground.m_xf.position.y;
      this.m_localAnchor1.SetV(b.localAnchorA);
      this.m_localAnchor2.SetV(b.localAnchorB);
      this.m_ratio = b.ratio;
      this.m_constant = b.lengthA + this.m_ratio * b.lengthB;
      this.m_maxLength1 = e.Min(b.maxLengthA, this.m_constant - this.m_ratio * I.b2_minPulleyLength);
      this.m_maxLength2 = e.Min(b.maxLengthB, (this.m_constant - I.b2_minPulleyLength) / this.m_ratio);
      this.m_limitImpulse2 = this.m_limitImpulse1 = this.m_impulse = 0;
    };
    I.prototype.InitVelocityConstraints = function (c) {
      var d = this.m_bodyA,
        e = this.m_bodyB,
        f;
      f = d.m_xf.R;
      var g = this.m_localAnchor1.x - d.m_sweep.localCenter.x,
        j = this.m_localAnchor1.y - d.m_sweep.localCenter.y,
        l = f.col1.x * g + f.col2.x * j,
        j = f.col1.y * g + f.col2.y * j,
        g = l;
      f = e.m_xf.R;
      var m = this.m_localAnchor2.x - e.m_sweep.localCenter.x,
        u = this.m_localAnchor2.y - e.m_sweep.localCenter.y,
        l = f.col1.x * m + f.col2.x * u,
        u = f.col1.y * m + f.col2.y * u,
        m = l;
      f = e.m_sweep.c.x + m;
      var l = e.m_sweep.c.y + u,
        q = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x,
        x = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
      this.m_u1.Set(d.m_sweep.c.x + g - (this.m_ground.m_xf.position.x + this.m_groundAnchor1.x), d.m_sweep.c.y + j - (this.m_ground.m_xf.position.y + this.m_groundAnchor1.y));
      this.m_u2.Set(f - q, l - x);
      f = this.m_u1.Length();
      l = this.m_u2.Length();
      f > b.b2_linearSlop ? this.m_u1.Multiply(1 / f) : this.m_u1.SetZero();
      l > b.b2_linearSlop ? this.m_u2.Multiply(1 / l) : this.m_u2.SetZero();
      0 < this.m_constant - f - this.m_ratio * l ? (this.m_state = B.e_inactiveLimit, this.m_impulse = 0) : this.m_state = B.e_atUpperLimit;
      f < this.m_maxLength1 ? (this.m_limitState1 = B.e_inactiveLimit, this.m_limitImpulse1 = 0) : this.m_limitState1 = B.e_atUpperLimit;
      l < this.m_maxLength2 ? (this.m_limitState2 = B.e_inactiveLimit, this.m_limitImpulse2 = 0) : this.m_limitState2 = B.e_atUpperLimit;
      f = g * this.m_u1.y - j * this.m_u1.x;
      l = m * this.m_u2.y - u * this.m_u2.x;
      this.m_limitMass1 = d.m_invMass + d.m_invI * f * f;
      this.m_limitMass2 = e.m_invMass + e.m_invI * l * l;
      this.m_pulleyMass = this.m_limitMass1 + this.m_ratio * this.m_ratio * this.m_limitMass2;
      this.m_limitMass1 = 1 / this.m_limitMass1;
      this.m_limitMass2 = 1 / this.m_limitMass2;
      this.m_pulleyMass = 1 / this.m_pulleyMass;
      c.warmStarting ? (this.m_impulse *= c.dtRatio, this.m_limitImpulse1 *= c.dtRatio, this.m_limitImpulse2 *= c.dtRatio, c = (-this.m_impulse - this.m_limitImpulse1) * this.m_u1.x, f = (-this.m_impulse - this.m_limitImpulse1) * this.m_u1.y, l = (-this.m_ratio * this.m_impulse - this.m_limitImpulse2) * this.m_u2.x, q = (-this.m_ratio * this.m_impulse - this.m_limitImpulse2) * this.m_u2.y, d.m_linearVelocity.x += d.m_invMass * c, d.m_linearVelocity.y += d.m_invMass * f, d.m_angularVelocity += d.m_invI * (g * f - j * c), e.m_linearVelocity.x += e.m_invMass * l, e.m_linearVelocity.y += e.m_invMass * q, e.m_angularVelocity += e.m_invI * (m * q - u * l)) : this.m_limitImpulse2 = this.m_limitImpulse1 = this.m_impulse = 0;
    };
    I.prototype.SolveVelocityConstraints = function () {
      var b = this.m_bodyA,
        c = this.m_bodyB,
        d;
      d = b.m_xf.R;
      var f = this.m_localAnchor1.x - b.m_sweep.localCenter.x,
        g = this.m_localAnchor1.y - b.m_sweep.localCenter.y,
        j = d.col1.x * f + d.col2.x * g,
        g = d.col1.y * f + d.col2.y * g,
        f = j;
      d = c.m_xf.R;
      var l = this.m_localAnchor2.x - c.m_sweep.localCenter.x,
        m = this.m_localAnchor2.y - c.m_sweep.localCenter.y,
        j = d.col1.x * l + d.col2.x * m,
        m = d.col1.y * l + d.col2.y * m,
        l = j,
        u = 0,
        q = 0;
      this.m_state == B.e_atUpperLimit && (d = b.m_linearVelocity.x + -b.m_angularVelocity * g, j = b.m_linearVelocity.y + b.m_angularVelocity * f, u = c.m_linearVelocity.x + -c.m_angularVelocity * m, q = c.m_linearVelocity.y + c.m_angularVelocity * l, d = -(this.m_u1.x * d + this.m_u1.y * j) - this.m_ratio * (this.m_u2.x * u + this.m_u2.y * q), q = this.m_pulleyMass * -d, d = this.m_impulse, this.m_impulse = e.Max(0, this.m_impulse + q), q = this.m_impulse - d, d = -q * this.m_u1.x, j = -q * this.m_u1.y, u = -this.m_ratio * q * this.m_u2.x, q = -this.m_ratio * q * this.m_u2.y, b.m_linearVelocity.x += b.m_invMass * d, b.m_linearVelocity.y += b.m_invMass * j, b.m_angularVelocity += b.m_invI * (f * j - g * d), c.m_linearVelocity.x += c.m_invMass * u, c.m_linearVelocity.y += c.m_invMass * q, c.m_angularVelocity += c.m_invI * (l * q - m * u));
      this.m_limitState1 == B.e_atUpperLimit && (d = b.m_linearVelocity.x + -b.m_angularVelocity * g, j = b.m_linearVelocity.y + b.m_angularVelocity * f, d = -(this.m_u1.x * d + this.m_u1.y * j), q = -this.m_limitMass1 * d, d = this.m_limitImpulse1, this.m_limitImpulse1 = e.Max(0, this.m_limitImpulse1 + q), q = this.m_limitImpulse1 - d, d = -q * this.m_u1.x, j = -q * this.m_u1.y, b.m_linearVelocity.x += b.m_invMass * d, b.m_linearVelocity.y += b.m_invMass * j, b.m_angularVelocity += b.m_invI * (f * j - g * d));
      this.m_limitState2 == B.e_atUpperLimit && (u = c.m_linearVelocity.x + -c.m_angularVelocity * m, q = c.m_linearVelocity.y + c.m_angularVelocity * l, d = -(this.m_u2.x * u + this.m_u2.y * q), q = -this.m_limitMass2 * d, d = this.m_limitImpulse2, this.m_limitImpulse2 = e.Max(0, this.m_limitImpulse2 + q), q = this.m_limitImpulse2 - d, u = -q * this.m_u2.x, q = -q * this.m_u2.y, c.m_linearVelocity.x += c.m_invMass * u, c.m_linearVelocity.y += c.m_invMass * q, c.m_angularVelocity += c.m_invI * (l * q - m * u));
    };
    I.prototype.SolvePositionConstraints = function () {
      var c = this.m_bodyA,
        d = this.m_bodyB,
        f,
        g = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x,
        j = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y,
        l = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x,
        m = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y,
        n = 0,
        u = 0,
        q = 0,
        x = 0,
        s = 0,
        y = 0,
        z = 0,
        A = 0;
      this.m_state == B.e_atUpperLimit && (f = c.m_xf.R, n = this.m_localAnchor1.x - c.m_sweep.localCenter.x, u = this.m_localAnchor1.y - c.m_sweep.localCenter.y, s = f.col1.x * n + f.col2.x * u, u = f.col1.y * n + f.col2.y * u, n = s, f = d.m_xf.R, q = this.m_localAnchor2.x - d.m_sweep.localCenter.x, x = this.m_localAnchor2.y - d.m_sweep.localCenter.y, s = f.col1.x * q + f.col2.x * x, x = f.col1.y * q + f.col2.y * x, q = s, f = c.m_sweep.c.x + n, s = c.m_sweep.c.y + u, y = d.m_sweep.c.x + q, z = d.m_sweep.c.y + x, this.m_u1.Set(f - g, s - j), this.m_u2.Set(y - l, z - m), f = this.m_u1.Length(), s = this.m_u2.Length(), f > b.b2_linearSlop ? this.m_u1.Multiply(1 / f) : this.m_u1.SetZero(), s > b.b2_linearSlop ? this.m_u2.Multiply(1 / s) : this.m_u2.SetZero(), f = this.m_constant - f - this.m_ratio * s, A = e.Max(A, -f), f = e.Clamp(f + b.b2_linearSlop, -b.b2_maxLinearCorrection, 0), z = -this.m_pulleyMass * f, f = -z * this.m_u1.x, s = -z * this.m_u1.y, y = -this.m_ratio * z * this.m_u2.x, z = -this.m_ratio * z * this.m_u2.y, c.m_sweep.c.x += c.m_invMass * f, c.m_sweep.c.y += c.m_invMass * s, c.m_sweep.a += c.m_invI * (n * s - u * f), d.m_sweep.c.x += d.m_invMass * y, d.m_sweep.c.y += d.m_invMass * z, d.m_sweep.a += d.m_invI * (q * z - x * y), c.SynchronizeTransform(), d.SynchronizeTransform());
      this.m_limitState1 == B.e_atUpperLimit && (f = c.m_xf.R, n = this.m_localAnchor1.x - c.m_sweep.localCenter.x, u = this.m_localAnchor1.y - c.m_sweep.localCenter.y, s = f.col1.x * n + f.col2.x * u, u = f.col1.y * n + f.col2.y * u, n = s, f = c.m_sweep.c.x + n, s = c.m_sweep.c.y + u, this.m_u1.Set(f - g, s - j), f = this.m_u1.Length(), f > b.b2_linearSlop ? (this.m_u1.x *= 1 / f, this.m_u1.y *= 1 / f) : this.m_u1.SetZero(), f = this.m_maxLength1 - f, A = e.Max(A, -f), f = e.Clamp(f + b.b2_linearSlop, -b.b2_maxLinearCorrection, 0), z = -this.m_limitMass1 * f, f = -z * this.m_u1.x, s = -z * this.m_u1.y, c.m_sweep.c.x += c.m_invMass * f, c.m_sweep.c.y += c.m_invMass * s, c.m_sweep.a += c.m_invI * (n * s - u * f), c.SynchronizeTransform());
      this.m_limitState2 == B.e_atUpperLimit && (f = d.m_xf.R, q = this.m_localAnchor2.x - d.m_sweep.localCenter.x, x = this.m_localAnchor2.y - d.m_sweep.localCenter.y, s = f.col1.x * q + f.col2.x * x, x = f.col1.y * q + f.col2.y * x, q = s, y = d.m_sweep.c.x + q, z = d.m_sweep.c.y + x, this.m_u2.Set(y - l, z - m), s = this.m_u2.Length(), s > b.b2_linearSlop ? (this.m_u2.x *= 1 / s, this.m_u2.y *= 1 / s) : this.m_u2.SetZero(), f = this.m_maxLength2 - s, A = e.Max(A, -f), f = e.Clamp(f + b.b2_linearSlop, -b.b2_maxLinearCorrection, 0), z = -this.m_limitMass2 * f, y = -z * this.m_u2.x, z = -z * this.m_u2.y, d.m_sweep.c.x += d.m_invMass * y, d.m_sweep.c.y += d.m_invMass * z, d.m_sweep.a += d.m_invI * (q * z - x * y), d.SynchronizeTransform());
      return A < b.b2_linearSlop;
    };
    Box2D.postDefs.push(function () {
      Box2D.Dynamics.Joints.b2PulleyJoint.b2_minPulleyLength = 2;
    });
    Box2D.inherit(fa, Box2D.Dynamics.Joints.b2JointDef);
    fa.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
    fa.b2PulleyJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.groundAnchorA = new f();
      this.groundAnchorB = new f();
      this.localAnchorA = new f();
      this.localAnchorB = new f();
    };
    fa.prototype.b2PulleyJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = B.e_pulleyJoint;
      this.groundAnchorA.Set(-1, 1);
      this.groundAnchorB.Set(1, 1);
      this.localAnchorA.Set(-1, 0);
      this.localAnchorB.Set(1, 0);
      this.maxLengthB = this.lengthB = this.maxLengthA = this.lengthA = 0;
      this.ratio = 1;
      this.collideConnected = !0;
    };
    fa.prototype.Initialize = function (b, c, d, e, f, g, j) {
      void 0 === j && (j = 0);
      this.bodyA = b;
      this.bodyB = c;
      this.groundAnchorA.SetV(d);
      this.groundAnchorB.SetV(e);
      this.localAnchorA = this.bodyA.GetLocalPoint(f);
      this.localAnchorB = this.bodyB.GetLocalPoint(g);
      b = f.x - d.x;
      d = f.y - d.y;
      this.lengthA = Math.sqrt(b * b + d * d);
      d = g.x - e.x;
      e = g.y - e.y;
      this.lengthB = Math.sqrt(d * d + e * e);
      this.ratio = j;
      j = this.lengthA + this.ratio * this.lengthB;
      this.maxLengthA = j - this.ratio * I.b2_minPulleyLength;
      this.maxLengthB = (j - I.b2_minPulleyLength) / this.ratio;
    };
    Box2D.inherit(N, Box2D.Dynamics.Joints.b2Joint);
    N.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
    N.b2RevoluteJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.K = new c();
      this.K1 = new c();
      this.K2 = new c();
      this.K3 = new c();
      this.impulse3 = new j();
      this.impulse2 = new f();
      this.reduced = new f();
      this.m_localAnchor1 = new f();
      this.m_localAnchor2 = new f();
      this.m_impulse = new j();
      this.m_mass = new d();
    };
    N.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
    };
    N.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
    };
    N.prototype.GetReactionForce = function (b) {
      void 0 === b && (b = 0);
      return new f(b * this.m_impulse.x, b * this.m_impulse.y);
    };
    N.prototype.GetReactionTorque = function (b) {
      void 0 === b && (b = 0);
      return b * this.m_impulse.z;
    };
    N.prototype.GetJointAngle = function () {
      return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle;
    };
    N.prototype.GetJointSpeed = function () {
      return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity;
    };
    N.prototype.IsLimitEnabled = function () {
      return this.m_enableLimit;
    };
    N.prototype.EnableLimit = function (b) {
      this.m_enableLimit = b;
    };
    N.prototype.GetLowerLimit = function () {
      return this.m_lowerAngle;
    };
    N.prototype.GetUpperLimit = function () {
      return this.m_upperAngle;
    };
    N.prototype.SetLimits = function (b, c) {
      void 0 === b && (b = 0);
      void 0 === c && (c = 0);
      this.m_lowerAngle = b;
      this.m_upperAngle = c;
    };
    N.prototype.IsMotorEnabled = function () {
      this.m_bodyA.SetAwake(!0);
      this.m_bodyB.SetAwake(!0);
      return this.m_enableMotor;
    };
    N.prototype.EnableMotor = function (b) {
      this.m_enableMotor = b;
    };
    N.prototype.SetMotorSpeed = function (b) {
      void 0 === b && (b = 0);
      this.m_bodyA.SetAwake(!0);
      this.m_bodyB.SetAwake(!0);
      this.m_motorSpeed = b;
    };
    N.prototype.GetMotorSpeed = function () {
      return this.m_motorSpeed;
    };
    N.prototype.SetMaxMotorTorque = function (b) {
      void 0 === b && (b = 0);
      this.m_maxMotorTorque = b;
    };
    N.prototype.GetMotorTorque = function () {
      return this.m_maxMotorTorque;
    };
    N.prototype.b2RevoluteJoint = function (b) {
      this.__super.b2Joint.call(this, b);
      this.m_localAnchor1.SetV(b.localAnchorA);
      this.m_localAnchor2.SetV(b.localAnchorB);
      this.m_referenceAngle = b.referenceAngle;
      this.m_impulse.SetZero();
      this.m_motorImpulse = 0;
      this.m_lowerAngle = b.lowerAngle;
      this.m_upperAngle = b.upperAngle;
      this.m_maxMotorTorque = b.maxMotorTorque;
      this.m_motorSpeed = b.motorSpeed;
      this.m_enableLimit = b.enableLimit;
      this.m_enableMotor = b.enableMotor;
      this.m_limitState = B.e_inactiveLimit;
    };
    N.prototype.InitVelocityConstraints = function (c) {
      var d = this.m_bodyA,
        f = this.m_bodyB,
        g,
        j = 0;
      g = d.m_xf.R;
      var l = this.m_localAnchor1.x - d.m_sweep.localCenter.x,
        m = this.m_localAnchor1.y - d.m_sweep.localCenter.y,
        j = g.col1.x * l + g.col2.x * m,
        m = g.col1.y * l + g.col2.y * m,
        l = j;
      g = f.m_xf.R;
      var n = this.m_localAnchor2.x - f.m_sweep.localCenter.x,
        q = this.m_localAnchor2.y - f.m_sweep.localCenter.y,
        j = g.col1.x * n + g.col2.x * q,
        q = g.col1.y * n + g.col2.y * q,
        n = j;
      g = d.m_invMass;
      var j = f.m_invMass,
        s = d.m_invI,
        x = f.m_invI;
      this.m_mass.col1.x = g + j + m * m * s + q * q * x;
      this.m_mass.col2.x = -m * l * s - q * n * x;
      this.m_mass.col3.x = -m * s - q * x;
      this.m_mass.col1.y = this.m_mass.col2.x;
      this.m_mass.col2.y = g + j + l * l * s + n * n * x;
      this.m_mass.col3.y = l * s + n * x;
      this.m_mass.col1.z = this.m_mass.col3.x;
      this.m_mass.col2.z = this.m_mass.col3.y;
      this.m_mass.col3.z = s + x;
      this.m_motorMass = 1 / (s + x);
      !1 == this.m_enableMotor && (this.m_motorImpulse = 0);
      if (this.m_enableLimit) {
        var y = f.m_sweep.a - d.m_sweep.a - this.m_referenceAngle;
        e.Abs(this.m_upperAngle - this.m_lowerAngle) < 2 * b.b2_angularSlop ? this.m_limitState = B.e_equalLimits : y <= this.m_lowerAngle ? (this.m_limitState != B.e_atLowerLimit && (this.m_impulse.z = 0), this.m_limitState = B.e_atLowerLimit) : y >= this.m_upperAngle ? (this.m_limitState != B.e_atUpperLimit && (this.m_impulse.z = 0), this.m_limitState = B.e_atUpperLimit) : (this.m_limitState = B.e_inactiveLimit, this.m_impulse.z = 0);
      } else this.m_limitState = B.e_inactiveLimit;
      c.warmStarting ? (this.m_impulse.x *= c.dtRatio, this.m_impulse.y *= c.dtRatio, this.m_motorImpulse *= c.dtRatio, c = this.m_impulse.x, y = this.m_impulse.y, d.m_linearVelocity.x -= g * c, d.m_linearVelocity.y -= g * y, d.m_angularVelocity -= s * (l * y - m * c + this.m_motorImpulse + this.m_impulse.z), f.m_linearVelocity.x += j * c, f.m_linearVelocity.y += j * y, f.m_angularVelocity += x * (n * y - q * c + this.m_motorImpulse + this.m_impulse.z)) : (this.m_impulse.SetZero(), this.m_motorImpulse = 0);
    };
    N.prototype.SolveVelocityConstraints = function (b) {
      var c = this.m_bodyA,
        d = this.m_bodyB,
        f = 0,
        g = 0,
        j = 0,
        l = 0,
        m = 0,
        q = c.m_linearVelocity,
        s = c.m_angularVelocity,
        x = d.m_linearVelocity,
        y = d.m_angularVelocity,
        z = c.m_invMass,
        A = d.m_invMass,
        D = c.m_invI,
        F = d.m_invI;
      this.m_enableMotor && this.m_limitState != B.e_equalLimits && (g = this.m_motorMass * -(y - s - this.m_motorSpeed), j = this.m_motorImpulse, l = b.dt * this.m_maxMotorTorque, this.m_motorImpulse = e.Clamp(this.m_motorImpulse + g, -l, l), g = this.m_motorImpulse - j, s -= D * g, y += F * g);
      if (this.m_enableLimit && this.m_limitState != B.e_inactiveLimit) {
        b = c.m_xf.R;
        g = this.m_localAnchor1.x - c.m_sweep.localCenter.x;
        j = this.m_localAnchor1.y - c.m_sweep.localCenter.y;
        f = b.col1.x * g + b.col2.x * j;
        j = b.col1.y * g + b.col2.y * j;
        g = f;
        b = d.m_xf.R;
        l = this.m_localAnchor2.x - d.m_sweep.localCenter.x;
        m = this.m_localAnchor2.y - d.m_sweep.localCenter.y;
        f = b.col1.x * l + b.col2.x * m;
        m = b.col1.y * l + b.col2.y * m;
        l = f;
        b = x.x + -y * m - q.x - -s * j;
        var G = x.y + y * l - q.y - s * g;
        this.m_mass.Solve33(this.impulse3, -b, -G, -(y - s));
        this.m_limitState == B.e_equalLimits ? this.m_impulse.Add(this.impulse3) : this.m_limitState == B.e_atLowerLimit ? (f = this.m_impulse.z + this.impulse3.z, 0 > f && (this.m_mass.Solve22(this.reduced, -b, -G), this.impulse3.x = this.reduced.x, this.impulse3.y = this.reduced.y, this.impulse3.z = -this.m_impulse.z, this.m_impulse.x += this.reduced.x, this.m_impulse.y += this.reduced.y, this.m_impulse.z = 0)) : this.m_limitState == B.e_atUpperLimit && (f = this.m_impulse.z + this.impulse3.z, 0 < f && (this.m_mass.Solve22(this.reduced, -b, -G), this.impulse3.x = this.reduced.x, this.impulse3.y = this.reduced.y, this.impulse3.z = -this.m_impulse.z, this.m_impulse.x += this.reduced.x, this.m_impulse.y += this.reduced.y, this.m_impulse.z = 0));
        q.x -= z * this.impulse3.x;
        q.y -= z * this.impulse3.y;
        s -= D * (g * this.impulse3.y - j * this.impulse3.x + this.impulse3.z);
        x.x += A * this.impulse3.x;
        x.y += A * this.impulse3.y;
        y += F * (l * this.impulse3.y - m * this.impulse3.x + this.impulse3.z);
      } else b = c.m_xf.R, g = this.m_localAnchor1.x - c.m_sweep.localCenter.x, j = this.m_localAnchor1.y - c.m_sweep.localCenter.y, f = b.col1.x * g + b.col2.x * j, j = b.col1.y * g + b.col2.y * j, g = f, b = d.m_xf.R, l = this.m_localAnchor2.x - d.m_sweep.localCenter.x, m = this.m_localAnchor2.y - d.m_sweep.localCenter.y, f = b.col1.x * l + b.col2.x * m, m = b.col1.y * l + b.col2.y * m, l = f, this.m_mass.Solve22(this.impulse2, -(x.x + -y * m - q.x - -s * j), -(x.y + y * l - q.y - s * g)), this.m_impulse.x += this.impulse2.x, this.m_impulse.y += this.impulse2.y, q.x -= z * this.impulse2.x, q.y -= z * this.impulse2.y, s -= D * (g * this.impulse2.y - j * this.impulse2.x), x.x += A * this.impulse2.x, x.y += A * this.impulse2.y, y += F * (l * this.impulse2.y - m * this.impulse2.x);
      c.m_linearVelocity.SetV(q);
      c.m_angularVelocity = s;
      d.m_linearVelocity.SetV(x);
      d.m_angularVelocity = y;
    };
    N.prototype.SolvePositionConstraints = function () {
      var c = 0,
        d,
        f = this.m_bodyA,
        g = this.m_bodyB,
        j = 0,
        l = 0,
        m = 0,
        n = 0;
      if (this.m_enableLimit && this.m_limitState != B.e_inactiveLimit) {
        var c = g.m_sweep.a - f.m_sweep.a - this.m_referenceAngle,
          q = 0;
        this.m_limitState == B.e_equalLimits ? (c = e.Clamp(c - this.m_lowerAngle, -b.b2_maxAngularCorrection, b.b2_maxAngularCorrection), q = -this.m_motorMass * c, j = e.Abs(c)) : this.m_limitState == B.e_atLowerLimit ? (c -= this.m_lowerAngle, j = -c, c = e.Clamp(c + b.b2_angularSlop, -b.b2_maxAngularCorrection, 0), q = -this.m_motorMass * c) : this.m_limitState == B.e_atUpperLimit && (j = c -= this.m_upperAngle, c = e.Clamp(c - b.b2_angularSlop, 0, b.b2_maxAngularCorrection), q = -this.m_motorMass * c);
        f.m_sweep.a -= f.m_invI * q;
        g.m_sweep.a += g.m_invI * q;
        f.SynchronizeTransform();
        g.SynchronizeTransform();
      }
      d = f.m_xf.R;
      q = this.m_localAnchor1.x - f.m_sweep.localCenter.x;
      c = this.m_localAnchor1.y - f.m_sweep.localCenter.y;
      l = d.col1.x * q + d.col2.x * c;
      c = d.col1.y * q + d.col2.y * c;
      q = l;
      d = g.m_xf.R;
      var s = this.m_localAnchor2.x - g.m_sweep.localCenter.x,
        x = this.m_localAnchor2.y - g.m_sweep.localCenter.y,
        l = d.col1.x * s + d.col2.x * x,
        x = d.col1.y * s + d.col2.y * x,
        s = l,
        m = g.m_sweep.c.x + s - f.m_sweep.c.x - q,
        n = g.m_sweep.c.y + x - f.m_sweep.c.y - c,
        y = m * m + n * n;
      d = Math.sqrt(y);
      var l = f.m_invMass,
        z = g.m_invMass,
        A = f.m_invI,
        D = g.m_invI,
        F = 10 * b.b2_linearSlop;
      y > F * F && (y = 1 / (l + z), m = y * -m, n = y * -n, f.m_sweep.c.x -= 0.5 * l * m, f.m_sweep.c.y -= 0.5 * l * n, g.m_sweep.c.x += 0.5 * z * m, g.m_sweep.c.y += 0.5 * z * n, m = g.m_sweep.c.x + s - f.m_sweep.c.x - q, n = g.m_sweep.c.y + x - f.m_sweep.c.y - c);
      this.K1.col1.x = l + z;
      this.K1.col2.x = 0;
      this.K1.col1.y = 0;
      this.K1.col2.y = l + z;
      this.K2.col1.x = A * c * c;
      this.K2.col2.x = -A * q * c;
      this.K2.col1.y = -A * q * c;
      this.K2.col2.y = A * q * q;
      this.K3.col1.x = D * x * x;
      this.K3.col2.x = -D * s * x;
      this.K3.col1.y = -D * s * x;
      this.K3.col2.y = D * s * s;
      this.K.SetM(this.K1);
      this.K.AddM(this.K2);
      this.K.AddM(this.K3);
      this.K.Solve(N.tImpulse, -m, -n);
      m = N.tImpulse.x;
      n = N.tImpulse.y;
      f.m_sweep.c.x -= f.m_invMass * m;
      f.m_sweep.c.y -= f.m_invMass * n;
      f.m_sweep.a -= f.m_invI * (q * n - c * m);
      g.m_sweep.c.x += g.m_invMass * m;
      g.m_sweep.c.y += g.m_invMass * n;
      g.m_sweep.a += g.m_invI * (s * n - x * m);
      f.SynchronizeTransform();
      g.SynchronizeTransform();
      return d <= b.b2_linearSlop && j <= b.b2_angularSlop;
    };
    Box2D.postDefs.push(function () {
      Box2D.Dynamics.Joints.b2RevoluteJoint.tImpulse = new f();
    });
    Box2D.inherit(P, Box2D.Dynamics.Joints.b2JointDef);
    P.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
    P.b2RevoluteJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new f();
      this.localAnchorB = new f();
    };
    P.prototype.b2RevoluteJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = B.e_revoluteJoint;
      this.localAnchorA.Set(0, 0);
      this.localAnchorB.Set(0, 0);
      this.motorSpeed = this.maxMotorTorque = this.upperAngle = this.lowerAngle = this.referenceAngle = 0;
      this.enableMotor = this.enableLimit = !1;
    };
    P.prototype.Initialize = function (b, c, d) {
      this.bodyA = b;
      this.bodyB = c;
      this.localAnchorA = this.bodyA.GetLocalPoint(d);
      this.localAnchorB = this.bodyB.GetLocalPoint(d);
      this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
    };
    Box2D.inherit(ba, Box2D.Dynamics.Joints.b2Joint);
    ba.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
    ba.b2WeldJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_localAnchorA = new f();
      this.m_localAnchorB = new f();
      this.m_impulse = new j();
      this.m_mass = new d();
    };
    ba.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
    };
    ba.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
    };
    ba.prototype.GetReactionForce = function (b) {
      void 0 === b && (b = 0);
      return new f(b * this.m_impulse.x, b * this.m_impulse.y);
    };
    ba.prototype.GetReactionTorque = function (b) {
      void 0 === b && (b = 0);
      return b * this.m_impulse.z;
    };
    ba.prototype.b2WeldJoint = function (b) {
      this.__super.b2Joint.call(this, b);
      this.m_localAnchorA.SetV(b.localAnchorA);
      this.m_localAnchorB.SetV(b.localAnchorB);
      this.m_referenceAngle = b.referenceAngle;
      this.m_impulse.SetZero();
      this.m_mass = new d();
    };
    ba.prototype.InitVelocityConstraints = function (b) {
      var c,
        d = 0,
        e = this.m_bodyA,
        f = this.m_bodyB;
      c = e.m_xf.R;
      var g = this.m_localAnchorA.x - e.m_sweep.localCenter.x,
        j = this.m_localAnchorA.y - e.m_sweep.localCenter.y,
        d = c.col1.x * g + c.col2.x * j,
        j = c.col1.y * g + c.col2.y * j,
        g = d;
      c = f.m_xf.R;
      var l = this.m_localAnchorB.x - f.m_sweep.localCenter.x,
        m = this.m_localAnchorB.y - f.m_sweep.localCenter.y,
        d = c.col1.x * l + c.col2.x * m,
        m = c.col1.y * l + c.col2.y * m,
        l = d;
      c = e.m_invMass;
      var d = f.m_invMass,
        q = e.m_invI,
        s = f.m_invI;
      this.m_mass.col1.x = c + d + j * j * q + m * m * s;
      this.m_mass.col2.x = -j * g * q - m * l * s;
      this.m_mass.col3.x = -j * q - m * s;
      this.m_mass.col1.y = this.m_mass.col2.x;
      this.m_mass.col2.y = c + d + g * g * q + l * l * s;
      this.m_mass.col3.y = g * q + l * s;
      this.m_mass.col1.z = this.m_mass.col3.x;
      this.m_mass.col2.z = this.m_mass.col3.y;
      this.m_mass.col3.z = q + s;
      b.warmStarting ? (this.m_impulse.x *= b.dtRatio, this.m_impulse.y *= b.dtRatio, this.m_impulse.z *= b.dtRatio, e.m_linearVelocity.x -= c * this.m_impulse.x, e.m_linearVelocity.y -= c * this.m_impulse.y, e.m_angularVelocity -= q * (g * this.m_impulse.y - j * this.m_impulse.x + this.m_impulse.z), f.m_linearVelocity.x += d * this.m_impulse.x, f.m_linearVelocity.y += d * this.m_impulse.y, f.m_angularVelocity += s * (l * this.m_impulse.y - m * this.m_impulse.x + this.m_impulse.z)) : this.m_impulse.SetZero();
    };
    ba.prototype.SolveVelocityConstraints = function () {
      var b,
        c = 0,
        d = this.m_bodyA,
        e = this.m_bodyB,
        f = d.m_linearVelocity,
        g = d.m_angularVelocity,
        l = e.m_linearVelocity,
        m = e.m_angularVelocity,
        q = d.m_invMass,
        s = e.m_invMass,
        x = d.m_invI,
        y = e.m_invI;
      b = d.m_xf.R;
      var z = this.m_localAnchorA.x - d.m_sweep.localCenter.x,
        A = this.m_localAnchorA.y - d.m_sweep.localCenter.y,
        c = b.col1.x * z + b.col2.x * A,
        A = b.col1.y * z + b.col2.y * A,
        z = c;
      b = e.m_xf.R;
      var B = this.m_localAnchorB.x - e.m_sweep.localCenter.x,
        D = this.m_localAnchorB.y - e.m_sweep.localCenter.y,
        c = b.col1.x * B + b.col2.x * D,
        D = b.col1.y * B + b.col2.y * D,
        B = c;
      b = l.x - m * D - f.x + g * A;
      var c = l.y + m * B - f.y - g * z,
        F = m - g,
        G = new j();
      this.m_mass.Solve33(G, -b, -c, -F);
      this.m_impulse.Add(G);
      f.x -= q * G.x;
      f.y -= q * G.y;
      g -= x * (z * G.y - A * G.x + G.z);
      l.x += s * G.x;
      l.y += s * G.y;
      m += y * (B * G.y - D * G.x + G.z);
      d.m_angularVelocity = g;
      e.m_angularVelocity = m;
    };
    ba.prototype.SolvePositionConstraints = function () {
      var c,
        d = 0,
        f = this.m_bodyA,
        g = this.m_bodyB;
      c = f.m_xf.R;
      var l = this.m_localAnchorA.x - f.m_sweep.localCenter.x,
        m = this.m_localAnchorA.y - f.m_sweep.localCenter.y,
        d = c.col1.x * l + c.col2.x * m,
        m = c.col1.y * l + c.col2.y * m,
        l = d;
      c = g.m_xf.R;
      var q = this.m_localAnchorB.x - g.m_sweep.localCenter.x,
        n = this.m_localAnchorB.y - g.m_sweep.localCenter.y,
        d = c.col1.x * q + c.col2.x * n,
        n = c.col1.y * q + c.col2.y * n,
        q = d;
      c = f.m_invMass;
      var d = g.m_invMass,
        s = f.m_invI,
        y = g.m_invI,
        x = g.m_sweep.c.x + q - f.m_sweep.c.x - l,
        z = g.m_sweep.c.y + n - f.m_sweep.c.y - m,
        A = g.m_sweep.a - f.m_sweep.a - this.m_referenceAngle,
        B = 10 * b.b2_linearSlop,
        D = Math.sqrt(x * x + z * z),
        F = e.Abs(A);
      D > B && (s *= 1, y *= 1);
      this.m_mass.col1.x = c + d + m * m * s + n * n * y;
      this.m_mass.col2.x = -m * l * s - n * q * y;
      this.m_mass.col3.x = -m * s - n * y;
      this.m_mass.col1.y = this.m_mass.col2.x;
      this.m_mass.col2.y = c + d + l * l * s + q * q * y;
      this.m_mass.col3.y = l * s + q * y;
      this.m_mass.col1.z = this.m_mass.col3.x;
      this.m_mass.col2.z = this.m_mass.col3.y;
      this.m_mass.col3.z = s + y;
      B = new j();
      this.m_mass.Solve33(B, -x, -z, -A);
      f.m_sweep.c.x -= c * B.x;
      f.m_sweep.c.y -= c * B.y;
      f.m_sweep.a -= s * (l * B.y - m * B.x + B.z);
      g.m_sweep.c.x += d * B.x;
      g.m_sweep.c.y += d * B.y;
      g.m_sweep.a += y * (q * B.y - n * B.x + B.z);
      f.SynchronizeTransform();
      g.SynchronizeTransform();
      return D <= b.b2_linearSlop && F <= b.b2_angularSlop;
    };
    Box2D.inherit(V, Box2D.Dynamics.Joints.b2JointDef);
    V.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
    V.b2WeldJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new f();
      this.localAnchorB = new f();
    };
    V.prototype.b2WeldJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = B.e_weldJoint;
      this.referenceAngle = 0;
    };
    V.prototype.Initialize = function (b, c, d) {
      this.bodyA = b;
      this.bodyB = c;
      this.localAnchorA.SetV(this.bodyA.GetLocalPoint(d));
      this.localAnchorB.SetV(this.bodyB.GetLocalPoint(d));
      this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
    };
  })();
  (function () {
    var b = Box2D.Dynamics.b2DebugDraw;
    b.b2DebugDraw = function () {
      this.m_xformScale = this.m_fillAlpha = this.m_alpha = this.m_lineThickness = this.m_drawScale = 1;
      var b = this;
      this.m_sprite = {
        graphics: {
          clear: function () {
            b.m_ctx.clearRect(0, 0, b.m_ctx.canvas.width, b.m_ctx.canvas.height);
          }
        }
      };
    };
    b.prototype._color = function (b, d) {
      return "rgba(" + ((b & 16711680) >> 16) + "," + ((b & 65280) >> 8) + "," + (b & 255) + "," + d + ")";
    };
    b.prototype.b2DebugDraw = function () {
      this.m_drawFlags = 0;
    };
    b.prototype.SetFlags = function (b) {
      void 0 === b && (b = 0);
      this.m_drawFlags = b;
    };
    b.prototype.GetFlags = function () {
      return this.m_drawFlags;
    };
    b.prototype.AppendFlags = function (b) {
      void 0 === b && (b = 0);
      this.m_drawFlags |= b;
    };
    b.prototype.ClearFlags = function (b) {
      void 0 === b && (b = 0);
      this.m_drawFlags &= ~b;
    };
    b.prototype.SetSprite = function (b) {
      this.m_ctx = b;
    };
    b.prototype.GetSprite = function () {
      return this.m_ctx;
    };
    b.prototype.SetDrawScale = function (b) {
      void 0 === b && (b = 0);
      this.m_drawScale = b;
    };
    b.prototype.GetDrawScale = function () {
      return this.m_drawScale;
    };
    b.prototype.SetLineThickness = function (b) {
      void 0 === b && (b = 0);
      this.m_lineThickness = b;
      this.m_ctx.strokeWidth = b;
    };
    b.prototype.GetLineThickness = function () {
      return this.m_lineThickness;
    };
    b.prototype.SetAlpha = function (b) {
      void 0 === b && (b = 0);
      this.m_alpha = b;
    };
    b.prototype.GetAlpha = function () {
      return this.m_alpha;
    };
    b.prototype.SetFillAlpha = function (b) {
      void 0 === b && (b = 0);
      this.m_fillAlpha = b;
    };
    b.prototype.GetFillAlpha = function () {
      return this.m_fillAlpha;
    };
    b.prototype.SetXFormScale = function (b) {
      void 0 === b && (b = 0);
      this.m_xformScale = b;
    };
    b.prototype.GetXFormScale = function () {
      return this.m_xformScale;
    };
    b.prototype.DrawPolygon = function (b, d, e) {
      if (d) {
        var f = this.m_ctx,
          j = this.m_drawScale;
        f.beginPath();
        f.strokeStyle = this._color(e.color, this.m_alpha);
        f.moveTo(b[0].x * j, b[0].y * j);
        for (e = 1; e < d; e++) f.lineTo(b[e].x * j, b[e].y * j);
        f.lineTo(b[0].x * j, b[0].y * j);
        f.closePath();
        f.stroke();
      }
    };
    b.prototype.DrawSolidPolygon = function (b, d, e) {
      if (d) {
        var f = this.m_ctx,
          j = this.m_drawScale;
        f.beginPath();
        f.strokeStyle = this._color(e.color, this.m_alpha);
        f.fillStyle = this._color(e.color, this.m_fillAlpha);
        f.moveTo(b[0].x * j, b[0].y * j);
        for (e = 1; e < d; e++) f.lineTo(b[e].x * j, b[e].y * j);
        f.lineTo(b[0].x * j, b[0].y * j);
        f.closePath();
        f.fill();
        f.stroke();
      }
    };
    b.prototype.DrawCircle = function (b, d, e) {
      if (d) {
        var f = this.m_ctx,
          j = this.m_drawScale;
        f.beginPath();
        f.strokeStyle = this._color(e.color, this.m_alpha);
        f.arc(b.x * j, b.y * j, d * j, 0, 2 * Math.PI, !0);
        f.closePath();
        f.stroke();
      }
    };
    b.prototype.DrawSolidCircle = function (b, d, e, f) {
      if (d) {
        var j = this.m_ctx,
          m = this.m_drawScale,
          l = b.x * m,
          g = b.y * m;
        j.moveTo(0, 0);
        j.beginPath();
        j.strokeStyle = this._color(f.color, this.m_alpha);
        j.fillStyle = this._color(f.color, this.m_fillAlpha);
        j.arc(l, g, d * m, 0, 2 * Math.PI, !0);
        j.moveTo(l, g);
        j.lineTo((b.x + e.x * d) * m, (b.y + e.y * d) * m);
        j.closePath();
        j.fill();
        j.stroke();
      }
    };
    b.prototype.DrawSegment = function (b, d, e) {
      var f = this.m_ctx,
        j = this.m_drawScale;
      f.strokeStyle = this._color(e.color, this.m_alpha);
      f.beginPath();
      f.moveTo(b.x * j, b.y * j);
      f.lineTo(d.x * j, d.y * j);
      f.closePath();
      f.stroke();
    };
    b.prototype.DrawTransform = function (b) {
      var d = this.m_ctx,
        e = this.m_drawScale;
      d.beginPath();
      d.strokeStyle = this._color(16711680, this.m_alpha);
      d.moveTo(b.position.x * e, b.position.y * e);
      d.lineTo((b.position.x + this.m_xformScale * b.R.col1.x) * e, (b.position.y + this.m_xformScale * b.R.col1.y) * e);
      d.strokeStyle = this._color(65280, this.m_alpha);
      d.moveTo(b.position.x * e, b.position.y * e);
      d.lineTo((b.position.x + this.m_xformScale * b.R.col2.x) * e, (b.position.y + this.m_xformScale * b.R.col2.y) * e);
      d.closePath();
      d.stroke();
    };
  })();
  var i;
  for (i = 0; i < Box2D.postDefs.length; ++i) Box2D.postDefs[i]();
  delete Box2D.postDefs;
  "undefined" != typeof global && (global.Box2D = Box2D);
  ig.baked = !0;
  ig.module("plugins.box2d.lib").defines(function () {});
  ig.baked = !0;
  ig.module("plugins.box2d.game").requires("plugins.box2d.lib", "impact.game").defines(function () {
    ig.Box2DGame = ig.Game.extend({
      collisionRects: [],
      debugCollisionRects: !1,
      worldVelocityIterations: 6,
      worldPositionIterations: 6,
      updateTimestep: 0.02,
      updateTimestepAccumulator: 0,
      updateTimestepAccumulatorRatio: 0,
      lastUpdateTime: -1,
      nWorldSteps: 0,
      bodyDestroyQueue: [],
      defaultTileSegmentsDef: {},
      defaultTileVerticesDef: {},
      loadLevel: function (b) {
        this.collisionMap = ig.CollisionMap.staticNoCollision;
        for (var c = 0; c < b.layer.length; c++) {
          var d = b.layer[c];
          "collision" == d.name && (this.collisionMap = new ig.CollisionMap(d.tilesize, d.data));
        }
        this.mergedShape = this.mergeRectangles(this.collisionMap);
        ig.world = this.createWorldFromCollisionMap(this.collisionMap, this.mergedShape);
        this.setupContactListener();
        this.parent(b);
      },
      createWorldFromMap: function (b, c, d, e) {
        var f = new Box2D.Collision.b2AABB();
        f.lowerBound.Set(0, 0);
        f.upperBound.Set((c + 1) * e * Box2D.SCALE, (d + 1) * e * Box2D.SCALE);
        f = new Box2D.Common.Math.b2Vec2(0, ig.game.gravity * Box2D.SCALE);
        world = new Box2D.Dynamics.b2World(f, !0);
        b = ig.copy(b);
        this.collisionRects = [];
        for (f = 0; f < d; f++) for (var j = 0; j < c; j++) if (b[f][j]) {
          var m = this._extractRectFromMap(b, c, d, j, f);
          this.collisionRects.push(m);
        }
        for (c = 0; c < this.collisionRects.length; c++) d = this.collisionRects[c], b = new Box2D.Dynamics.b2BodyDef(), b.position.Set(d.x * e * Box2D.SCALE + d.width * e / 2 * Box2D.SCALE, d.y * e * Box2D.SCALE + d.height * e / 2 * Box2D.SCALE), b = world.CreateBody(b), f = new Box2D.Collision.Shapes.b2PolygonShape(), f.SetAsBox(d.width * e / 2 * Box2D.SCALE, d.height * e / 2 * Box2D.SCALE), b.CreateFixture2(f);
        return world;
      },
      _extractRectFromMap: function (b, c, d, e, f) {
        for (var j = {
            x: e,
            y: f,
            width: 1,
            height: 1
          }, m = e + 1; m < c && b[f][m]; m++) j.width++, b[f][m] = 0;
        for (c = f + 1; c < d; c++) {
          f = 0;
          for (m = e; m < e + j.width && b[c][m]; m++) f++;
          if (f == j.width) {
            j.height++;
            for (m = e; m < e + j.width; m++) b[c][m] = 0;
          } else break;
        }
        return j;
      },
      update: function () {
        if (!ig.game.box2dPaused && ig.world) {
          var b = ig.system.clock.delta() - this.lastUpdateTime;
          this.lastUpdateTime = ig.system.clock.delta();
          this.updateTimestepAccumulator += b;
          this.nWorldSteps = Math.floor(this.updateTimestepAccumulator / this.updateTimestep);
          0 < this.nWorldSteps && (this.updateTimestepAccumulator -= this.nWorldSteps * this.updateTimestep);
          this.updateTimestepAccumulatorRatio = this.updateTimestepAccumulator / this.updateTimestep;
          for (var b = Math.min(this.nWorldSteps, 5), c = 0; c < b; c++) {
            this.resetSmoothStates();
            ig.world.Step(this.updateTimestep, this.worldVelocityIterations, this.worldPositionIterations);
            for (var d = ig.world.GetBodyList(); d; d = d.m_next) if (d.IsAwake()) {
              var e = d.GetFixtureList();
              if (!e || !e.IsSensor()) {
                var e = 0.6 > Math.abs(d.GetAngularVelocity()),
                  f = 0.6 > Math.abs(d.GetLinearVelocity().Length());
                e && f ? 30 < d.slowTime ? (d.slowTime = 0, d.SetAwake(!1)) : d.slowTime += 1 : d.slowTime = 0;
              }
            }
          }
          ig.world.ClearForces();
          this.smoothStates();
        }
        this.parent();
        if (0 < this.bodyDestroyQueue.length) {
          for (c = 0; c < this.bodyDestroyQueue.length; c++) ig.world.DestroyBody(this.bodyDestroyQueue[c]);
          this.bodyDestroyQueue = [];
        }
      },
      smoothStates: function () {
        for (var b = 1 - this.updateTimestepAccumulatorRatio, c = 0; c < this.entities.length; c++) {
          var d = this.entities[c];
          null != d.body && d.dynamicType != Box2D.Dynamics.b2Body.b2_staticBody && (d.pos.x = this.updateTimestepAccumulatorRatio * d.body.GetPosition().x + b * d.previousBodyPosition.x, d.pos.y = this.updateTimestepAccumulatorRatio * d.body.GetPosition().y + b * d.previousBodyPosition.y, d.angle = this.updateTimestepAccumulatorRatio * d.body.GetAngle() + b * d.previousBodyAngle, d.currentAnim && (d.currentAnim.update(), d.currentAnim.angle = d.angle));
        }
      },
      resetSmoothStates: function () {
        for (var b = 0; b < this.entities.length; b++) {
          var c = this.entities[b];
          null != c.body && c.dynamicType != Box2D.Dynamics.b2Body.b2_staticBody && (c.pos.x = c.body.GetPosition().x, c.previousBodyPosition.x = c.pos.x, c.pos.y = c.body.GetPosition().y, c.previousBodyPosition.y = c.pos.y, c.angle = c.body.GetAngle(), c.previousBodyAngle = c.body.GetAngle(), c.currentAnim && (c.currentAnim.update(), c.currentAnim.angle = c.angle));
        }
      },
      draw: function () {
        this.parent();
        if (this.debugCollisionRects) for (var b = this.collisionMap.tilesize, c = 0; c < this.collisionRects.length; c++) {
          var d = this.collisionRects[c];
          ig.system.context.strokeStyle = "#00ff00";
          ig.system.context.strokeRect(ig.system.getDrawPos(d.x * b - this.screen.x), ig.system.getDrawPos(d.y * b - this.screen.y), ig.system.getDrawPos(d.width * b), ig.system.getDrawPos(d.height * b));
        }
      },
      queueDestroyBody: function (b) {
        this.bodyDestroyQueue.push(b);
      },
      mergeRectangles: function (b) {
        if (void 0 != b.data) {
          for (var c = ig.copy(b.data), d = [], e = 0; e < c.length; e++) {
            void 0 == d[e] && (d[e] = []);
            for (var f = 0; f < c[0].length; f++) d[e].push(0);
          }
          c = this._shapesFromCollisionMap(b);
          b = [];
          f = [];
          for (e = 0; e < c.length; e++) 1 == c[e].id ? (f.push(c[e]), d[c[e].tile.y][c[e].tile.x] = f[f.length - 1]) : b.push(c[e]);
          for (e = f.length - 1; 0 <= e; e--) 1 == f[e].id && (f[e].neighbours = this.checkNeighbour(d, f[e].tile.x, f[e].tile.y));
          d = this.linkSquares(f, d);
          return b.concat(d);
        }
      },
      sideAbleCheck: function (b, c, d, e) {
        return b ? b[d] ? b[d][c] ? b[d][c].neighbours ? -1 < b[d][c].neighbours.indexOf(e) ? !0 : !1 : !1 : !1 : !1 : !1;
      },
      linkSquares: function (b, c) {
        for (var d = [], e = [], f = 0; f < b.length; f++) {
          var j = b[f],
            m = j.tile.x,
            l = j.tile.y;
          if (!(-1 < d.indexOf(j))) if (d.push(j), -1 < j.neighbours.indexOf("right")) {
            for (var g = 1; !0 == this.sideAbleCheck(c, j.tile.x + g, j.tile.y, "right");) j.tile.x + g < m && (m = j.tile.x + g), d.push(c[j.tile.y][j.tile.x + g]), g++;
            c[j.tile.y][m].settings.size.x *= g + 1;
            for (var q = c[j.tile.y][m].settings.vertices, y = 0; y < q.length; y++) q[y].x *= g + 1;
            d.push(c[j.tile.y][j.tile.x + g + 1]);
            e.push(c[j.tile.y][m]);
          } else if (-1 < j.neighbours.indexOf("down") && -1 == j.neighbours.indexOf("right") && -1 == j.neighbours.indexOf("left")) {
            j.tile.y + g < l && (l = j.tile.y + g);
            q = 0;
            for (m = 1; !0 == this.sideAbleCheck(c, j.tile.x, j.tile.y + m, "down") && !1 == this.sideAbleCheck(c, j.tile.x, j.tile.y + m, "right") && !1 == this.sideAbleCheck(c, j.tile.x, j.tile.y + m, "left");) q = 1, d.push(c[j.tile.y + m][j.tile.x]), m++;
            !0 == this.sideAbleCheck(c, j.tile.x, j.tile.y + m, "up") && !1 == this.sideAbleCheck(c, j.tile.x, j.tile.y + m, "right") && !1 == this.sideAbleCheck(c, j.tile.x, j.tile.y + m, "left") ? q = 1 : !0 == this.sideAbleCheck(c, j.tile.x, j.tile.y + m, "up") && !0 == this.sideAbleCheck(c, j.tile.x, j.tile.y + m, "right") ? (d.splice(d.indexOf(c[j.tile.y + m][j.tile.x]), 1), m--) : !0 == this.sideAbleCheck(c, j.tile.x, j.tile.y + m, "up") && !0 == this.sideAbleCheck(c, j.tile.x, j.tile.y + m, "left") && (d.splice(d.indexOf(c[j.tile.y + m][j.tile.x]), 1), m--);
            if (1 == q) {
              c[l][j.tile.x].settings.size.y *= m + 1;
              q = c[l][j.tile.x].settings.vertices;
              for (y = 0; y < q.length; y++) q[y].y *= m + 1;
              c[j.tile.y + m] && d.push(c[j.tile.y + m][j.tile.x]);
            }
            e.push(c[l][j.tile.x]);
          } else if (!(-1 < j.neighbours.indexOf("left"))) if (-1 < j.neighbours.indexOf("up")) {
            if (!0 == this.sideAbleCheck(c, j.tile.x, j.tile.y - 1, "down") && (!0 == this.sideAbleCheck(c, j.tile.x, j.tile.y - 1, "right") || !0 == this.sideAbleCheck(c, j.tile.x, j.tile.y - 1, "left"))) d.push(c[j.tile.y][j.tile.x]), e.push(c[j.tile.y][j.tile.x]);
          } else d.push(c[j.tile.y][j.tile.x]), e.push(c[j.tile.y][j.tile.x]);
        }
        return e;
      },
      getNeighbourTiles: function (b, c, d, e) {
        switch (e) {
          case "left":
            return [{
              x: c - 1,
              y: d
            }];
          case "right":
            return [{
              x: c + 1,
              y: d
            }];
          case "up":
            return [{
              x: c,
              y: d - 1
            }];
          case "down":
            return [{
              x: c,
              y: d + 1
            }];
          case "topL":
            return [{
              x: c,
              y: d - 1
            }, {
              x: c - 1,
              y: d
            }, {
              x: c - 1,
              y: d - 1
            }];
          case "topR":
            return [{
              x: c,
              y: d - 1
            }, {
              x: c + 1,
              y: d
            }, {
              x: c + 1,
              y: d - 1
            }];
          case "bottomL":
            return [{
              x: c,
              y: d + 1
            }, {
              x: c - 1,
              y: d
            }, {
              x: c - 1,
              y: d + 1
            }];
          case "bottomR":
            return [{
              x: c,
              y: d + 1
            }, {
              x: c + 1,
              y: d
            }, {
              x: c + 1,
              y: d + 1
            }];
        }
      },
      checkNeighbour: function (b, c, d) {
        var e = [];
        0 != this.checkArr(b, c - 1, d) && e.push("left");
        0 != this.checkArr(b, c, d + 1) && e.push("down");
        0 != this.checkArr(b, c + 1, d) && e.push("right");
        0 != this.checkArr(b, c, d - 1) && e.push("up");
        return e;
      },
      checkArr: function (b, c, d) {
        return void 0 == b[d] ? 0 : void 0 == b[d][c] ? 0 : b[d][c];
      },
      createWorldFromCollisionMap: function (b, c) {
        var d = new Box2D.Common.Math.b2Vec2(0, 0),
          d = new Box2D.Common.Math.b2Vec2(0, ig.game.gravity * Box2D.SCALE);
        world = new Box2D.Dynamics.b2World(d, !0);
        for (var d = void 0 != c ? c : this._shapesFromCollisionMap(this.collisionMap), e = 0; e < d.length; e++) {
          var f = d[e],
            j = f.settings.size.x,
            m = f.settings.size.y,
            l = f.settings.vertices,
            g = new Box2D.Dynamics.b2BodyDef();
          g.position.Set(f.x * Box2D.SCALE + j / 2 * Box2D.SCALE, f.y * Box2D.SCALE + m / 2 * Box2D.SCALE);
          j = world.CreateBody(g);
          f = new Box2D.Collision.Shapes.b2PolygonShape();
          f.SetAsArray(l, l.length);
          j.CreateFixture2(f);
        }
        return world;
      },
      setupContactListener: function () {
        var b = function (b, c, f) {
            var j = c.GetFixtureA().GetBody().entity,
              m = c.GetFixtureB().GetBody().entity;
            if (j && m) j[b](m, c, f), m[b](j, c, f);else if (j && !m) j[b](null, c, f);else if (m && !j) m[b](null, c, f);
          },
          c = new Box2D.Dynamics.b2ContactListener();
        c.BeginContact = function (c) {
          b("beginContact", c);
        };
        c.EndContact = function (c) {
          b("endContact", c);
        };
        c.PostSolve = function (c, e) {
          b("postSolve", c, e);
        };
        c.PreSolve = function (c, e) {
          b("preSolve", c, e);
        };
        ig.world.SetContactListener(c);
      },
      _shapesFromCollisionMap: function (b) {
        var c = [];
        if (b instanceof ig.CollisionMap) {
          var d = ig.copy(b.data),
            e = b.tilesize,
            f = b.width,
            j = b.height,
            m,
            l,
            g,
            q,
            y,
            z,
            A,
            B,
            H,
            D;
          for (z = 0; z < j; z++) for (y = 0; y < f; y++) {
            D = this._shapeFromTile(b, y, z);
            H = {
              id: b.data[z][y],
              ix: y,
              iy: z,
              x: y * e,
              y: z * e,
              width: e,
              height: e,
              shape: D
            };
            if (0 < D.vertices.length) {
              l = [];
              m = D.vertices;
              g = D.segments;
              A = 0;
              for (B = g.length; A < B; A++) {
                q = g[A];
                var s = m[q.a],
                  G = H.width / 20,
                  F = H.height / 20;
                l[q.a] = {
                  x: s.x.map(0, 1, -G, G),
                  y: s.y.map(0, 1, -F, F)
                };
              }
              D.vertices = l;
              D.vertices[D.vertices.length - 1].x === D.vertices[0].x && D.vertices[D.vertices.length - 1].y === D.vertices[0].y && D.vertices.pop();
              m = {
                id: H.id,
                settings: {
                  size: {
                    x: H.width,
                    y: H.height
                  },
                  vertices: ig.copy(D.vertices)
                },
                x: H.x,
                y: H.y,
                tile: {
                  x: y,
                  y: z
                }
              };
              c.push(m);
            }
            d[z][y] = H;
          }
        }
        return c;
      },
      _shapeFromTile: function (b, c, d) {
        var e;
        e = b.data[d][c];
        b = this._verticesFromTile(b, c, d);
        var f;
        if (b) if (this.defaultTileSegmentsDef[e]) f = this.defaultTileSegmentsDef[e];else {
          this.defaultTileSegmentsDef[e] = f = [];
          e = 0;
          for (c = b.length; e < c; e++) {
            var j = b[e];
            d = e === c - 1 ? 0 : e + 1;
            var m = b[d],
              l = m.x - j.x,
              j = m.y - j.y,
              m = Math.sqrt(l * l + j * j);
            f.push({
              a: e,
              b: d,
              normal: {
                x: j / m,
                y: -l / m
              }
            });
          }
        }
        return {
          vertices: b,
          segments: f || []
        };
      },
      _verticesFromTile: function (b, c, d) {
        c = b.data[d][c];
        if (this.defaultTileVerticesDef[c]) d = this.defaultTileVerticesDef[c];else if (1 === c) d = [{
          x: 0,
          y: 0
        }, {
          x: 1,
          y: 0
        }, {
          x: 1,
          y: 1
        }, {
          x: 0,
          y: 1
        }];else {
          d = [];
          if (b = b.tiledef[c]) {
            var e = d[0] = {
                x: b[0],
                y: b[1]
              },
              f = d[1] = {
                x: b[2],
                y: b[3]
              };
            b = e.x;
            var e = e.y,
              j = f.x,
              f = f.y,
              m = j - b,
              l = f - e,
              g = d[2] = {
                x: 0 > l ? 1 : 0,
                y: 0 < m ? 1 : 0
              },
              q = g.x,
              g = g.y,
              y;
            y = !1;
            if (1 > Math.abs(m) && 1 > Math.abs(l)) {
              var m = _utv2.pointQuadrant(b, e, 0.5, 0.5),
                l = _utv2.pointQuadrant(j, f, 0.5, 0.5),
                z = _utv2.pointQuadrant(q, g, 0.5, 0.5);
              !(m & z) && !(l & z) && (y = !0);
            }
            !0 === y ? (q !== g ? (y = q, l = g, 1 == q ? (g = 1, m = 0) : (g = 0, m = 1)) : (m = q, l = 1 == q ? y = 0 : y = 1), d[3] = {
              x: y,
              y: g
            }, d[4] = {
              x: m,
              y: l
            }) : (q !== g ? (y = q, l = g, 1 == q ? (g = Math.max(e, f), m = Math.min(b, j)) : (g = Math.min(e, f), m = Math.max(b, j))) : (m = q, 1 == q ? (y = Math.min(b, j), l = Math.min(e, f)) : (y = Math.max(b, j), l = Math.max(e, f))), y === b && g === e || y === j && g === f ? m === b && l === e || m === j && l === f || (d[3] = {
              x: m,
              y: l
            }) : d[3] = {
              x: y,
              y: g
            });
            d = this._pointsToConvexHull(d);
          }
          this.defaultTileVerticesDef[c] = d;
        }
        return d;
      },
      _pointsToConvexHull: function (b) {
        if (3 > b.length) return b;
        var c,
          d,
          e = 0,
          f = b[e],
          j;
        c = 1;
        for (d = b.length; c < d; c++) j = b[c], j.y === f.y ? j.x < f.x && (e = c, f = j) : j.y < f.y && (e = c, f = j);
        var m = [],
          l;
        c = 0;
        for (d = b.length; c < d; c++) c !== e && (j = b[c], l = {
          x: j.x,
          y: j.y
        }, l.angle = Math.atan((j.y - f.y) / (j.x - f.x)), 0 > l.angle && (l.angle += Math.PI), l.distance = (j.x - f.x) * (j.x - f.x) + (j.y - f.y) * (j.y - f.y), l.index = c, m.push(l));
        m.sort(function (b, c) {
          return b.angle < c.angle ? -1 : b.angle > c.angle ? 1 : b.distance < c.distance ? -1 : b.distance > c.distance ? 1 : 0;
        });
        m.unshift(m[m.length - 1], {
          x: f.x,
          y: f.y,
          index: e
        });
        e = 2;
        c = 3;
        for (d = b.length; c <= d; c++) {
          for (; 0 >= this._pointsCW(m[e - 1], m[e], m[c]);) e--;
          e++;
          f = m[c];
          m[c] = m[e];
          m[e] = f;
        }
        d = [];
        for (c = 0; c <= e; c++) d[c] = b[m[c].index];
        return d;
      },
      _pointsCW: function (b, c, d) {
        return (c.x - b.x) * (d.y - b.y) - (c.y - b.y) * (d.x - b.x);
      }
    });
    Box2D.Common.b2Settings.b2_maxTranslation = 10;
    Box2D.Common.b2Settings.b2_maxTranslationSquared = 100;
    Box2D.Common.b2Settings.b2_velocityThreshold = 1;
  });
  ig.baked = !0;
  ig.module("plugins.fullscreen").requires("impact.entity").defines(function () {
    ig.Fullscreen = {
      enableFullscreenButton: !1,
      _isEnabled: "notChecked",
      isEnabled: function () {
        "notChecked" == this._isEnabled && (this._isEnabled = document.fullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled ? !0 : !1);
        return this._isEnabled;
      },
      isFullscreen: function () {
        return ig.Fullscreen.isEnabled() && (document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement) ? !0 : !1;
      },
      toggleFullscreen: function () {
        ig.Fullscreen.isFullscreen() ? ig.Fullscreen.exitFullscreen() : ig.Fullscreen.requestFullscreen();
        ig.sizeHandler.orientationDelayHandler();
      },
      requestFullscreen: function () {
        var b = document.documentElement;
        b.requestFullscreen ? b.requestFullscreen() : b.webkitRequestFullscreen ? b.webkitRequestFullscreen() : b.mozRequestFullScreen ? b.mozRequestFullScreen() : b.msRequestFullscreen ? b.msRequestFullscreen() : console.log("no request fullscreen method available");
      },
      exitFullscreen: function () {
        document.exitFullscreen ? document.exitFullscreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.msExitFullscreen ? document.msExitFullscreen() : console.log("no exit fullscreen method available");
      },
      divs: {}
    };
    ig.Director.inject({
      loadLevel: function (b) {
        var c = ig.Fullscreen.divs,
          d;
        for (d in c) c = ig.domHandler.getElementById("#" + d), ig.domHandler.hide(c);
        return this.parent(b);
      }
    });
    ig.SizeHandler.inject({
      resize: function () {
        this.parent();
        var b = ig.Fullscreen.divs,
          c;
        for (c in b) {
          var d = Math.min(ig.sizeHandler.scaleRatioMultiplier.x, ig.sizeHandler.scaleRatioMultiplier.y),
            e = ig.domHandler.getElementById("#" + c),
            f = b[c].entity_pos_x,
            j = b[c].entity_pos_y,
            m = b[c].width,
            l = b[c].height,
            g = ig.domHandler.getElementById("#canvas"),
            q = ig.domHandler.getOffsets(g);
          ig.ua.mobile ? (g = q.left, q = q.top, ig.sizeHandler.disableStretchToFitOnMobileFlag ? (f = Math.floor(g + f * ig.sizeHandler.scaleRatioMultiplier.x) + "px", j = Math.floor(q + j * ig.sizeHandler.scaleRatioMultiplier.y) + "px", m = Math.floor(m * ig.sizeHandler.scaleRatioMultiplier.x) + "px", l = Math.floor(l * ig.sizeHandler.scaleRatioMultiplier.y) + "px") : (f = Math.floor(f * ig.sizeHandler.sizeRatio.x) + "px", j = Math.floor(j * ig.sizeHandler.sizeRatio.y) + "px", m = Math.floor(m * ig.sizeHandler.sizeRatio.x) + "px", l = Math.floor(l * ig.sizeHandler.sizeRatio.y) + "px")) : (g = q.left, q = q.top, f = Math.floor(g + f * d) + "px", j = Math.floor(q + j * d) + "px", m = Math.floor(m * d) + "px", l = Math.floor(l * d) + "px");
          ig.domHandler.css(e, {
            "float": "left",
            position: "absolute",
            left: f,
            top: j,
            width: m,
            height: l,
            "z-index": 3
          });
          b[c]["font-size"] && ig.domHandler.css(e, {
            "font-size": b[c]["font-size"] * d + "px"
          });
        }
      }
    });
    ig.FullscreenButton = ig.Entity.extend({
      enterImage: null,
      exitImage: null,
      isReady: !1,
      zIndex: 999999,
      identifier: null,
      prevPos: {
        x: 0,
        y: 0
      },
      invisImagePath: "media/graphics/misc/invisible.png",
      init: function (b, c, d) {
        this.parent(b, c, d);
        ig.Fullscreen.isEnabled() && ig.Fullscreen.enableFullscreenButton ? this.enterImage.loaded ? this.initSize() : this.enterImage.loadCallback = function () {
          this.initSize();
        }.bind(this) : this.kill();
      },
      kill: function () {
        this.parent();
      },
      destroy: function () {
        this.parent();
        console.log("destroy");
      },
      initSize: function () {
        this.size.x = this.enterImage.width;
        this.size.y = this.enterImage.height;
        this.createClickableLayer();
        this.isReady = !0;
      },
      createClickableLayer: function () {
        this.identifier = "fullscreen-button-layer";
        var b = ig.domHandler.getElementById("#" + this.identifier);
        b ? (ig.domHandler.show(b), ig.domHandler.attr(b, "onclick", "ig.Fullscreen.toggleFullscreen()")) : this.createClickableOutboundLayer();
      },
      update: function (b, c) {
        b = this.pos.x;
        c = this.pos.y;
        this.isReady && !(this.prevPos.x === b && this.prevPos.y === c) && (ig.Fullscreen.divs[this.identifier] = {}, ig.Fullscreen.divs[this.identifier].width = this.size.x, ig.Fullscreen.divs[this.identifier].height = this.size.y, ig.Fullscreen.divs[this.identifier].entity_pos_x = this.pos.x, ig.Fullscreen.divs[this.identifier].entity_pos_y = this.pos.y, this.prevPos.x = b, this.prevPos.y = c);
      },
      specialDraw: !0,
      draw: function (b) {
        b && this.isReady && (ig.Fullscreen.isFullscreen() ? this.exitImage.draw(this.pos.x, this.pos.y) : this.enterImage.draw(this.pos.x, this.pos.y));
      },
      createClickableOutboundLayer: function () {
        var b = this.identifier,
          c = this.invisImagePath,
          d = ig.domHandler.create("div");
        ig.domHandler.attr(d, "id", b);
        ig.domHandler.attr(d, "onclick", "ig.Fullscreen.toggleFullscreen()");
        var e = ig.domHandler.create("a"),
          f = ig.domHandler.create("img");
        ig.domHandler.css(f, {
          width: "100%",
          height: "100%"
        });
        ig.domHandler.attr(f, "src", c);
        c = Math.min(ig.sizeHandler.scaleRatioMultiplier.x, ig.sizeHandler.scaleRatioMultiplier.y);
        if (ig.ua.mobile) {
          var j = ig.domHandler.getElementById("#canvas"),
            j = ig.domHandler.getOffsets(j),
            m = j.left,
            l = j.top;
          console.log(j.left);
          ig.sizeHandler.disableStretchToFitOnMobileFlag ? (j = Math.floor(m + this.pos.x * ig.sizeHandler.scaleRatioMultiplier.x) + "px", l = Math.floor(l + this.pos.y * ig.sizeHandler.scaleRatioMultiplier.y) + "px", m = Math.floor(this.size.x * ig.sizeHandler.scaleRatioMultiplier.x) + "px", c = Math.floor(this.size.y * ig.sizeHandler.scaleRatioMultiplier.y) + "px") : (j = Math.floor(this.pos.x * ig.sizeHandler.sizeRatio.x) + "px", l = Math.floor(this.pos.y * ig.sizeHandler.sizeRatio.y) + "px", m = Math.floor(this.size.x * ig.sizeHandler.sizeRatio.x) + "px", c = Math.floor(this.size.y * ig.sizeHandler.sizeRatio.y) + "px");
        } else j = ig.domHandler.getElementById("#canvas"), j = ig.domHandler.getOffsets(j), m = j.left, l = j.top, ig.sizeHandler.enableStretchToFitOnDesktopFlag ? (j = Math.floor(m + this.pos.x * ig.sizeHandler.sizeRatio.x) + "px", l = Math.floor(l + this.pos.y * ig.sizeHandler.sizeRatio.y) + "px", m = Math.floor(this.size.x * ig.sizeHandler.sizeRatio.x) + "px", c = Math.floor(this.size.y * ig.sizeHandler.sizeRatio.y) + "px") : (j = Math.floor(m + this.pos.x * c) + "px", l = Math.floor(l + this.pos.y * c) + "px", m = Math.floor(this.size.x * c) + "px", c = Math.floor(this.size.y * c) + "px");
        ig.domHandler.css(d, {
          "float": "left",
          position: "absolute",
          left: j,
          top: l,
          width: m,
          height: c,
          "z-index": 3
        });
        ig.domHandler.addEvent(d, "mousemove", ig.input.mousemove.bind(ig.input), !1);
        ig.domHandler.appendChild(e, f);
        ig.domHandler.appendChild(d, e);
        ig.domHandler.appendToBody(d);
        ig.Fullscreen.divs[b] = {};
        ig.Fullscreen.divs[b].width = this.size.x;
        ig.Fullscreen.divs[b].height = this.size.y;
        ig.Fullscreen.divs[b].entity_pos_x = this.pos.x;
        ig.Fullscreen.divs[b].entity_pos_y = this.pos.y;
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.box2d.joncomDebug").requires("plugins.box2d.game").defines(function () {
    ig.Box2DDebug = ig.Class.extend({
      drawer: null,
      canvas: null,
      world: null,
      alpha: 0.2,
      thickness: 1,
      clearBeforeDraw: !1,
      init: function (b, c, d) {
        this.world = b;
        this.canvas = ig.system.canvas;
        this.drawer = new Box2D.Dynamics.b2DebugDraw();
        this.drawer.SetSprite(this);
        this.drawer.SetDrawScale(1 / Box2D.SCALE * ig.system.scale);
        this.drawer.SetFillAlpha(c || this.alpha);
        this.drawer.SetLineThickness(d || this.thickness);
        this.drawer.SetFlags(Box2D.Dynamics.b2DebugDraw.e_shapeBit | Box2D.Dynamics.b2DebugDraw.e_jointBit);
        b.SetDebugDraw(this.drawer);
      },
      draw: function () {
        ig.Entity._debugShowBoxes && (ig.system.context.save(), ig.system.context.translate(-ig.game.screen.x * ig.system.scale, -ig.game.screen.y * ig.system.scale), this.world.DrawDebugData(), ig.system.context.restore());
      },
      clearRect: function () {
        this.clearBeforeDraw && ig.system.context.clearRect(ig.game.screen.x * ig.system.scale, ig.game.screen.y * ig.system.scale, ig.system.width * ig.system.scale, ig.system.height * ig.system.scale);
      },
      beginPath: function () {
        ig.system.context.lineWidth = this.strokeWidth;
        ig.system.context.fillStyle = this.fillStyle;
        ig.system.context.strokeStyle = this.strokeSyle;
        ig.system.context.beginPath();
      },
      arc: function (b, c, d, e, f, j) {
        ig.system.context.arc(b, c, d, e, f, j);
      },
      closePath: function () {
        ig.system.context.closePath();
      },
      fill: function () {
        ig.system.context.fillStyle = this.fillStyle;
        ig.system.context.fill();
      },
      stroke: function () {
        ig.system.context.stroke();
      },
      moveTo: function (b, c) {
        ig.system.context.moveTo(b, c);
      },
      lineTo: function (b, c) {
        ig.system.context.lineTo(b, c);
        ig.system.context.stroke();
      }
    });
    ig.Game.inject({
      loadLevel: function (b) {
        this.parent(b);
        this.debugDrawer = new ig.Box2DDebug(ig.world);
      },
      draw: function () {
        this.parent();
        ig.ua.mobile || this.debugDrawer.draw();
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.data.color-rgb").defines(function () {
    ColorRGB = function (b, c, d, e) {
      this.r = b || 0;
      this.g = c || 0;
      this.b = d || 0;
      this.a = e || 0;
    };
    ColorRGB.prototype = {
      setRandomColor: function () {
        this.r = Math.round(255 * Math.random());
        this.g = Math.round(255 * Math.random());
        this.b = Math.round(255 * Math.random());
      },
      getStyle: function () {
        return "rgba(" + this.r + "," + this.g + "," + this.b + "," + this.a + ")";
      },
      getHex: function () {
        for (var b = this.r.toString(16), c = this.g.toString(16), d = this.b.toString(16); 2 > b.length;) b = "0" + b;
        for (; 2 > c.length;) c = "0" + c;
        for (; 2 > d.length;) d = "0" + d;
        return "#" + b + c + d;
      },
      getInvertedColor: function () {
        return new ColorRGB(255 - this.r, 255 - this.g, 255 - this.b, 255 - this.a);
      },
      clone: function () {
        return new ColorRGB(this.r, this.g, this.b, this.a);
      }
    };
  });
  this.START_BRANDING_SPLASH;
  ig.baked = !0;
  ig.module("plugins.branding.splash").requires("impact.impact", "impact.entity").defines(function () {
    ig.BrandingSplash = ig.Class.extend({
      init: function () {
        ig.game.spawnEntity(EntityBranding, 0, 0);
        console.log("spawn branding");
      }
    });
    EntityBranding = ig.Entity.extend({
      gravityFactor: 0,
      size: {
        x: 32,
        y: 32
      },
      splash: new ig.Image("branding/splash1.png"),
      init: function (b, c, d) {
        this.parent(b, c, d);
        320 >= ig.system.width ? (this.size.x = 320, this.size.y = 200) : (this.size.x = 480, this.size.y = 240);
        this.pos.x = (ig.system.width - this.size.x) / 2;
        this.pos.y = -this.size.y - 200;
        this.endPosY = (ig.system.height - this.size.y) / 2;
        b = this.tween({
          pos: {
            y: this.endPosY
          }
        }, 0.5, {
          easing: ig.Tween.Easing.Bounce.EaseIn
        });
        c = this.tween({}, 2.5, {
          onComplete: function () {
            ig.game.director.loadLevel(ig.game.director.currentLevel);
          }
        });
        b.chain(c);
        b.start();
        this.currentAnim = this.anims.idle;
      },
      createClickableLayer: function () {
        console.log("Build clickable layer");
        this.checkClickableLayer("branding-splash", _SETTINGS.Branding.Logo.Link, _SETTINGS.Branding.Logo.NewWindow);
      },
      doesClickableLayerExist: function (b) {
        for (k in dynamicClickableEntityDivs) if (k == b) return !0;
        return !1;
      },
      checkClickableLayer: function (b, c, d) {
        "undefined" == typeof wm && (this.doesClickableLayerExist(b) ? (ig.game.showOverlay([b]), $("#" + b).find("[href]").attr("href", c)) : this.createClickableOutboundLayer(b, c, "media/graphics/misc/invisible.png", d));
      },
      createClickableOutboundLayer: function (b, c, d, e) {
        var f = ig.$new("div");
        f.id = b;
        document.body.appendChild(f);
        f = $("#" + f.id);
        f.css("float", "left");
        f.css("position", "absolute");
        if (ig.ua.mobile) {
          var j = window.innerHeight / mobileHeight,
            m = window.innerWidth / mobileWidth;
          f.css("left", this.pos.x * m);
          f.css("top", this.pos.y * j);
          f.css("width", this.size.x * m);
          f.css("height", this.size.y * j);
        } else j = w / 2 - destW / 2, m = h / 2 - destH / 2, console.log(j, m), f.css("left", j + this.pos.x * multiplier), f.css("top", m + this.pos.y * multiplier), f.css("width", this.size.x * multiplier), f.css("height", this.size.y * multiplier);
        e ? f.html("<a target='_blank' href='" + c + "'><img style='width:100%;height:100%' src='" + d + "'></a>") : f.html("<a href='" + c + "'><img style='width:100%;height:100%' src='" + d + "'></a>");
        dynamicClickableEntityDivs[b] = {};
        dynamicClickableEntityDivs[b].width = this.size.x * multiplier;
        dynamicClickableEntityDivs[b].height = this.size.y * multiplier;
        dynamicClickableEntityDivs[b].entity_pos_x = this.pos.x;
        dynamicClickableEntityDivs[b].entity_pos_y = this.pos.y;
      },
      draw: function () {
        ig.system.context.fillStyle = "#ffffff";
        ig.system.context.fillRect(0, 0, ig.system.width, ig.system.height);
        ig.system.context.fillStyle = "#000";
        ig.system.context.font = "12px Arial";
        ig.system.context.textAlign = "left";
        320 >= ig.system.width ? ig.system.context.fillText("powered by MarketJS.com", ig.system.width - 150, ig.system.height - 15) : ig.system.context.fillText("powered by MarketJS.com", ig.system.width - 160, ig.system.height - 15);
        this.parent();
        this.splash && ig.system.context.drawImage(this.splash.data, 0, 0, this.splash.data.width, this.splash.data.height, this.pos.x, this.pos.y, this.size.x, this.size.y);
      }
    });
  });
  this.END_BRANDING_SPLASH;
  ig.baked = !0;
  ig.module("game.entities.buttons.button").requires("impact.entity", "impact.timer", "plugins.data.vector", "plugins.handlers.size-handler").defines(function () {
    EntityButton = ig.Entity.extend({
      collides: ig.Entity.COLLIDES.NEVER,
      type: ig.Entity.TYPE.A,
      size: new Vector2(48, 48),
      fillColor: null,
      zIndex: 2E3,
      gravityFactor: 0,
      clickCheck: !1,
      specialDraw: !1,
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.oriPosX = this.pos.x;
        this.oriPosY = this.pos.y;
      },
      update: function () {
        this.parent();
      },
      draw: function (b) {
        (!this.specialDraw || b) && this.parent();
      },
      clicked: function () {
        this.anims.idle && (this.currentAnim = this.anims.idle);
        this.clickCheck = !0;
      },
      released: function () {
        this.anims.hover && (this.currentAnim = this.anims.hover);
        this.clickCheck && (this.clickCheck = !1, this.redirect());
      },
      over: function () {
        this.anims.hover && (this.currentAnim = this.anims.hover);
      },
      leave: function () {
        this.anims.idle && (this.currentAnim = this.anims.idle);
        this.clickCheck = !1;
      },
      redirect: function () {},
      movePos: function (b, c) {
        this.pos.x = b;
        this.pos.y = c;
      },
      checkClickOnPause: function () {
        if (ig.game.paused && this.ignorePause) if (this.checkOverlapWithPointer()) {
          if (this.anims.hover && (this.currentAnim = this.anims.hover), ig.input.pressed("click") && (this.clickCheck = !0), ig.input.state("click") && this.anims.idle && (this.currentAnim = this.anims.idle), ig.input.released("click")) {
            this.released();
            for (var b = ig.game.getEntitiesByType(EntityButton), c = 0; c < b.length; c++) b.clickCheck = !1;
          }
        } else this.anims.idle && (this.currentAnim = this.anims.idle, this.clickCheck = !1);
      },
      checkOverlapWithPointer: function () {
        if (ig.ua.mobile) var b = ig.input.mouse.x / ig.sizeHandler.sizeRatio.x + ig.game.screen.x,
          c = ig.input.mouse.y / ig.sizeHandler.sizeRatio.y + ig.game.screen.y;else b = ig.input.mouse.x + ig.game.screen.x, c = ig.input.mouse.y + ig.game.screen.y;
        return b > this.pos.x + this.size.x || b < this.pos.x || c > this.pos.y + this.size.y || c < this.pos.y ? !1 : !0;
      },
      tweenIn: function (b, c) {
        -1 == b && (b = this.pos.x);
        ig.global.wm || this.tween({
          pos: {
            x: b,
            y: c
          }
        }, 0.5, {
          onComplete: function () {}.bind(this),
          easing: ig.Tween.Easing.Quadratic.EaseOut,
          delay: 0
        }).start();
      },
      tweenOut: function (b, c) {
        -1 == b && (b = this.pos.x);
        ig.global.wm || this.tween({
          pos: {
            x: b,
            y: c
          }
        }, 0.5, {
          onComplete: function () {
            2 == ig.game.director.currentLevel && this.kill();
          }.bind(this),
          easing: ig.Tween.Easing.Quadratic.EaseOut,
          delay: 0
        }).start();
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.clickable-div-layer").requires("plugins.data.vector").defines(function () {
    ClickableDivLayer = ig.Class.extend({
      pos: new Vector2(0, 0),
      size: new Vector2(0, 0),
      identifier: null,
      invisImagePath: "media/graphics/misc/invisible.png",
      init: function (b) {
        this.pos = new Vector2(b.pos.x, b.pos.y);
        this.size = new Vector2(b.size.x, b.size.y);
        var c = "more-games",
          d = "www.google.com",
          e = !1;
        b.div_layer_name && (c = b.div_layer_name);
        b.link && (d = b.link);
        b.newWindow && (e = b.newWindow);
        this.createClickableLayer(c, d, e);
      },
      createClickableLayer: function (b, c, d) {
        this.identifier = b;
        var e = ig.domHandler.getElementById("#" + b);
        e ? (ig.domHandler.show(e), ig.domHandler.attr(e, "href", c)) : this.createClickableOutboundLayer(b, c, this.invisImagePath, d);
      },
      update: function (b, c) {
        this.pos.x === b && this.pos.y === c || (ig.sizeHandler.dynamicClickableEntityDivs[this.identifier] = {}, ig.sizeHandler.dynamicClickableEntityDivs[this.identifier].width = this.size.x, ig.sizeHandler.dynamicClickableEntityDivs[this.identifier].height = this.size.y, ig.sizeHandler.dynamicClickableEntityDivs[this.identifier].entity_pos_x = this.pos.x, ig.sizeHandler.dynamicClickableEntityDivs[this.identifier].entity_pos_y = this.pos.y);
      },
      createClickableOutboundLayer: function (b, c, d, e) {
        var f = ig.domHandler.create("div");
        ig.domHandler.attr(f, "id", b);
        var j = ig.domHandler.create("a");
        e ? (ig.domHandler.attr(j, "href", c), ig.domHandler.attr(j, "target", "_blank")) : ig.domHandler.attr(j, "href", c);
        c = ig.domHandler.create("img");
        ig.domHandler.css(c, {
          width: "100%",
          height: "100%"
        });
        ig.domHandler.attr(c, "src", d);
        d = Math.min(ig.sizeHandler.scaleRatioMultiplier.x, ig.sizeHandler.scaleRatioMultiplier.y);
        if (ig.ua.mobile) {
          e = ig.domHandler.getElementById("#canvas");
          e = ig.domHandler.getOffsets(e);
          var m = e.left,
            l = e.top;
          console.log(e.left);
          ig.sizeHandler.disableStretchToFitOnMobileFlag ? (e = Math.floor(m + this.pos.x * ig.sizeHandler.scaleRatioMultiplier.x) + "px", l = Math.floor(l + this.pos.y * ig.sizeHandler.scaleRatioMultiplier.y) + "px", m = Math.floor(this.size.x * ig.sizeHandler.scaleRatioMultiplier.x) + "px", d = Math.floor(this.size.y * ig.sizeHandler.scaleRatioMultiplier.y) + "px") : (e = Math.floor(this.pos.x * ig.sizeHandler.sizeRatio.x) + "px", l = Math.floor(this.pos.y * ig.sizeHandler.sizeRatio.y) + "px", m = Math.floor(this.size.x * ig.sizeHandler.sizeRatio.x) + "px", d = Math.floor(this.size.y * ig.sizeHandler.sizeRatio.y) + "px");
        } else e = ig.domHandler.getElementById("#canvas"), e = ig.domHandler.getOffsets(e), m = e.left, l = e.top, ig.sizeHandler.enableStretchToFitOnDesktopFlag ? (e = Math.floor(m + this.pos.x * ig.sizeHandler.sizeRatio.x) + "px", l = Math.floor(l + this.pos.y * ig.sizeHandler.sizeRatio.y) + "px", m = Math.floor(this.size.x * ig.sizeHandler.sizeRatio.x) + "px", d = Math.floor(this.size.y * ig.sizeHandler.sizeRatio.y) + "px") : (e = Math.floor(m + this.pos.x * d) + "px", l = Math.floor(l + this.pos.y * d) + "px", m = Math.floor(this.size.x * d) + "px", d = Math.floor(this.size.y * d) + "px");
        ig.domHandler.css(f, {
          "float": "left",
          position: "absolute",
          left: e,
          top: l,
          width: m,
          height: d,
          "z-index": 3
        });
        ig.domHandler.addEvent(f, "mousemove", ig.input.mousemove.bind(ig.input), !1);
        ig.domHandler.appendChild(j, c);
        ig.domHandler.appendChild(f, j);
        ig.domHandler.appendToBody(f);
        ig.sizeHandler.dynamicClickableEntityDivs[b] = {};
        ig.sizeHandler.dynamicClickableEntityDivs[b].width = this.size.x;
        ig.sizeHandler.dynamicClickableEntityDivs[b].height = this.size.y;
        ig.sizeHandler.dynamicClickableEntityDivs[b].entity_pos_x = this.pos.x;
        ig.sizeHandler.dynamicClickableEntityDivs[b].entity_pos_y = this.pos.y;
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.buttons.button-branding-logo").requires("game.entities.buttons.button", "plugins.clickable-div-layer").defines(function () {
    EntityButtonBrandingLogo = EntityButton.extend({
      type: ig.Entity.TYPE.A,
      gravityFactor: 0,
      logo: new ig.AnimationSheet("branding/logo.png", _SETTINGS.Branding.Logo.Width, _SETTINGS.Branding.Logo.Height),
      zIndex: 10001,
      size: {
        x: 64,
        y: 66
      },
      clickableLayer: null,
      link: null,
      newWindow: !1,
      div_layer_name: "branding-logo",
      name: "brandinglogo",
      init: function (b, c, d) {
        this.parent(b, c, d);
        if (!ig.global.wm) {
          if ("undefined" == typeof wm) if (_SETTINGS.Branding.Logo.Enabled) this.size.x = _SETTINGS.Branding.Logo.Width, this.size.y = _SETTINGS.Branding.Logo.Height, this.anims.idle = new ig.Animation(this.logo, 0, [0], !0), this.currentAnim = this.anims.idle, d && d.centralize && (this.pos.x = ig.system.width / 2 - this.size.x / 2, console.log("centralize true ... centering branded logo ...")), _SETTINGS.Branding.Logo.LinkEnabled && (this.link = _SETTINGS.Branding.Logo.Link, this.newWindow = _SETTINGS.Branding.Logo.NewWindow, this.clickableLayer = new ClickableDivLayer(this));else {
            this.kill();
            return;
          }
          this.div_layer_name = d.div_layer_name ? d.div_layer_name : "branding-logo";
        }
      },
      show: function () {
        var b = ig.domHandler.getElementById("#" + this.div_layer_name);
        ig.domHandler.show(b);
      },
      hide: function () {
        var b = ig.domHandler.getElementById("#" + this.div_layer_name);
        ig.domHandler.hide(b);
      },
      clicked: function () {},
      clicking: function () {},
      released: function () {}
    });
  });
  ig.baked = !0;
  ig.module("game.entities.branding-logo-placeholder").requires("impact.entity", "game.entities.buttons.button-branding-logo").defines(function () {
    EntityBrandingLogoPlaceholder = ig.Entity.extend({
      gravityFactor: 0,
      size: {
        x: 32,
        y: 32
      },
      _wmDrawBox: !0,
      _wmBoxColor: "rgba(0, 0, 255, 0.7)",
      init: function (b, c, d) {
        this.parent(b, c, d);
        if (d) switch (console.log("settings found ... using that div layer name"), b = d.div_layer_name, console.log("settings.centralize:", d.centralize), d.centralize) {
          case "true":
            console.log("centralize true");
            centralize = !0;
            break;
          case "false":
            console.log("centralize false");
            centralize = !1;
            break;
          default:
            console.log("default ... centralize false"), centralize = !1;
        } else b = "branding-logo", centralize = !1;
        if ("undefined" == typeof wm) {
          if (_SETTINGS.Branding.Logo.Enabled) try {
            ig.game.spawnEntity(EntityButtonBrandingLogo, this.pos.x, this.pos.y, {
              div_layer_name: b,
              centralize: centralize
            });
          } catch (e) {
            console.log(e);
          }
          this.kill();
        }
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.buttons.button-more-games").requires("game.entities.buttons.button", "plugins.clickable-div-layer").defines(function () {
    EntityButtonMoreGames = EntityButton.extend({
      type: ig.Entity.TYPE.A,
      gravityFactor: 0,
      logo: new ig.AnimationSheet("media/graphics/game/ui/btn_more_games.png", 73, 77),
      size: {
        x: 73,
        y: 77
      },
      zIndex: 750,
      clickableLayer: null,
      link: null,
      newWindow: !1,
      div_layer_name: "more-games",
      name: "moregames",
      init: function (b, c, d) {
        this.parent(b, c, d);
        ig.global.wm || (this.div_layer_name = d.div_layer_name ? d.div_layer_name : "more-games", _SETTINGS.MoreGames.Enabled ? (this.anims.idle = new ig.Animation(this.logo, 0, [0], !0), this.currentAnim = this.anims.idle, _SETTINGS.MoreGames.Link && (this.link = _SETTINGS.MoreGames.Link), _SETTINGS.MoreGames.NewWindow && (this.newWindow = _SETTINGS.MoreGames.NewWindow), this.clickableLayer = new ClickableDivLayer(this)) : this.kill());
      },
      show: function () {
        var b = ig.domHandler.getElementById("#" + this.div_layer_name);
        ig.domHandler.show(b);
      },
      hide: function () {
        var b = ig.domHandler.getElementById("#" + this.div_layer_name);
        ig.domHandler.hide(b);
      },
      clicked: function () {},
      clicking: function () {},
      released: function () {}
    });
  });
  ig.baked = !0;
  ig.module("game.entities.opening-shield").requires("impact.entity").defines(function () {
    EntityOpeningShield = ig.Entity.extend({
      size: {
        x: 48,
        y: 48
      },
      move: 0,
      mIconAnim: 0,
      shieldAnim: 0,
      titleAnim: 0,
      shieldImage: new ig.Image("media/graphics/opening/shield.png"),
      mIconImage: new ig.Image("media/graphics/opening/m_icon.png"),
      titleImage: new ig.Image("media/graphics/opening/title.png"),
      init: function (b, c, d) {
        this.parent(b, c, d);
      },
      ready: function () {
        if (!ig.wm) if (_SETTINGS.DeveloperBranding.Splash.Enabled) {
          this.initTimer = new ig.Timer(0.1);
          try {
            ig.soundHandler.playSound(ig.soundHandler.SOUNDID.openingSound);
          } catch (b) {
            console.log(b);
          }
        } else ig.game.director.nextLevel(), ig.system.context.globalAlpha = 1, this.kill();
      },
      update: function () {
        this.parent();
        this.updateOriginalShieldOpening();
      },
      draw: function () {
        this.parent();
        ig.global.wm || (this.nextLevelTimer && 0 > this.nextLevelTimer.delta() && (ig.system.context.globalAlpha = -this.nextLevelTimer.delta()), this.drawOriginalShieldOpening());
      },
      updateOriginalShieldOpening: function () {
        this.initTimer && 0 < this.initTimer.delta() && (this.initTimer = null, this.sheildTimer = new ig.Timer(0.05));
        this.sheildTimer && 0 < this.sheildTimer.delta() && (3 > this.shieldAnim ? (this.shieldAnim++, this.sheildTimer.reset()) : (this.sheildTimer = null, this.moveTimer = new ig.Timer(0.001), this.mIconTimer = new ig.Timer(0.05), this.titleTimer = new ig.Timer(0.15)));
        this.moveTimer && 0 < this.moveTimer.delta() && (this.move += 0.3, this.moveTimer.reset());
        this.mIconTimer && 0 < this.mIconTimer.delta() && (12 > this.mIconAnim ? (this.mIconAnim++, this.moveTimer.reset()) : this.mIconTimer = null);
        this.titleTimer && 0 < this.titleTimer.delta() && (11 > this.titleAnim ? (this.titleAnim++, this.titleTimer.reset()) : (this.titleTimer = null, this.nextLevelTimer = new ig.Timer(1)));
        this.nextLevelTimer && 0 < this.nextLevelTimer.delta() && (this.nextLevelTimer = null, ig.game.director.nextLevel(), ig.system.context.globalAlpha = 1);
      },
      drawOriginalShieldOpening: function () {
        if (this.moveTimer) {
          var b = ig.system.context;
          b.save();
          var c = ig.system.width / 2,
            d = ig.system.height / 2;
          b.translate(c, d);
          b.rotate(this.move * Math.PI / 180);
          b.beginPath();
          b.moveTo(0, 0);
          for (var e = 0, f = 1; 48 >= f; f += 1) b.lineTo(0 + 800 * Math.cos(2 * f * Math.PI / 48), 0 + 800 * Math.sin(2 * f * Math.PI / 48)), e++, 2 == e && (e = 0, b.lineTo(0, 0));
          b.translate(-c, -d);
          c = b.createRadialGradient(c, d, 100, c, d, 250);
          c.addColorStop(0, "rgba(255,255,255,0.1)");
          c.addColorStop(1, "rgba(0,0,0,0)");
          b.fillStyle = c;
          b.fill();
          b.restore();
        }
        this.shieldImage.drawTile(ig.system.width / 2 - 91, 0 - (768 - ig.system.height) / 2, this.shieldAnim, 182, 768);
        this.moveTimer && (this.mIconImage.drawTile(ig.system.width / 2 - 96, ig.system.height / 2 - 70, this.mIconAnim, 166, 160), this.titleImage.drawTile(ig.system.width / 2 - 204, ig.system.height / 2 + 100, this.titleAnim, 409, 76));
        ig.system.context.globalAlpha = 1;
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.opening-kitty").requires("impact.entity").defines(function () {
    EntityOpeningKitty = ig.Entity.extend({
      size: {
        x: 48,
        y: 48
      },
      kittyAnim: -1,
      kittyImage: new ig.Image("media/graphics/opening/kitty.png"),
      kittyTitleImage: new ig.Image("media/graphics/opening/kittytitle.png"),
      soundKey: "kittyopeningSound",
      init: function (b, c, d) {
        this.parent(b, c, d);
      },
      ready: function () {
        if (!ig.wm) if (_SETTINGS.DeveloperBranding.Splash.Enabled) {
          this.initTimer = new ig.Timer(0.1);
          try {
            ig.soundHandler.sfxPlayer.play(this.soundKey);
          } catch (b) {
            console.log(b);
          }
        } else ig.game.director.nextLevel(), ig.system.context.globalAlpha = 1, this.kill();
      },
      update: function () {
        this.parent();
        this.updateKittyOpening();
      },
      draw: function () {
        this.parent();
        ig.global.wm || (this.nextLevelTimer && 0 > this.nextLevelTimer.delta() && (ig.system.context.globalAlpha = -this.nextLevelTimer.delta()), this.drawKittyOpening());
      },
      updateKittyOpening: function () {
        this.initTimer && 0 < this.initTimer.delta() && (this.initTimer = null, this.kittyTimer = new ig.Timer(0.15));
        this.kittyTimer && 0 < this.kittyTimer.delta() && (7 > this.kittyAnim ? (this.kittyAnim++, this.kittyTimer.reset()) : (this.kittyTimer = null, this.nextLevelTimer = new ig.Timer(2)));
        this.nextLevelTimer && 0 < this.nextLevelTimer.delta() && (this.nextLevelTimer = null, ig.game.director.nextLevel(), ig.system.context.globalAlpha = 1);
      },
      drawKittyOpening: function () {
        var b = ig.system.context.createLinearGradient(0, 0, 0, ig.system.height);
        b.addColorStop(0, "#ffed94");
        b.addColorStop(1, "#ffcd85");
        ig.system.context.fillStyle = b;
        ig.system.context.fillRect(0, 0, ig.system.width, ig.system.height);
        0 <= this.kittyAnim && (this.kittyImage.drawTile(ig.system.width / 2 - this.kittyImage.width / 8, ig.system.height / 2 - this.kittyImage.height / 4, this.kittyAnim, 218, 325), this.kittyTitleImage.drawTile(ig.system.width / 2 - this.kittyTitleImage.width / 2, ig.system.height / 2 + this.kittyImage.height / 4 + 10, this.kittyAnim, 380, 37));
        ig.system.context.globalAlpha = 1;
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.pointer").requires("impact.entity").defines(function () {
    EntityPointer = ig.Entity.extend({
      checkAgainst: ig.Entity.TYPE.BOTH,
      isFirstPressed: !1,
      isPressed: !1,
      isReleased: !1,
      isHovering: !1,
      hoveringItem: null,
      objectArray: [],
      clickedObjectList: [],
      ignorePause: !0,
      boxPos: {
        x: 0,
        y: 0
      },
      zIndex: 5E3,
      check: function (b) {
        this.objectArray.push(b);
      },
      clickObject: function (b) {
        this.isFirstPressed && "function" == typeof b.clicked && b.interactable && (b.clicked(), this.addToClickedObjectList(b));
        this.isPressed && !this.isReleased && "function" == typeof b.clicking && b.interactable && b.clicking();
        this.isReleased && "function" == typeof b.released && b.interactable && (b.released(), this.removeFromClickedObjectList(b));
      },
      refreshPos: function () {
        this.pos = ig.game.io.getClickPos();
        this.pos.x += ig.game.screen.x;
        this.pos.y += ig.game.screen.y;
        this.pos.x -= 0.5 * this.size.x;
        this.pos.y -= 0.5 * this.size.y;
        this.boxPos.x = this.pos.x * Box2D.SCALE;
        this.boxPos.y = this.pos.y * Box2D.SCALE;
      },
      update: function () {
        this.parent();
        this.refreshPos();
        var b = null,
          c = -1;
        for (a = this.objectArray.length - 1; -1 < a; a--) this.objectArray[a].zIndex > c && (c = this.objectArray[a].zIndex, b = this.objectArray[a]);
        if (null != b) {
          null != this.hoveringItem ? this.hoveringItem != b && ("function" == typeof this.hoveringItem.leave && this.hoveringItem.leave(), "function" == typeof b.over && b.over()) : "function" == typeof b.over && b.over();
          this.hoveringItem = b;
          this.clickObject(b);
          if (this.isReleased) {
            for (b = 0; b < this.clickedObjectList.length; b++) c = this.clickedObjectList[b], "function" == typeof c.releasedOutside && c.releasedOutside();
            this.clickedObjectList = [];
          }
          this.objectArray = [];
        } else if (null != this.hoveringItem && "function" == typeof this.hoveringItem.leave && (this.hoveringItem.leave(), this.hoveringItem = null), this.isReleased) {
          for (b = 0; b < this.clickedObjectList.length; b++) c = this.clickedObjectList[b], "function" == typeof c.releasedOutside && c.releasedOutside();
          this.clickedObjectList = [];
        }
        this.isFirstPressed = ig.input.pressed("click");
        this.isReleased = ig.input.released("click");
        this.isPressed = ig.input.state("click");
      },
      addToClickedObjectList: function (b) {
        this.clickedObjectList.push(b);
      },
      removeFromClickedObjectList: function (b) {
        for (var c = [], d = 0; d < this.clickedObjectList.length; d++) {
          var e = this.clickedObjectList[d];
          e != b && c.push(e);
        }
        this.clickedObjectList = c;
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.pointer-selector").requires("game.entities.pointer").defines(function () {
    EntityPointerSelector = EntityPointer.extend({
      zIndex: 1E3,
      _wmDrawBox: !0,
      _wmBoxColor: "rgba(0, 0, 255, 0.7)",
      size: {
        x: 20,
        y: 20
      },
      init: function (b, c, d) {
        this.parent(b, c, d);
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.select").requires("impact.entity").defines(function () {
    EntitySelect = ig.Entity.extend({
      type: ig.Entity.TYPE.B,
      checkAgainst: ig.Entity.TYPE.A,
      collides: ig.Entity.COLLIDES.NEVER,
      canSelect: !1,
      canSelectTimerDuration: 0.35,
      zIndex: 99999,
      isHovering: !1,
      isSelected: !1,
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.canSelectTimer = new ig.Timer(this.canSelectTimerDuration);
      },
      doesClickableLayerExist: function (b) {
        for (k in dynamicClickableEntityDivs) if (k == b) return !0;
        return !1;
      },
      checkClickableLayer: function (b, c, d) {
        "undefined" == typeof wm && (this.doesClickableLayerExist(b) ? (ig.game.showOverlay([b]), $("#" + b).find("[href]").attr("href", c)) : this.createClickableOutboundLayer(b, c, "media/graphics/misc/invisible.png", d));
      },
      createClickableOutboundLayer: function (b, c, d, e) {
        var f = ig.$new("div");
        f.id = b;
        document.body.appendChild(f);
        $("#" + f.id).css("float", "left");
        $("#" + f.id).css("width", this.size.x * multiplier);
        $("#" + f.id).css("height", this.size.y * multiplier);
        $("#" + f.id).css("position", "absolute");
        var j = w / 2 - destW / 2,
          m = h / 2 - destH / 2;
        w == mobileWidth ? ($("#" + f.id).css("left", this.pos.x), $("#" + f.id).css("top", this.pos.y)) : ($("#" + f.id).css("left", j + this.pos.x * multiplier), $("#" + f.id).css("top", m + this.pos.y * multiplier));
        e ? $("#" + f.id).html("<a target='_blank' href='" + c + "'><img style='width:100%;height:100%' src='" + d + "'></a>") : $("#" + f.id).html("<a href='" + c + "'><img style='width:100%;height:100%' src='" + d + "'></a>");
        dynamicClickableEntityDivs[b] = {};
        dynamicClickableEntityDivs[b].width = $("#" + f.id).width();
        dynamicClickableEntityDivs[b].height = $("#" + f.id).height();
        dynamicClickableEntityDivs[b].entity_pos_x = this.pos.x;
        dynamicClickableEntityDivs[b].entity_pos_y = this.pos.y;
      },
      hovered: function () {
        this.isHovering = !0;
        this.dehoverOthers();
      },
      dehoverOthers: function () {
        var b = ig.game.getEntitiesByType(EntitySelect);
        for (i = 0; i < b.length; i++) b[i] != this && (b[i].isHovering = !1);
      },
      deselectOthers: function () {
        var b = ig.game.getEntitiesByType(EntitySelect);
        for (i = 0; i < b.length; i++) b[i] != this && (b[i].isSelected = !1);
      },
      update: function () {
        this.parent();
        this.canSelectTimer && 0 < this.canSelectTimer.delta() && (this.canSelect = !0, this.canSelectTimer = null);
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.buttons.btn").requires("impact.entity").defines(function () {
    EntityBtn = ig.Entity.extend({
      gravityFactor: 0,
      logo: null,
      zIndex: 20,
      isClicking: !1,
      isEnabled: !0,
      isHidden: !1,
      isLocked: 0,
      interactable: !0,
      oriPos: {
        x: 0,
        y: 0
      },
      scaling: 0,
      init: function (b, c, d) {
        ig.game.sortEntitiesDeferred();
        this.parent(b, c, d);
        this.oriPos = this.pos;
      },
      update: function () {
        this.parent();
        var b = ig.game.getEntitiesByType(EntityPointer)[0];
        b && (b.refreshPos(), this.isEnabled && !this.isHidden && (b.isPressed ? this.checkMousePos(b) ? (this.isClicking || (this.isClicking = !0), this.clicking()) : this.isClicking = !1 : this.isClicking && this.checkMousePos(b) && this.released()), 0 < this.isLocked && this.isLocked--);
      },
      draw: function () {
        this.isHidden || this.logoImg.draw(this.pos.x, this.pos.y, this.isClicking && this.isEnabled ? this.size.x : 0, 0, this.size.x, this.size.y);
      },
      checkMousePos: function (b) {
        return b.pos.x - ig.game.screen.x >= this.pos.x && b.pos.x - ig.game.screen.x <= this.pos.x + this.size.x && b.pos.y - ig.game.screen.y >= this.pos.y && b.pos.y - ig.game.screen.y <= this.pos.y + this.size.y;
      },
      clicking: function () {
        !this.isClicking && this.isEnabled && 0 >= this.isLocked && (this.isClicking = !0);
      },
      released: function () {
        this.isClicking && this.isEnabled && (this.isClicking = !1, ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.click), this.isEnabled && (this.interact(), this.isLocked = 3));
      },
      interact: function () {}
    });
  });
  ig.baked = !0;
  ig.module("game.entities.buttons.btn-lvl-unlock").requires("impact.entity", "game.entities.buttons.btn").defines(function () {
    EntityLvlUnlock = EntityBtn.extend({
      logoImg: new ig.Image("media/graphics/game/ui/btn-home.png", 73, 77),
      size: {
        x: 73,
        y: 77
      },
      posOffset: {
        x: 85,
        y: 395
      },
      mainWindow: null,
      zIndex: 3001,
      specialDrawUI: !0,
      update: function () {
        this.parent();
      },
      interact: function () {
        console.log("unlocked all levels");
        ig.game.unlockAllLevels();
        ig.game.director.jumpTo(LevelHome);
        var b = ig.game.getEntitiesByType(EntityHomeControl)[0];
        b && b.btnMoreGames && b.btnMoreGames.show();
        this.kill();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.controllers.home-control").requires("impact.entity", "game.entities.buttons.btn", "game.entities.buttons.btn-lvl-unlock").defines(function () {
    EntityHomeControl = ig.Entity.extend({
      bg: new ig.Image("media/graphics/game/ui/background.png"),
      title: new ig.Image("media/graphics/game/ui/title.png"),
      titleSize: {
        x: 576,
        y: 286
      },
      home1: new ig.Image("media/graphics/game/ui/home-1.png"),
      home2: new ig.Image("media/graphics/game/ui/home-2.png"),
      zIndex: 0,
      title_posCur: {
        x: 183,
        y: -400
      },
      title_posEnd: {
        x: 183,
        y: 24
      },
      title_scaleCur: 0,
      title_scaleEnd: 1,
      home1_posCur: {
        x: -700,
        y: 269
      },
      home1_posEnd: {
        x: 0,
        y: 269
      },
      home2_posCur: {
        x: 1600,
        y: 234
      },
      home2_posEnd: {
        x: 528,
        y: 234
      },
      btnHome_posCur: {
        x: 406,
        y: 2E3
      },
      btnHome_posEnd: {
        x: 406,
        y: 310
      },
      btnSet_posCur: {
        x: 289,
        y: 2E3
      },
      btnSet_posEnd: {
        x: 289,
        y: 295
      },
      btnMoreGames_posCur: {
        x: 594,
        y: 2E3
      },
      btnMoreGames_posEnd: {
        x: 594,
        y: 295
      },
      btnHome: null,
      btnSettings: null,
      btnMoreGames: null,
      settingsWindow: null,
      transitionAlpha: 1,
      tweenAlpha: null,
      init: function (b, c, d) {
        this.parent(b, c, d);
        if (!ig.global.wm) {
          ig.game.getEntitiesByType(EntityPointer)[0] || ig.game.spawnEntity(EntityPointer, 0, 0);
          _SETTINGS.MoreGames.Enabled ? (this.btnHome = ig.game.spawnEntity(EntityBtnHomePlay, 406, 2E3, {
            parentWindow: this
          }), this.btnSettings = ig.game.spawnEntity(EntityBtnHomeSettings, 289, 2E3, {
            parentWindow: this
          }), this.btnMoreGames || (this.btnMoreGames = ig.game.spawnEntity(EntityButtonMoreGames, 594, 295))) : (this.tween_curMax--, this.btnSet_posEnd = {
            x: 455,
            y: 452
          }, this.btnSet_posCur.x = 455, this.btnHome_posEnd = {
            x: 421,
            y: 286
          }, this.btnHome_posCur.x = 421, this.title_posEnd = {
            x: 202,
            y: 0
          }, this.title_posCur.x = 202, this.btnHome = ig.game.spawnEntity(EntityBtnHomePlay, 421, 2E3, {
            parentWindow: this
          }), this.btnSettings = ig.game.spawnEntity(EntityBtnHomeSettings, 455, 2E3, {
            parentWindow: this
          }));
          ig.game.spawnEntity(ig.FullscreenButton, 10, 10, {
            enterImage: new ig.Image("media/graphics/game/ui/enter-fullscreen.png"),
            exitImage: new ig.Image("media/graphics/game/ui/exit-fullscreen.png")
          });
          this._tweenStart();
          this._tweenStart_Title();
          if (document.getElementById("more-games")) {
            b = document.getElementById("more-games");
            c = document.getElementById("canvas");
            d = this.btnMoreGames_posEnd.y / 540;
            var e = this.btnMoreGames_posEnd.x / 960;
            ig.ua.mobile && (b.style.left = (window.innerWidth - parseInt(b.style.width)) / 2 + "px", b.style.top = parseInt(c.style.height) * d + "px", b.style.left = parseInt(window.innerWidth) * e + "px", b.style.width = 65 * window.innerWidth / 960 + "px", b.style.height = 69 * window.innerHeight / 540 + "px");
          }
          ig.game.fromLevelSelect && (ig.game.fromLevelSelect = !1, this.transitionAlpha = 0);
          this.tweenAlpha = this.tween({
            transitionAlpha: 0
          }, 0.5, {
            entity: this,
            easing: ig.Tween.Easing.Circular.EaseOut
          });
          this.tweenAlpha.start();
          ig.game.episodeUnlocked = [1, 1, 1, 1];
          ig.game.levelUnlocked[30] = 1;
          ig.game.levelUnlocked[50] = 1;
          ig.game.levelUnlocked[70] = 1;
          ig.game.saveLevelData();
        }
      },
      update: function () {
        this.parent();
      },
      draw: function () {
        if (!ig.global.wm) {
          var b = ig.system.context;
          b.save();
          this.bg.draw(0, -300);
          b.drawImage(this.title.data, this.title_posCur.x + this.titleSize.x * (1 - this.title_scaleCur) / 2, this.title_posCur.y + this.titleSize.y * (1 - this.title_scaleCur) / 2, this.titleSize.x * this.title_scaleCur, this.titleSize.y * this.title_scaleCur);
          this.home1.draw(this.home1_posCur.x, this.home1_posCur.y);
          this.home2.draw(this.home2_posCur.x, this.home2_posCur.y);
          _SETTINGS.MoreGames.Enabled && (this.btnMoreGames.pos = this.btnMoreGames_posCur);
          0 < this.transitionAlpha && (b.globalAlpha = this.transitionAlpha, b.beginPath(), b.rect(0, 0, ig.system.width, ig.system.height), b.fillStyle = "#000000", b.fill(), b.globalAlpha = 1);
          b.restore();
        }
      },
      tween_curNum1: 0,
      tween_curNum2: 0,
      tween_curNum3: 0,
      tween_curMax1: 2,
      tween_curMax2: 3,
      tween_curNum3: 0,
      tweener: null,
      tweener2: null,
      tweener3: null,
      tweener4: null,
      _tweenStart: function () {
        this.tween_curNum1++;
        if (this.tween_curNum1 > this.tween_curMax1) this.tweener = null;else if (1 === this.tween_curNum1) {
          var b = this.home1_posEnd;
          this.tweener = this.tween({
            home1_posCur: b
          }, 0.4, {
            entity: this,
            easing: ig.Tween.Easing.Circular.EaseOut,
            onComplete: function () {
              this.entity._tweenStart();
            }
          });
          this.tweener.start();
        } else 2 === this.tween_curNum1 && (b = this.home2_posEnd, this.tweener = this.tween({
          home2_posCur: b
        }, 0.4, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut,
          onComplete: function () {
            this.entity._tweenStart();
          }
        }), this.tweener.start());
      },
      _tweenStart_Buttons: function () {
        this.tween_curNum3++;
        if (this.tween_curNum3 > this.tween_curNum3) this.tweener4 = null;else if (1 === this.tween_curNum3) {
          if (_SETTINGS.MoreGames.Enabled) {
            var b = this.btnSet_posEnd;
            this.tweener4 = this.tween({
              btnSet_posCur: b
            }, 0.25, {
              entity: this,
              easing: ig.Tween.Easing.Circular.EaseOut,
              onComplete: function () {
                this.entity._tweenStart_Buttons();
              }
            });
          } else b = this.btnHome_posEnd, this.tweener4 = this.tween({
            btnHome_posCur: b
          }, 0.25, {
            entity: this,
            easing: ig.Tween.Easing.Circular.EaseOut,
            onComplete: function () {
              this.entity._tweenStart_Buttons();
            }
          });
          this.tweener4.start();
        } else 2 === this.tween_curNum3 ? (_SETTINGS.MoreGames.Enabled ? (b = this.btnHome_posEnd, this.tweener4 = this.tween({
          btnHome_posCur: b
        }, 0.25, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut,
          onComplete: function () {
            this.entity._tweenStart_Buttons();
          }
        })) : (b = this.btnSet_posEnd, this.tweener4 = this.tween({
          btnSet_posCur: b
        }, 0.25, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut,
          onComplete: function () {
            this.entity._tweenStart_Buttons();
          }
        })), this.tweener4.start()) : 3 === this.tween_curNum3 && (b = this.btnMoreGames_posEnd, this.tweener4 = this.tween({
          btnMoreGames_posCur: b
        }, 0.25, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut,
          onComplete: function () {
            this.entity._tweenStart_Buttons();
          }
        }), this.tweener4.start());
      },
      _tweenStart_Title: function () {
        this.tweener2 = this.tween({
          title_posCur: this.title_posEnd
        }, 0.75, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut,
          onComplete: function () {
            this.entity._tweenStart_Buttons();
          }
        });
        this.tweener2.start();
        this.tweener3 = this.tween({
          title_scaleCur: this.title_scaleEnd
        }, 0.75, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut
        });
        this.tweener3.start();
      }
    });
    EntityBtnHomePlay = EntityBtn.extend({
      logoImg: new ig.Image("media/graphics/game/ui/bt_play_big.png", 145, 155),
      size: {
        x: 145,
        y: 155
      },
      zIndex: 100,
      parentWindow: null,
      update: function () {
        this.parent();
        this.pos = this.parentWindow.btnHome_posCur;
      },
      interact: function () {
        this.parentWindow.btnSettings.kill();
        this.parentWindow.btnMoreGames && this.parentWindow.btnMoreGames.hide();
        this.kill();
        ig.game.getEntitiesByType(EntitySettings)[0] || ig.game.director.jumpTo(LevelLevelSelect);
      }
    });
    EntityBtnHomeSettings = EntityBtn.extend({
      logoImg: new ig.Image("media/graphics/game/ui/bt_settings.png", 73, 77),
      size: {
        x: 73,
        y: 77
      },
      zIndex: 100,
      parentWindow: null,
      update: function () {
        this.parent();
        this.pos = this.parentWindow.btnSet_posCur;
      },
      interact: function () {
        ig.game.getEntitiesByType(EntitySettings)[0] || (this.parentWindow.settingsWindow = ig.game.spawnEntity(EntitySettings, 267, 1E3), _SETTINGS.MoreGames.Enabled && this.parentWindow.btnMoreGames.hide());
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.buttons.btn-restart").requires("impact.entity", "game.entities.buttons.btn").defines(function () {
    EntityBtnRestart = EntityBtn.extend({
      logoImg: new ig.Image("media/graphics/game/ui/btn-restart.png", 73, 77),
      size: {
        x: 73,
        y: 77
      },
      posOffset: {
        x: 187,
        y: 395
      },
      mainWindow: null,
      zIndex: 3001,
      specialDrawUI: !0,
      update: function () {
        this.parent();
        this.pos.x = this.mainWindow.pos.x + this.posOffset.x;
        this.pos.y = this.mainWindow.pos.y + this.posOffset.y;
      },
      interact: function () {
        ig.game.director.loadLevel(ig.game.levelCur);
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.buttons.btn-home").requires("impact.entity", "game.entities.buttons.btn").defines(function () {
    EntityBtnHome = EntityBtn.extend({
      logoImg: new ig.Image("media/graphics/game/ui/btn-home.png", 73, 77),
      size: {
        x: 73,
        y: 77
      },
      posOffset: {
        x: 85,
        y: 395
      },
      mainWindow: null,
      zIndex: 3001,
      specialDrawUI: !0,
      update: function () {
        this.parent();
        this.pos.x = this.mainWindow.pos.x + this.posOffset.x;
        this.pos.y = this.mainWindow.pos.y + this.posOffset.y;
      },
      interact: function () {
        ig.game.director.jumpTo(LevelHome);
        var b = ig.game.getEntitiesByType(EntityHomeControl)[0];
        b && b.btnMoreGames && b.btnMoreGames.show();
        this.kill();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.controllers.game-ui-control").requires("impact.entity", "game.entities.buttons.btn-restart", "game.entities.buttons.btn-home").defines(function () {
    EntityGameUiControl = ig.Entity.extend({
      scoreBg: new ig.Image("media/graphics/game/ui/score_panel.png"),
      lvlBg: new ig.Image("media/graphics/game/ui/lvl-panel.png"),
      btnPause: null,
      btnRestart: null,
      zIndex: 5E3,
      abilBar: new ig.Image("media/graphics/game/ui/ability-bar-1.png"),
      abilBar_base: new ig.Image("media/graphics/game/ui/ability-bar-2.png"),
      sky: null,
      notEnoughAbility_Counter: 0,
      cannotUseAbility_Counter: 0,
      abiBarTween: null,
      abiBarTween_targetSize: 0,
      abiBarWidthPerc: 1,
      specialDrawUI: !0,
      gameUiText: null,
      transitionAlpha: 1,
      tweenAlpha: null,
      tutorialIsShown: !1,
      tutorialDialogNum: 1,
      tutorialDialogComplete: !1,
      gameStartBlackFrameAlpha: 0,
      levelController: null,
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.btnRestart = ig.game.spawnEntity(EntityBtnGameRestart, 782, 9);
        this.btnPause = ig.game.spawnEntity(EntityBtnGamePause, 872, 9);
        32 === ig.game.levelCur_actual && 5 >= this.tutorialDialogNum && (this.btnRestart.isHidden = !0, this.btnPause.isHidden = !0);
        ig.game.levelControl_UI = this;
        this.gameUiText = ig.game.spawnEntity(EntityGameUiText, 0, 0, {
          uiControl: this
        });
        this.tweenAlpha = this.tween({
          transitionAlpha: 0
        }, 0.75, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut
        });
        this.tweenAlpha.start();
      },
      update: function () {
        this.parent();
        if (2 >= ig.game.levelCur_actual || 4 === ig.game.levelCur_actual || 5 === ig.game.levelCur_actual || 7 === ig.game.levelCur_actual || 8 === ig.game.levelCur_actual || 10 === ig.game.levelCur_actual || 30 === ig.game.levelCur_actual || 31 === ig.game.levelCur_actual || 50 === ig.game.levelCur_actual || 51 === ig.game.levelCur_actual || 70 === ig.game.levelCur_actual || 72 === ig.game.levelCur_actual) if (!this.tutorialIsShown && (960 >= ig.game.maxCameraDistance || 0 >= ig.game.screen.x && 0 >= ig.game.screen.y)) {
          var b = ig.game.levelCur_actual + 1;
          this.gameUiText.isOn = !0;
          this.gameUiText.text1 = _STRINGS.UI["tut" + b + ".1"];
          this.gameUiText.text2 = _STRINGS.UI["tut" + b + ".2"];
          this.gameUiText.tweenStart_uiText(!0, -1);
          this.tutorialIsShown = !0;
        }
        if (32 === ig.game.levelCur_actual) {
          if (!this.tutorialIsShown && (960 >= ig.game.maxCameraDistance || 0 >= ig.game.screen.x && 0 >= ig.game.screen.y)) b = ig.game.levelCur_actual + 1, this.gameUiText.isOn = !0, this.gameUiText.text1 = _STRINGS.UI["tut" + b + "." + this.tutorialDialogNum], this.gameUiText.text2 = _STRINGS.UI["tut" + b + "." + (this.tutorialDialogNum + 1)], this.gameUiText.tweenStart_uiText(!0, -1), this.tutorialIsShown = this.gameUiText.isContinue = !0;
          this.tutorialIsShown && 5 >= this.tutorialDialogNum && ig.input.pressed("click") && this.tutorialDialogComplete && 32 === ig.game.levelCur_actual && (this.tutorialDialogNum += 2, 5 >= this.tutorialDialogNum && (this.tutorialDialogComplete = !1, b = ig.game.levelCur_actual + 1, this.gameUiText.text1 = _STRINGS.UI["tut" + b + "." + this.tutorialDialogNum], this.gameUiText.text2 = _STRINGS.UI["tut" + b + "." + (this.tutorialDialogNum + 1)], 5 > this.tutorialDialogNum ? this.gameUiText.isContinue = !0 : (this.gameUiText.isContinue = !1, this.btnRestart.isHidden = !1, this.btnPause.isHidden = !1), this.gameUiText.txt_currentLength = 0, this.gameUiText.tweenStart_textLetters()));
        }
      },
      draw: function (b) {
        if (b) {
          0 < this.gameStartBlackFrameAlpha && (ig.system.context.globalAlpha = this.gameStartBlackFrameAlpha, ig.system.context.fillStyle = "black", ig.system.context.fillRect(0, 0, ig.system.width, 30), ig.system.context.fillRect(0, 510, ig.system.width, 30));
          ig.system.context.globalAlpha = 1 - this.gameStartBlackFrameAlpha;
          b = ig.system.context;
          b.save();
          this.scoreBg.draw(0, 8);
          b.fillStyle = "#f0f3fb";
          b.font = "25px soupofjustice";
          b.fillText(_STRINGS.Game.Score + ig.game.currentScore, 38, 30);
          this.btnPause && this.btnPause.draw(!0);
          this.btnRestart && this.btnRestart.draw(!0);
          this.scoreBg.draw(-70, 472);
          b.fillStyle = "#f0f3fb";
          b.font = "25px soupofjustice";
          b.fillText(_STRINGS.Game.Ability, 18, 495);
          this.abilBar_base.draw(18, 505);
          0 < ig.game.abilityBar_cur && this.abilBar.draw(20, 506, 0, 0, 376 * this.abiBarWidthPerc, 15);
          0 < this.notEnoughAbility_Counter ? (this.notEnoughAbility_Counter -= ig.system.tick, b.fillStyle = "#d00f10", b.font = "28px soupofjustice", b.textAlign = "center", b.fillText(_STRINGS.UI.NoAbility, 480, 80)) : 0 < this.cannotUseAbility_Counter && (this.cannotUseAbility_Counter -= ig.system.tick, b.fillStyle = "#d00f10", b.font = "28px soupofjustice", b.textAlign = "center", b.fillText(_STRINGS.UI.CannotUseAbility, 480, 80));
          this.lvlBg.draw(ig.system.width / 2 - 104, 0);
          b.fillStyle = "#f0f3fb";
          b.font = "23px soupofjustice";
          var c = ig.game.levelCur_actual + 1;
          1 === ig.game.episodeCur ? c -= 30 : 2 === ig.game.episodeCur ? c -= 50 : 3 === ig.game.episodeCur && (c -= 70);
          var d = ig.game.episodeCur + 1;
          b.textAlign = "center";
          b.fillText(_STRINGS.UI.EpisodeShort + d + ", " + _STRINGS.UI.Level + c, ig.system.width / 2, 25);
          0 < this.transitionAlpha && (b.globalAlpha = this.transitionAlpha, b.beginPath(), b.rect(0, 0, ig.system.width, ig.system.height), b.fillStyle = "#000000", b.fill(), b.globalAlpha = 1);
          b.restore();
          ig.system.context.globalAlpha = 1;
        }
      },
      tweenAbilityBar: function (b) {
        this.abiBarTween = this.tween({
          abiBarWidthPerc: this.abiBarWidthPerc - b
        }, 0.5, {
          entity: this,
          easing: ig.Tween.Easing.Quadratic.EaseOut,
          onComplete: function () {}
        });
        this.abiBarTween.start();
      },
      tweenBlackBorders: function () {
        this.abiBarTween = this.tween({
          gameStartBlackFrameAlpha: 0
        }, 0.5, {
          entity: this,
          easing: ig.Tween.Easing.Quadratic.EaseOut,
          onComplete: function () {
            this.entity.levelController.mode = 2;
            this.entity.btnRestart.isHidden = !1;
            this.entity.btnPause.isHidden = !1;
            this.entity.btnRestart.isEnabled = !0;
            this.entity.btnPause.isEnabled = !0;
          }
        });
        this.abiBarTween.start();
      }
    });
    EntityBtnGamePause = EntityBtn.extend({
      logoImg: new ig.Image("media/graphics/game/ui/bt_pause.png", 73, 77),
      size: {
        x: 73,
        y: 77
      },
      zIndex: 4999,
      specialDrawUI: !0,
      update: function () {
        this.parent();
      },
      draw: function (b) {
        b && this.parent();
      },
      interact: function () {
        if (!ig.game.abilityMode && !ig.game.tutorialPause && !ig.game.draggingScreen && 0 !== ig.game.levelControl.mode && !(ig.game.levelControl.cameraTweening || 0 < ig.game.mode_examineDur) && !ig.game.getEntitiesByType(EntitySettings)[0]) {
          this.isEnabled = !1;
          var b = ig.game.getEntitiesByType(EntityBtnGameRestart)[0];
          b && (b.isEnabled = !1);
          ig.game.box2dPaused = !0;
          ig.game.screen.x = 0;
          ig.game.screen.y = 0;
          ig.game.spawnEntity(EntitySettings, 267, 1E3, {
            isPause: !0
          });
        }
      }
    });
    EntityBtnGameRestart = EntityBtn.extend({
      logoImg: new ig.Image("media/graphics/game/ui/btn-restart.png", 73, 77),
      size: {
        x: 73,
        y: 77
      },
      zIndex: 4999,
      specialDrawUI: !0,
      update: function () {
        this.parent();
      },
      draw: function (b) {
        b && this.parent();
      },
      interact: function () {
        !ig.game.abilityMode && !ig.game.tutorialPause && !ig.game.draggingScreen && 0 !== ig.game.levelControl.mode && (ig.game.levelControl.cameraTweening || !ig.game.getEntitiesByType(EntitySettings)[0] && !ig.game.box2dPaused && ig.game.director.loadLevel(ig.game.levelCur));
      }
    });
    EntityGameUiText = ig.Entity.extend({
      text1: "",
      text1_toShow: "",
      text2: "",
      text2_toShow: "",
      zIndex: 5999,
      fillStyle: "#ffffff",
      isOn: !1,
      tut_bg: new ig.Image("media/graphics/game/ui/tutorial-bg.png"),
      tut_bg2: new ig.Image("media/graphics/game/ui/tutorial-bg-2.png"),
      tut_icon: [new ig.Image("media/graphics/game/ui/tut-icon1.png"), new ig.Image("media/graphics/game/ui/tut-icon2.png"), new ig.Image("media/graphics/game/ui/tut-icon3.png"), new ig.Image("media/graphics/game/ui/tut-icon4.png"), new ig.Image("media/graphics/game/ui/tut-icon5.png"), new ig.Image("media/graphics/game/ui/tut-icon6.png"), new ig.Image("media/graphics/game/ui/tut-icon7.png"), new ig.Image("media/graphics/game/ui/tut-icon8.png"), new ig.Image("media/graphics/game/ui/tut-icon9.png")],
      tut_iconNum: 0,
      tut_pos: {
        x: 1E3,
        y: 60
      },
      tut_posXOut: -1500,
      tut_posXFinal: 86,
      tut_posXOrig: 1E3,
      tut_posYTop: 60,
      tut_posYBottom: 360,
      tut_iconOffset: {
        x: -23,
        y: -24
      },
      tut_textOffset: {
        x: 141,
        y: 34
      },
      tut_continueOffset: {
        x: 425,
        y: 90
      },
      specialDrawUI: !0,
      stateNum: 0,
      uiControl: null,
      isContinue: !1,
      init: function (b, c, d) {
        this.parent(b, c, d);
      },
      update: function () {
        this.parent();
      },
      draw: function (b) {
        if (b && this.isOn) {
          b = ig.system.context;
          b.save();
          this.text1 === _STRINGS.UI.selTarget && (b.globalAlpha = 0.8);
          30 === ig.game.levelCur_actual || 31 === ig.game.levelCur_actual || 50 === ig.game.levelCur_actual || 51 === ig.game.levelCur_actual || 70 === ig.game.levelCur_actual || 72 === ig.game.levelCur_actual ? this.tut_bg2.draw(this.tut_pos.x, this.tut_pos.y) : this.tut_bg.draw(this.tut_pos.x, this.tut_pos.y);
          b.globalAlpha = 1;
          this.tut_icon[this.tut_iconNum].draw(this.tut_pos.x + this.tut_iconOffset.x, this.tut_pos.y + this.tut_iconOffset.x);
          b.fillStyle = this.fillStyle;
          b.textAlign = "left";
          var c = this.txt_currentLength > this.text1.length ? this.txt_currentLength - this.text1.length : 0,
            d = this.text1.substr(0, this.txt_currentLength > this.text1.length ? this.text1.length : this.txt_currentLength),
            c = this.text2.substr(0, c);
          this.tweenMoved && (1 <= this.text2.length ? (b.font = "23px soupofjustice", b.fillText(d, this.tut_pos.x + this.tut_textOffset.x, this.tut_pos.y + this.tut_textOffset.y), b.fillText(c, this.tut_pos.x + this.tut_textOffset.x, 40 + this.tut_pos.y + this.tut_textOffset.y)) : (b.font = "30px soupofjustice", b.fillText(d, this.tut_pos.x + this.tut_textOffset.x, 25 + this.tut_pos.y + this.tut_textOffset.y)));
          this.uiControl.tutorialDialogComplete && 32 === ig.game.levelCur_actual && this.isContinue && (b.font = "15px soupofjustice", b.fillText(_STRINGS.UI["continue"], this.tut_pos.x + this.tut_continueOffset.x, this.tut_pos.y + this.tut_continueOffset.y));
          b.restore();
        }
      },
      tutTween: null,
      willTweenIn: !1,
      tweenDone: !1,
      tweenMoved: !0,
      tweenStart_uiText: function (b, c) {
        b && this.tweenDone && this.isOn ? (b = !1, this.willTweenIn = !0) : this.txt_currentLength = 0;
        this.isOn || (this.tut_pos = {
          x: this.tut_posXOrig,
          y: this.tut_pos.y
        });
        this.stateNum++;
        this.tweenMoved = !1;
        -1 == c && (c = 3 >= ig.game.levelCur_actual ? 0 : 5 >= ig.game.levelCur_actual ? 1 : 8 >= ig.game.levelCur_actual ? 2 : 30 === ig.game.levelCur_actual ? 4 : 31 === ig.game.levelCur_actual || 32 === ig.game.levelCur_actual ? 7 : 50 === ig.game.levelCur_actual ? 5 : 51 === ig.game.levelCur_actual ? 6 : 70 === ig.game.levelCur_actual ? 3 : 72 === ig.game.levelCur_actual ? 8 : 0);
        this.tut_iconNum = c;
        b && (this.tut_pos.y = ig.game.levelControl.birdDragging ? 200 >= ig.game.levelControl.birdDragging.pos.y - ig.game.screen.y ? this.tut_posYBottom : this.tut_posYTop : this.tut_posYTop);
        this.tutTween = this.tween({
          tut_pos: {
            x: b ? this.tut_posXFinal : this.tut_posXOut,
            y: this.tut_pos.y
          }
        }, this.text1 == _STRINGS.UI.selTarget ? 0.35 : 0.5, {
          entity: this,
          easing: ig.Tween.Easing.Quadratic.EaseOut,
          onComplete: function () {
            this.entity.tweenMoved = !0;
            b ? this.entity.tweenStart_textLetters() : (this.entity.tut_pos = {
              x: this.entity.tut_posXOrig,
              y: this.entity.tut_pos.y
            }, this.entity.willTweenIn ? (this.entity.tweenStart_uiText(!0, -1), this.entity.willTweenIn = !1) : this.entity.isOn = !1);
          }
        });
        this.tutTween.start();
        this.tweenDone = !1;
      },
      txt_currentLength: 0,
      txt_length_total: 0,
      txt_tween: null,
      tweenStart_textLetters: function () {
        this.txt_totalLength = this.text1.length + this.text2.length;
        this.txt_tween = this.tween({
          txt_currentLength: this.txt_totalLength
        }, 0.5, {
          entity: this,
          easing: ig.Tween.Easing.Linear.EaseNone,
          onComplete: function () {
            this.entity.tweenDone = !0;
            this.entity.uiControl.tutorialDialogComplete = !0;
            ig.game.tutorialPause && (ig.game.levelControl.canCastAbility = !0);
          }
        });
        this.txt_tween.start();
      }
    });
  });
  ig.baked = !0;
  ig.module("plugins.box2d.entity").requires("impact.entity", "plugins.box2d.game").defines(function () {
    ig.Box2DEntity = ig.Entity.extend({
      body: null,
      angle: 0,
      box2dType: null,
      dynamicType: null,
      density: null,
      friction: null,
      restitution: null,
      rotate: 0,
      previousBodyPosition: {
        x: 0,
        y: 0
      },
      previousBodyAngle: 0,
      slowTime: 0,
      interactable: !1,
      init: function (b, c, d) {
        this.parent(b, c, d);
        ig.global.wm || this.createBody();
      },
      createBody: function () {
        var b = new Box2D.Dynamics.b2BodyDef();
        b.position = new Box2D.Common.Math.b2Vec2((this.pos.x + this.size.x / 2) * Box2D.SCALE, (this.pos.y + this.size.y / 2) * Box2D.SCALE);
        this.previousBodyPosition = {
          x: b.position.x,
          y: b.position.y
        };
        this.angle && (b.angle = this.angle);
        this.previousBodyAngle = b.angle;
        null == this.dynamicType || 0 == this.dynamicType ? b.type = Box2D.Dynamics.b2Body.b2_dynamicBody : 1 == this.dynamicType ? b.type = Box2D.Dynamics.b2Body.b2_kinematicBody : 2 == this.dynamicType && (b.type = Box2D.Dynamics.b2Body.b2_staticBody);
        this.body = ig.world.CreateBody(b);
        this.body.entity = this;
        b = this.fixture = new Box2D.Dynamics.b2FixtureDef();
        null == this.box2dType || 0 == this.box2dType ? (b.shape = new Box2D.Collision.Shapes.b2PolygonShape(), b.shape.SetAsBox(this.size.x / 2 * Box2D.SCALE, this.size.y / 2 * Box2D.SCALE)) : 1 == this.box2dType ? (b.shape = new Box2D.Collision.Shapes.b2CircleShape(), b.shape.SetRadius(this.size.x / 2 * Box2D.SCALE)) : 2 == this.box2dType && (b.shape = new Box2D.Collision.Shapes.b2PolygonShape(), b.shape.SetAsArray(this.vertices, this.vertices.length));
        this.density && (b.density = this.density);
        this.friction && (b.friction = this.friction);
        this.categoryBits && (b.filter.categoryBits = this.categoryBits);
        this.groupIndex && (b.filter.groupIndex = this.groupIndex);
        this.maskBits && (b.filter.maskBits = this.maskBits);
        this.restitution && (b.restitution = this.restitution);
        this.body.CreateFixture(b);
        this.body.SetUserData(this);
      },
      update: function () {
        var b = this.body.GetPosition();
        this.previousBodyPosition = {
          x: this.pos.x,
          y: this.pos.y
        };
        this.pos = {
          x: b.x / Box2D.SCALE - this.size.x / 2,
          y: b.y / Box2D.SCALE - this.size.y / 2
        };
        this.previousBodyAngle = this.angle;
        this.angle = this.body.GetAngle().round(2);
        this.currentAnim && (this.currentAnim.update(), this.currentAnim.angle = this.angle);
      },
      beginContact: function () {},
      endContact: function () {},
      postSolve: function () {},
      preSolve: function () {},
      processCollisionQueues: function () {
        for (var b in this.checkQueue) {
          var c = this.checkQueue[b];
          0 < this.entityContactCount[b] ? this.check(c) : delete this.checkQueue[b];
        }
        for (var d in this.collideQueue) for (b in this.collideQueue[d]) c = this.collideQueue[d][b], this.collideWith(c, d), delete this.collideQueue[d][b];
      },
      kill: function () {
        this.body && ig.game.queueDestroyBody(this.body);
        this.parent();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.enemy-fly").requires("plugins.box2d.entity").defines(function () {
    EntityEnemyFly = ig.Box2DEntity.extend({
      type: ig.Entity.TYPE.A,
      checkAgainst: ig.Entity.TYPE.B,
      zIndex: 700,
      sc: 2,
      size: {
        x: 71,
        y: 46
      },
      gamePaused: !1,
      scX: 1,
      scY: 1,
      box2dType: 2,
      dynamicType: 0,
      density: 1,
      friction: 0.3,
      restitution: 0.1,
      mass: 0.8,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      broken: !1,
      jointSet: !1,
      sleepVel: 0.14,
      vertices: [{
        x: -3.55,
        y: -2.3
      }, {
        x: 3.55,
        y: -2.3
      }, {
        x: 3.55,
        y: 2.3
      }, {
        x: -3.55,
        y: 2.3
      }],
      name: "enemy",
      classify: "enemy",
      alp: 1,
      firstShape: !0,
      slicePoints: [],
      splitPoints: [],
      sleepAtStart: !1,
      ctxIndex: 0,
      canvasPerEntity: !0,
      speed: 300,
      maxRad: 135,
      clickPos: [-999, -999],
      isDead: !1,
      animSheet: new ig.AnimationSheet("media/graphics/game/objects/robotic-fly-fly.png", 71, 46),
      animSheet_Dead: new ig.AnimationSheet("media/graphics/game/objects/robotic-fly-hit.png", 69, 46),
      size: {
        x: 71,
        y: 46
      },
      anim_speed_idle: 0.05,
      anim_frames_idle: [0, 1],
      anim_speed_dead: 0.05,
      anim_frames_dead: [0],
      pathId: null,
      paths: [],
      pathCur: 1,
      moveSpeed: 0.5,
      specialDraw: !0,
      flipped: !1,
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.anims.dead = new ig.Animation(this.animSheet_Dead, 0.1, [0]);
        this.addAnim("idle", this.anim_speed_idle, this.anim_frames_idle);
        ig.global.wm || (this.iniPivotX = this.pos.x + this.size.x / 2, this.iniPivotY = this.pos.y + this.size.y / 2, this.getMovePath());
      },
      getMovePath: function () {
        this.paths.push({
          x: this.pos.x,
          y: this.pos.y,
          pathNum: 0
        });
        for (var b = ig.game.getEntitiesByType(EntityEnemyFlyPath), c = 0; c < b.length; c++) b[c].pathId === this.pathId && this.paths.push({
          x: b[c].pos.x,
          y: b[c].pos.y,
          pathNum: b[c].pathNum
        });
        this.paths.sort(function (b, c) {
          return b.pathNum - c.pathNum;
        });
        this.paths[1].x >= this.pos.x ? (this.setScale(-1, 1), this.flipped = !0) : (this.setScale(1, 1), this.flipped = !1);
      },
      update: function () {
        this.parent();
        if (this.isDead) this.pos.y > ig.system.height + 100 && this.kill();else if (!ig.global.wm && !ig.game.box2dPaused) {
          var b = this.pos.x + this.size.x / 2,
            c = this.pos.y + this.size.y / 2,
            d = (this.pos.x + this.size.x / 2) * Box2D.SCALE,
            e = (this.pos.y + this.size.y / 2) * Box2D.SCALE,
            f = this.paths[this.pathCur].x,
            j = this.paths[this.pathCur].y,
            m = 180 * Math.atan2(c - j, b - f) / Math.PI,
            b = b - f,
            c = c - j,
            c = Math.sqrt(b * b + c * c),
            j = this.moveSpeed * Math.cos(m * Math.PI / 180),
            m = this.moveSpeed * Math.sin(m * Math.PI / 180);
          10 >= c - this.moveSpeed && (this.pathCur++, this.pathCur >= this.paths.length && (this.pathCur = 0), this.paths[this.pathCur].x >= this.pos.x ? (this.setScale(-1, 1), this.flipped = !0) : (this.setScale(1, 1), this.flipped = !1));
          this.body.SetPositionAndAngle(new Box2D.Common.Math.b2Vec2(d - j, e - m), 0);
          ig.game.box2dPaused || this.body.ApplyForce(new Box2D.Common.Math.b2Vec2(0, this.body.m_mass * -ig.game.gravity * Box2D.SCALE), this.body.GetPosition());
        }
      },
      beginContact: function (b) {
        if (!b || !(b.name && "web" == b.name)) if (!this.isDead && b && b.body && (15 < b.body.GetLinearVelocity().Length() || "missile" == b.classify) && !this.isDead) "piggy" == b.classify && b.triggerCollisionAbility(this), this.destroy();
      },
      preSolve: function (b, c) {
        if (!b || !(b.name && "web" == b.name)) this.isDead ? c.SetEnabled(!1) : b && (b.classify ? "obstacle" == b.classify || "enemy" == b.classify ? c.SetEnabled(!1) : "piggy" == b.classify && (b.triggerCollisionAbility(this), this.destroy(), c.SetEnabled(!1)) : c.SetEnabled(!1));
      },
      callOnce: !1,
      check: function (b) {
        this.isDead || b.classify && "missile" === b.classify && !this.callOnce && !b.isReturning && this.destroy(b.pos);
      },
      destroy: function () {
        this.isDead || (ig.game.spawnEntity(EntityEffect, this.pos.x, this.pos.y), 2 > ig.game.enemyDieSoundLim && 0 >= ig.game.lastenemyDiePlay && (ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.hit), ig.game.enemyDieSoundLim++, ig.game.lastenemyDiePlay = 1), 2 > ig.game.enemyDie2SoundLim && 0 >= ig.game.lastenemyDie2Play && (ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.bighit), ig.game.enemyDie2SoundLim++, ig.game.lastenemyDie2Play = 1), ig.game.gainScore(50, this, !0), this.isDead = !0, this.currentAnim = this.anims.dead);
      },
      tweenF: function () {},
      ready: function () {
        this.pointer = ig.game.getEntitiesByType(EntityPointer)[0];
      },
      draw: function () {
        this.parent();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.enemy").requires("plugins.box2d.entity").defines(function () {
    EntityEnemy = ig.Box2DEntity.extend({
      gravityFactor: 1,
      type: ig.Entity.TYPE.B,
      checkAgainst: ig.Entity.TYPE.B,
      zIndex: 700,
      sc: 2,
      gamePaused: !1,
      scX: 1,
      scY: 1,
      box2dType: 0,
      dynamicType: 0,
      density: 1,
      friction: 0.3,
      restitution: 0.1,
      mass: 0.8,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      broken: !1,
      jointSet: !1,
      sleepVel: 0.14,
      name: "enemy",
      classify: "enemy",
      alp: 1,
      firstShape: !0,
      slicePoints: [],
      splitPoints: [],
      sleepAtStart: !1,
      ctxIndex: 0,
      canvasPerEntity: !0,
      speed: 300,
      maxRad: 135,
      clickPos: [-999, -999],
      isDead: !1,
      isKill: !1,
      targeterAdj: {
        x: -7,
        y: -5
      },
      animSheetList: [new ig.AnimationSheet("media/graphics/game/objects/enemy1-idle.png", 47, 55), new ig.AnimationSheet("media/graphics/game/objects/enemy2-idle.png", 42, 54), new ig.AnimationSheet("media/graphics/game/objects/enemy3-idle.png", 46, 54), new ig.AnimationSheet("media/graphics/game/objects/enemy4-idle.png", 42, 54), new ig.AnimationSheet("media/graphics/game/objects/enemy5-idle.png", 42, 54), new ig.AnimationSheet("media/graphics/game/objects/enemy6-idle.png", 42, 54), new ig.AnimationSheet("media/graphics/game/objects/enemy-wakanda-2.png", 33, 50), new ig.AnimationSheet("media/graphics/game/objects/enemy-wakanda-3.png", 33, 50), new ig.AnimationSheet("media/graphics/game/objects/enemy-wakanda-4.png", 33, 50), new ig.AnimationSheet("media/graphics/game/objects/enemy-volcano-1.png", 33, 50), new ig.AnimationSheet("media/graphics/game/objects/enemy-volcano-2.png", 33, 50), new ig.AnimationSheet("media/graphics/game/objects/enemy-volcano-3.png", 33, 50), new ig.AnimationSheet("media/graphics/game/objects/enemy-space-1.png", 42, 55), new ig.AnimationSheet("media/graphics/game/objects/enemy-space-2.png", 42, 55), new ig.AnimationSheet("media/graphics/game/objects/enemy-space-3.png", 42, 55)],
      animSheetList_hit: [new ig.AnimationSheet("media/graphics/game/objects/enemy-hit.png", 79, 56), new ig.AnimationSheet("media/graphics/game/objects/enemy2-hit.png", 79, 56), new ig.AnimationSheet("media/graphics/game/objects/enemy3-hit.png", 79, 56), new ig.AnimationSheet("media/graphics/game/objects/enemy4-hit.png", 79, 56), new ig.AnimationSheet("media/graphics/game/objects/enemy5-hit.png", 79, 56), new ig.AnimationSheet("media/graphics/game/objects/enemy6-hit.png", 79, 56), new ig.AnimationSheet("media/graphics/game/objects/enemy4-hit.png", 79, 56), new ig.AnimationSheet("media/graphics/game/objects/enemy5-hit.png", 79, 56), new ig.AnimationSheet("media/graphics/game/objects/enemy6-hit.png", 79, 56), new ig.AnimationSheet("media/graphics/game/objects/enemy4-hit.png", 79, 56), new ig.AnimationSheet("media/graphics/game/objects/enemy5-hit.png", 79, 56), new ig.AnimationSheet("media/graphics/game/objects/enemy6-hit.png", 79, 56), new ig.AnimationSheet("media/graphics/game/objects/enemy4-hit.png", 79, 56), new ig.AnimationSheet("media/graphics/game/objects/enemy5-hit.png", 79, 56), new ig.AnimationSheet("media/graphics/game/objects/enemy6-hit.png", 79, 56)],
      animSheet_hit: null,
      sizeList: [{
        x: 47,
        y: 55
      }, {
        x: 47,
        y: 55
      }, {
        x: 47,
        y: 55
      }, {
        x: 47,
        y: 55
      }, {
        x: 47,
        y: 55
      }, {
        x: 47,
        y: 55
      }, {
        x: 33,
        y: 50
      }, {
        x: 33,
        y: 50
      }, {
        x: 33,
        y: 50
      }, {
        x: 33,
        y: 50
      }, {
        x: 33,
        y: 50
      }, {
        x: 33,
        y: 50
      }, {
        x: 42,
        y: 55
      }, {
        x: 42,
        y: 55
      }, {
        x: 42,
        y: 55
      }],
      size: null,
      enemyType: 0,
      anim_speed_idle: 0.1,
      anim_frames_idle: [0, 1, 2, 3, 4, 5],
      anim_speed_dead: 0.05,
      anim_frames_dead: [0, 1, 2, 3, 4, 5],
      init: function (b, c, d) {
        d.enemyType || (d.enemyType = 0);
        this.size = this.sizeList[d.enemyType];
        ig.global.wm && (this.size = {
          x: 50,
          y: 50
        });
        this.parent(b, c, d);
        ig.global.wm || (this.animSheet = this.animSheetList[this.enemyType], this.anims.idle = new ig.Animation(this.animSheetList[this.enemyType], 0.1, [0]), this.addAnim("idle", 1, [0]), 5 >= this.enemyType && (this.animSheet_hit = this.animSheetList_hit[this.enemyType], this.anims.dead = new ig.Animation(this.animSheet_hit, this.anim_speed_dead, this.anim_frames_dead)), this.iniPivotX = this.pos.x + this.size.x / 2, this.iniPivotY = this.pos.y + this.size.y / 2, this.body.SetFixedRotation(!0));
      },
      update: function () {
        this.parent();
        ig.global.wm || (this.isDead && this.currentAnim.frame == this.currentAnim.sequence.length - 1 && (this.isKill = !0), this.isKill && this.kill(), 540 < this.pos.y && this.destroy(), 20 < this.body.GetLinearVelocity().y && (this.isFalling = !0), this.isFalling && 3 >= this.body.GetLinearVelocity().y && (this.destroy(), this.isFalling = !1));
      },
      beginContact: function (b) {
        if (!b || !(b.name && "web" == b.name)) if (b && b.name && "shield" == b.name) this.destroy(), b.lastEnemyHit = this, b.seekTarget = !0, ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.shieldHit);else if (this.isFalling) this.isDead || this.destroy(), b && b.name && ("woodBarrel" === b.name || "woodBox" === b.name) && b.destroy(), this.isFalling = !1;else if (b && !b.isDead && (b.body && 15 < b.body.GetLinearVelocity().Length() || this.isFalling)) this.isDead || this.destroy(), ("woodBarrel" === b.name || "woodBox" === b.name) && b.destroy();
      },
      destroy: function () {
        console.log("destroying");
        this.isDead || (2 > ig.game.enemyDieSoundLim && 0 >= ig.game.lastenemyDiePlay && (ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.hit), ig.game.enemyDieSoundLim++, ig.game.lastenemyDiePlay = 1), 2 > ig.game.enemyDie2SoundLim && 0 >= ig.game.lastenemyDie2Play && (ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.bighit), ig.game.enemyDie2SoundLim++, ig.game.lastenemyDie2Play = 1), ig.game.spawnEntity(EntityEffect, this.pos.x, this.pos.y), ig.game.gainScore(100, this), this.isKill = this.isDead = !0, console.log("makred as destroyed"));
      },
      tweenF: function () {},
      ready: function () {
        this.pointer = ig.game.getEntitiesByType(EntityPointer)[0];
      },
      draw: function () {
        this.parent();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.enemy-fly-path").requires("plugins.box2d.entity", "game.entities.enemy").defines(function () {
    EntityEnemyFlyPath = ig.Entity.extend({
      pathId: "",
      size: {
        x: 10,
        y: 10
      },
      pathNum: 0,
      init: function (b, c, d) {
        this.parent(b, c, d);
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.panels.settings").requires("impact.entity", "game.entities.buttons.btn").defines(function () {
    EntitySettings = ig.Entity.extend({
      zIndex: 6E3,
      pointer: null,
      bg: new ig.Image("media/graphics/game/ui/background.png"),
      window: new ig.Image("media/graphics/game/ui/window_box.png"),
      imgBar: new ig.Image("media/graphics/game/ui/settings_slider_on.png"),
      sizeBar: {
        x: 192,
        y: 21
      },
      imgBase: new ig.Image("media/graphics/game/ui/settings_slider_off.png"),
      imgKnob: new ig.Image("media/graphics/game/ui/settings_slider_point.png"),
      icon_music: new ig.Image("media/graphics/game/ui/icon_music.png"),
      icon_sound: new ig.Image("media/graphics/game/ui/icon_sound.png"),
      square_musicSliderKnob: {
        x: 417,
        y: 171,
        w: 192,
        h: 21
      },
      square_soundSliderKnob: {
        x: 417,
        y: 278,
        w: 192,
        h: 21
      },
      windowTargetPos: {
        x: 236,
        y: 11
      },
      offset_musicSliderKnob: {
        x: 150,
        y: 165,
        w: 192,
        h: 21
      },
      offset_soundSliderKnob: {
        x: 150,
        y: 271,
        w: 192,
        h: 21
      },
      offset_musicBar: {
        x: 150,
        y: 170
      },
      offset_soundBar: {
        x: 150,
        y: 276
      },
      btnOk: null,
      btnHome: null,
      isPause: !1,
      lockToSoundRect: !1,
      lockToMusicRect: !1,
      specialDrawUI: !0,
      init: function (b, c, d) {
        this.parent(b, c, d);
        if (this.isPause) this.btnOk = ig.game.spawnEntity(EntityBtnSettingsOk, 515, 389, {
          settings: this,
          posOffset: {
            x: 259,
            y: 375
          }
        }), this.btnHome = ig.game.spawnEntity(EntityBtnSettingsHome, 370, 389, {
          settings: this
        });else if (this.btnOk = ig.game.spawnEntity(EntityBtnSettingsOk, 442, 389, {
          settings: this
        }), b = ig.game.getEntitiesByType(EntityHomeControl)[0]) b.btnHome.isEnabled = !1, b.btnSettings.isEnabled = !1;
        this.pointer = ig.game.getEntitiesByType(EntityPointer)[0];
        ig.game.inSettings = !0;
        this._tweenStart();
      },
      update: function () {
        this._checkClick();
        this.parent();
      },
      draw: function (b) {
        if (b) {
          b = ig.system.context;
          b.save();
          this.isPause && (b = ig.system.context, b.save(), b.globalAlpha = 0.4, b.beginPath(), b.rect(0, 0, ig.system.width, ig.system.height), b.fillStyle = "#000000", b.fill(), b.restore());
          this.isPause || this.bg.draw(0, -300);
          this.window.draw(this.pos.x, this.pos.y);
          b.font = "50px soupofjustice, Helvetica, Verdana";
          b.fillStyle = "#e1f5fe";
          b.textAlign = "center";
          this.isPause ? (b.fillText(_STRINGS.UI.Pause, this.pos.x + 230, this.pos.y + 81), b.fillStyle = "#755fc0", b.fillText(_STRINGS.UI.Pause, this.pos.x + 230, this.pos.y + 78)) : (b.fillText(_STRINGS.UI.Settings, this.pos.x + 230, this.pos.y + 81), b.fillStyle = "#755fc0", b.fillText(_STRINGS.UI.Settings, this.pos.x + 230, this.pos.y + 78));
          this.icon_music.draw(this.pos.x + 64, this.pos.y + 155);
          this.icon_sound.draw(this.pos.x + 64, this.pos.y + 259);
          var c = this.imgKnob.width,
            d = ig.soundHandler.bgmPlayer.getVolume(),
            e = (this.offset_musicSliderKnob.w - c) * d;
          isNaN(d) && (d = 1);
          this.imgBase.draw(this.pos.x + this.offset_musicBar.x, this.pos.y + this.offset_musicBar.y, 0, 0, this.sizeBar.x, this.sizeBar.y);
          0 < d && (d *= this.sizeBar.x, this.imgBar.draw(this.pos.x + this.offset_musicBar.x, this.pos.y + this.offset_musicBar.y, 0, 0, d, this.sizeBar.y));
          this.imgKnob.draw(this.offset_musicSliderKnob.x + e + this.pos.x, this.offset_musicSliderKnob.y + this.pos.y);
          d = ig.soundHandler.sfxPlayer.getVolume();
          e = (this.offset_soundSliderKnob.w - c) * d;
          isNaN(d) && (d = 1);
          this.imgBase.draw(this.pos.x + this.offset_soundBar.x, this.pos.y + this.offset_soundBar.y, 0, 0, this.sizeBar.x, this.sizeBar.y);
          0 < d && (d *= this.sizeBar.x, this.imgBar.draw(this.pos.x + this.offset_soundBar.x, this.pos.y + this.offset_soundBar.y, 0, 0, d, this.sizeBar.y));
          this.imgKnob.draw(this.offset_soundSliderKnob.x + e + this.pos.x, this.offset_soundSliderKnob.y + this.pos.y);
          b.restore();
          this.btnOk.draw(!0);
          this.btnHome && this.btnHome.draw(!0);
        }
      },
      tweener: null,
      tweener2: null,
      tween_isHome: !1,
      _tweenStart: function () {
        this.tweener = this.tween({
          pos: {
            x: 267,
            y: 11
          }
        }, 0.5, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut
        });
        this.tweener.start();
      },
      _tweenDown: function () {
        this.tweener2 = this.tween({
          pos: {
            x: 267,
            y: 600
          }
        }, 0.5, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut,
          onComplete: function () {
            this.entity.finishedTween();
          }
        });
        this.tweener2.start();
      },
      finishedTween: function () {
        ig.game.inSettings = !1;
        var b = ig.game.getEntitiesByType(EntityBtnGameRestart)[0];
        b && (b.isEnabled = !0);
        if (b = ig.game.getEntitiesByType(EntityBtnGamePause)[0]) b.isEnabled = !0;
        this.btnOk.kill();
        this.btnHome && this.btnHome.kill();
        this.kill();
        this.isPause && (ig.game.box2dPaused = !1, this.tween_isHome && ig.game.director.jumpTo(LevelHome));
        if (b = ig.game.getEntitiesByType(EntityHomeControl)[0]) _SETTINGS.MoreGames.Enabled && b.btnMoreGames.show(), b.btnHome.isEnabled = !0, b.btnSettings.isEnabled = !0;
      },
      isEnabled: !1,
      _checkClick: function () {
        if (null != this.pointer) {
          if (!this.lockToSoundRect && !this.lockToMusicRect && this.pointer.isFirstPressed && !this.pointer.isReleased) {
            var b = {};
            b.x = this.pointer.pos.x;
            b.y = this.pointer.pos.y;
            this._rectangleClickCheck(b, this.square_soundSliderKnob) ? this.lockToSoundRect = !0 : this._rectangleClickCheck(b, this.square_musicSliderKnob) && (this.lockToMusicRect = !0);
          } else this.pointer.isReleased && ((this.lockToSoundRect || this.lockToMusicRect) && ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.click), this.lockToMusicRect = this.lockToSoundRect = !1);
          if (this.lockToSoundRect) {
            var b = this.imgKnob.width / 2,
              c = this.pointer.pos.x + this.pointer.size.x / 2 - this.square_soundSliderKnob.x;
            c < b && (c = b);
            c > this.square_soundSliderKnob.w - b && (c = this.square_soundSliderKnob.w - b);
            c = (c - b) / (this.square_soundSliderKnob.w - b - b);
            ig.soundHandler.sfxPlayer.volume(c);
            ig.game.io.storage.set("mppHero-soundVolume", c);
          } else this.lockToMusicRect && (b = this.imgKnob.width / 2, c = this.pointer.pos.x + this.pointer.size.x / 2 - this.square_musicSliderKnob.x, c < b && (c = b), c > this.square_musicSliderKnob.w - b && (c = this.square_musicSliderKnob.w - b), c = (c - b) / (this.square_musicSliderKnob.w - b - b), ig.soundHandler.bgmPlayer.volume(c), ig.game.io.storage.set("mppHero-musicVolume", c));
        }
      },
      _rectangleClickCheck: function (b, c) {
        return b.x - ig.game.screen.x > c.x && b.x - ig.game.screen.x < c.x + c.w && b.y - ig.game.screen.y > c.y && b.y - ig.game.screen.y < c.y + c.h;
      }
    });
    EntityBtnSettingsOk = EntityBtn.extend({
      logoImg: new ig.Image("media/graphics/game/ui/bt_ok.png", 73, 77),
      size: {
        x: 73,
        y: 77
      },
      posOffset: {
        x: 185,
        y: 375
      },
      name: "btnSettingsOk",
      zIndex: 6001,
      settings: null,
      update: function () {
        this.parent();
        this.pos.x = this.settings.pos.x + this.posOffset.x;
        this.pos.y = this.settings.pos.y + this.posOffset.y;
      },
      draw: function (b) {
        b && this.parent();
      },
      interact: function () {
        var b = ig.game.getEntitiesByType(EntitySettings)[0];
        b && (b._tweenDown(), ig.game.io.storage.set("mppHero-bgmVol", ig.soundHandler.bgmPlayer.getVolume()), ig.game.io.storage.set("mppHero-sfxVol", ig.soundHandler.sfxPlayer.getVolume()));
      }
    });
    EntityBtnSettingsHome = EntityBtn.extend({
      logoImg: new ig.Image("media/graphics/game/ui/btn-home.png", 73, 77),
      size: {
        x: 73,
        y: 77
      },
      posOffset: {
        x: 101,
        y: 375
      },
      name: "btnSettingsHome",
      zIndex: 6001,
      settings: null,
      update: function () {
        this.parent();
        this.pos.x = this.settings.pos.x + this.posOffset.x;
        this.pos.y = this.settings.pos.y + this.posOffset.y;
      },
      draw: function (b) {
        b && this.parent();
      },
      interact: function () {
        var b = ig.game.getEntitiesByType(EntitySettings)[0];
        b && (b.tween_isHome = !0, b._tweenDown());
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.mace").requires("plugins.box2d.entity").defines(function () {
    EntityMace = ig.Box2DEntity.extend({
      name: "mace",
      gravityFactor: 0,
      type: ig.Entity.TYPE.B,
      checkAgainst: ig.Entity.TYPE.B,
      zIndex: 700,
      animSheet: new ig.AnimationSheet("media/graphics/game/objects/mace_ball.png", 57, 54),
      size: {
        x: 57,
        y: 54
      },
      box2dType: 1,
      dynamicType: 0,
      density: 0.1,
      friction: 0.3,
      restitution: 0.1,
      mass: 0.001,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      isParent: !1,
      isStart: !1,
      chainId: "",
      chainNum: 0,
      isInteractable: !1,
      hitForce: !1,
      hitForce_Time: 0,
      hitForce_TimeDef: 1,
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.addAnim("idle", 1, [0]);
        ig.global.wm || this.body.SetAwake(!1);
      },
      ready: function () {
        ig.global.wm || (this.body.SetAwake(!1), this.createJoint());
      },
      createJoint: function () {
        if (!this.isStart) {
          for (var b = null, c = ig.game.getEntitiesByType(EntityChain), d = 0; d < c.length; d++) if (c[d].chainId === this.chainId && c[d].chainNum === this.chainNum - 1) {
            b = c[d];
            break;
          }
          null == b ? this.kill() : (c = new Box2D.Dynamics.Joints.b2RevoluteJointDef(), c.bodyA = b.body, c.bodyB = this.body, c.collideConnected = !1, c.localAnchorA = new Box2D.Common.Math.b2Vec2(0, -0.53), c.localAnchorB = new Box2D.Common.Math.b2Vec2(0, 1.38), this.joint = ig.world.CreateJoint(c));
        }
      },
      update: function () {
        this.parent();
        0 < this.hitForce_Time && (this.hitForce_Time -= ig.system.tick, 0 >= this.hitForce_Time && (this.hitForce = !1));
      },
      beginContact: function (b) {
        if (b && b.classify && ("piggy" == b.classify || "missile" == b.classify) && b.pos.x <= this.pos.x && !this.hitForce) this.hitForce = !0, this.hitForce_Time = this.hitForce_TimeDef, b = new Box2D.Common.Math.b2Vec2(3E3, 0), this.body.ApplyImpulse(b, this.body.GetPosition());
      },
      preSolve: function (b, c) {
        b && (b.name && ("enemy" === b.name || "expBarrel" === b.name || "woodBarrel" === b.name || "woodBox" === b.name) && b.destroy(), "steelBox" != b.name && "piggy" != b.classify && c.SetEnabled(!1));
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.chain").requires("plugins.box2d.entity").defines(function () {
    EntityChain = ig.Box2DEntity.extend({
      gravityFactor: 0,
      type: ig.Entity.TYPE.B,
      checkAgainst: ig.Entity.TYPE.B,
      zIndex: 600,
      animSheet: new ig.AnimationSheet("media/graphics/game/objects/chain.png", 10, 18),
      size: {
        x: 10,
        y: 18
      },
      box2dType: 2,
      dynamicType: 0,
      density: 1,
      friction: 0.3,
      restitution: 0.1,
      mass: 0.01,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      vertices: [{
        x: -0.5,
        y: -0.9
      }, {
        x: 0.5,
        y: -0.9
      }, {
        x: 0.5,
        y: 0.9
      }, {
        x: -0.5,
        y: 0.9
      }],
      isParent: !1,
      isStart: !1,
      chainId: "",
      chainNum: 0,
      isInteractable: !1,
      name: "chain",
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.addAnim("idle", 1, [0]);
      },
      ready: function () {
        this.createJoint();
      },
      createJoint: function () {
        if (!this.isStart) {
          var b = null;
          if (1 === this.chainNum) b = ig.game.spawnEntity(EntityChainMain, this.pos.x, this.pos.y - 20), b.chainId = this.chainId, b.chainNum = 0, this.isParent = !0;else for (var c = ig.game.getEntitiesByType(EntityChain), d = 0; d < c.length; d++) if (c[d].chainId === this.chainId && c[d].chainNum === this.chainNum - 1) {
            b = c[d];
            break;
          }
          null == b ? this.kill() : (c = new Box2D.Dynamics.Joints.b2RevoluteJointDef(), c.bodyA = b.body, c.bodyB = this.body, this.isParent ? (c.localAnchorA = new Box2D.Common.Math.b2Vec2(0, 0.53), c.localAnchorB = new Box2D.Common.Math.b2Vec2(0, 1.53)) : b.isParent ? (c.localAnchorA = new Box2D.Common.Math.b2Vec2(0, 0.5), c.localAnchorB = new Box2D.Common.Math.b2Vec2(0, 1.5)) : (c.localAnchorA = new Box2D.Common.Math.b2Vec2(0, 0.53), c.localAnchorB = new Box2D.Common.Math.b2Vec2(0, 1.53)), ig.world.CreateJoint(c));
        }
      },
      update: function () {
        this.parent();
      },
      preSolve: function () {}
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.chain-main").requires("plugins.box2d.entity").defines(function () {
    EntityChainMain = ig.Box2DEntity.extend({
      size: {
        x: 15,
        y: 15
      },
      zIndex: 600,
      box2dType: 1,
      dynamicType: 1,
      density: 0.5,
      friction: 0,
      restitution: 0,
      gravityFactor: 0,
      isInteractable: !1,
      init: function (b, c, d) {
        this.parent(b, c, d);
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.effect").requires("impact.entity").defines(function () {
    EntityEffect = ig.Entity.extend({
      animSheet1: new ig.AnimationSheet("media/graphics/game/objects/smoke.png", 141, 127),
      animSheet2: new ig.AnimationSheet("media/graphics/game/objects/black-panther-energy.png", 180, 97),
      animSheet3: new ig.AnimationSheet("media/graphics/game/objects/portal-effect.png", 90, 90),
      animSheet: null,
      zIndex: 2300,
      specialDraw: !0,
      init: function (b, c, d) {
        this.parent(b, c, d);
        "bpEnergy" == d.effectType ? (this.animSheet = this.animSheet2, this.addAnim("idle", 0.05, [0, 1, 2, 3, 4, 5, 6, 7])) : "portalEffect" == d.effectType ? (this.animSheet = this.animSheet3, this.addAnim("idle", 0.1, [0, 1, 2, 3, 4])) : (this.animSheet = this.animSheet1, this.addAnim("idle", 0.05, [0, 1, 2, 3, 4, 5, 6, 7, 8]));
      },
      update: function () {
        this.parent();
        this.currentAnim.frame == this.currentAnim.sequence.length - 1 && this.kill();
      }
    });
    EntityEffectTimer = ig.Entity.extend({
      dur: 0,
      init: function (b, c, d) {
        this.parent(b, c, d);
      },
      update: function () {
        this.dur -= ig.system.tick;
        0 >= this.dur && (ig.game.spawnEntity(EntityEffect, this.pos.x, this.pos.y), this.kill());
      }
    });
    EntityPoof = ig.Entity.extend({
      animSheet: new ig.AnimationSheet("media/graphics/game/objects/poof.png", 77, 66),
      zIndex: 2300,
      specialDraw: !0,
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.addAnim("idle", 0.05, [0, 1, 2, 3]);
      },
      update: function () {
        this.parent();
        this.currentAnim.frame == this.currentAnim.sequence.length - 1 && this.kill();
      }
    });
    EntityExplosionMaker = ig.Entity.extend({
      maxX: 0,
      maxY: 0,
      durStart: 0,
      durInterval: 0,
      explosionNum: 0,
      init: function (b, c, d) {
        this.parent(b, c, d);
        for (b = 1; b <= this.explosionNum; b++) ig.game.spawnEntity(EntityEffectTimer, this.pos.x + Math.floor(Math.random() * this.maxX), this.pos.y + Math.floor(Math.random() * this.maxY), {
          dur: this.durStart + this.durInterval * (b - 1)
        }), ig.game.spawnEntity(EntityEffectTimer, this.pos.x + Math.floor(Math.random() * -this.maxX), this.pos.y + Math.floor(Math.random() * this.maxY), {
          dur: this.durStart + this.durInterval * (b - 1)
        }), ig.game.spawnEntity(EntityEffectTimer, this.pos.x + Math.floor(Math.random() * this.maxX), this.pos.y + Math.floor(Math.random() * -this.maxY), {
          dur: this.durStart + this.durInterval * (b - 1)
        }), ig.game.spawnEntity(EntityEffectTimer, this.pos.x + Math.floor(Math.random() * -this.maxX), this.pos.y + Math.floor(Math.random() * -this.maxY), {
          dur: this.durStart + this.durInterval * (b - 1)
        });
        this.kill();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.sling-maker").requires("plugins.box2d.entity").defines(function () {
    EntitySlingMaker = ig.Entity.extend({
      piggyTypes: null,
      piggyNum: 0,
      size: {
        x: 61,
        y: 72
      },
      init: function (b, c, d) {
        this.parent(b, c, d);
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.card").requires("plugins.box2d.entity").defines(function () {
    EntityCard = ig.Entity.extend({
      type: ig.Entity.TYPE.A,
      checkAgainst: ig.Entity.TYPE.B,
      zIndex: 4E3,
      size: {
        x: 79,
        y: 100
      },
      scale: {
        x: 0.4,
        y: 0.4
      },
      floating: 20,
      img_thor: new ig.Image("media/graphics/game/objects/card-thor.png"),
      img_cap: new ig.Image("media/graphics/game/objects/card-cap.png"),
      img_iron: new ig.Image("media/graphics/game/objects/card-iron.png"),
      scoreGiven: 100,
      cardType: 0,
      init: function (b, c, d) {
        this.parent(b, c, d);
        ig.global.wm || (this.cardType = Math.floor(3 * Math.random()));
      },
      update: function () {
        this.parent();
        ig.global.wm || (this.setScale(this.scale.x, this.scale.y), this.isDestroyed || (this.upperLimit ? (this.floating += 1, this.pos.y += 0.2, 20 <= this.floating && (this.upperLimit = !1)) : (this.floating -= 1, this.pos.y -= 0.2, 0 >= this.floating && (this.upperLimit = !0))));
      },
      draw: function () {
        if (!ig.global.wm) {
          var b = ig.system.context;
          b.save();
          0 === this.cardType ? b.drawImage(this.img_thor.data, this.pos.x - ig.game.screen.x, this.pos.y - ig.game.screen.y, this.size.x, this.size.y) : 1 === this.cardType ? b.drawImage(this.img_iron.data, this.pos.x - ig.game.screen.x, this.pos.y - ig.game.screen.y, this.size.x, this.size.y) : b.drawImage(this.img_cap.data, this.pos.x - ig.game.screen.x, this.pos.y - ig.game.screen.y, this.size.x, this.size.y);
          b.restore();
        }
      },
      callOnce: !1,
      check: function (b) {
        ("a" === b.name || "b" === b.name || "c" === b.name || "d" === b.name || "e" === b.name || "f" === b.name || "g" === b.name || "h" === b.name || "i" === b.name) && !this.callOnce && !this.isDestroyed && this.destroy();
      },
      isDestroyed: !1,
      tweener: null,
      tweener2: null,
      destroy: function () {
        ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.star_1);
        this.isDestroyed = !0;
        ig.game.gainScore(this.scoreGiven, this);
        this.tweener = this.tween({
          scale: {
            x: 1,
            y: 1
          }
        }, 0.5, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut,
          delay: 0,
          onComplete: function () {
            this.entity.tweenFinished_1();
          }
        });
        this.tweener.start();
      },
      tweenFinished_1: function () {
        this.tweener2 = this.tween({
          scale: {
            x: 0,
            y: 0
          }
        }, 0.5, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut,
          delay: 0,
          onComplete: function () {
            this.entity.tweenFinished_2();
          }
        });
        this.tweener2.start();
      },
      tweenFinished_2: function () {
        this.kill();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.lazer").requires("plugins.box2d.entity").defines(function () {
    EntityLazer = ig.Box2DEntity.extend({
      gravityFactor: 0,
      type: ig.Entity.TYPE.B,
      checkAgainst: ig.Entity.TYPE.B,
      zIndex: 2300,
      animSheet: new ig.AnimationSheet("media/graphics/game/objects/lazer.png", 105, 15),
      size: {
        x: 105,
        y: 15
      },
      box2dType: 0,
      dynamicType: 0,
      density: 0.8,
      friction: 0.3,
      restitution: 0.1,
      mass: 0.8,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      vertices: [{
        x: -5.25,
        y: -0.75
      }, {
        x: 5.25,
        y: -0.75
      }, {
        x: 5.25,
        y: 0.75
      }, {
        x: -5.25,
        y: 0.75
      }],
      targetPoint: {
        x: 0,
        y: 0
      },
      name: "lazer",
      classify: "missile",
      specialDraw: !0,
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.addAnim("idle", 1, [0]);
        this.movAngle = 180 * Math.atan2(this.targetPoint.y - this.pos.y, this.targetPoint.x - this.pos.x) / Math.PI;
        ig.game.cameraFocus = null;
        ig.game.cameraFocus = this;
      },
      distanceLimit: 4E3,
      speed: 1.5,
      lifeFrames: 0,
      lifeFrameMax: 7,
      portal_passing: !1,
      portal_pos: {
        x: 0,
        y: 0
      },
      update: function () {
        if (!ig.game.box2dPaused && !this.portal_passing) {
          var b = (this.pos.x + this.size.x / 2) * Box2D.SCALE,
            c = (this.pos.y + this.size.y / 2) * Box2D.SCALE,
            b = b + this.speed * Math.cos(this.movAngle * Math.PI / 180),
            c = c + this.speed * Math.sin(this.movAngle * Math.PI / 180);
          this.distanceLimit -= this.speed;
          0 >= this.distanceLimit && this.destroy();
          this.body.SetPositionAndAngle(new Box2D.Common.Math.b2Vec2(b, c), this.movAngle * Math.PI / 180);
        }
        this.portal_passing && (this.portal_passing = !1, this.body.SetPositionAndAngle(new Box2D.Common.Math.b2Vec2(this.portal_pos.x, this.portal_pos.y), this.movAngle * Math.PI / 180));
        this.parent();
        this.lifeFrames < this.lifeFrameMax && this.lifeFrames++;
        (-1E3 > this.pos.x || this.pos.x > ig.game.maxCameraDistance + 1E3) && this.destroy();
        (this.pos.y < ig.game.maxCameraDistanceY - 1E3 || 1540 < this.pos.y) && this.destroy();
      },
      beginContact: function () {},
      preSolve: function (b, c) {
        if (b && b.name && ("enemy" === b.classify || "obstacle" === b.classify && "woodCircle" != b.name)) b.isDead || (b.enemyBig ? b.destroy("lazer") : b.destroy());
        c.SetEnabled(!1);
      },
      destroy: function () {
        ig.game.spawnEntity(EntityEffect, this.pos.x + this.size.x / 2, this.pos.y + this.size.y / 2);
        for (var b = null, c = ig.game.entities, d = c.length, e = 0; e < d; e++) if (b = c[e], b.classify && ("enemy" === b.classify || "obstacle" === b.classify && "woodCircle" != b.name)) {
          var f = this.pos.x + this.size.x / 2 - (b.pos.x + b.size.x / 2),
            j = this.pos.y + this.size.y / 2 - (b.pos.y + b.size.y / 2);
          65 >= Math.sqrt(f * f + j * j) && b.destroy();
        }
        ig.game.levelControl.birdDragging && (ig.game.cameraFocus = ig.game.levelControl.birdDragging.isAlive ? ig.game.levelControl.birdDragging : null);
        this.kill();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.targeter").requires("plugins.box2d.entity").defines(function () {
    EntityTargeter = ig.Entity.extend({
      img: new ig.Image("media/graphics/game/ui/cursor.png"),
      imgRed: new ig.Image("media/graphics/game/ui/cursor.png"),
      size: {
        x: 60,
        y: 60
      },
      scale: {
        x: 0.01,
        y: 0.01
      },
      zIndex: 2300,
      specialDraw: !0,
      uiTargeter: !0,
      isBig: !1,
      init: function (b, c, d) {
        this.parent(b, c, d);
        ig.global.wm || this.runTween2();
      },
      update: function () {
        this.parent();
        ig.global.wm || (this.setScale(this.scale.x, this.scale.y), "ready" == ig.game.levelControl.levelState && 8 != ig.game.levelCur_actual && 32 != ig.game.levelCur_actual && this.kill());
      },
      draw: function (b) {
        b || (b = ig.system.context, b.save(), this.isBig ? b.drawImage(this.imgRed.data, this.pos.x - ig.game.screen.x, this.pos.y - ig.game.screen.y, this.size.x, this.size.y) : b.drawImage(this.img.data, this.pos.x - ig.game.screen.x, this.pos.y - ig.game.screen.y, this.size.x, this.size.y), b.restore());
      },
      tweener: null,
      runTween2: function () {
        var b = {
          x: 1.4,
          y: 1.4
        };
        this.isBig && (b = {
          x: 2.4,
          y: 2.4
        });
        this.tweener = this.tween({
          scale: b
        }, 0.25, {
          entity: this,
          easing: ig.Tween.Easing.Linear.EaseNone,
          onComplete: function () {
            this.entity.runTween();
          }
        });
        this.tweener.start();
      },
      runTween: function () {
        var b = {
          x: 1,
          y: 1
        };
        this.isBig && (b = {
          x: 2,
          y: 2
        });
        this.tweener = this.tween({
          scale: b
        }, 0.75, {
          entity: this,
          easing: ig.Tween.Easing.Linear.EaseNone,
          loop: ig.Tween.Loop.Reverse
        });
        this.tweener.start();
      }
    });
    EntityTargeterRed = ig.Entity.extend({
      img: new ig.Image("media/graphics/game/ui/cursor-red.png"),
      size: {
        x: 60,
        y: 60
      },
      scale: {
        x: 0.01,
        y: 0.01
      },
      zIndex: 2300,
      specialDraw: !0,
      name: "targeterRed",
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.runTween2();
      },
      update: function () {
        this.parent();
        this.setScale(this.scale.x, this.scale.y);
        "ready" == ig.game.levelControl.levelState && this.kill();
      },
      draw: function (b) {
        b || (b = ig.system.context, b.save(), b.drawImage(this.img.data, this.pos.x - ig.game.screen.x, this.pos.y - ig.game.screen.y, this.size.x, this.size.y), b.restore());
      },
      tweener: null,
      runTween2: function () {
        this.tweener = this.tween({
          scale: {
            x: 1.4,
            y: 1.4
          }
        }, 0.25, {
          entity: this,
          easing: ig.Tween.Easing.Linear.EaseNone,
          onComplete: function () {
            this.entity.runTween();
          }
        });
        this.tweener.start();
      },
      runTween: function () {
        this.tweener = this.tween({
          scale: {
            x: 1,
            y: 1
          }
        }, 0.75, {
          entity: this,
          easing: ig.Tween.Easing.Linear.EaseNone,
          loop: ig.Tween.Loop.Reverse
        });
        this.tweener.start();
      },
      runTween_destroy: function () {
        this.tweener = this.tween({
          scale: {
            x: 0.01,
            y: 0.01
          }
        }, 0.75, {
          entity: this,
          easing: ig.Tween.Easing.Linear.EaseNone,
          onComplete: function () {
            this.entity.kill();
          }
        });
        this.tweener.start();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.afterimage").requires("plugins.box2d.entity").defines(function () {
    EntityAfterimage = ig.Entity.extend({
      animSheet1: new ig.Animation(new ig.AnimationSheet("media/graphics/game/objects/mpp-thor-attack.png", 122, 72), 0.03, [0, 1, 2, 3, 4, 5, 6]),
      animSheet2: new ig.Animation(new ig.AnimationSheet("media/graphics/game/objects/mpp-hulk-drawn.png", 93, 76), 0.03, [0]),
      animSheet3: new ig.Animation(new ig.AnimationSheet("media/graphics/game/objects/mpp-blackpanther-drawn.png", 66, 69), 0.03, [0]),
      animSheet: null,
      zIndex: 2300,
      timeLimit: 0,
      faceAngle: 0,
      init: function (b, c, d) {
        this.parent(b, c, d);
        1 === d.piggyType ? (this.animSheet = this.animSheet2, this.animSheet.angle = 90) : 2 === d.piggyType ? (this.animSheet = this.animSheet3, this.animSheet.angle = this.faceAngle) : (this.animSheet = this.animSheet1, this.animSheet.tile = 3, this.animSheet.angle = 90);
      },
      update: function () {
        this.parent();
        ig.global.wm || (this.timeLimit -= ig.system.tick, 0 >= this.timeLimit && this.kill());
      },
      draw: function () {
        ig.system.context.save();
        ig.system.context.globalAlpha = 0.3;
        this.animSheet.draw(this.pos.x - ig.game.screen.x, this.pos.y - ig.game.screen.y);
        ig.system.context.globalAlpha = 1;
        ig.system.context.restore();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.enemy-big").requires("plugins.box2d.entity").defines(function () {
    EntityEnemyBig = ig.Box2DEntity.extend({
      gravityFactor: 1,
      type: ig.Entity.TYPE.B,
      checkAgainst: ig.Entity.TYPE.B,
      zIndex: 700,
      sc: 2,
      gamePaused: !1,
      scX: 1,
      scY: 1,
      box2dType: 0,
      dynamicType: 0,
      density: 1,
      friction: 0.3,
      restitution: 0.1,
      mass: 0.8,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      broken: !1,
      jointSet: !1,
      sleepVel: 0.14,
      name: "enemy",
      classify: "enemy",
      alp: 1,
      firstShape: !0,
      slicePoints: [],
      splitPoints: [],
      sleepAtStart: !1,
      ctxIndex: 0,
      canvasPerEntity: !0,
      speed: 300,
      maxRad: 135,
      clickPos: [-999, -999],
      isDead: !1,
      animSheetList: [new ig.AnimationSheet("media/graphics/game/objects/enemy-big1-idle.png", 73, 74), new ig.AnimationSheet("media/graphics/game/objects/enemy-big2-idle.png", 73, 74), new ig.AnimationSheet("media/graphics/game/objects/enemy-big3-idle.png", 53, 80), new ig.AnimationSheet("media/graphics/game/objects/enemy-big4-idle.png", 63, 96), new ig.AnimationSheet("media/graphics/game/objects/enemy-big5-idle.png", 55, 80), new ig.AnimationSheet("media/graphics/game/objects/enemy-big6-idle.png", 66, 96), new ig.AnimationSheet("media/graphics/game/objects/enemy-big7-idle.png", 80, 96), new ig.AnimationSheet("media/graphics/game/objects/enemy-big8-idle.png", 91, 109)],
      animSheetList_hit: [new ig.AnimationSheet("media/graphics/game/objects/enemy-big1-hit.png", 150, 100), new ig.AnimationSheet("media/graphics/game/objects/enemy-big1-hit.png", 150, 100)],
      animSheet_hit: null,
      sizeList: [{
        x: 73,
        y: 74
      }, {
        x: 73,
        y: 74
      }, {
        x: 53,
        y: 80
      }, {
        x: 63,
        y: 96
      }, {
        x: 55,
        y: 80
      }, {
        x: 66,
        y: 96
      }, {
        x: 80,
        y: 96
      }, {
        x: 91,
        y: 109
      }],
      size: null,
      enemyType: 0,
      anim_speed_idle: 0.1,
      anim_frames_idle: [0, 1, 2, 3, 4, 5],
      anim_speed_dead: 0.05,
      anim_frames_dead: [0, 1, 2, 3, 4, 5],
      targeterAdj: {
        x: 7,
        y: 5
      },
      enemyBig: !0,
      healthBar: null,
      stopTossEffect: !1,
      init: function (b, c, d) {
        d.enemyType || (d.enemyType = 0);
        this.size = this.sizeList[d.enemyType];
        ig.global.wm && (this.size = {
          x: 50,
          y: 50
        });
        this.parent(b, c, d);
        ig.global.wm || (this.animSheet = this.animSheetList[this.enemyType], this.anims.idle = new ig.Animation(this.animSheetList[this.enemyType], 0.1, [0]), 1 >= this.enemyType && (this.animSheet_hit = this.animSheetList_hit[this.enemyType], this.anims.dead = new ig.Animation(this.animSheet_hit, this.anim_speed_dead, this.anim_frames_dead)), this.addAnim("idle", 1, [0]), this.iniPivotX = this.pos.x + this.size.x / 2, this.iniPivotY = this.pos.y + this.size.y / 2, this.body.SetFixedRotation(!0), 3 === this.enemyType || 5 === this.enemyType || 7 === this.enemyType ? (this.hpMax = this.hp = 3, this.healthBar = ig.game.spawnEntity(EntityHealthBar, this.pos.x, this.pos.y, {
          owner: this,
          abilBar_type: 1
        })) : this.healthBar = ig.game.spawnEntity(EntityHealthBar, this.pos.x, this.pos.y, {
          owner: this
        }));
      },
      update: function () {
        this.parent();
        ig.global.wm || (this.isDead && this.currentAnim.frame == this.currentAnim.sequence.length - 1 && this.kill(), this.isKill && this.kill(), 20 < this.body.GetLinearVelocity().y && (this.isFalling = !0), this.isFalling && 3 >= this.body.GetLinearVelocity().y && (this.destroy(), this.isFalling = !1), 520 < this.pos.y && (this.instantKill = !0, this.destroy()));
      },
      beginContact: function (b, c) {
        if (!b || !(b.name && "web" == b.name)) {
          if (b && b.name && "shield" == b.name) {
            if (b.lastEnemyHit != this) {
              this.destroy("shield");
              b.lastEnemyHit = this;
              b.seekTarget = !0;
              ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.shieldHit);
              return;
            }
            c.SetEnabled(!1);
          }
          if (this.isFalling) this.isDead || this.destroy(), b && b.name && ("woodBarrel" === b.name || "woodBox" === b.name) && b.destroy(), this.isFalling = !1;else if (b && !b.isDead && (b.body && 15 < b.body.GetLinearVelocity().Length() || this.isFalling)) "missile" != b.classify && "expBarrel" != b.name && (this.isDead || this.destroy()), ("woodBarrel" === b.name || "woodBox" === b.name) && b.destroy();
        }
      },
      hp: 2,
      hpMax: 2,
      lastDamageBy: -1,
      instantKill: !1,
      lastDamageType: "",
      destroy: function (b) {
        b || (b = "normal");
        "" == b && (b = "normal");
        if (!("normal" == b && "" != this.lastDamageType)) {
          if (b != this.lastDamageType) {
            2 > ig.game.enemyDieSoundLim && 0 >= ig.game.lastenemyDiePlay && (ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.hit), ig.game.enemyDieSoundLim++, ig.game.lastenemyDiePlay = 1);
            this.instantKill ? this.hp = 0 : "capMarvelBlaster" === b ? this.hp -= 2 : "antManExpand" === b ? this.hp -= 2 : this.hp--;
            ig.game.spawnEntity(EntityEffect, this.pos.x, this.pos.y);
            this.healthBar.tweenMove(this.hp / this.hpMax);
            this.lastDamageBy = ig.game.selected;
            if (!this.stopTossEffect) {
              var c = new Box2D.Common.Math.b2Vec2(0, 100);
              this.body.SetLinearVelocity(c);
            }
            this.lastDamageType = b;
            "expBarrel" == b && (this.lastDamageType = "");
          }
          0 >= this.hp && (ig.game.gainScore(150, this), this.healthBar.tweenMove(0), 2 > ig.game.enemyDie2SoundLim && 0 >= ig.game.lastenemyDie2Play && (ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.bighit), ig.game.enemyDie2SoundLim++, ig.game.lastenemyDie2Play = 1), this.isDead = !0, 1 >= this.enemyType ? this.currentAnim = this.anims.dead : this.isKill = !0);
        }
      },
      tweenF: function () {},
      ready: function () {
        this.pointer = ig.game.getEntitiesByType(EntityPointer)[0];
      },
      draw: function () {
        this.parent();
      }
    });
    EntityHealthBar = ig.Entity.extend({
      abilBar: [new ig.Image("media/graphics/game/ui/ability-bar-1.png"), new ig.Image("media/graphics/game/ui/ability-bar-red.png")],
      abilBar_type: 0,
      abilBar_base: new ig.Image("media/graphics/game/ui/ability-bar-2.png"),
      zIndex: 701,
      owner: null,
      barPerc: 1,
      specialDraw: !0,
      init: function (b, c, d) {
        this.parent(b, c, d);
      },
      update: function () {
        this.parent();
        0 >= this.barPerc && this.kill();
      },
      draw: function (b) {
        b && (b = ig.system.context, b.save(), b.drawImage(this.abilBar_base.data, this.owner.pos.x - ig.game.screen.x - 10, this.owner.pos.y - ig.game.screen.y - 10, 91, 13), b.drawImage(this.abilBar[this.abilBar_type].data, this.owner.pos.x - ig.game.screen.x - 10, this.owner.pos.y - ig.game.screen.y - 10, 91 * this.barPerc, 10), b.restore());
      },
      tweener: null,
      tweenMove: function (b) {
        this.tweener = this.tween({
          barPerc: b
        }, 0.25, {
          easing: ig.Tween.Easing.Quadratic.EaseOut
        });
        this.tweener.start();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.tut-pointer").requires("plugins.box2d.entity").defines(function () {
    EntityTutPointer = ig.Entity.extend({
      zIndex: 5E3,
      animSheet: new ig.AnimationSheet("media/graphics/game/ui/tut-finger.png", 69, 66),
      isFixedPos: !1,
      specialDraw: !0,
      uiTargeter: !0,
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.addAnim("idle", 0.1, [0, 1, 2, 3, 4, 4, 4, 4]);
        this.addAnim("pressed", 0.1, [4]);
        this.addAnim("back", 0.1, [4, 3, 2, 1, 0, 0, 0, 0]);
      }
    });
    EntityTutPointer1 = EntityTutPointer.extend({
      update: function () {
        this.parent();
        ig.global.wm || (this.currentAnim === this.anims.idle && this.currentAnim.frame == this.currentAnim.sequence.length - 1 && (this.currentAnim = this.anims.pressed, this.startTween()), this.currentAnim === this.anims.back && this.currentAnim.frame == this.currentAnim.sequence.length - 1 && (this.pos = {
          x: 228,
          y: 290
        }, this.currentAnim = this.anims.idle, this.currentAnim.gotoFrame(0)));
      },
      tweener: null,
      startTween: function () {
        this.tweener = this.tween({
          pos: {
            x: 114,
            y: 340
          }
        }, 1, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut,
          onComplete: function () {
            this.entity.currentAnim = this.entity.anims.back;
            this.entity.currentAnim.gotoFrame(0);
          }
        });
        this.tweener.start();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.gain-score").requires("impact.entity").defines(function () {
    EntityGainScore = ig.Entity.extend({
      text: "",
      alpha: 0.75,
      fontSize: 1,
      tweenMove: null,
      tweenFont: null,
      tweenAlpha: null,
      tweenNext: 1,
      specialDraw: !0,
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.startTween();
      },
      update: function () {
        this.parent();
        0.9 >= this.tweenNext && (this.tweenNext += ig.system.tick, 0.9 <= this.tweenNext && this.startTween2());
      },
      draw: function (b) {
        b && (b = ig.system.context, b.save(), b.fillStyle = "#18981e", b.font = this.fontSize + "px soupofjustice", b.textAlign = "center", b.globalAlpha = this.alpha, b.fillText(this.text, this.pos.x - ig.game.screen.x, this.pos.y - ig.game.screen.y), b.globalAlpha = 1, b.restore());
      },
      startTween: function () {
        this.tweenMove = this.tween({
          pos: {
            x: this.pos.x,
            y: this.pos.y - 45
          }
        }, 2, {
          entity: this,
          easing: ig.Tween.Easing.Quadratic.EaseOut,
          onComplete: function () {
            this.entity.kill();
          }
        });
        this.tweenMove.start();
        this.tweenAlpha = this.tween({
          alpha: 1
        }, 0.35, {
          entity: this,
          easing: ig.Tween.Easing.Quadratic.EaseOut,
          onComplete: function () {
            this.entity.tweenNext = 0;
          }
        });
        this.tweenAlpha.start();
        this.tweenFont = this.tween({
          fontSize: 35
        }, 0.35, {
          entity: this,
          easing: ig.Tween.Easing.Quadratic.EaseOut
        });
        this.tweenFont.start();
      },
      startTween2: function () {
        this.tweenAlpha2 = this.tween({
          alpha: 0
        }, 0.75, {
          entity: this,
          easing: ig.Tween.Easing.Quadratic.EaseOut
        });
        this.tweenAlpha2.start();
        this.tweenFont2 = this.tween({
          fontSize: 1
        }, 0.75, {
          entity: this,
          easing: ig.Tween.Easing.Quadratic.EaseOut
        });
        this.tweenFont2.start();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.hulk-smash").requires("impact.entity").defines(function () {
    EntityHulkSmash = ig.Entity.extend({
      animSheet: new ig.AnimationSheet("media/graphics/game/objects/hulk-smash.png", 169, 48),
      name: "smash",
      classify: "missile",
      specialDraw: !0,
      posPicker: null,
      goRight: !1,
      speed: 10,
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.addAnim("idle", 0.1, [0, 1, 2, 3, 4, 5, 6, 7]);
      },
      update: function () {
        this.parent();
        this.pos.x = this.goRight ? this.pos.x + this.speed : this.pos.x - this.speed;
        this.currentAnim.frame == this.currentAnim.sequence.length - 1 && this.kill();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.portal").requires("plugins.box2d.entity").defines(function () {
    EntityPortal = ig.Box2DEntity.extend({
      gravityFactor: 0,
      type: ig.Entity.TYPE.B,
      checkAgainst: ig.Entity.TYPE.B,
      animSheet: new ig.AnimationSheet("media/graphics/game/objects/portal-open.png", 84, 167),
      size: {
        x: 84,
        y: 167
      },
      box2dType: 0,
      dynamicType: 2,
      density: 0.8,
      friction: 0.3,
      restitution: 0.1,
      mass: 0.8,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      name: "portal",
      classify: "missile",
      isEntrance: !1,
      isOpen: !1,
      exitPos: {
        x: 0,
        y: 0
      },
      specialDraw: !0,
      zIndex: 500,
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.addAnim("open", 0.05, [0, 1, 2, 3, 4, 5, 6, 7, 8]);
        this.addAnim("idle", 0.05, [6, 7, 8]);
        this.currentAnim = this.anims.open;
        d.isEntrance && (this.exitPos = d.exitPos);
      },
      update: function () {
        this.parent();
        !this.isOpen && this.currentAnim != this.anims.idle && this.currentAnim.frame == this.currentAnim.sequence.length - 1 && (this.currentAnim = this.anims.idle, this.isEntrance ? this.isOpen = !0 : (ig.game.abilityMode = !1, ig.game.box2dPaused = !1));
      },
      beginContact: function (b, c) {
        if (!ig.game.box2dPaused && !ig.game.abilityMode) if (this.isEntrance) {
          if (c.SetEnabled(!1), this.isOpen && b && b.classify && b.classify && ("piggy" === b.classify || "obstacle" === b.classify && 0 === b.dynamicType || "missile" === b.classify) && !b.portalPassed) {
            var d = {
              x: this.exitPos.x * Box2D.SCALE,
              y: (this.exitPos.y + 50) * Box2D.SCALE
            };
            b.portal_passing = !0;
            b.portal_pos = d;
            b.portalPassed = !0;
            ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.drStrange_portalEnter);
            ig.game.spawnEntity(EntityEffect, b.pos.x, b.pos.y, {
              effectType: "portalEffect"
            });
            ig.game.spawnEntity(EntityEffect, this.exitPos.x, this.exitPos.y, {
              effectType: "portalEffect"
            });
          }
        } else c.SetEnabled(!1);
      },
      callOnce: !1,
      check: function () {},
      preSolve: function (b, c) {
        if (!ig.game.box2dPaused && !ig.game.abilityMode) if (this.isEntrance) {
          if (c.SetEnabled(!1), this.isOpen && this.isOpen && b && b.name && b.classify && ("piggy" === b.classify || "obstacle" === b.classify && 0 === b.dynamicType || "missile" === b.classify) && !b.portalPassed) {
            var d = {
              x: this.exitPos.x * Box2D.SCALE,
              y: (this.exitPos.y + 50) * Box2D.SCALE
            };
            b.portal_passing = !0;
            b.portal_pos = d;
            b.portalPassed = !0;
            ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.drStrange_portalEnter);
            ig.game.spawnEntity(EntityEffect, b.pos.x, b.pos.y, {
              effectType: "portalEffect"
            });
            ig.game.spawnEntity(EntityEffect, this.exitPos.x, this.exitPos.y, {
              effectType: "portalEffect"
            });
          }
        } else c.SetEnabled(!1);
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.switch").requires("plugins.box2d.entity").defines(function () {
    EntitySwitch = ig.Box2DEntity.extend({
      gravityFactor: 0,
      type: ig.Entity.TYPE.B,
      checkAgainst: ig.Entity.TYPE.B,
      zIndex: 700,
      sc: 2,
      size: {
        x: 81,
        y: 56
      },
      scX: 1,
      scY: 1,
      box2dType: 0,
      dynamicType: 2,
      density: 0.8,
      friction: 0.3,
      restitution: 0.1,
      mass: 0.8,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      classify: "obstacle",
      animSheetList: [new ig.AnimationSheet("media/graphics/game/objects/door-switch-wakanda.png", 81, 56), new ig.AnimationSheet("media/graphics/game/objects/door-switch-volcano.png", 81, 56), new ig.AnimationSheet("media/graphics/game/objects/door-switch-space.png", 81, 56)],
      animSheet: null,
      isOn: !1,
      doorId: -1,
      init: function (b, c, d) {
        ig.global.wm && !d.doorId && (d.doorId = 0);
        this.animSheet = this.animSheetList[d.doorId];
        this.parent(b, c, d);
        this.addAnim("idle", 1, [0]);
        this.addAnim("on", 1, [1]);
      },
      update: function () {
        this.parent();
      },
      preSolve: function (b, c) {
        if (this.isOn) c.SetEnabled(!1);else if (b && b.name) {
          this.currentAnim = this.anims.on;
          this.isOn = !0;
          for (var d = ig.game.getEntitiesByType(EntityDoor), e = d.length - 1; 0 <= e; e--) d[e].doorId === this.doorId && (d[e].kill(), ig.game.spawnEntity(EntityPoof, d[e].pos.x / Box2D.SCALE, d[e].pos.y / Box2D.SCALE));
        }
      },
      destroy: function () {
        if (!this.isOn) {
          this.currentAnim = this.anims.on;
          this.isOn = !0;
          for (var b = ig.game.getEntitiesByType(EntityDoor), c = b.length - 1; 0 <= c; c--) b[c].doorId === this.doorId && (b[c].kill(), ig.game.spawnEntity(EntityPoof, b[c].pos.x / Box2D.SCALE, b[c].pos.y / Box2D.SCALE));
        }
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.door").requires("plugins.box2d.entity").defines(function () {
    EntityDoor = ig.Box2DEntity.extend({
      gravityFactor: 0,
      type: ig.Entity.TYPE.B,
      checkAgainst: ig.Entity.TYPE.B,
      zIndex: 700,
      sc: 2,
      size: {
        x: 57,
        y: 89
      },
      scX: 1,
      scY: 1,
      box2dType: 0,
      dynamicType: 2,
      density: 0.8,
      friction: 0.3,
      restitution: 0.1,
      mass: 0.8,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      animSheetList: [new ig.AnimationSheet("media/graphics/game/objects/door-wakanda.png", 57, 89), new ig.AnimationSheet("media/graphics/game/objects/door-volcano.png", 57, 89), new ig.AnimationSheet("media/graphics/game/objects/door-space.png", 57, 89)],
      animSheet: null,
      isOn: !1,
      doorId: -1,
      init: function (b, c, d) {
        ig.global.wm && !d.doorId && (d.doorId = 0);
        this.animSheet = this.animSheetList[d.doorId];
        this.parent(b, c, d);
        this.addAnim("idle", 1, [0]);
      },
      update: function () {
        this.parent();
      },
      preSolve: function (b, c) {
        b && b.classify && "missile" == b.classify && c.SetEnabled(!1);
      },
      destroy: function () {}
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.cap-marvel-blaster").requires("plugins.box2d.entity").defines(function () {
    EntityCapMarvelBlaster = ig.Box2DEntity.extend({
      gravityFactor: 0,
      type: ig.Entity.TYPE.B,
      checkAgainst: ig.Entity.TYPE.B,
      zIndex: 2300,
      animSheet: new ig.AnimationSheet("media/graphics/game/objects/lazer.png", 105, 15),
      size: {
        x: 105,
        y: 15
      },
      box2dType: 0,
      dynamicType: 0,
      density: 0.8,
      friction: 0.3,
      restitution: 0.1,
      mass: 0.8,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      vertices: [{
        x: -5.25,
        y: -0.75
      }, {
        x: 5.25,
        y: -0.75
      }, {
        x: 5.25,
        y: 0.75
      }, {
        x: -5.25,
        y: 0.75
      }],
      targetPoint: {
        x: 0,
        y: 0
      },
      name: "lazer",
      classify: "missile",
      specialDraw: !0,
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.addAnim("idle", 1, [0]);
        ig.game.cameraFocus = null;
        ig.game.cameraFocus = this;
      },
      distanceLimit: 4E3,
      speed: 1.5,
      lifeFrames: 0,
      lifeFrameMax: 7,
      portal_passing: !1,
      portal_pos: {
        x: 0,
        y: 0
      },
      update: function () {
        if (!ig.game.box2dPaused && !this.portal_passing) {
          var b = (this.pos.x + this.size.x / 2) * Box2D.SCALE,
            c = (this.pos.y + this.size.y / 2) * Box2D.SCALE,
            b = b + this.speed * Math.cos(this.movAngle * Math.PI / 180),
            c = c + this.speed * Math.sin(this.movAngle * Math.PI / 180);
          this.distanceLimit -= this.speed;
          0 >= this.distanceLimit && this.destroy();
          this.body.SetPositionAndAngle(new Box2D.Common.Math.b2Vec2(b, c), this.movAngle * Math.PI / 180);
        }
        this.lifeFrames < this.lifeFrameMax && this.lifeFrames++;
        this.portal_passing && (this.portal_passing = !1, this.body.SetPositionAndAngle(new Box2D.Common.Math.b2Vec2(this.portal_pos.x, this.portal_pos.y), this.movAngle * Math.PI / 180));
        this.parent();
        (-1E3 > this.pos.x || this.pos.x > ig.game.maxCameraDistance + 1E3) && this.destroy();
        (this.pos.y < ig.game.maxCameraDistanceY - 1E3 || 1540 < this.pos.y) && this.destroy();
      },
      beginContact: function () {},
      preSolve: function (b, c) {
        if (b && b.name && ("enemy" === b.classify || "obstacle" === b.classify && "woodCircle" != b.name)) b.isDead || (b.enemyBig ? b.destroy("capMarvelBlaster") : b.destroy());
        c.SetEnabled(!1);
      },
      destroy: function () {
        ig.game.spawnEntity(EntityEffect, this.pos.x + this.size.x / 2, this.pos.y + this.size.y / 2);
        for (var b = null, c = ig.game.entities, d = c.length, e = 0; e < d; e++) if (b = c[e], b.classify && ("enemy" === b.classify || "obstacle" === b.classify)) {
          var f = this.pos.x + this.size.x / 2 - (b.pos.x + b.size.x / 2),
            j = this.pos.y + this.size.y / 2 - (b.pos.y + b.size.y / 2);
          65 >= Math.sqrt(f * f + j * j) && b.destroy();
        }
        ig.game.levelControl.birdDragging && (ig.game.cameraFocus = ig.game.levelControl.birdDragging.isAlive ? ig.game.levelControl.birdDragging : null);
        this.kill();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.web-missile").requires("plugins.box2d.entity").defines(function () {
    EntityWebMissile = ig.Box2DEntity.extend({
      gravityFactor: 0,
      type: ig.Entity.TYPE.B,
      checkAgainst: ig.Entity.TYPE.B,
      zIndex: 2300,
      animSheet: new ig.AnimationSheet("media/graphics/game/objects/web.png", 35, 30),
      size: {
        x: 35,
        y: 30
      },
      box2dType: 0,
      dynamicType: 0,
      density: 0.8,
      friction: 0.3,
      restitution: 0.1,
      mass: 0.8,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      name: "web",
      classify: "web",
      originPoint: {
        x: 0,
        y: 0
      },
      hitPoint: {
        x: 0,
        y: 0
      },
      dragSpiderMan: null,
      dragPoint: {
        x: 0,
        y: 0
      },
      dragMode: 0,
      dragging: null,
      specialDraw: !0,
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.addAnim("idle", 1, [0]);
        this.movAngle = 180 * Math.atan2(this.targetPoint.y - this.pos.y, this.targetPoint.x - this.pos.x) / Math.PI;
      },
      distanceLimit: 4E3,
      speed: 1.5,
      speed_dragSpiderMan: 8,
      speed_dragObject: 8,
      lifeFrames: 0,
      lifeFrameMax: 7,
      update: function () {
        if (0 === this.dragMode) {
          var b = (this.pos.x + this.size.x / 2) * Box2D.SCALE,
            c = (this.pos.y + this.size.y / 2) * Box2D.SCALE,
            b = b + this.speed * Math.cos(this.movAngle * Math.PI / 180),
            c = c + this.speed * Math.sin(this.movAngle * Math.PI / 180),
            d = this.dragSpiderMan.body.GetLinearVelocity();
          d.x = 0;
          d.y = 0;
          this.dragSpiderMan.body.SetLinearVelocity(d);
          this.distanceLimit -= this.speed;
          0 >= this.distanceLimit && this.destroy();
          this.body.SetPositionAndAngle(new Box2D.Common.Math.b2Vec2(b, c), 0);
          this.lifeFrames < this.lifeFrameMax && this.lifeFrames++;
          (-1E3 > this.pos.x || this.pos.x > ig.game.maxCameraDistance + 1E3) && this.destroy();
          (this.pos.y < ig.game.maxCameraDistanceY - 1E3 || 1540 < this.pos.y) && this.destroy();
        } else if (1 === this.dragMode) {
          b = 180 * Math.atan2(this.dragPoint.y - this.originPoint.y, this.dragPoint.x - this.originPoint.x) / Math.PI;
          this.dragPoint.x -= this.speed_dragObject * Math.cos(b * Math.PI / 180);
          this.dragPoint.y -= this.speed_dragObject * Math.sin(b * Math.PI / 180);
          d = this.dragSpiderMan.body.GetLinearVelocity();
          d.x = 0;
          d.y = 0;
          this.dragSpiderMan.body.SetLinearVelocity(d);
          d = this.dragging.body.GetLinearVelocity();
          d.x = 0;
          d.y = 0;
          this.dragging.body.SetLinearVelocity(d);
          this.dragSpiderMan.body.SetPositionAndAngle(new Box2D.Common.Math.b2Vec2(this.originPoint.x * Box2D.SCALE, this.originPoint.y * Box2D.SCALE), b * Math.PI / 180);
          this.dragging.body.SetPosition(new Box2D.Common.Math.b2Vec2(this.dragPoint.x * Box2D.SCALE, this.dragPoint.y * Box2D.SCALE));
          this.body.SetPositionAndAngle(new Box2D.Common.Math.b2Vec2(this.dragPoint.x * Box2D.SCALE, this.dragPoint.y * Box2D.SCALE), 0);
          this.lifeFrames < this.lifeFrameMax && this.lifeFrames++;
          var c = this.pos.x + 17.5,
            d = this.pos.y + 15,
            e = this.dragSpiderMan.pos.x + this.dragSpiderMan.size.x,
            b = this.dragSpiderMan.pos.y + this.dragSpiderMan.size.y,
            c = c - e,
            d = d - b,
            d = Math.sqrt(c * c + d * d);
          50 > d && ("enemyFly" == this.dragging.name && this.dragging.destroy(), this.destroy());
          (-1E3 > this.pos.x || this.pos.x > ig.game.maxCameraDistance + 1E3) && this.destroy();
          (this.pos.y < ig.game.maxCameraDistanceY - 1E3 || 1540 < this.pos.y) && this.destroy();
        } else 2 === this.dragMode && (b = 180 * Math.atan2(this.originPoint.y - this.hitPoint.y, this.originPoint.x - this.hitPoint.x) / Math.PI, this.originPoint.x -= this.speed_dragSpiderMan * Math.cos(b * Math.PI / 180), this.originPoint.y -= this.speed_dragSpiderMan * Math.sin(b * Math.PI / 180), d = this.dragSpiderMan.body.GetLinearVelocity(), d.x = 0, d.y = 0, this.dragSpiderMan.body.SetLinearVelocity(d), this.dragSpiderMan.body.SetPositionAndAngle(new Box2D.Common.Math.b2Vec2(this.originPoint.x * Box2D.SCALE, this.originPoint.y * Box2D.SCALE), (b + 180) * Math.PI / 180), this.body.SetPositionAndAngle(new Box2D.Common.Math.b2Vec2(this.hitPoint.x * Box2D.SCALE, this.hitPoint.y * Box2D.SCALE), 0), this.lifeFrames < this.lifeFrameMax && this.lifeFrames++, c = this.pos.x, d = this.pos.y, e = this.dragSpiderMan.pos.x, b = this.dragSpiderMan.pos.y, c -= e, d -= b, d = Math.sqrt(c * c + d * d), 50 > d && this.destroy(), (-1E3 > this.pos.x || this.pos.x > ig.game.maxCameraDistance + 1E3) && this.destroy(), (this.pos.y < ig.game.maxCameraDistanceY - 1E3 || 1540 < this.pos.y) && this.destroy());
        this.parent();
      },
      draw: function () {
        this.parent();
        ig.system.context.strokeStyle = "#FFF";
        ig.system.context.lineWidth = 2;
        ig.system.context.beginPath();
        ig.system.context.quadraticCurveTo(this.pos.x + this.size.x / 2 - ig.game.screen.x, this.pos.y + this.size.y / 2 - ig.game.screen.y, this.dragSpiderMan.pos.x + this.dragSpiderMan.size.x / 2 - ig.game.screen.x, this.dragSpiderMan.pos.y + this.dragSpiderMan.size.y / 2 - ig.game.screen.y);
        ig.system.context.stroke();
        ig.system.context.closePath();
      },
      beginContact: function (b, c) {
        b == this.dragSpiderMan || 0 != this.dragMode || (b ? b.name ? "enemy" === b.classify || "obstacle" === b.classify ? b.isDead || ("woodBox" == b.name ? this.attachToCurrentPoint() : (this.dragMode = 1, this.originPoint = this.dragSpiderMan.pos, this.dragPoint = b.pos, this.dragging = b, b.webDragging = !0)) : this.attachToCurrentPoint() : this.attachToCurrentPoint() : this.attachToCurrentPoint());
        c.SetEnabled(!1);
      },
      preSolve: function (b, c) {
        b && (b == this.dragSpiderMan || 0 != this.dragMode) && c.SetEnabled(!1);
      },
      attachToCurrentPoint: function () {
        this.dragMode = 2;
        this.originPoint = this.dragSpiderMan.pos;
        this.dragSpiderMan.smDrag = !0;
        this.hitPoint = {
          x: this.pos.x + 10,
          y: this.pos.y + 20
        };
      },
      destroy: function () {
        ig.game.abilityMode = !1;
        ig.game.box2dPaused = !1;
        this.dragSpiderMan.smDrag = !1;
        this.kill();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.levels.opening").requires("impact.image", "game.entities.opening-kitty").defines(function () {
    LevelOpening = {
      entities: [{
        type: "EntityOpeningKitty",
        x: 520,
        y: 212
      }],
      layer: []
    };
  });
  ig.baked = !0;
  ig.module("game.entities.bird-invi").requires("plugins.box2d.entity").defines(function () {
    EntityBirdInvi = ig.Box2DEntity.extend({
      init: function (b, c, d) {
        this.parent(b, c, d);
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.tray").requires("impact.entity").defines(function () {
    EntityTray = ig.Entity.extend({
      animSheet: new ig.AnimationSheet("media/graphics/game/objects/tray.png", 15, 30),
      gravityFactor: 0,
      size: {
        x: 15,
        y: 30
      },
      zIndex: 1300,
      rad: 23,
      specialDraw: !0,
      init: function (b, c, d) {
        this.parent(b, c, d);
        ig.global.wm || this.addAnim("idle", 1, [0]);
      },
      update: function () {
        if (!ig.global.wm && (this.parent(), this.string && (this.currentAnim.angle = this.string.currentAnim.angle, ig.game.levelControl.birdDragging))) {
          var b = ig.game.levelControl.birdDragging,
            c = b.pos.x + 23,
            b = b.pos.y + 23,
            d = ig.game.levelControl.angleChanged,
            e = 20 * Math.cos(d),
            d = 20 * Math.sin(d);
          ig.game.levelControl.birdLeft && (e *= -1, d *= -1);
          this.pos.x = c + e - this.currentAnim.pivot.x;
          this.pos.y = b + d - this.currentAnim.pivot.y;
        }
      },
      draw: function () {
        ig.game.dragging && ig.game.levelControl.birdDragging && (0 !== ig.game.levelControl.birdDragging.disX || 0 !== ig.game.levelControl.birdDragging.disY) && this.parent();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.string1").requires("impact.entity", "game.entities.tray").defines(function () {
    EntityString1 = ig.Entity.extend({
      animSheetList: [new ig.AnimationSheet("media/graphics/game/objects/string200.png", 200, 5), new ig.AnimationSheet("media/graphics/game/objects/string200-wakanda.png", 200, 5), new ig.AnimationSheet("media/graphics/game/objects/string200-volcano.png", 200, 5), new ig.AnimationSheet("media/graphics/game/objects/string200-space.png", 200, 5)],
      animSheet: null,
      gravityFactor: 0,
      size: {
        x: 200,
        y: 5
      },
      zIndex: 300,
      rad: 46,
      trayX: 0,
      trayY: 0,
      specialDraw: !0,
      init: function (b, c, d) {
        ig.global.wm && (ig.game.episodeCur = 0);
        this.animSheet = this.animSheetList[ig.game.episodeCur];
        this.parent(b, c, d);
        ig.global.wm || (this.addAnim("idle", 1, [0]), this.currentAnim.pivot.x = 0, this.front && (this.tray = ig.game.spawnEntity(EntityTray, this.pos.x, this.pos.y), this.tray.string = this));
      },
      drawn: 3,
      update: function () {
        if (!ig.global.wm) if (this.parent(), 3 > this.drawn && "birdDragging" == ig.game.levelControl.levelState) this.currentAnim.sheet.width = 0, this.drawn++;else if (ig.game.dragging) {
          var b = ig.game.levelControl.birdBack.x + 23,
            c = ig.game.levelControl.birdBack.y + 23,
            d = ig.game.levelControl.angleChanged;
          ig.game.levelControl.birdLeft ? (b -= this.rad * Math.cos(d), c -= this.rad * Math.sin(d)) : (b += this.rad * Math.cos(d), c += this.rad * Math.sin(d));
          this.trayX = b;
          this.trayY = c;
          c -= this.pos.y;
          b -= this.pos.x;
          d = Math.sqrt(c * c + b * b) - 30;
          ig.game.levelControl.birdLeft || (this.front ? 180 < d && (d = 180) : d -= 21);
          this.currentAnim.sheet.width = Math.min(d, 200);
          0 === b && (b = 0.01);
          c = Math.atan(c / b);
          0 > b && (c += Math.PI);
          this.currentAnim.angle = c;
          this.drawPos.x = ig.game.levelControl.birdBack.x;
          this.drawPos.y = ig.game.levelControl.birdBack.y;
        }
      },
      size1: {
        x: 48,
        y: 30
      },
      centerpoint: {
        x: 7,
        y: 10
      },
      drawPos: {
        x: 0,
        y: 0
      },
      draw: function () {
        3 > this.drawn || ig.game.dragging && ig.game.levelControl.birdDragging && (0 !== ig.game.levelControl.birdDragging.disX || 0 !== ig.game.levelControl.birdDragging.disY) && this.parent();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.testpoint").requires("plugins.box2d.entity").defines(function () {
    EntityTestpoint = ig.Entity.extend({
      animSheet: new ig.AnimationSheet("media/graphics/game/objects/shot-tracker.png", 10, 10),
      zIndex: 2300,
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.addAnim("idle", 0.05, [0]);
      },
      update: function () {
        this.parent();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.bird").requires("plugins.box2d.entity", "game.entities.bird-invi", "game.entities.string1", "game.entities.objects.testpoint").defines(function () {
    EntityBird = ig.Box2DEntity.extend({
      gravityFactor: 0,
      type: ig.Entity.TYPE.B,
      checkAgainst: ig.Entity.TYPE.B,
      zIndex: 950,
      sc: 2,
      size: {
        x: 50,
        y: 58
      },
      gamePaused: !1,
      scX: 1,
      scY: 1,
      box2dType: 1,
      dynamicType: 0,
      density: 0.675,
      friction: 0.3,
      restitution: 0.1,
      mass: 0.675,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      im: new ig.Image("media/graphics/game/objects/mpp-cap-drawn.png"),
      birdList_idle: [new ig.AnimationSheet("media/graphics/game/objects/mpp-cap-idle.png", 68, 56), new ig.AnimationSheet("media/graphics/game/objects/mpp-ironman-idle.png", 67, 56), new ig.AnimationSheet("media/graphics/game/objects/mpp-thor-idle.png", 96, 70), new ig.AnimationSheet("media/graphics/game/objects/mpp-antman-idle.png", 66, 62), new ig.AnimationSheet("media/graphics/game/objects/mpp-blackpanther-idle.png", 66, 69), new ig.AnimationSheet("media/graphics/game/objects/mpp-capmarvel-idle.png", 85, 76), new ig.AnimationSheet("media/graphics/game/objects/mpp-drstrange-idle.png", 86, 66), new ig.AnimationSheet("media/graphics/game/objects/mpp-hulk-idle.png", 93, 76), new ig.AnimationSheet("media/graphics/game/objects/mpp-spiderman-idle.png", 83, 58)],
      birdList_attack: [new ig.AnimationSheet("media/graphics/game/objects/mpp-cap-attack.png", 96, 66), new ig.AnimationSheet("media/graphics/game/objects/mpp-ironman-attack.png", 67, 56), new ig.AnimationSheet("media/graphics/game/objects/mpp-thor-attack.png", 122, 72), new ig.AnimationSheet("media/graphics/game/objects/mpp-antman-attack-bigger.png", 137, 127), new ig.AnimationSheet("media/graphics/game/objects/mpp-blackpanther-attack.png", 66, 69), new ig.AnimationSheet("media/graphics/game/objects/mpp-capmarvel-attack.png", 85, 76), new ig.AnimationSheet("media/graphics/game/objects/mpp-drstrange-attack.png", 86, 66), new ig.AnimationSheet("media/graphics/game/objects/mpp-hulk-attack.png", 93, 76), new ig.AnimationSheet("media/graphics/game/objects/mpp-spiderman-attack.png", 83, 58)],
      birdList_drawn: [new ig.AnimationSheet("media/graphics/game/objects/mpp-cap-drawn.png", 68, 56), new ig.AnimationSheet("media/graphics/game/objects/mpp-ironman-drawn.png", 67, 56), new ig.AnimationSheet("media/graphics/game/objects/mpp-thor-drawn.png", 95, 70), new ig.AnimationSheet("media/graphics/game/objects/mpp-antman-drawn.png", 66, 62), new ig.AnimationSheet("media/graphics/game/objects/mpp-blackpanther-drawn.png", 66, 69), new ig.AnimationSheet("media/graphics/game/objects/mpp-capmarvel-drawn.png", 85, 76), new ig.AnimationSheet("media/graphics/game/objects/mpp-drstrange-drawn.png", 86, 66), new ig.AnimationSheet("media/graphics/game/objects/mpp-hulk-drawn.png", 93, 76), new ig.AnimationSheet("media/graphics/game/objects/mpp-spiderman-drawn.png", 83, 58)],
      birdList_otherAnim: [new ig.AnimationSheet("media/graphics/game/objects/mpp-capmarvel-chargeatk.png", 137, 130), new ig.AnimationSheet("media/graphics/game/objects/mpp-antman-attack-bigger.png", 137, 127)],
      drawnImg: null,
      drawnSize: null,
      birdSize: [{
        x: 58,
        y: 50
      }, {
        x: 58,
        y: 50
      }, {
        x: 58,
        y: 45
      }, {
        x: 66,
        y: 62
      }, {
        x: 66,
        y: 69
      }, {
        x: 85,
        y: 76
      }, {
        x: 58,
        y: 50
      }, {
        x: 58,
        y: 50
      }, {
        x: 58,
        y: 50
      }],
      birdOffset: [{
        x: 0,
        y: 0
      }, {
        x: 0,
        y: 0
      }, {
        x: 15,
        y: 17
      }, {
        x: 0,
        y: 0
      }, {
        x: 5,
        y: 10
      }, {
        x: 12,
        y: 12
      }, {
        x: 0,
        y: 0
      }, {
        x: 10,
        y: 20
      }, {
        x: 0,
        y: 0
      }],
      startOffset: [{
        x: 0,
        y: 0
      }, {
        x: 0,
        y: 0
      }, {
        x: 0,
        y: 0
      }, {
        x: 0,
        y: 0
      }, {
        x: 0,
        y: 0
      }, {
        x: 0,
        y: 0
      }, {
        x: 0,
        y: 0
      }, {
        x: 0,
        y: 0
      }, {
        x: 0,
        y: 0
      }],
      broken: !1,
      jointSet: !1,
      sleepVel: 0.14,
      name: "bird",
      alp: 1,
      firstShape: !0,
      slicePoints: [],
      splitPoints: [],
      sleepAtStart: !1,
      ctxIndex: 0,
      canvasPerEntity: !0,
      speed: 300,
      maxRad: 100,
      clickPos: [-999, -999],
      id: 0,
      types: 0,
      groupIndex: -1,
      startPos: {
        x: 0,
        y: 0
      },
      realPos: {
        x: 0,
        y: 0
      },
      origIdlePos: {
        x: 0,
        y: 0
      },
      nameList: "abcdefghi".split(""),
      classify: "piggy",
      lockFacing: !1,
      lockFacingPos: {
        x: 0,
        y: 0
      },
      interactable: !0,
      rollDuration: 0,
      isAlive: !0,
      usedAbility: !1,
      groundSlam: !1,
      groundSlamHit: !1,
      groundSlam_frames: 0,
      photonBlast: !1,
      bpDash: !1,
      bpDash_dist: 33,
      bpDash_speed: 2,
      bpDash_angle: 0,
      amDash: !1,
      amDash_starting: !1,
      amDash_ending: !1,
      amDash_dist: 33,
      amDash_speed: 2,
      amDash_angle: 0,
      amDash_dur: 0.25,
      amDash_endPos: null,
      smDrag: !1,
      specialDraw: !0,
      isLanded: !1,
      fireSec: 0,
      waitTime: 0,
      scaleSize: {
        x: 1,
        y: 1
      },
      portal_passing: !1,
      portal_pos: {
        x: 0,
        y: 0
      },
      customPos: {
        x: 0,
        y: 0
      },
      isCustomPos: !1,
      init: function (b, c, d) {
        this.animSheet = this.birdList_idle[d.types];
        this.offset = this.birdOffset[d.types];
        this.jumpAround_actualPos.x = b;
        this.jumpAround_actualPos.y = c;
        d.startPos = {
          x: this.startOffset[d.types].x * Box2D.SCALE + d.startPos.x + this.size.x / 2 * Box2D.SCALE,
          y: this.startOffset[d.types].y * Box2D.SCALE + d.startPos.y + this.size.y / 2 * Box2D.SCALE
        };
        this.origIdlePos.x = b;
        this.origIdlePos.y = c;
        b += this.startOffset[d.types].x;
        c += this.startOffset[d.types].y;
        this.parent(b, c, d);
        if (!ig.global.wm) {
          this.main = ig.game.getEntitiesByType(EntityLevelControl)[0];
          this.anims.aiming = new ig.Animation(this.birdList_drawn[d.types], 1, [0]);
          switch (d.types) {
            case 0:
              this.anims.idle = new ig.Animation(this.birdList_idle[d.types], 0.01, [0, 1, 2, 3, 4, 5]);
              this.anims.attack = new ig.Animation(this.birdList_attack[d.types], 0.05, [0, 1, 2, 3, 4, 5, 6, 7]);
              this.anims.drawn = new ig.Animation(this.birdList_drawn[d.types], 0.1, [0]);
              this.addAnim("idle", 0.15, [0, 1, 2, 3, 4, 5]);
              this.iniPivotX = this.pos.x + this.size.x / 2;
              this.iniPivotY = this.pos.y + this.size.y / 2;
              break;
            case 1:
              this.anims.idle = new ig.Animation(this.birdList_idle[d.types], 0.01, [0, 1, 2, 3, 4, 5]);
              this.anims.attack = new ig.Animation(this.birdList_attack[d.types], 0.05, [0, 1, 2, 3, 4, 5, 6]);
              this.anims.drawn = new ig.Animation(this.birdList_drawn[d.types], 0.1, [0]);
              this.addAnim("idle", 0.15, [0, 1, 2, 3, 4, 5]);
              this.iniPivotX = this.pos.x + this.size.x / 2;
              this.iniPivotY = this.pos.y + this.size.y / 2;
              break;
            case 2:
              this.anims.idle = new ig.Animation(this.birdList_idle[d.types], 0.01, [0, 1, 2, 3, 4, 5]);
              this.anims.attack = new ig.Animation(this.birdList_attack[d.types], 0.1, [0, 1, 2, 3, 3, 3, 3, 4, 5, 6]);
              this.anims.drawn = new ig.Animation(this.birdList_drawn[d.types], 0.1, [0]);
              this.addAnim("idle", 0.15, [0, 1, 2, 3, 4, 5]);
              this.iniPivotX = this.pos.x + this.size.x / 2;
              this.iniPivotY = this.pos.y + this.size.y / 2;
              break;
            case 3:
              this.anims.idle = new ig.Animation(this.birdList_idle[d.types], 0.01, [0, 1, 2, 3, 4]);
              this.anims.attack = new ig.Animation(this.birdList_attack[d.types], 0.1, [0]);
              this.anims.drawn = new ig.Animation(this.birdList_drawn[d.types], 0.1, [0]);
              this.anims.special = new ig.Animation(this.birdList_otherAnim[1], 0.1, [0]);
              this.addAnim("idle", 0.15, [0, 1, 2, 3, 4]);
              break;
            case 4:
              this.anims.idle = new ig.Animation(this.birdList_idle[d.types], 0.01, [0, 1, 2, 3, 4]);
              this.anims.attack = new ig.Animation(this.birdList_attack[d.types], 0.1, [0, 1, 2, 3, 3, 3, 3, 4, 5, 6, 7]);
              this.anims.drawn = new ig.Animation(this.birdList_drawn[d.types], 0.1, [0]);
              this.addAnim("idle", 0.15, [0, 1, 2, 3, 4]);
              break;
            case 5:
              this.anims.idle = new ig.Animation(this.birdList_idle[d.types], 0.01, [0, 1, 2, 3, 4]);
              this.anims.attack = new ig.Animation(this.birdList_attack[d.types], 0.1, [0, 1, 2, 3, 3, 3, 3, 4, 5, 6, 7]);
              this.anims.drawn = new ig.Animation(this.birdList_drawn[d.types], 0.1, [0]);
              this.anims.special = new ig.Animation(this.birdList_otherAnim[0], 0.1, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);
              this.addAnim("idle", 0.15, [0, 1, 2, 3, 4]);
              break;
            case 6:
              this.anims.idle = new ig.Animation(this.birdList_idle[d.types], 0.01, [0, 1, 2, 3, 4]);
              this.anims.attack = new ig.Animation(this.birdList_attack[d.types], 0.1, [0, 1, 2, 3, 3, 3, 3, 4, 5, 6, 7]);
              this.anims.drawn = new ig.Animation(this.birdList_drawn[d.types], 0.1, [0]);
              this.addAnim("idle", 0.15, [0, 1, 2, 3, 4]);
              break;
            case 7:
              this.anims.idle = new ig.Animation(this.birdList_idle[d.types], 0.01, [0, 1, 2, 3, 4]);
              this.anims.attack = new ig.Animation(this.birdList_attack[d.types], 0.1, [0, 1, 2, 3, 3, 3, 3, 4, 5, 6, 7]);
              this.anims.drawn = new ig.Animation(this.birdList_drawn[d.types], 0.1, [0]);
              this.addAnim("idle", 0.15, [0, 1, 2, 3, 4]);
              break;
            case 8:
              this.anims.idle = new ig.Animation(this.birdList_idle[d.types], 0.01, [0, 1, 2, 3, 4]), this.anims.attack = new ig.Animation(this.birdList_attack[d.types], 0.1, [0, 1, 2, 3, 3, 3, 3, 4, 5, 6, 7]), this.anims.drawn = new ig.Animation(this.birdList_drawn[d.types], 0.1, [0]), this.addAnim("idle", 0.15, [0, 1, 2, 3, 4]);
          }
          this.name = this.nameList[d.types];
          this.body.SetAwake(!1);
          this.srcMaxX = Math.floor(1E3 / (this.im.width + 2));
          this.srcMaxY = Math.floor(1E3 / (this.im.height + 2));
          this.jumpAround_startPos = this.body.GetPosition();
          this.jumpAround_startPosNonVec = {
            x: this.jumpAround_startPos.x,
            y: this.jumpAround_startPos.y
          };
          this.jumpAround_nextJump = Math.random() * this.jumpAround_nextJumpMax + this.jumpAround_nextJumpMin;
        }
      },
      update: function () {
        if (!ig.global.wm && (this.jumpAround_tween && this.jumpAround_tween.update(), this.jumpAround_tween2 && this.jumpAround_tween2.update(), this.scaleTween_tween && this.scaleTween_tween.update(), !ig.game.dragging && !this.fired && ig.game.selected == this.id ? (this.body.SetPositionAndAngle(this.startPos, 0), this.pos.x = this.realPos.x, this.pos.y = this.realPos.y) : this.fired || (this.jumpAround_startPos = new Box2D.Common.Math.b2Vec2(this.jumpAround_startPosNonVec.x, this.jumpAround_startPosNonVec.y), this.body.SetPositionAndAngle(this.jumpAround_startPos, this.jumpAround_angle)), !this.fired && ig.game.selected != this.id && (0 < this.jumpAround_nextJump && (this.jumpAround_nextJump -= ig.system.tick), 0 >= this.jumpAround_nextJump && (this.jumpAround_nextJump = Math.random() * this.jumpAround_nextJumpMax + this.jumpAround_nextJumpMin, this.jumpAround_start())), this.setScale(this.scaleSize.x, this.scaleSize.y), this.parent(), ig.game.selected == this.id && "level" == ig.game.gameState)) {
          if (this.currentAnim == this.anims.attack) this.currentAnim.frame == this.currentAnim.sequence.length - 1 && (this.currentAnim = this.anims.drawn);else if (this.currentAnim == this.anims.special) if (5 === this.types) {
            if (this.currentAnim.frame == this.currentAnim.sequence.length - 1 && (this.currentAnim = this.anims.drawn, "f" === this.name)) {
              ig.game.tutorialPause = !1;
              ig.game.box2dPaused = !1;
              this.photonBlast = ig.game.abilityMode = !1;
              ig.game.cameraShake = 0.2;
              var b = this.body.GetAngle();
              ig.game.spawnEntity(EntityCapMarvelBlaster, this.pos.x, this.pos.y, {
                movAngle: 180 * b / Math.PI
              });
              ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.capMarvel_fire);
            }
          } else 3 === this.types && (this.amDash_endPos && this.body.SetPositionAndAngle(this.amDash_endPos, this.amDash_angle * Math.PI / 180), b = this.body.GetLinearVelocity(), b.x = 0, b.y = 0, this.body.SetLinearVelocity(b), this.body.GetAngularVelocity(), this.body.SetAngularVelocity(0));
          if (ig.game.dragging) {
            this.startAiming();
            ig.game.levelControl.birdDragging = this;
            var c = 0,
              b = ig.game.io.getClickPos().x - ig.game.dragPosX,
              c = ig.game.io.getClickPos().y - ig.game.dragPosY,
              d = Math.sqrt(b * b + c * c);
            0 <= b && (b = -1);
            d <= this.maxRad ? (this.disX = b, this.disY = c, d = Math.atan(c / b) + 0.1, 1.4 < d && (d = 1.4), -1.4 > d && (d = -1.4), this.angleChanged = d, ig.game.levelControl.angleChanged = d, c = Math.sqrt(b * b + c * c), this.disX = -c * Math.cos(d), this.disY = -c * Math.sin(d)) : (0 === b && (b = 0.01), d = Math.atan(c / b) + 0.1, 1.4 < d && (d = 1.4), -1.4 > d && (d = -1.4), this.angleChanged = d, ig.game.levelControl.angleChanged = d, this.disX = this.maxRad * Math.cos(d), this.disY = this.maxRad * Math.sin(d), 0 < b || (this.disX *= -1, this.disY *= -1));
            this.pos.x = this.oriPosX + this.disX;
            this.pos.y = this.oriPosY + this.disY;
            ig.game.levelControl.birdBack.x = this.pos.x;
            ig.game.levelControl.birdBack.y = this.pos.y;
            ig.game.levelControl.birdLeft = 0 > b ? !0 : !1;
            b = ig.game.io.getClickPos();
            if (this.clickPos.x == b.x && this.clickPos.y == b.y) return;
            this.clickPos.x = b.x;
            this.clickPos.y = b.y;
          }
          if (this.fired) {
            this.endAiming();
            this.body.GetPosition();
            ig.game.selected === this.id && (this.fireSec += ig.system.tick);
            this.contactEnded && this.lastContactSec < this.lastContactSecMax && (this.lastContactSec += ig.system.tick, this.lastContactSec > this.lastContactSecMax && (this.lastContactSec = this.lastContactSecMax));
            this.portal_passing && (this.portal_passing = !1, this.body.SetPosition(this.portal_pos));
            !this.groundSlam && !this.bpDash && !this.smDrag && !this.amDash && !this.amDash_starting && !this.amDash_ending && !ig.game.abilityMode && (0.05 > this.body.GetLinearVelocity().Length() ? this.projectileCheck() ? (this.waitTime += ig.system.tick, 5 <= this.waitTime && this.destroy()) : (this.waitTime += ig.system.tick, 0.5 <= this.waitTime && (ig.game.levelControl.birdStop = !0, this.destroy())) : 10 > this.body.GetLinearVelocity().Length() && !this.projectileCheck() && (this.rollDuration += ig.system.tick, 2 <= this.rollDuration && (ig.game.levelControl.birdStop = !0, this.destroy())));
            if ((0 > this.pos.x || this.pos.x > ig.game.maxCameraDistance + 25 || 600 < this.pos.y) && !this.projectileCheck()) ig.game.levelControl.birdStop = !0, this.destroy();
            this.lockFacing && (b = 180 * Math.atan2(this.lockFacingPos.y - this.pos.y, this.lockFacingPos.x - this.pos.x) / Math.PI, this.body.SetAngle(b * Math.PI / 180));
            this.groundSlam && (b = this.body.GetPosition(), b.y += 1.25, this.body.SetPositionAndAngle(b, 90 * Math.PI / 180), this.groundSlam_frames++, 3 <= this.groundSlam_frames && ("h" === this.name ? ig.game.spawnEntity(EntityAfterimage, this.pos.x, this.pos.y, {
              timeLimit: 0.3,
              piggyType: 1
            }) : "c" === this.name && ig.game.spawnEntity(EntityAfterimage, this.pos.x, this.pos.y, {
              timeLimit: 0.3
            }), this.groundSlam_frames = 0));
            this.bpDash && (this.bpDash_dist -= ig.system.tick, b = new Box2D.Common.Math.b2Vec2(0, 0), this.body.SetLinearVelocity(b), c = {
              x: (this.pos.x + this.size.x / 2) * Box2D.SCALE,
              y: (this.pos.y + this.size.y / 2) * Box2D.SCALE
            }, c.x += this.bpDash_speed * Math.cos(this.bpDash_angle * Math.PI / 180), c.y += this.bpDash_speed * Math.sin(this.bpDash_angle * Math.PI / 180), this.groundSlam_frames++, 6 <= this.groundSlam_frames && ig.game.spawnEntity(EntityAfterimage, this.pos.x, this.pos.y, {
              timeLimit: 0.3,
              piggyType: 2,
              faceAngle: this.bpDash_angle
            }), this.bpDash_dist -= this.bpDash_speed, 0 >= this.bpDash_dist && (this.bpDash = !1, b = this.body.GetLinearVelocity(), b.x = 25, b.y = -25, this.body.SetLinearVelocity(b)), this.body.SetPositionAndAngle(c, this.bpDash_angle * Math.PI / 180));
            this.amDash_starting && (b = this.body.GetLinearVelocity(), b.x = 0, b.y = 0, this.body.SetLinearVelocity(b));
            this.amDash_ending && (this.amDash_dur -= ig.system.tick, 0 >= this.amDash_dur && (this.amDash_ending = !1));
            this.amDash && (this.amDash_dist -= ig.system.tick, b = new Box2D.Common.Math.b2Vec2(0, 0), this.body.SetLinearVelocity(b), c = {
              x: (this.pos.x + this.size.x / 2) * Box2D.SCALE,
              y: (this.pos.y + this.size.y / 2) * Box2D.SCALE
            }, c.x += this.bpDash_speed * Math.cos(this.amDash_angle * Math.PI / 180), c.y += this.bpDash_speed * Math.sin(this.amDash_angle * Math.PI / 180), b = this.body.GetLinearVelocity(), b.x = 0, b.y = 0, this.body.SetLinearVelocity(b), this.amDash_dist -= this.amDash_speed, 0 >= this.amDash_dist && (this.amDash = !1, this.amDash_starting = !0, this.areaDamage(200, "antManExpand", !1), this.currentAnim = this.anims.special, this.scaleTween({
              x: 1,
              y: 1
            }, 2), ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.antMan_blowUp)), this.body.SetPositionAndAngle(c, this.amDash_angle * Math.PI / 180));
          }
        }
      },
      projectileCheck: function () {
        var b = !1;
        ig.game.getEntitiesByType(EntityLazer)[0] && (b = !0);
        ig.game.getEntitiesByType(EntityCapShield)[0] && (b = !0);
        return b;
      },
      jumpAround_nextJump: 0,
      jumpAround_nextJumpMin: 3,
      jumpAround_nextJumpMax: 10,
      jumpAround_tween: null,
      jumpAround_tween2: null,
      jumpAround_startPos: null,
      jumpAround_startPosNonVec: {
        x: 0,
        y: 0
      },
      jumpAround_actualPos: {
        x: 0,
        y: 0
      },
      jumpAround_angle: 0,
      jumpAround_flipJump: !1,
      jumpAround_start: function () {
        if (0.5 >= Math.random() && !this.jumpAround_flipJump) {
          var b = {
            x: this.jumpAround_startPosNonVec.x,
            y: this.jumpAround_startPosNonVec.y - (7 * Math.random() + 5)
          };
          this.jumpAround_tween = this.tween({
            jumpAround_startPosNonVec: b
          }, 0.25, {
            entity: this,
            easing: ig.Tween.Easing.Quadratic.EaseOut,
            loop: ig.Tween.Loop.Reverse,
            loopCount: 1,
            onComplete: function () {}
          });
          this.jumpAround_tween.start();
        } else b = {
          x: this.jumpAround_startPosNonVec.x,
          y: this.jumpAround_startPosNonVec.y - 8
        }, this.jumpAround_tween = this.tween({
          jumpAround_startPosNonVec: b
        }, 0.25, {
          entity: this,
          easing: ig.Tween.Easing.Quadratic.EaseOut,
          loop: ig.Tween.Loop.Reverse,
          loopCount: 1,
          onComplete: function () {}
        }), this.jumpAround_tween.start(), b = 360 * Math.PI / 180, this.jumpAround_tween2 = this.tween({
          jumpAround_angle: b
        }, 0.5, {
          entity: this,
          easing: ig.Tween.Easing.Quadratic.EaseOut,
          onComplete: function () {
            this.jumpAround_angle = 0;
          }
        }), this.jumpAround_tween2.start();
      },
      destroy: function () {
        this.isAlive = !1;
        ig.game.spawnEntity(EntityPoof, this.pos.x, this.pos.y);
        ig.game.cameraFocus = null;
        if (0 >= ig.game.enemiesLeft) {
          var b = ig.game.getEntitiesByType(EntityLevelControl)[0];
          b && (b.isGameEnding || b.endingGame());
        }
        this.kill();
        ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.bighit);
      },
      isAiming: !1,
      startAiming: function () {
        if (!ig.game.levelControl.isGameOver && !ig.game.levelControl.cameraTweening && !(0 >= ig.game.enemiesLeft || ig.game.draggingScreen) && !this.isAiming) {
          this.currentAnim = this.anims.aiming;
          this.isAiming = !0;
          this.zIndex = 400;
          for (var b = ig.game.getEntitiesByType(EntityBird), c = 0; c < b.length; c++) b[c] != this && (b[c].zIndex = 399);
          ig.game.sortEntitiesDeferred();
          ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.slingAim);
        }
      },
      endAiming: function () {
        this.isAiming && (this.isAiming = !1);
      },
      shootInvi: function () {
        ig.game.spawnEntity(EntityBirdInvi, this.pos.x, this.pos.y).fire(this.oriPosX2, this.oriPosY2, this.disX, this.disY);
      },
      clicked: function () {
        if ("level" == ig.game.gameState && !this.fired && !ig.game.levelControl.cameraTweening && !ig.game.draggingScreen) if (ig.game.selected == this.id) {
          if (!ig.game.dragging && 0 < ig.game.enemiesLeft && !ig.game.box2dPaused) {
            if (32 === ig.game.levelCur_actual) {
              var b = ig.game.getEntitiesByType(EntityGameUiControl)[0];
              if (b && 5 >= b.tutorialDialogNum) return;
            }
            ig.game.dragging = !0;
            ig.game.dragPosX = ig.game.io.getClickPos().x;
            ig.game.dragPosY = ig.game.io.getClickPos().y;
            this.oriPosX = this.pos.x;
            this.oriPosY = this.pos.y;
            this.oriPivotX = this.pos.x + this.size.x / 2;
            this.oriPivotY = this.pos.y + this.size.y / 2;
            this.oriPos = this.body.GetPosition();
            this.oriPosX2 = this.body.GetPosition().x;
            this.oriPosY2 = this.body.GetPosition().y;
            this.body.SetPosition({
              x: 9999,
              y: 9999
            });
            ig.game.levelControl.levelState = "birdDragging";
            for (b = 0; b < ig.game.levelControl.birds.length; b++) ig.game.levelControl.birds[b].fireSec = 0;
          }
        } else "ready" == ig.game.levelControl.levelState && (ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.click), this.swap(ig.game.selected));
      },
      released: function () {
        "level" == ig.game.gameState && ig.game.selected == this.id && ig.game.dragging && !ig.game.levelControl.cameraTweening && !ig.game.draggingScreen && (ig.log("released"), ig.game.dragging = !1, this.fire());
      },
      releasedOutside: function () {
        "level" == ig.game.gameState && ig.game.selected == this.id && ig.game.dragging && !ig.game.levelControl.cameraTweening && !ig.game.draggingScreen && (ig.game.dragging = !1, this.fire());
      },
      fire: function () {
        ig.game.cameraFocus = this;
        var b = Math.atan(this.disY / this.disX);
        this.angle = b;
        ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.slingFire);
        ig.game.levelControl.levelState = "fire";
        var c = ig.game.getEntitiesByType(EntityString1)[0],
          d = ig.game.getEntitiesByType(EntityString2)[0];
        c.drawn = 0;
        d.drawn = 0;
        -0.87 < b ? this.body.SetPositionAndAngle({
          x: this.oriPosX2 + 0.1 * this.disX,
          y: this.oriPosY2 + 0.1 * this.disY
        }, 0) : this.body.SetPositionAndAngle({
          x: this.oriPosX2,
          y: this.oriPosY2
        }, 0);
        c = 150 + (this.disX * this.disX + this.disY * this.disY) / 12;
        c *= 1.5;
        0 === this.disX && (this.disX = 0.01);
        b = c * Math.cos(this.angle);
        c *= Math.sin(this.angle);
        0 < this.disX && (b *= -1, c *= -1);
        b = new Box2D.Common.Math.b2Vec2(b, c);
        c = this.body.GetLinearVelocity();
        c.x = 0;
        c.y = 0;
        this.body.SetLinearVelocity(c);
        this.body.ApplyImpulse(b, this.body.GetPosition());
        this.fired = !0;
        this.startPos = {
          x: 9999,
          y: 9999
        };
        c = ig.game.getEntitiesByType(EntityBird);
        for (b = 0; b < c.length; b++) c[b] != this && (c[b].zIndex = 1E3);
        ig.game.sortEntitiesDeferred();
        ig.game.levelControl.uiControl.btnRestart.isHidden = !0;
        ig.game.levelControl.uiControl.btnPause.isHidden = !0;
        if (0 === ig.game.levelCur_actual) {
          c = ig.game.entities;
          for (b = c.length - 1; 0 <= b; b--) c[b].uiTargeter && c[b].kill();
        }
        10 === ig.game.levelCur_actual && ig.game.levelControl.uiControl.tutorialIsShown && (b = ig.game.getEntitiesByType(EntityGameUiText)[0]) && 2 > b.stateNum && b.tweenStart_uiText(!1, 1);
      },
      swap: function (b) {
        b = ig.game.levelControl.birds[b];
        var c = b.pos.x,
          d = b.pos.y,
          e = b.body.GetPosition().x + 0,
          f = b.body.GetPosition().y + 0;
        b.body.SetPosition({
          x: 9999,
          y: 9999
        });
        b.pos.x = -999;
        b.pos.y = -999;
        this.jumpAround_actualPos = this.pos;
        var j = this.jumpAround_actualPos.x,
          m = this.jumpAround_actualPos.y,
          l = (j + b.startOffset[b.types].x) * Box2D.SCALE,
          g = (m + b.startOffset[b.types].y) * Box2D.SCALE;
        this.pos.x = c;
        this.pos.y = d;
        this.body.SetPosition({
          x: e,
          y: f
        });
        b.pos.x = j;
        b.pos.y = m;
        b.jumpAround_startPos = this.jumpAround_startPos;
        b.jumpAround_startPosNonVec = this.jumpAround_startPosNonVec;
        b.jumpAround_actualPos = this.jumpAround_actualPos;
        b.body.SetPosition({
          x: l,
          y: g
        });
        ig.game.selected = this.id;
        ig.game.selectedType = this.types;
        ig.game.markForEndGame && 0 >= ig.game.enemiesLeft && ((b = ig.game.getEntitiesByType(EntityLevelControl)[0]) && (b.isGameEnding || b.endingGame()), ig.game.markForEndGame = !1);
        10 === ig.game.levelCur_actual && ig.game.levelControl.uiControl.tutorialIsShown && (b = ig.game.getEntitiesByType(EntityGameUiText)[0]) && 2 > b.stateNum && b.tweenStart_uiText(!1, 1);
        b = ig.game.getEntitiesByType(EntityEnemyBig);
        for (c = 0; c < b.length; c++) b[c].lastDamageType = "";
      },
      firstContact: !1,
      contactEnded: !0,
      lastContactSec: 0.5,
      lastContactSecMax: 0.5,
      beginContact: function (b, c) {
        if (this.fired) if (b && 0.1 >= this.fireSec) c.SetEnabled(!1);else if (b && 2 >= this.fireSec && b.isSling) c.SetEnabled(!1);else if (!b || !b.name || !("lazer" === b.name || "portal" === b.name)) this.playCollisionSound(b), this.lockFacing && (this.lockFacing = !1, this.setScale(1, 1)), this.triggerCollisionAbility(b);
      },
      playCollisionSound: function (b) {
        if ((!b || !b.name || !("woodBox" == b.name || "woodBarrel" == b.name)) && this.lastContactSec >= this.lastContactSecMax) ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.groundHit), this.contactEnded = !1, this.lastContactSec = 0;
      },
      endContact: function () {
        this.contactEnded = !0;
        this.lastContactSec = 0;
      },
      triggerCollisionAbility: function (b) {
        if (!b || !b.isSling && !(0.2 >= this.fireSec || b.name && "chain" == b.name)) {
          if ("b" === this.name) {
            if (!this.firstContact) {
              var c = [];
              ig.game.cameraShake = 0.1;
              ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.explode);
              ig.game.spawnEntity(EntityExplosionMaker, this.pos.x, this.pos.y, {
                maxX: 120,
                maxY: 120,
                durStart: 0.05,
                durInterval: 0.05,
                explosionNum: 7
              });
              for (var d = ig.game.entities, e = d.length, f = 0; f < e; f++) if (b = d[f], b.classify && ("enemy" === b.classify || "obstacle" === b.classify) && "woodCircle" != b.name) {
                if (1 === b.dynamicType) var j = b.pos.x / Box2D.SCALE,
                  m = b.pos.y / Box2D.SCALE;else j = b.pos.x, m = b.pos.y;
                var l = this.pos.x + this.size.x / 2,
                  g = this.pos.y + this.size.y / 2,
                  q = j,
                  l = l - q,
                  g = g - m;
                175 >= Math.sqrt(l * l + g * g) && c.push(b);
              }
              for (f = c.length - 1; 0 <= f; f--) c[f].destroy();
            }
          } else if ("c" === this.name) {
            if (!this.firstContact) {
              c = [];
              ig.game.cameraShake = 0.1;
              ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.lightning1);
              d = ig.game.entities;
              e = d.length;
              for (f = 0; f < e; f++) if (b = d[f], b.classify && ("enemy" === b.classify || "obstacle" === b.classify) && "woodCircle" != b.name) j = 1 === b.dynamicType ? b.pos.x / Box2D.SCALE : b.pos.x, l = this.pos.x + this.size.x / 2, q = l > j ? j + b.size.x : j, l = Math.abs(l - q), 125 >= l && c.push(b);
              this.currentAnim = this.anims.attack;
              b = 216;
              ig.game.spawnEntity(EntityThorLightning, this.pos.x - b / 2, 0);
              ig.game.spawnEntity(EntityThorLightning, this.pos.x - b / 2, -500);
              ig.game.spawnEntity(EntityThorLightning, this.pos.x - b / 2, -200);
              ig.game.spawnEntity(EntityThorLightning, this.pos.x - b / 2, 400);
              ig.game.spawnEntity(EntityThorLightningTime, this.pos.x - 25, 0, {
                time: 0.2,
                origPos: this.pos.x - 25
              });
              ig.game.spawnEntity(EntityThorLightningTime, this.pos.x + 25, 0, {
                time: 0.35,
                origPos: this.pos.x + 25
              });
              for (f = c.length - 1; 0 <= f; f--) c[f].destroy();
            }
            if (this.groundSlamHit) {
              c = [];
              ig.game.cameraShake = 0.2;
              ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.lightning1);
              d = ig.game.entities;
              e = d.length;
              for (f = 0; f < e; f++) if (b = d[f], b.classify && ("enemy" === b.classify || "obstacle" === b.classify)) j = 1 === b.dynamicType ? b.pos.x / Box2D.SCALE : b.pos.x, l = this.pos.x + this.size.x / 2, q = l > j ? j + b.size.x : j, l = Math.abs(l - q), 175 >= l && c.push(b);
              this.currentAnim = this.anims.attack;
              b = 216;
              ig.game.spawnEntity(EntityThorLightning, this.pos.x - b / 2, 0);
              ig.game.spawnEntity(EntityThorLightning, this.pos.x - b / 2, -500);
              ig.game.spawnEntity(EntityThorLightning, this.pos.x - b / 2, -200);
              ig.game.spawnEntity(EntityThorLightning, this.pos.x - b / 2, 400);
              ig.game.spawnEntity(EntityThorLightningTime, this.pos.x - 50, 0, {
                time: 0.15,
                origPos: this.pos.x - 50
              });
              ig.game.spawnEntity(EntityThorLightningTime, this.pos.x + 50, 0, {
                time: 0.15,
                origPos: this.pos.x + 50
              });
              ig.game.spawnEntity(EntityThorLightningTime, this.pos.x + 80, 0, {
                time: 0.3,
                origPos: this.pos.x + 80
              });
              ig.game.spawnEntity(EntityThorLightningTime, this.pos.x - 80, 0, {
                time: 0.3,
                origPos: this.pos.x - 80
              });
              this.groundSlamHit = !1;
              for (f = c.length - 1; 0 <= f; f--) c[f].destroy();
            }
          } else if ("h" === this.name && this.groundSlamHit) {
            c = [];
            ig.game.cameraShake = 0.2;
            ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.lightning1);
            d = ig.game.entities;
            e = d.length;
            for (f = 0; f < e; f++) if (b = d[f], b.classify && (j = !1, ("enemy" === b.classify || "obstacle" === b.classify) && "woodCircle" != b.name)) 1 === b.dynamicType ? (j = b.pos.x / Box2D.SCALE, m = b.pos.y / Box2D.SCALE) : (j = b.pos.x, m = b.pos.y), l = this.pos.x + this.size.x / 2, g = this.pos.y + this.size.y / 2, l > j ? (q = j + b.size.x, j = !1) : (q = j, j = !0), m = g > m ? m + b.size.y : m, l = Math.abs(l - q), g = Math.abs(g - m), 250 >= l && 120 >= g && (b.stopTossEffect = !0, g = b.body.GetLinearVelocity(), g.x = j ? 25 : -25, g.y = -25, b.body.SetLinearVelocity(g), b.destroy(), c.push(b));
            this.groundSlamHit = !1;
            ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.hulk_landing);
            g = this.body.GetLinearVelocity();
            g.x = 25;
            g.y = -25;
            this.body.SetLinearVelocity(g);
            ig.game.spawnEntity(EntityHulkSmash, this.pos.x + 25, this.pos.y, {
              goRight: !0
            });
            ig.game.spawnEntity(EntityHulkSmash, this.pos.x - 25, this.pos.y);
          }
          !this.isLanded && "c" === this.name && (this.isLanded = !0);
          this.firstContact || (this.firstContact = !0);
        }
      },
      preSolve: function (b, c) {
        if (b && 2 >= this.fireSec && b.isSling) c.SetEnabled(!1);else if (this.bpDash) {
          if (b && b.classify && ("enemy" === b.classify || "obstacle" === b.classify) && !b.bpHit) b.destroy(), 1 != b.dynamicType && 2 != b.dynamicType && ig.game.spawnEntity(EntityEffect, b.pos.x, b.pos.y, {
            effectType: "bpEnergy"
          }), b.bpHit = !0;
          c.SetEnabled(!1);
        } else if (this.groundSlam && (this.groundSlam = !1, this.groundSlamHit = !0, b && b.classify && b.destroy(), c.SetEnabled(!1)), b && b.name && (("chain" === b.name || "lazer" === b.name) && c.SetEnabled(!1), "a" === this.name || "h" === this.name)) if ("woodBarrel" === b.name || "woodBox" === b.name) b.destroy(), c.SetEnabled(!1);
      },
      tweenF: function () {},
      ready: function () {
        this.parent();
        this.pointer = ig.game.getEntitiesByType(EntityPointer)[0];
      },
      draw: function () {
        this.parent();
        if (!ig.global.wm) {
          ig.game.dragging && this.setTrajectoryAim();
          if (ig.game.abilityMode && ig.game.levelControl.birdDragging == this) {
            var b = ig.system.context;
            b.save();
            b.fillStyle = "black";
            b.globalAlpha = this.main.abilityMode_alpha;
            b.fillRect(0, 0, ig.system.width, ig.system.height);
            b.globalAlpha = 1;
            b.restore();
            "a" === this.name && (b = ig.system.context, b.save(), b.beginPath(), b.lineWidth = 5, b.strokeStyle = "red", b.arc(this.pos.x + this.size.x / 2 - ig.game.screen.x, this.pos.y + this.size.x / 2 - ig.game.screen.y, 430, 0, 2 * Math.PI), b.stroke(), b.restore());
            "e" === this.name && (b = ig.system.context, b.save(), b.beginPath(), b.lineWidth = 5, b.strokeStyle = "red", b.arc(this.pos.x + this.size.x / 2 - ig.game.screen.x, this.pos.y + this.size.x / 2 - ig.game.screen.y, 340, 0, 2 * Math.PI), b.stroke(), b.restore());
            "d" === this.name && (b = ig.system.context, b.save(), b.beginPath(), b.lineWidth = 5, b.strokeStyle = "red", b.arc(this.pos.x + this.size.x / 2 - ig.game.screen.x, this.pos.y + this.size.x / 2 - ig.game.screen.y, 340, 0, 2 * Math.PI), b.stroke(), b.restore());
          }
          this.groundSlam && (b = ig.system.context, b.save(), b.fillStyle = "black", b.globalAlpha = 0.15, b.fillRect(0, 0, ig.system.width, ig.system.height), b.globalAlpha = 1, b.restore());
        }
      },
      pointGetter: new ig.Image("media/graphics/game/objects/shot-tracker.png"),
      setTrajectoryAim: function () {
        var b = this.pos.x - ig.game.screen.x,
          c = this.pos.y - ig.game.screen.y,
          d = Math.atan(this.disY / this.disX);
        Math.sqrt(this.disX * this.disX + this.disY * this.disY);
        var e = 150 + (this.disX * this.disX + this.disY * this.disY) / 12,
          e = 1.4 * e;
        if (!isNaN(e)) for (var f = 1370 <= e ? 1.9 : -0.88 > d ? 2 : 1.85, j = Math.cos(d) * e * Box2D.SCALE * f, d = Math.sin(d) * e * Box2D.SCALE * f, m = ig.game.gravity * Box2D.SCALE, l = 0; 25 > l; l++) {
          var g = 45 * (l / 100),
            q = j * g,
            g = d * g + 0.5 * g * g * m / f,
            e = e + 100,
            q = q + (b + this.size.x / 2),
            g = g + (c + this.size.y / 2),
            y = ig.system.context;
          y.save();
          y.translate(q, g);
          0 !== l && y.drawImage(this.pointGetter.data, 0, 0, 10, 10);
          y.restore();
        }
      },
      scaleTween_eventNum: 1,
      scaleTween_tween: null,
      scaleTween: function (b, c) {
        this.scaleTween_eventNum = c;
        this.scaleTween_tween = this.tween({
          scaleSize: b
        }, 0.5, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut,
          onComplete: function () {
            if (1 === this.entity.scaleTween_eventNum) ig.game.box2dPaused = !1, this.entity.amDash_starting = !1, this.entity.amDash = !0;else if (2 === this.entity.scaleTween_eventNum) {
              ig.game.box2dPaused = !1;
              ig.game.abilityMode = !1;
              this.entity.amDash_starting = !1;
              this.entity.amDash_ending = !0;
              this.entity.amDash_endPos = this.entity.body.GetPosition();
              var b = this.entity.body.GetLinearVelocity();
              b.x = 0;
              b.y = 0;
              this.entity.body.SetLinearVelocity(b);
            }
          }
        });
        this.scaleTween_tween.start();
      },
      areaDamage: function (b, c) {
        for (var d = null, e = ig.game.entities, f = e.length, j = 0; j < f; j++) if (d = e[j], d.classify && ("enemy" === d.classify || "obstacle" === d.classify)) {
          if (1 === d.dynamicType) var m = d.pos.x / Box2D.SCALE,
            l = d.pos.y / Box2D.SCALE;else m = d.pos.x, l = d.pos.y;
          m = this.pos.x + this.size.x / 2 - m;
          l = this.pos.y + this.size.y / 2 - l;
          Math.sqrt(m * m + l * l) <= b && (d.enemyBig ? d.destroy(c) : d.destroy());
        }
      },
      areaKnockbackOnX: function (b, c) {
        for (var d = null, e = ig.game.entities, f = e.length, j = [], m = 0; m < f; m++) if (d = e[m], d.classify && !j.includes(d) && ("enemy" === d.classify || "obstacle" === d.classify)) {
          var l = this.pos.x + this.size.x / 2,
            g = 1 === d.dynamicType ? d.pos.x / Box2D.SCALE : d.pos.x,
            q = l > g ? 1 : -1;
          l - g <= b && (l = d.body.GetLinearVelocity(), l.x = c * q, d.body.SetLinearVelocity(l), j.push(d));
        }
      }
    });
    EntityTestText = ig.Entity.extend({
      text1: "",
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.text1 = Math.floor(this.text1);
      },
      draw: function () {
        var b = ig.system.context;
        b.save();
        b.fillStyle = "red";
        b.font = "10px soupofjustice";
        b.textAlign = "center";
        b.fillText(this.text1, this.pos.x - ig.game.screen.x, this.pos.y - ig.game.screen.y);
        b.restore();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.ori-shape").requires("plugins.box2d.entity").defines(function () {
    EntityOriShape = ig.Box2DEntity.extend({
      gravityFactor: 1,
      type: ig.Entity.TYPE.B,
      checkAgainst: ig.Entity.TYPE.B,
      zIndex: 1E3,
      sc: 2,
      size: {
        x: 20,
        y: 20
      },
      gamePaused: !1,
      scX: 1,
      scY: 1,
      box2dType: 2,
      dynamicType: 0,
      density: 0.8,
      friction: 0,
      restitution: 0,
      mass: 0.8,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      angle: null,
      name: "wall",
      broken: !1,
      jointSet: !1,
      sleepVel: 0.14,
      alp: 1,
      firstShape: !0,
      slicePoints: [],
      splitPoints: [],
      sleepAtStart: !1,
      ctxIndex: 0,
      canvasPerEntity: !0,
      sleep: !0,
      destroyed: !1,
      destructable: !0,
      im: new ig.Image("media/graphics/game/objects/steel-pillars.png"),
      im2: new ig.Image("media/graphics/game/objects/steel-pillars.png"),
      animSheet: new ig.AnimationSheet("media/graphics/game/objects/steel-pillars.png", 141, 12),
      vertices: [{
        x: -6,
        y: -1
      }, {
        x: 6,
        y: -1
      }, {
        x: 6,
        y: 1
      }, {
        x: -6,
        y: 1
      }],
      init: function (b, c, d) {
        this.parent(b, c, d);
        if (!ig.global.wm) {
          this.main = ig.game.getEntitiesByType(EntityGameControl)[0];
          this.srcMaxX = Math.floor(1E3 / (this.im.width + 2));
          this.srcMaxY = Math.floor(1E3 / (this.im.height + 2));
          this.addAnim("idle", 1, [0]);
          this.addAnim("broken", 1, [1]);
          b = !1;
          if (!1 == this.canvasPerEntity) for (c = 0; c < ig.game.ctxVault.length; c++) ig.game.ctxVault[c].name == this.name && (this.ctxIndex = c, b = !0);
          !1 == b && (0 < ig.game.freeCtxVault.length ? this.reuseCanvas() : this.createCanvas());
          this.size.x = this.im.width;
          this.size.y = this.im.height;
          this.pointer = ig.game.getEntitiesByType(EntityPointer)[0];
          this.initialAngle = this.angle;
        }
      },
      reuseCanvas: function () {
        this.ctxIndex = ig.game.freeCtxVault[ig.game.freeCtxVault.length - 1];
        ig.game.freeCtxVault.pop();
        var b = ig.game.ctxVault[this.ctxIndex];
        b.name = this.name;
        b.slot = [];
        for (var c = 0; c < this.srcMaxX * this.srcMaxY; c++) b.slot[c] = "empty";
      },
      createCanvas: function () {
        var b = document.createElement("canvas"),
          c = b.getContext("2d"),
          d = [];
        b.width = 1E3;
        b.height = 1E3;
        for (var e = 0; e < this.srcMaxX * this.srcMaxY; e++) d[e] = "empty";
        ig.game.ctxVault.push({
          ele: b,
          ctx: c,
          slot: d,
          name: this.name
        });
        this.ctxIndex = ig.game.ctxVault.length - 1;
      },
      beginContact: function () {},
      tweenF: function () {},
      update: function () {
        ig.global.wm || (this.parent(), 0 < this.slicePoints.length && (this.slicePoints.length = 0), 40 < this.body.GetLinearVelocity().Length() ? (this.destroyed = !0, this.kill()) : 30 < this.body.GetLinearVelocity().Length() && (this.broken ? (this.destroyed = !0, this.kill()) : (this.broken = !0, this.currentAnim = this.anims.broken)), 0.5 <= Math.abs(this.angle - this.initialAngle) && (this.destroyed = !0), this.checkIfOutOfBounds());
      },
      checkIfOutOfBounds: function () {
        (-200 > this.pos.x || this.pos.x > ig.system.width + 200) && 50 < this.body.GetLinearVelocity().y && this.body.SetAwake(!1);
      },
      ready: function () {
        this.parent();
        this.pointer = ig.game.getEntitiesByType(EntityPointer)[0];
      },
      draw: function () {
        this.parent();
        if (!ig.global.wm) {
          var b = this.body.GetPosition(),
            c = ig.system.context;
          c.save();
          c.translate(b.x / Box2D.SCALE, b.y / Box2D.SCALE);
          c.rotate(this.angle);
          c.globalAlpha = this.alp;
          c.restore();
        }
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.sling1").requires("impact.entity", "game.entities.string1").defines(function () {
    EntitySling1 = ig.Entity.extend({
      animSheetList: [new ig.AnimationSheet("media/graphics/game/objects/slingshot1.png", 59, 135), new ig.AnimationSheet("media/graphics/game/objects/slingshot1-wakanda.png", 59, 135), new ig.AnimationSheet("media/graphics/game/objects/slingshot1-volcano.png", 59, 135), new ig.AnimationSheet("media/graphics/game/objects/slingshot1-space.png", 59, 135)],
      animSheet: null,
      gravityFactor: 0,
      size: {
        x: 59,
        y: 135
      },
      zIndex: 900,
      specialDraw: !0,
      isSling: !0,
      init: function (b, c, d) {
        ig.global.wm && (ig.game.episodeCur = 0);
        this.animSheet = this.animSheetList[ig.game.episodeCur];
        this.parent(b, c, d);
        ig.global.wm || (this.addAnim("idle", 1, [0]), ig.game.spawnEntity(EntityString1, this.pos.x + 47, this.pos.y + 22, {
          zIndex: 300,
          front: !1
        }));
      },
      update: function () {
        ig.global.wm || this.parent();
      },
      draw: function () {
        this.parent();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.string2").requires("impact.entity", "game.entities.tray").defines(function () {
    EntityString2 = ig.Entity.extend({
      animSheetList: [new ig.AnimationSheet("media/graphics/game/objects/string200.png", 200, 5), new ig.AnimationSheet("media/graphics/game/objects/string200-wakanda.png", 200, 5), new ig.AnimationSheet("media/graphics/game/objects/string200-volcano.png", 200, 5), new ig.AnimationSheet("media/graphics/game/objects/string200-space.png", 200, 5)],
      animSheet: null,
      gravityFactor: 0,
      size: {
        x: 200,
        y: 5
      },
      zIndex: 800,
      rad: 46,
      trayX: 0,
      trayY: 0,
      specialDraw: !0,
      init: function (b, c, d) {
        ig.global.wm && (ig.game.episodeCur = 0);
        this.animSheet = this.animSheetList[ig.game.episodeCur];
        this.parent(b, c, d);
        ig.global.wm || (this.addAnim("idle", 1, [0]), this.currentAnim.pivot.x = 0, this.front && (this.tray = ig.game.spawnEntity(EntityTray, this.pos.x, this.pos.y), this.tray.string = this));
      },
      drawn: 3,
      update: function () {
        if (!ig.global.wm) if (this.parent(), 3 > this.drawn && "birdDragging" == ig.game.levelControl.levelState) this.currentAnim.sheet.width = 0, this.drawn++;else if (ig.game.dragging) {
          var b = ig.game.levelControl.birdBack.x + 23,
            c = ig.game.levelControl.birdBack.y + 23,
            d = ig.game.levelControl.angleChanged;
          ig.game.levelControl.birdLeft ? (b -= this.rad * Math.cos(d), c -= this.rad * Math.sin(d)) : (b += this.rad * Math.cos(d), c += this.rad * Math.sin(d));
          this.trayX = b;
          this.trayY = c;
          c -= this.pos.y;
          b -= this.pos.x;
          d = Math.sqrt(c * c + b * b) - 25;
          ig.game.levelControl.birdLeft || (d = this.front ? d + 5 : d - 21);
          this.currentAnim.sheet.width = Math.min(d, 180);
          0 === b && (b = 0.01);
          c = Math.atan(c / b);
          0 > b && (c += Math.PI);
          this.currentAnim.angle = c;
          this.drawPos.x = ig.game.levelControl.birdBack.x;
          this.drawPos.y = ig.game.levelControl.birdBack.y;
        }
      },
      size1: {
        x: 60,
        y: 30
      },
      centerpoint: {
        x: 1,
        y: 10
      },
      drawPos: {
        x: 0,
        y: 0
      },
      draw: function () {
        if (!(3 > this.drawn) && ig.game.dragging && ig.game.levelControl.birdDragging && (0 !== ig.game.levelControl.birdDragging.disX || 0 !== ig.game.levelControl.birdDragging.disY)) {
          this.parent();
          var b = ig.system.context;
          b.save();
          var c = this.drawPos.x + this.centerpoint.x,
            d = this.drawPos.y + this.centerpoint.y,
            e = this.pos.x,
            f = this.pos.y,
            j = Math.atan2(f - d, e - c),
            e = c - e,
            f = d - f;
          Math.sqrt(e * e + f * f);
          b.translate(c, d);
          b.rotate(j);
          b.restore();
        }
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.sling2").requires("impact.entity", "game.entities.string2").defines(function () {
    EntitySling2 = ig.Entity.extend({
      animSheetList: [new ig.AnimationSheet("media/graphics/game/objects/slingshot2.png", 59, 135), new ig.AnimationSheet("media/graphics/game/objects/slingshot2-wakanda.png", 59, 135), new ig.AnimationSheet("media/graphics/game/objects/slingshot2-volcano.png", 59, 135), new ig.AnimationSheet("media/graphics/game/objects/slingshot2-space.png", 59, 135)],
      animSheet: null,
      gravityFactor: 0,
      size: {
        x: 59,
        y: 135
      },
      zIndex: 1200,
      specialDraw: !0,
      isSling: !0,
      init: function (b, c, d) {
        ig.global.wm && (ig.game.episodeCur = 0);
        this.animSheet = this.animSheetList[ig.game.episodeCur];
        this.parent(b, c, d);
        ig.global.wm || (this.addAnim("idle", 1, [0]), ig.game.spawnEntity(EntityString2, this.pos.x + 6, this.pos.y + 10, {
          zIndex: this.zIndex,
          front: !0
        }));
      },
      update: function () {
        ig.global.wm || this.parent();
      },
      draw: function () {
        this.parent();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.sling").requires("plugins.box2d.entity", "game.entities.sling1", "game.entities.sling2", "game.entities.string1").defines(function () {
    EntitySling = ig.Box2DEntity.extend({
      gravityFactor: 0,
      type: ig.Entity.TYPE.B,
      checkAgainst: ig.Entity.TYPE.B,
      zIndex: 1100,
      sc: 2,
      size: {
        x: 32,
        y: 50
      },
      gamePaused: !1,
      scX: 1,
      scY: 1,
      box2dType: 2,
      dynamicType: 2,
      density: 0.8,
      friction: 0.3,
      restitution: 0.1,
      mass: 0.8,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      im: new ig.Image("media/graphics/game/objects/slingshot1.png"),
      animSheet: new ig.AnimationSheet("media/graphics/game/objects/slingshot1.png", 59, 135),
      offset: {
        x: 0,
        y: 0
      },
      broken: !1,
      jointSet: !1,
      sleepVel: 0.14,
      vertices: [{
        x: -1,
        y: -2
      }, {
        x: 1,
        y: -2
      }, {
        x: 1,
        y: 2
      }, {
        x: -1,
        y: 2
      }],
      name: "sling",
      alp: 1,
      firstShape: !0,
      slicePoints: [],
      splitPoints: [],
      sleepAtStart: !1,
      ctxIndex: 0,
      canvasPerEntity: !0,
      speed: 300,
      birdPos1: {
        x: 258,
        y: 310
      },
      birdPos2: {
        x: 100,
        y: 400
      },
      birdPos3: {
        x: 35,
        y: 400
      },
      levelControl: null,
      isSling: !0,
      init: function (b, c, d) {
        this.parent(b, c, d);
        ig.global.wm ? this.addAnim("idle", 1, [0]) : (this.srcMaxX = Math.floor(1E3 / (this.im.width + 2)), this.srcMaxY = Math.floor(1E3 / (this.im.height + 2)), ig.game.spawnEntity(EntitySling1, this.pos.x, this.pos.y - 60), ig.game.spawnEntity(EntitySling2, this.pos.x, this.pos.y - 60));
      },
      ready: function () {
        ig.global.wm || (this.levelControl = ig.game.getEntitiesByType(EntityLevelControl)[0], this.levelControl.birdPos1 = this.birdPos1);
      },
      update: function () {
        this.parent();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.screen-drag").requires("impact.entity").defines(function () {
    EntityScreenDrag = ig.Entity.extend({
      size: {
        x: 960,
        y: 540
      },
      ignorePause: !0,
      zIndex: 800,
      animAlpha: 0.8,
      gravityFactor: 0,
      collides: ig.Entity.COLLIDES.NEVER,
      type: ig.Entity.TYPE.A,
      interactable: !0,
      drStrangeDragging: !1,
      drStrangeDraggingDur: 0,
      drStrangeDraggingDurMin: 0.1,
      init: function (b, c, d) {
        this.parent(b, c, d);
      },
      update: function () {
        this.parent();
        this.pos.x = 0 + ig.game.screen.x;
        this.pos.y = 0 + ig.game.screen.y;
        this.drStrangeDragging && (this.drStrangeDraggingDur += ig.system.tick, this.drStrangeDraggingDur > this.drStrangeDraggingDurMin && (this.drStrangeDraggingDur = this.drStrangeDraggingDurMin));
      },
      clicked: function () {
        "level" != ig.game.gameState || "birdDragging" == ig.game.levelControl.levelState || "fire" == ig.game.levelControl.levelState || ig.game.levelControl.cameraTweening || 0 < ig.game.levelControl.uiControl.gameStartBlackFrameAlpha ? ig.game.levelControl.birdDragging && ig.game.levelControl.birdDragging.name && "g" === ig.game.levelControl.birdDragging.name && ig.game.abilityMode && (this.clickCheck = this.drStrangeDragging = !0, ig.game.dragClick()) : (this.clickCheck = !0, ig.game.dragClick());
      },
      released: function () {
        this.clickCheck && (this.clickCheck = !1, this.redirect());
      },
      releasedOutside: function () {
        this.clickCheck && (this.clickCheck = !1, this.redirect());
      },
      redirect: function () {
        ig.game.dragRelease();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.buttons.button-confirm").requires("game.entities.buttons.button").defines(function () {
    EntityButtonConfirm = EntityButton.extend({
      zIndex: 2100,
      init: function (b, c, d) {
        this.parent(b, c, d);
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.board-tutorial").requires("impact.entity", "game.entities.buttons.button-confirm").defines(function () {
    EntityBoardTutorial = ig.Entity.extend({
      init: function (b, c, d) {
        this.parent(b, c, d);
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.cap-shield").requires("plugins.box2d.entity").defines(function () {
    EntityCapShield = ig.Box2DEntity.extend({
      gravityFactor: 0,
      type: ig.Entity.TYPE.B,
      checkAgainst: ig.Entity.TYPE.B,
      zIndex: 2300,
      animSheet: new ig.AnimationSheet("media/graphics/game/objects/shield.png", 78, 47),
      size: {
        x: 78,
        y: 47
      },
      box2dType: 0,
      dynamicType: 1,
      density: 0.8,
      friction: 0.3,
      restitution: 0.1,
      mass: 0.8,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      name: "shield",
      classify: "missile",
      targetPoint: {
        x: 0,
        y: 0
      },
      specialDraw: !0,
      posPicker: null,
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.addAnim("idle", 1, [0]);
        this.movAngle = 180 * Math.atan2(this.targetPoint.y - this.pos.y, this.targetPoint.x - this.pos.x) / Math.PI;
        this.posPicker = ig.game.spawnEntity(EntityPosPicker, b, c);
        ig.game.cameraFocus = null;
        ig.game.cameraFocus = this;
      },
      isReturning: !1,
      mode: 0,
      lastEnemyHit: null,
      targetEnemy: null,
      seekTarget: !1,
      distLim_nextTarget: 350,
      distanceLimit: 40,
      speed: 1,
      portal_passing: !1,
      portal_pos: {
        x: 0,
        y: 0
      },
      update: function () {
        if (this.portal_passing) this.portal_passing = !1, this.body.SetPositionAndAngle(new Box2D.Common.Math.b2Vec2(this.portal_pos.x, this.portal_pos.y), this.movAngle * Math.PI / 180), this.parent(), this.posPicker.pos = this.pos;else if (!ig.game.box2dPaused && !this.portal_passing) {
          this.parent();
          this.posPicker.pos = this.pos;
          this.seekTarget && (this.findTargetToBounce(), this.seekTarget = !1);
          (-750 > this.pos.x || this.pos.x > ig.game.maxCameraDistance + 750) && this.kill();
          (this.pos.y < ig.game.maxCameraDistanceY - 750 || 1290 < this.pos.y) && this.kill();
          var b = (this.pos.x + this.size.x / 2) * Box2D.SCALE,
            c = (this.pos.y + this.size.y / 2) * Box2D.SCALE,
            d = 0;
          if (0 === this.mode) b += this.speed * Math.cos(this.movAngle * Math.PI / 180), c += this.speed * Math.sin(this.movAngle * Math.PI / 180), this.distanceLimit -= this.speed, 0 >= this.distanceLimit && (this.mode = 3), d = this.movAngle;else if (1 <= this.mode && 2 >= this.mode) {
            if (this.targetEnemy) {
              if (this.targetEnemy.isDead) {
                this.seekTarget = !0;
                this.body.SetPositionAndAngle(new Box2D.Common.Math.b2Vec2(b, c), d * Math.PI / 180);
                return;
              }
            } else {
              this.seekTarget = !0;
              this.body.SetPositionAndAngle(new Box2D.Common.Math.b2Vec2(b, c), d * Math.PI / 180);
              return;
            }
            var d = 180 * Math.atan2(this.pos.y - this.targetEnemy.pos.y, this.pos.x - this.targetEnemy.pos.x) / Math.PI,
              b = b - this.speed * Math.cos(d * Math.PI / 180),
              c = c - this.speed * Math.sin(d * Math.PI / 180),
              e = this.targetEnemy.flipped ? this.pos.x - (this.targetEnemy.pos.x - this.targetEnemy.size.x) : this.pos.x - (this.targetEnemy.pos.x + this.targetEnemy.size.x / 2),
              f = this.pos.y - (this.targetEnemy.pos.y + this.targetEnemy.size.y / 2),
              e = Math.sqrt(e * e + f * f),
              d = d + 180;
            this.targetEnemy.flipped ? 30 >= e && (this.seekTarget = !0, this.targetEnemy.destroy()) : 8 >= e && (this.seekTarget = !0);
          } else 3 <= this.mode && (f = ig.game.levelControl.birdDragging, f || (ig.game.levelControl.birdDragging && (ig.game.cameraFocus = ig.game.levelControl.birdDragging.isAlive ? ig.game.levelControl.birdDragging : null), this.kill()), "a" !== f.name && (ig.game.levelControl.birdDragging && (ig.game.cameraFocus = ig.game.levelControl.birdDragging.isAlive ? ig.game.levelControl.birdDragging : null), this.kill()), d = 180 * Math.atan2(this.pos.y - f.pos.y, this.pos.x - f.pos.x) / Math.PI, b -= this.speed * Math.cos(d * Math.PI / 180), c -= this.speed * Math.sin(d * Math.PI / 180), e = this.pos.x - f.pos.x, f = this.pos.y - f.pos.y, e = Math.sqrt(e * e + f * f), 20 >= e && (ig.game.levelControl.birdDragging && (ig.game.cameraFocus = ig.game.levelControl.birdDragging.isAlive ? ig.game.levelControl.birdDragging : null), this.kill()), d += 180);
          this.body.SetPositionAndAngle(new Box2D.Common.Math.b2Vec2(b, c), d * Math.PI / 180);
        }
      },
      beginContact: function (b) {
        if (this.lastEnemyHit != b && b.box2dType && b.classify && (2 === b.box2dType && ig.game.spawnEntity(EntityEffect, this.pos.x / Box2D.SCALE, this.pos.y / Box2D.SCALE), "enemy" === b.classify || "obstacle" === b.classify)) b.enemyBig ? b.destroy("shield" + this.mode) : b.destroy(), this.lastEnemyHit = b, this.seekTarget = !0, ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.shieldHit);
      },
      callOnce: !1,
      check: function (b) {
        if (this.lastEnemyHit != b) {
          if (b.classify && ("enemy" === b.classify || "obstacle" === b.classify)) if (b.enemyBig ? b.destroy("shield" + this.mode) : b.destroy(), "enemy" === b.classify) {
            this.lastEnemyHit = b;
            this.seekTarget = !0;
            ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.shieldHit);
            return;
          }
          if (b.name && "portal" == b.name && !this.portalPassed && b.isEntrance) {
            var c = {
              x: b.exitPos.x * Box2D.SCALE,
              y: (b.exitPos.y + 50) * Box2D.SCALE
            };
            this.portal_passing = !0;
            this.portal_pos = c;
            this.portalPassed = !0;
            ig.game.spawnEntity(EntityEffect, this.pos.x, this.pos.y, {
              effectType: "portalEffect"
            });
            ig.game.spawnEntity(EntityEffect, b.exitPos.x, b.exitPos.y, {
              effectType: "portalEffect"
            });
          }
        }
      },
      findTargetToBounce: function () {
        var b = ig.game.entities,
          c = !1,
          d = 1E4;
        this.mode++;
        if (!(3 <= this.mode)) {
          for (var e = 0; e < b.length; e++) if ("enemy" === b[e].classify && b[e] != this.lastEnemyHit && !b[e].isDead && b[e] != this.lastEnemyHit) {
            var f = this.posPicker.pos.x + this.size.x / 2 - (b[e].pos.x + b[e].size.x / 2),
              j = this.posPicker.pos.y + this.size.y / 2 - (b[e].pos.y + b[e].size.y / 2),
              f = Math.sqrt(f * f + j * j);
            f <= this.distLim_nextTarget && f <= d && (this.targetEnemy = b[e], c = !0, d = f);
          }
          c || (this.mode = 3);
        }
      },
      preSolve: function (b, c) {
        ("a" === b.name || "b" === b.name || "c" === b.name || "woodCircle" === b.name || 3 <= this.mode) && c.SetEnabled(!1);
        b.enemyBig && this.lastEnemyHit == b && c.SetEnabled(!1);
      }
    });
    EntityPosPicker = ig.Entity.extend({
      init: function (b, c, d) {
        this.parent(b, c, d);
      },
      update: function () {
        this.parent();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.objects.thor-lightning").requires("plugins.box2d.entity").defines(function () {
    EntityThorLightning = ig.Entity.extend({
      animSheet: new ig.AnimationSheet("media/graphics/game/objects/lightning.png", 216, 420),
      zIndex: 2300,
      specialDraw: !0,
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.addAnim("idle", 0.05, [0, 1, 2, 3, 4]);
      },
      update: function () {
        this.parent();
        this.currentAnim.frame == this.currentAnim.sequence.length - 1 && this.kill();
      }
    });
    EntityThorLightningTime = ig.Entity.extend({
      time: 0,
      landingExplosion: !0,
      init: function (b, c, d) {
        this.parent(b, c, d);
      },
      update: function () {
        this.parent();
        this.time -= ig.system.tick;
        0 >= this.time && (ig.game.spawnEntity(EntityThorLightning, this.pos.x, this.pos.y), ig.game.spawnEntity(EntityThorLightning, this.pos.x, this.pos.y - 500), ig.game.spawnEntity(EntityThorLightning, this.pos.x, this.pos.y - 200), ig.game.spawnEntity(EntityThorLightning, this.pos.x, this.pos.y + 400), this.kill());
        if (this.landingExplosion) for (var b = null, c = ig.game.entities, d = c.length, e = 0; e < d; e++) {
          if (b = c[e], b.classify && !(b.enemyBig && 1 >= b.hp) && ("enemy" === b.classify || "obstacle" === b.classify)) {
            if (1 === b.dynamicType) var f = b.pos.x / Box2D.SCALE;
            var f = 1 === b.dynamicType ? b.pos.x / Box2D.SCALE : b.pos.x,
              j = this.origPos,
              m = 0,
              m = j > f ? f + b.size.x : f,
              f = Math.abs(j - m);
            125 >= f && b.destroy();
          }
        } else {
          ig.game.cameraShake = 0.2;
          ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.lightning1);
          b = null;
          c = ig.game.entities;
          d = c.length;
          for (e = 0; e < d; e++) f = 1 === b.dynamicType ? b.pos.x / Box2D.SCALE : b.pos.x, j = this.origPos, m = j > f ? f + b.size.x : f, f = Math.abs(j - m), 175 >= f && b.destroy();
        }
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.buttons.btn-next-level").requires("impact.entity", "game.entities.buttons.btn").defines(function () {
    EntityBtnNextLevel = EntityBtn.extend({
      logoImg: new ig.Image("media/graphics/game/ui/btn-next.png", 73, 77),
      size: {
        x: 73,
        y: 77
      },
      posOffset: {
        x: 291,
        y: 395
      },
      mainWindow: null,
      zIndex: 3001,
      specialDrawUI: !0,
      update: function () {
        this.parent();
        this.pos.x = this.mainWindow.pos.x + this.posOffset.x;
        this.pos.y = this.mainWindow.pos.y + this.posOffset.y;
      },
      interact: function () {
        ig.game.levelCur_actual + 1 < ig.game.episodeLevelLim ? (ig.game.levelCur += 1, ig.game.levelCur_actual = ig.game.levelCur - 3, ig.game.director.loadLevel(ig.game.levelCur)) : (this.episodeNum - 1 < ig.game.episodeUnlocked.length && (ig.game.episodeUnlocked[this.episodeNum - 1] = !0), ig.game.director.jumpTo(LevelLevelSelect));
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.controllers.gameover-control").requires("impact.entity", "game.entities.buttons.btn-restart", "game.entities.buttons.btn-home", "game.entities.buttons.btn-next-level").defines(function () {
    EntityGameoverControl = ig.Entity.extend({
      windowBox: new ig.Image("media/graphics/game/ui/window-gameover.png"),
      zIndex: 7E3,
      starOff: new ig.Image("media/graphics/game/ui/star-off.png"),
      btnRestart: null,
      btnHome: null,
      btnNextLevel: null,
      stars: [],
      starsEarned: 0,
      specialDrawUI: !0,
      score_Cur: 0,
      score_Tar: 0,
      hiScore_Cur: 0,
      hiScore_Tar: 0,
      newRecord: !1,
      newRecord_FontSize: 0,
      init: function (b, c, d) {
        this.parent(b, c, d);
        c = !1;
        ig.game.currentScore >= ig.game.levelScore[ig.game.levelCur_actual] && (c = !0);
        b = 0 >= ig.game.enemiesLeft ? !0 : !1;
        ig.game.currentScore > ig.game.levelScore[ig.game.levelCur_actual] && (c && b && (this.newRecord = !0), ig.game.levelScore[ig.game.levelCur_actual] = ig.game.currentScore);
        if (b) for (c = 1; 3 >= c; c++) ig.game.currentScore >= ig.game.levelScoreNeeded[ig.game.levelCur_actual][c] && (ig.game.currentScore >= ig.game.levelScore[ig.game.levelCur_actual] && (ig.game.levelStars[ig.game.levelCur_actual] = c), this.starsEarned = c);
        b && 1 <= ig.game.levelStars[ig.game.levelCur_actual] && (this.btnNextLevel = ig.game.spawnEntity(EntityBtnNextLevel, 0, 0, {
          mainWindow: this
        }), ig.game.levelUnlocked[ig.game.levelCur_actual + 1] = 1);
        b && ig.game.levelCur_actual + 1 === ig.game.episodeLevelLim && (b = ig.game.episodeCur + 1, b < ig.game.episodeUnlocked.length && 0 != ig.game.levelsPerEpisode[b] && (ig.game.episodeUnlocked[b] = 1));
        ig.game.saveLevelData();
        this.score_Tar = ig.game.currentScore;
        this.hiScore_Tar = ig.game.levelScore[ig.game.levelCur_actual];
        this._tweenStart();
        ig.game.getEntitiesByType(EntityBtnGamePause)[0].isEnabled = !1;
        ig.game.getEntitiesByType(EntityBtnGameRestart)[0].isEnabled = !1;
        1 <= this.starsEarned ? (this.btnRestart = ig.game.spawnEntity(EntityBtnRestart, 0, 0, {
          mainWindow: this
        }), this.btnHome = ig.game.spawnEntity(EntityBtnHome, 0, 0, {
          mainWindow: this
        })) : (this.btnRestart = ig.game.spawnEntity(EntityBtnRestart, 0, 0, {
          mainWindow: this,
          posOffset: {
            x: 272,
            y: 395
          }
        }), this.btnHome = ig.game.spawnEntity(EntityBtnHome, 0, 0, {
          mainWindow: this,
          posOffset: {
            x: 101,
            y: 395
          }
        }));
      },
      update: function () {
        this.parent();
      },
      draw: function (b) {
        if (b) {
          b = ig.system.context;
          b.save();
          b.globalAlpha = 0.4;
          b.beginPath();
          b.rect(0, 0, ig.system.width, ig.system.height);
          b.fillStyle = "#000000";
          b.fill();
          b.restore();
          this.windowBox.draw(this.pos.x, this.pos.y);
          this.starOff.draw(this.pos.x + 74, this.pos.y + 123);
          this.starOff.draw(this.pos.x + 177, this.pos.y + 138);
          this.starOff.draw(this.pos.x + 280, this.pos.y + 123);
          b = ig.system.context;
          b.save();
          var c = 1 <= this.starsEarned ? _STRINGS.UI.Complete : _STRINGS.UI.Fail;
          b.font = "47px soupofjustice, Helvetica, Verdana";
          b.globalAlpha = 0.6;
          b.fillStyle = "#ffffff";
          b.textAlign = "center";
          b.fillText(c, 480, this.pos.y + 74);
          b.globalAlpha = 1;
          b.fillStyle = "#755ec0";
          b.fillText(c, 480, this.pos.y + 69);
          b.font = "42px soupofjustice, Helvetica, Verdana";
          b.fillStyle = "#ffffff";
          b.fillText(_STRINGS.UI.Score + Math.floor(this.score_Cur), 480, this.pos.y + 290);
          b.font = "28px soupofjustice, Helvetica, Verdana";
          b.fillStyle = "#ffffff";
          b.fillText(_STRINGS.UI.HighScore + Math.floor(this.hiScore_Cur), 480, this.pos.y + 343);
          b.font = this.newRecord_FontSize + "px soupofjustice, Helvetica, Verdana";
          b.fillStyle = "#ffffff";
          b.fillText(_STRINGS.UI.NewRecord, 480, this.pos.y + 376);
          b.restore();
          for (b = 0; b < this.stars.length; b++) this.stars[b].draw(!0);
          this.btnRestart.draw(!0);
          this.btnHome.draw(!0);
          this.btnNextLevel && this.btnNextLevel.draw(!0);
        }
      },
      tweener: null,
      tweener2: null,
      _tweenStart: function () {
        this.tweener = this.tween({
          pos: {
            x: 267,
            y: 0
          }
        }, 0.5, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut,
          onComplete: function () {
            this.entity.spawnStars();
            this.entity._tweenStart_2();
            this.entity._tweenStart_3();
          }
        });
        this.tweener.start();
      },
      spawnStars: function () {
        1 <= this.starsEarned && this.stars.push(ig.game.spawnEntity(EntityGameoverStar, 340, 123));
        2 <= this.starsEarned && this.stars.push(ig.game.spawnEntity(EntityGameoverStar, 443, 139, {
          delay: 0.35
        }));
        3 <= this.starsEarned && this.stars.push(ig.game.spawnEntity(EntityGameoverStar, 546, 123, {
          delay: 0.7
        }));
      },
      _tweenStart_2: function () {
        this.tweener = this.tween({
          score_Cur: this.score_Tar
        }, 0.5, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut,
          onComplete: function () {
            this.entity.newRecord && this.entity._tweenStart_4();
          }
        });
        this.tweener.start();
      },
      _tweenStart_3: function () {
        this.tweener2 = this.tween({
          hiScore_Cur: this.hiScore_Tar
        }, 0.5, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut,
          onComplete: function () {}
        });
        this.tweener2.start();
      },
      _tweenStart_4: function () {
        this.tweener = this.tween({
          newRecord_FontSize: 28
        }, 0.5, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut,
          onComplete: function () {}
        });
        this.tweener.start();
      }
    });
    EntityGameoverStar = ig.Entity.extend({
      starOn: new ig.Image("media/graphics/game/ui/star-on.png"),
      imgSize: {
        x: 95,
        y: 93
      },
      zIndex: 4E3,
      scaling: 0,
      delay: 0,
      hasStarted: !1,
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.setScale(this.scaling, this.scaling);
      },
      update: function () {
        this.parent();
        if (!this.hasStarted && (this.delay -= ig.system.tick, 0 >= this.delay)) {
          ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.star_2);
          this._tweenStart();
          for (var b = 1; 10 >= b; b++) ig.game.spawnEntity(EntityNewStar, this.pos.x + this.imgSize.x / 2, this.pos.y + this.imgSize.y / 2, {
            moveAngle: 45 * Math.random()
          }), ig.game.spawnEntity(EntityNewStar, this.pos.x + this.imgSize.x / 2, this.pos.y + this.imgSize.y / 2, {
            moveAngle: 45 * Math.random() + 90
          }), ig.game.spawnEntity(EntityNewStar, this.pos.x + this.imgSize.x / 2, this.pos.y + this.imgSize.y / 2, {
            moveAngle: 45 * Math.random() + 180
          }), ig.game.spawnEntity(EntityNewStar, this.pos.x + this.imgSize.x / 2, this.pos.y + this.imgSize.y / 2, {
            moveAngle: 45 * Math.random() + 270
          });
          this.hasStarted = !0;
        }
      },
      draw: function (b) {
        b && (b = ig.system.context, b.save(), b.drawImage(this.starOn.data, this.pos.x + this.imgSize.x * (1 - this.scaling) / 2, this.pos.y + this.imgSize.y * (1 - this.scaling) / 2, this.imgSize.x * this.scaling, this.imgSize.y * this.scaling), b.restore());
      },
      tweener: null,
      _tweenStart: function () {
        this.tweener = this.tween({
          scaling: 1
        }, 0.35, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut
        });
        this.tweener.start();
      }
    });
    EntityNewStar = ig.Entity.extend({
      star: new ig.Image("media/graphics/game/ui/star-plain.png"),
      imgSize: {
        x: 24,
        y: 24
      },
      scaling: 0.1,
      moveAngle: 0,
      speed: 0,
      zIndex: 4003,
      specialDrawUI: !0,
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.setScale(this.scaling, this.scaling);
        this.speed = 10 * Math.random() + 5;
        this.tweenStart();
      },
      update: function () {
        this.parent();
        this.pos.x += this.speed * Math.cos(this.moveAngle * Math.PI / 180);
        this.pos.y += this.speed * Math.sin(this.moveAngle * Math.PI / 180);
      },
      draw: function (b) {
        b && (b = ig.system.context, b.save(), b.drawImage(this.star.data, this.pos.x, this.pos.y, this.imgSize.x * this.scaling, this.imgSize.y * this.scaling), b.restore());
      },
      tweener: null,
      tweenStart: function () {
        var b = 1.5 * Math.random(),
          c = 0.3 * Math.random() + 0.5;
        this.tweener = this.tween({
          scaling: c
        }, b, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut
        });
        this.tweener.start();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.level-control").requires("impact.entity", "game.entities.bird", "game.entities.bird-invi", "game.entities.ori-shape", "game.entities.sling", "game.entities.enemy", "game.entities.screen-drag", "game.entities.board-tutorial", "game.entities.objects.cap-shield", "game.entities.objects.thor-lightning", "game.entities.objects.effect", "game.entities.controllers.gameover-control").defines(function () {
    EntityLevelControl = ig.Entity.extend({
      bgList: [new ig.Image("media/graphics/game/ui/background.png"), new ig.Image("media/graphics/game/ui/background-wakanda.png"), new ig.Image("media/graphics/game/ui/background-volcano.png"), new ig.Image("media/graphics/game/ui/background-space.png")],
      bg: new ig.Image("media/graphics/game/ui/background.png"),
      gravityFactor: 0,
      size: {
        x: 50,
        y: 50
      },
      zIndex: 0,
      birdBodyPos1: {
        x: 28.1,
        y: 33.25
      },
      birdBack: {
        x: 0,
        y: 0
      },
      levelState: "",
      uiControl: null,
      birds: [],
      levelCamLimit_X: 0,
      levelCamLimit_Y: 0,
      mode: 0,
      mode_examineDur: 1,
      abilityTargetPos: {
        x: 0,
        y: 0
      },
      canCastAbility: !0,
      portalTemp: null,
      portalEntranceTemp: {
        x: 0,
        y: 0
      },
      portalEntranceMode: !0,
      portalTut: !0,
      init: function (b, c, d) {
        ig.global.wm || (960 < ig.game.maxCameraDistance && (ig.game.screen.x = ig.game.maxCameraDistance - ig.system.width), 0 < ig.game.maxCameraDistance && (ig.game.screen.y = ig.game.maxCameraDistanceY), this.cameraTween_pos = ig.game.screen);
        this.parent(b, c, d);
        if (!ig.global.wm) {
          ig.game.levelControl = this;
          ig.game.gameState = "level";
          this.screenDrag = ig.game.spawnEntity(EntityScreenDrag, 0, 0);
          ig.game.selected = 0;
          this.uiControl = ig.game.spawnEntity(EntityGameUiControl, 0, 0, {
            levelController: this
          });
          ig.game.showTut && (this.showTutorial(), ig.game.gameState = "tutorial", ig.game.showTut = !1);
          this.levelState = "ready";
          ig.game.getEntitiesByType(EntityPointerSelector)[0] || ig.game.spawnEntity(EntityPointerSelector, 50, 50);
          ig.game.levelControl = this;
          ig.game.currentScore = 0;
          ig.game.abilityBar_cur = ig.game.abilityBar_max;
          ig.game.box2dPaused = !1;
          ig.game.maxCameraDistance = this.levelCamLimit_X;
          ig.game.maxCameraDistanceY = this.levelCamLimit_Y;
          ig.game.cameraFocus = null;
          ig.game.markForEndGame = !1;
          ig.game.woodBreakSoundLim = 0;
          ig.game.lastWoodBreakPlay = 0;
          ig.game.enemyDieSoundLim = 0;
          ig.game.lastenemyDiePlay = 0;
          ig.game.enemyDie2SoundLim = 0;
          ig.game.lastenemyDie2Play = 0;
          ig.game.tutorialPause = !1;
          ig.game.tutorialPause_isShown = !1;
          if (960 != ig.game.maxCameraDistance || 0 != ig.game.maxCameraDistanceY) this.uiControl.gameStartBlackFrameAlpha = 1, this.uiControl.btnRestart.isHidden = !0, this.uiControl.btnPause.isHidden = !0;
          if (0 === ig.game.levelCur_actual || 1 === ig.game.levelCur_actual || 2 === ig.game.levelCur_actual || 4 === ig.game.levelCur_actual || 5 === ig.game.levelCur_actual || 7 === ig.game.levelCur_actual || 8 === ig.game.levelCur_actual || 30 === ig.game.levelCur_actual || 31 === ig.game.levelCur_actual || 32 === ig.game.levelCur_actual || 50 === ig.game.levelCur_actual || 51 === ig.game.levelCur_actual || 70 === ig.game.levelCur_actual || 72 === ig.game.levelCur_actual) this.canCastAbility = !1;
          this.bg = this.bgList[ig.game.episodeCur];
        }
      },
      ready: function () {
        var b = ig.game.getEntitiesByType(EntitySlingMaker)[0];
        if (b) {
          this.slingP = b.pos;
          ig.game.spawnEntity(EntitySling, this.slingP.x, this.slingP.y);
          this.birdPos1 = {
            x: this.slingP.x - 4,
            y: this.slingP.y - 70
          };
          var c = {
            x: this.birdPos1.x * Box2D.SCALE,
            y: this.birdPos1.y * Box2D.SCALE
          };
          this.birds.push(ig.game.spawnEntity(EntityBird, this.slingP.x - 4, this.slingP.y - 70, {
            id: 0,
            types: b.piggyTypes[0],
            startPos: c
          }));
          ig.game.selectedType = b.piggyTypes[0];
          for (var d = 1; d < b.piggyNum; d++) this.birds.push(ig.game.spawnEntity(EntityBird, this.slingP.x - 42 * d, this.slingP.y + 17, {
            id: d,
            types: b.piggyTypes[d],
            startPos: c
          }));
        }
        b = ig.game.entities;
        ig.game.enemiesLeft = 0;
        for (d = ig.game.obstaclesLeft = 0; d < b.length; d++) b[d].classify && ("enemy" === b[d].classify && ig.game.enemiesLeft++, "obstacle" === b[d].classify && ig.game.obstaclesLeft++);
        0 === ig.game.levelCur_actual && ig.game.spawnEntity(EntityTutPointer1, 228, 290);
      },
      update: function () {
        if (!ig.global.wm) {
          0 < ig.game.lastWoodBreakPlay && (ig.game.lastWoodBreakPlay -= ig.system.tick);
          0 < ig.game.lastenemyDiePlay && (ig.game.lastenemyDiePlay -= ig.system.tick);
          0 < ig.game.lastenemyDie2Play && (ig.game.lastenemyDie2Play -= ig.system.tick);
          0 === this.mode ? (ig.game.screen.x = ig.game.maxCameraDistance - ig.system.width, ig.game.screen.y = ig.game.maxCameraDistanceY, 0 === ig.game.screen.y ? this.mode = 1 : (this.mode_examineDur -= ig.system.tick, 0 >= this.mode_examineDur && (this.mode = 1, this.cameraTween_pos = ig.game.screen, this.cameraTweenStart_Intro1()))) : 1 === this.mode && (ig.game.screen.x = ig.game.maxCameraDistance - ig.system.width, ig.game.screen.y = 0, 0 !== ig.game.screen.x && (this.mode_examineDur -= ig.system.tick, 0 >= this.mode_examineDur && (this.mode = 2, this.cameraTween_pos = ig.game.screen, this.cameraTweenStart())));
          this.parent();
          if (this.birdStop) {
            for (var b = ig.game.getEntitiesByType(EntityOriShape), c = !0, d = !0, e = 0; e < b.length; e++) 0.1 < b[e].body.GetLinearVelocity().Length() && (c = !1);
            b = ig.game.getEntitiesByType(EntityEnemy);
            for (e = 0; e < b.length; e++) 0.2 < b[e].body.GetLinearVelocity().Length() && (d = !1);
            c && d && (this.birdStop = !1, this.refillBird(), this.levelState = "ready");
          }
          if (2 === ig.game.levelCur_actual || 5 === ig.game.levelCur_actual || 8 === ig.game.levelCur_actual || 30 === ig.game.levelCur_actual || 32 === ig.game.levelCur_actual || 50 === ig.game.levelCur_actual || 51 === ig.game.levelCur_actual || 70 === ig.game.levelCur_actual || 72 === ig.game.levelCur_actual) if (this.birdDragging && !ig.game.tutorialPause && !ig.game.tutorialPause_isShown && (2 === ig.game.levelCur_actual && 500 <= this.birdDragging.pos.x || 5 === ig.game.levelCur_actual && 400 <= this.birdDragging.pos.x || 8 === ig.game.levelCur_actual && 660 <= this.birdDragging.pos.x || 30 === ig.game.levelCur_actual && 500 <= this.birdDragging.pos.x || 32 === ig.game.levelCur_actual && 700 <= this.birdDragging.pos.x || 50 === ig.game.levelCur_actual && 400 <= this.birdDragging.pos.x || 51 === ig.game.levelCur_actual && 400 <= this.birdDragging.pos.x || 70 === ig.game.levelCur_actual && 500 <= this.birdDragging.pos.x || 72 === ig.game.levelCur_actual && 500 <= this.birdDragging.pos.x)) if (ig.game.tutorialPause = !0, ig.game.tutorialPause_isShown = !0, ig.game.box2dPaused = !0, e = ig.game.levelCur_actual + 1, b = ig.game.getEntitiesByType(EntityGameUiText)[0], 32 === ig.game.levelCur_actual ? (b.text1 = _STRINGS.UI["tut" + e + ".7"], b.text2 = _STRINGS.UI["tut" + e + ".8"]) : (b.text1 = _STRINGS.UI["tut" + e + ".3"], b.text2 = _STRINGS.UI["tut" + e + ".4"]), b.tweenStart_uiText(!0, -1), 8 === ig.game.levelCur_actual || 32 === ig.game.levelCur_actual) ig.game.levelControl.birdDragging.firstContact ? ig.game.director.loadLevel(ig.game.levelCur) : (ig.game.getEntitiesByType(EntityTargeter)[0].kill(), ig.game.spawnEntity(EntityTutPointer, 732, 196, {
            isFixedPos: !0
          }));
          0 < this.abilityMode_delay && (this.abilityMode_delay -= ig.system.tick);
          if ("fire" === ig.game.levelControl.levelState && !this.birdDragging.usedAbility && this.birdDragging.isAlive && this.canCastAbility) {
            if (ig.input.pressed("click")) if (b = ig.game.getEntitiesByType(EntityPointer)[0], b.refreshPos(), (0 < ig.game.abilityBar_cur || "i" == this.birdDragging.name) && !this.birdDragging.isLanded) {
              if (!ig.game.abilityMode && "c" != this.birdDragging.name && "h" != this.birdDragging.name) {
                if (ig.game.box2dPaused && !ig.game.tutorialPause) return;
                ig.game.abilityMode = !0;
                ig.game.tutorialPause = !1;
                ig.game.box2dPaused = !0;
                if ("a" == this.birdDragging.name) {
                  b = ig.game.entities;
                  for (e = 0; e < b.length; e++) {
                    var f = b[e];
                    if (f.classify && "enemy" == f.classify && !f.isDead) {
                      var j = this.birdDragging.pos.x + this.size.x / 2,
                        m = this.birdDragging.pos.y + this.size.y / 2;
                      f.targeterAdj ? (c = f.pos.x + f.targeterAdj.x, d = f.pos.y + f.targeterAdj.y) : (c = f.pos.x, d = f.pos.y);
                      f.flipped && (c += f.size.x);
                      f = j - c;
                      m -= d;
                      m = Math.sqrt(f * f + m * m);
                      470 >= m && ig.game.spawnEntity(EntityTargeterRed, c, d);
                    }
                  }
                } else if ("b" == this.birdDragging.name) {
                  b = ig.game.entities;
                  for (e = 0; e < b.length; e++) f = b[e], f.classify && "enemy" == f.classify && !f.isDead && (f.targeterAdj ? (c = f.pos.x + f.targeterAdj.x, d = f.pos.y + f.targeterAdj.y) : (c = f.pos.x, d = f.pos.y), f.flipped && (c += f.size.x), ig.game.spawnEntity(EntityTargeterRed, c, d));
                } else if ("d" == this.birdDragging.name) {
                  b = ig.game.entities;
                  for (e = 0; e < b.length; e++) f = b[e], f.classify && "enemy" == f.classify && !f.isDead && (j = this.birdDragging.pos.x + this.size.x / 2, m = this.birdDragging.pos.y + this.size.y / 2, f.targeterAdj ? (c = f.pos.x + f.targeterAdj.x, d = f.pos.y + f.targeterAdj.y) : (c = f.pos.x, d = f.pos.y), f.flipped && (c += f.size.x), f = j - c, m -= d, m = Math.sqrt(f * f + m * m), 370 >= m && ig.game.spawnEntity(EntityTargeterRed, c, d));
                } else if ("e" == this.birdDragging.name) {
                  b = ig.game.entities;
                  for (e = 0; e < b.length; e++) f = b[e], f.classify && "enemy" == f.classify && !f.isDead && (j = this.birdDragging.pos.x + this.size.x / 2, m = this.birdDragging.pos.y + this.size.y / 2, f.targeterAdj ? (c = f.pos.x + f.targeterAdj.x, d = f.pos.y + f.targeterAdj.y) : (c = f.pos.x, d = f.pos.y), f.flipped && (c += f.size.x), f = j - c, m -= d, m = Math.sqrt(f * f + m * m), 370 >= m && ig.game.spawnEntity(EntityTargeterRed, c, d));
                } else if ("i" == this.birdDragging.name) {
                  b = ig.game.entities;
                  for (e = 0; e < b.length; e++) f = b[e], f.classify && "enemy" == f.classify && !f.isDead && (f.targeterAdj ? (c = f.pos.x + f.targeterAdj.x, d = f.pos.y + f.targeterAdj.y) : (c = f.pos.x, d = f.pos.y), f.flipped && (c += f.size.x), ig.game.spawnEntity(EntityTargeterRed, c, d));
                }
                this.abilityMode_Start();
                ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.abilityMode);
              } else if (this.abilityMode_alpha >= this.abilityMode_alphaMax && !this.birdDragging.usedAbility && this.uiControl.gameUiText.tweenDone) 0 >= this.abilityMode_delay && (this.abilityTargetPos = b.pos, "g" != this.birdDragging.name && (ig.game.spawnEntity(EntityTargeter, b.pos.x - 30, b.pos.y - 30), this.abilityMode_End()));else if ("c" === this.birdDragging.name && !this.birdDragging.usedAbility) {
                if (ig.game.box2dPaused && !ig.game.tutorialPause) return;
                ig.game.tutorialPause = !1;
                ig.game.box2dPaused = !1;
                ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.zap);
                e = new Box2D.Common.Math.b2Vec2(0, 0);
                this.birdDragging.body.SetLinearVelocity(e);
                this.birdDragging.groundSlam = !0;
                ig.game.abilityBar_cur--;
                e = ig.game.getEntitiesByType(EntityGameUiControl)[0];
                e.tweenAbilityBar(0.33);
                0 > ig.game.abilityBar_cur && (ig.game.abilityBar_cur = 0);
                this.birdDragging.currentAnim = this.birdDragging.anims.attack;
                this.birdDragging.usedAbility = !0;
                ig.game.getEntitiesByType(EntityGameUiText);
              } else if ("h" === this.birdDragging.name && !this.birdDragging.usedAbility) {
                if (ig.game.box2dPaused && !ig.game.tutorialPause) return;
                ig.game.tutorialPause = !1;
                ig.game.box2dPaused = !1;
                e = new Box2D.Common.Math.b2Vec2(0, 0);
                this.birdDragging.body.SetLinearVelocity(e);
                this.birdDragging.groundSlam = !0;
                ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.bp_dash);
                ig.game.abilityBar_cur--;
                e = ig.game.getEntitiesByType(EntityGameUiControl)[0];
                e.tweenAbilityBar(0.33);
                0 > ig.game.abilityBar_cur && (ig.game.abilityBar_cur = 0);
                this.birdDragging.currentAnim = this.birdDragging.anims.attack;
                this.birdDragging.usedAbility = !0;
                ig.game.getEntitiesByType(EntityGameUiText);
              } else {
                if ("f" === this.birdDragging.name && !this.birdDragging.usedAbility) {
                  if (ig.game.box2dPaused && !ig.game.tutorialPause) return;
                  e = this.birdDragging.body.GetPosition();
                  this.abilityTargetPos = b.pos;
                  b = Math.atan2(this.abilityTargetPos.y - this.birdDragging.pos.y, this.abilityTargetPos.x - this.birdDragging.pos.x);
                  this.birdDragging.body.SetPositionAndAngle(e, b);
                  ig.game.box2dPaused = !0;
                  ig.game.abilityBar_cur--;
                  e = ig.game.getEntitiesByType(EntityGameUiControl)[0];
                  e.tweenAbilityBar(0.33);
                  0 > ig.game.abilityBar_cur && (ig.game.abilityBar_cur = 0);
                  this.birdDragging.currentAnim = this.birdDragging.anims.special;
                  this.birdDragging.currentAnim.gotoFrame(0);
                  ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.capMarvel_charge);
                  this.birdDragging.usedAbility = !0;
                  ig.game.getEntitiesByType(EntityGameUiText);
                }
              }
            } else this.birdDragging.isLanded ? 0 >= this.uiControl.cannotUseAbility_Counter && (this.uiControl.cannotUseAbility_Counter = 5) : 0 >= this.uiControl.notEnoughAbility_Counter && (this.uiControl.notEnoughAbility_Counter = 2.5);
            if (ig.input.released("click") && (b = ig.game.getEntitiesByType(EntityPointer)[0], b.refreshPos(), this.abilityTargetPos = b.pos, "g" === this.birdDragging.name && this.uiControl.gameUiText.tweenDone)) {
              if (this.screenDrag.drStrangeDraggingDur < this.screenDrag.drStrangeDraggingDurMin) {
                if (51 === ig.game.levelCur_actual && this.portalTut) {
                  this.portalTut = !1;
                  ig.game.abilityMode = !0;
                  b = ig.game.getEntitiesByType(EntityGameUiText)[0];
                  b.text1 = _STRINGS.UI["tut52.5"];
                  b.text2 = _STRINGS.UI["tut52.6"];
                  b.tweenStart_uiText(!0, 6);
                  return;
                }
                if (this.portalEntranceMode) this.portalEntranceTemp = this.abilityTargetPos, this.portalTemp = ig.game.spawnEntity(EntityPortal, this.abilityTargetPos.x - 20, this.abilityTargetPos.y - 90, {
                  isEntrance: !0
                }), ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.drStrange_portal), this.portalEntranceMode = !1, this.birdDragging.currentAnim = this.birdDragging.anims.attack, 51 === ig.game.levelCur_actual ? ((e = ig.game.getEntitiesByType(EntityTutPointer)[0]) && e.kill(), b = ig.game.getEntitiesByType(EntityGameUiText)[0], b.text1 = _STRINGS.UI["tut52.7"], b.text2 = _STRINGS.UI["tut52.8"], b.tweenStart_uiText(!0, 6), ig.game.spawnEntity(EntityTutPointer, 792, 232, {
                  isFixedPos: !0
                })) : (b = ig.game.getEntitiesByType(EntityGameUiText)[0], b.text1 = _STRINGS.UI.selTarget_exit, b.text2 = "", b.fillStyle = "#ffffff", b.isOn = !0, b.tweenStart_uiText(!0, 6));else {
                  this.portalTemp.exitPos = this.abilityTargetPos;
                  ig.game.spawnEntity(EntityPortal, this.abilityTargetPos.x - 20, this.abilityTargetPos.y - 90);
                  ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.drStrange_portal);
                  this.portalEntranceMode = !0;
                  this.birdDragging.currentAnim = this.birdDragging.anims.attack;
                  this.birdDragging.usedAbility = !0;
                  "i" != this.birdDragging.name && (ig.game.abilityBar_cur--, e = ig.game.getEntitiesByType(EntityGameUiControl)[0], e.tweenAbilityBar(0.33), 0 > ig.game.abilityBar_cur && (ig.game.abilityBar_cur = 0));
                  b = ig.game.getEntitiesByType(EntityGameUiText)[0];
                  b.tweenStart_uiText(!1, ig.game.selectedType);
                  b = ig.game.entities;
                  for (e = b.length - 1; 0 <= e; e--) b[e].uiTargeter && b[e].kill();
                }
              }
              this.screenDrag.drStrangeDraggingDur = 0;
              this.screenDrag.drStrangeDragging = !1;
            }
          }
          ig.game.markForEndGame && "ready" == this.levelState && 0 >= ig.game.enemiesLeft && ((e = ig.game.getEntitiesByType(EntityLevelControl)[0]) && (e.isGameEnding || e.endingGame()), ig.game.markForEndGame = !1);
          this.cameraTwenUpdate();
          this.isGameOver && this.endingUpdate();
        }
      },
      abilityMode_tween: null,
      abilityMode_alpha: 0,
      abilityMode_alphaMax: 0.07,
      abilityMode_delay: 0.5,
      abilityMode_Start: function () {
        this.abilityMode_tween = this.tween({
          abilityMode_alpha: this.abilityMode_alphaMax
        }, 0.2, {
          entity: this,
          easing: ig.Tween.Easing.Quadratic.EaseOut,
          onComplete: function () {
            var b = ig.game.getEntitiesByType(EntityGameUiText)[0];
            2 === ig.game.levelCur_actual ? (b.text1 = _STRINGS.UI["tut3.5"], b.text2 = _STRINGS.UI["tut3.6"], b.tweenStart_uiText(!0, -1), ig.game.spawnEntity(EntityTutPointer, 892, 112, {
              isFixedPos: !0
            })) : 5 === ig.game.levelCur_actual ? (b.text1 = _STRINGS.UI["tut6.5"], b.text2 = _STRINGS.UI["tut6.6"], b.tweenStart_uiText(!0, -1), ig.game.spawnEntity(EntityTutPointer, 892, 112, {
              isFixedPos: !0
            })) : 30 === ig.game.levelCur_actual ? (b.text1 = _STRINGS.UI["tut31.5"], b.text2 = _STRINGS.UI["tut31.6"], b.tweenStart_uiText(!0, 1), ig.game.spawnEntity(EntityTutPointer, 831, 290, {
              isFixedPos: !0
            })) : 50 === ig.game.levelCur_actual ? (b.text1 = _STRINGS.UI["tut51.5"], b.text2 = _STRINGS.UI["tut51.6"], b.tweenStart_uiText(!0, -1), ig.game.spawnEntity(EntityTutPointer, 892, 112, {
              isFixedPos: !0
            })) : 6 === ig.game.selectedType ? 51 !== ig.game.levelCur_actual && (b.text1 = _STRINGS.UI.selTarget_entrance, b.text2 = "", b.fillStyle = "#ffffff", b.isOn = !0, b.tweenStart_uiText(!0, ig.game.selectedType)) : 70 === ig.game.levelCur_actual ? (b.text1 = _STRINGS.UI["tut71.5"], b.text2 = _STRINGS.UI["tut71.6"], b.tweenStart_uiText(!0, 1), ig.game.spawnEntity(EntityTutPointer, 831, 290, {
              isFixedPos: !0
            })) : 72 === ig.game.levelCur_actual ? (b.text1 = _STRINGS.UI["tut73.5"], b.text2 = _STRINGS.UI["tut73.6"], b.tweenStart_uiText(!0, 1), ig.game.spawnEntity(EntityTutPointer, 861, 180, {
              isFixedPos: !0
            })) : (b.text1 = 3 === ig.game.selectedType ? _STRINGS.UI.selTarget_antman : 8 === ig.game.selectedType ? _STRINGS.UI.selTarget_web : _STRINGS.UI.selTarget, b.text2 = "", b.fillStyle = "#ffffff", b.isOn = !0, b.tweenStart_uiText(!0, ig.game.selectedType));
          }
        });
        this.abilityMode_tween.start();
      },
      abilityMode_End: function () {
        this.abilityMode_tween = this.tween({
          abilityMode_alpha: 0
        }, 0.2, {
          entity: this,
          easing: ig.Tween.Easing.Quadratic.EaseOut,
          onComplete: function () {
            this.entity.abilityMode_Cast();
          }
        });
        this.abilityMode_tween.start();
      },
      abilityMode_Cast: function () {
        var b = ig.game.getEntitiesByType(EntityPointer)[0];
        if ("a" === this.birdDragging.name) {
          ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.shieldThrow);
          ig.game.spawnEntity(EntityCapShield, this.birdDragging.pos.x, this.birdDragging.pos.y, {
            targetPoint: {
              x: this.abilityTargetPos.x,
              y: this.abilityTargetPos.y
            }
          });
          this.birdDragging.lockFacing = !0;
          this.birdDragging.lockFacingPos = b.pos;
          for (var c = ig.game.entities, b = 0; b < c.length; b++) {
            var d = c[b];
            "targeterRed" == d.name && d.runTween_destroy();
          }
        } else if ("b" === this.birdDragging.name) {
          ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.lazer);
          ig.game.spawnEntity(EntityLazer, this.birdDragging.pos.x, this.birdDragging.pos.y, {
            targetPoint: {
              x: this.abilityTargetPos.x,
              y: this.abilityTargetPos.y
            }
          });
          this.birdDragging.lockFacing = !0;
          this.birdDragging.lockFacingPos = b.pos;
          c = ig.game.entities;
          for (b = 0; b < c.length; b++) d = c[b], "targeterRed" == d.name && d.runTween_destroy();
        } else if ("g" !== this.birdDragging.name) if ("c" === this.birdDragging.name) ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.zap), c = new Box2D.Common.Math.b2Vec2(0, 0), this.birdDragging.body.SetLinearVelocity(c), this.birdDragging.groundSlam = !0;else if ("h" === this.birdDragging.name) c = new Box2D.Common.Math.b2Vec2(0, 0), this.birdDragging.body.SetLinearVelocity(c), this.birdDragging.groundSlam = !0;else if ("f" === this.birdDragging.name) c = this.birdDragging.body.GetPosition(), this.abilityTargetPos = b.pos, b = Math.atan2(this.abilityTargetPos.y - this.birdDragging.pos.y, this.abilityTargetPos.x - this.birdDragging.pos.x), this.birdDragging.body.SetPositionAndAngle(c, b), ig.game.box2dPaused = !0;else if ("e" === this.birdDragging.name) {
          c = new Box2D.Common.Math.b2Vec2(0, 0);
          this.birdDragging.body.SetLinearVelocity(c);
          this.birdDragging.bpDash = !0;
          this.birdDragging.bpDash_angle = 180 * Math.atan2(this.abilityTargetPos.y - this.birdDragging.pos.y, this.abilityTargetPos.x - this.birdDragging.pos.x) / Math.PI;
          ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.bp_dash);
          c = ig.game.getEntitiesByType(EntityEnemyBig);
          for (b = 0; b < c.length; b++) c[b].lastDamageType = "";
          c = ig.game.entities;
          for (b = 0; b < c.length; b++) d = c[b], "targeterRed" == d.name && d.runTween_destroy();
        } else if ("d" === this.birdDragging.name) {
          c = new Box2D.Common.Math.b2Vec2(0, 0);
          this.birdDragging.body.SetLinearVelocity(c);
          this.abilityTargetPos.x -= 20;
          this.abilityTargetPos.y -= 20;
          this.birdDragging.amDash_angle = 180 * Math.atan2(this.abilityTargetPos.y - this.birdDragging.pos.y, this.abilityTargetPos.x - this.birdDragging.pos.x) / Math.PI;
          this.birdDragging.scaleTween({
            x: 0.1,
            y: 0.1
          }, 1);
          ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.antMan_shrink);
          c = this.abilityTargetPos.x - this.birdDragging.pos.x;
          b = this.abilityTargetPos.y - this.birdDragging.pos.y;
          c = Math.sqrt(c * c + b * b) * Box2D.SCALE;
          this.birdDragging.amDash_dist = c;
          ig.game.box2dPaused = !0;
          this.birdDragging.amDash_starting = !0;
          c = ig.game.getEntitiesByType(EntityEnemyBig);
          for (b = 0; b < c.length; b++) c[b].lastDamageType = "";
          c = ig.game.entities;
          for (b = 0; b < c.length; b++) d = c[b], "targeterRed" == d.name && d.runTween_destroy();
        } else if ("i" === this.birdDragging.name) {
          ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.spiderMan_web);
          ig.game.spawnEntity(EntityWebMissile, this.birdDragging.pos.x, this.birdDragging.pos.y, {
            targetPoint: {
              x: this.abilityTargetPos.x,
              y: this.abilityTargetPos.y
            },
            dragSpiderMan: this.birdDragging
          });
          this.birdDragging.lockFacing = !0;
          this.birdDragging.lockFacingPos = b.pos;
          this.birdDragging.smDrag = !0;
          c = ig.game.entities;
          for (b = 0; b < c.length; b++) d = c[b], "targeterRed" == d.name && d.runTween_destroy();
        }
        "i" != this.birdDragging.name && (ig.game.abilityBar_cur--, ig.game.getEntitiesByType(EntityGameUiControl)[0].tweenAbilityBar(0.33), 0 > ig.game.abilityBar_cur && (ig.game.abilityBar_cur = 0));
        "f" != this.birdDragging.name ? this.birdDragging.currentAnim = this.birdDragging.anims.attack : (ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.capMarvel_charge), this.birdDragging.currentAnim = this.birdDragging.anims.special, this.birdDragging.currentAnim.gotoFrame(0));
        this.birdDragging.usedAbility = !0;
        "g" != this.birdDragging.name && "f" != this.birdDragging.name && (ig.game.abilityMode = !1, ig.game.box2dPaused = !1);
        ig.game.getEntitiesByType(EntityGameUiText)[0].tweenStart_uiText(!1, ig.game.selectedType);
        c = ig.game.entities;
        for (b = c.length - 1; 0 <= b; b--) c[b].uiTargeter && c[b].kill();
      },
      refillBird: function () {
        for (var b = 0, c = !1, d = 0; d < this.birds.length; d++) if (!this.birds[d].fired) {
          b = d;
          c = !0;
          break;
        }
        c || this.endingGame();
        if (this.birds[b]) {
          this.birds[b].pos.x = this.birdPos1.x;
          this.birds[b].pos.y = this.birdPos1.y;
          this.birds[b].body.SetPositionAndAngle(this.birdBodyPos1);
          ig.game.selected = this.birds[b].id;
          ig.game.selectedType = this.birds[b].types;
          b = ig.game.getEntitiesByType(EntityEnemyBig);
          for (d = 0; d < b.length; d++) b[d].lastDamageType = "";
          ig.game.markForEndGame && 0 >= ig.game.enemiesLeft && ((d = ig.game.getEntitiesByType(EntityLevelControl)[0]) && (d.isGameEnding || d.endingGame()), ig.game.markForEndGame = !1);
        }
        this.cameraTweenStart();
        this.isGameOver || (ig.game.levelControl.uiControl.btnRestart.isHidden = !1, ig.game.levelControl.uiControl.btnPause.isHidden = !1);
      },
      showTutorial: function () {
        this.tut = ig.game.spawnEntity(EntityBoardTutorial, 200, 1E3);
      },
      closeTutorialClick: function () {
        this.tut && this.tut.tweenOut(-1, 1E3);
      },
      draw: function () {
        if (!ig.global.wm) {
          this.parent();
          var b = ig.system.context;
          b.save();
          b.beginPath();
          b.rect(0, 0, ig.system.width, ig.system.height);
          b.fillStyle = "#559efa";
          b.fill();
          b.restore();
          this.bg.draw(-ig.game.screen.x, -ig.game.screen.y - 300);
          this.bg.draw(-ig.game.screen.x + 960, -ig.game.screen.y - 300);
          this.bg.draw(-ig.game.screen.x + 1920, -ig.game.screen.y - 300);
          this.isGameEnding && this.endingDraw();
        }
      },
      countBeforeEndingGame: 0.5,
      isGameOver: !1,
      isGameEnding: !1,
      gameOverSpawned: !1,
      endTween: null,
      endpiggyId: 0,
      endpiggyPos: {
        x: 0,
        y: 0
      },
      firstPiggy: !0,
      end_score_gained_per_piggy: 150,
      cameraTween_endGame: null,
      cameraTween_pos: {
        x: 0,
        y: 0
      },
      cameraTweening: !1,
      endingGame: function () {
        this.isGameOver || (this.isGameEnding = !0, this.isGameOver = ig.game.box2dPaused = !0, this.cameraTween_pos = ig.game.screen, this.uiControl.btnPause.isHidden = !0, this.uiControl.btnRestart.isHidden = !0);
      },
      cameraTweenStart: function () {
        if (!this.cameraTweening) {
          var b = this.isGameOver ? 0.5 : 1.25;
          this.cameraTweening = !0;
          this.cameraTween_endGame = this.tween({
            cameraTween_pos: {
              x: 0,
              y: 0
            }
          }, b, {
            entity: this,
            easing: ig.Tween.Easing.Quadratic.EaseOut,
            onComplete: function () {
              this.entity.cameraTweening = !1;
              this.entity.isGameOver ? this.entity.endingTweenFinished() : this.entity.uiControl.tweenBlackBorders();
            }
          });
          this.cameraTween_endGame.start();
        }
      },
      cameraTweenStart_Intro1: function () {
        if (!this.cameraTweening) {
          var b = {
              x: ig.game.maxCameraDistance - ig.system.width,
              y: 0
            },
            c = this.isGameOver ? 1 : 1.25;
          this.cameraTweening = !0;
          this.cameraTween_endGame = this.tween({
            cameraTween_pos: b
          }, c, {
            entity: this,
            easing: ig.Tween.Easing.Quadratic.EaseOut,
            onComplete: function () {
              this.entity.cameraTweening = !1;
              this.mode_examineDur = this.entity.mode = 1;
            }
          });
          this.cameraTween_endGame.start();
        }
      },
      cameraTwenUpdate: function () {
        ig.game.screen = this.cameraTween_pos;
      },
      endingUpdate: function () {
        0 < this.countBeforeEndingGame && (this.countBeforeEndingGame -= ig.system.tick, 0 >= this.countBeforeEndingGame && this.cameraTweenStart());
      },
      endingDraw: function () {
        var b = ig.system.context;
        b.save();
        b.restore();
      },
      endingTween: function () {
        this.endTween = this.tween({
          endpiggyPos: {
            x: this.endpiggyPos.x,
            y: this.endpiggyPos.y - 50
          }
        }, 0.5, {
          entity: this,
          easing: ig.Tween.Easing.Quadratic.EaseOut,
          onComplete: function () {
            this.entity.endingTweenFinished();
          }
        });
        this.endTween.start();
      },
      endingTweenFinished: function () {
        ig.game.markForEndGame && 0 >= ig.game.enemiesLeft && (this.isGameEnding || this.endingGame(), ig.game.markForEndGame = !1);
        for (var b = null, c = this.endpiggyId; c < this.birds.length; c++) {
          var d = this.birds[c];
          if (d && d.isAlive) {
            ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.star_1);
            b = d;
            this.endpiggyId = c + 1;
            break;
          }
        }
        b ? (this.firstPiggy ? (this.endpiggyPos.x = b.pos.x + 25, this.endpiggyPos.y = b.pos.y - 80, this.firstPiggy = !1) : (this.endpiggyPos.x = b.pos.x, this.endpiggyPos.y = b.pos.y - 20), ig.game.gainScore(this.end_score_gained_per_piggy, b, !1, !1), this.endingTween(), b.jumpAround_flipJump = !0, b.jumpAround_nextJump = 0) : this.spawnGameOver();
      },
      spawnGameOver: function () {
        this.gameOverSpawned || (this.isGameEnding = !1, ig.game.spawnEntity(EntityGameoverControl, 267, 1E3), this.gameOverSpawned = !0);
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.ground").requires("plugins.box2d.entity").defines(function () {
    EntityGround = ig.Box2DEntity.extend({
      name: "ground",
      gravityFactor: 0,
      type: ig.Entity.TYPE.B,
      checkAgainst: ig.Entity.TYPE.B,
      zIndex: 500,
      sc: 2,
      size: {
        x: 960,
        y: 144
      },
      scX: 1,
      scY: 1,
      box2dType: 2,
      dynamicType: 1,
      density: 0,
      friction: 0,
      restitution: 0,
      mass: 0,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      animSheet: new ig.AnimationSheet("media/graphics/game/objects/ground.png", 960, 144),
      vertices: [{
        x: -48,
        y: -7.2
      }, {
        x: 48,
        y: -7.2
      }, {
        x: 48,
        y: 7.2
      }, {
        x: -48,
        y: 7.2
      }],
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.addAnim("idle", 1, [0]);
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.obstacles.obstacles").requires("plugins.box2d.entity").defines(function () {
    EntityObstacles = ig.Box2DEntity.extend({
      gravityFactor: 0,
      type: ig.Entity.TYPE.B,
      checkAgainst: ig.Entity.TYPE.B,
      zIndex: 700,
      sc: 2,
      size: {
        x: 46,
        y: 45
      },
      scX: 1,
      scY: 1,
      box2dType: 2,
      dynamicType: 0,
      density: 0.8,
      friction: 0.3,
      restitution: 0.1,
      mass: 0.8,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      classify: "obstacle",
      isDead: !1,
      deathAudioPlay: !1,
      scoreGiven: 0,
      portal_passing: !1,
      portal_pos: {
        x: 0,
        y: 0
      },
      init: function (b, c, d) {
        this.parent(b, c, d);
        this.addAnim("idle", 1, [0]);
      },
      update: function () {
        this.portal_passing && (this.portal_passing = !1, this.body.SetPositionAndAngle(new Box2D.Common.Math.b2Vec2(this.portal_pos.x, this.portal_pos.y), 0));
        this.parent();
        ig.global.wm || (this.isDead && !this.deathAudioPlay && 2 > ig.game.woodBreakSoundLim && (ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.woodBreak), ig.game.woodBreakSoundLim++, this.deathAudioPlay = !0), this.isDead && this.currentAnim.frame == this.currentAnim.sequence.length - 1 && this.kill());
      },
      preSolve: function (b, c) {
        b && b.name && "mace" === b.name && c.SetEnabled(!1);
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.obstacles.obs-steel-box").requires("plugins.box2d.entity", "game.entities.obstacles.obstacles").defines(function () {
    EntityObsSteelBox = EntityObstacles.extend({
      size: {
        x: 46,
        y: 45
      },
      gamePaused: !1,
      box2dType: 2,
      dynamicType: 1,
      density: 0,
      friction: 0,
      restitution: 0,
      mass: 0,
      INERTIA: 0,
      ANGULAR_DAMPING: 0,
      classify: null,
      vertices: [{
        x: -2.95,
        y: -2.95
      }, {
        x: 2.95,
        y: -2.95
      }, {
        x: 2.95,
        y: 2.95
      }, {
        x: -2.95,
        y: 2.95
      }],
      animSheetList: [new ig.AnimationSheet("media/graphics/game/objects/box_steel.png", 59, 59), new ig.AnimationSheet("media/graphics/game/objects/box-steel-wakanda.png", 59, 59), new ig.AnimationSheet("media/graphics/game/objects/box-steel-volcano.png", 59, 59), new ig.AnimationSheet("media/graphics/game/objects/box-steel-space.png", 59, 59)],
      animSheet: null,
      size: {
        x: 59,
        y: 59
      },
      name: "steelBox",
      init: function (b, c, d) {
        ig.global.wm && (ig.game.episodeCur = 0);
        this.animSheet = this.animSheetList[ig.game.episodeCur];
        this.anims.idle = new ig.Animation(this.animSheet, 1, [0]);
        this.addAnim("idle", 1, [0]);
        this.parent(b, c, d);
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.obstacles.obs-wood-barrel").requires("plugins.box2d.entity", "game.entities.obstacles.obstacles").defines(function () {
    EntityObsWoodBarrel = EntityObstacles.extend({
      name: "woodBarrel",
      dynamicType: 0,
      density: 0.8,
      friction: 0.3,
      restitution: 0,
      mass: 0.8,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      vertices: [{
        x: -2.93,
        y: -2.83
      }, {
        x: 2.31,
        y: -2.83
      }, {
        x: 2.26,
        y: 3
      }, {
        x: -2.88,
        y: 3
      }],
      animSheetList: [new ig.AnimationSheet("media/graphics/game/objects/wood-barrel.png", 95, 94), new ig.AnimationSheet("media/graphics/game/objects/wood-barrel-wakanda.png", 95, 94), new ig.AnimationSheet("media/graphics/game/objects/wood-barrel-volcano.png", 95, 94), new ig.AnimationSheet("media/graphics/game/objects/wood-barrel-space.png", 95, 94)],
      animSheet: null,
      size: {
        x: 95,
        y: 94
      },
      deadAnimSheetList: [new ig.AnimationSheet("media/graphics/game/objects/wood-barrel-hit.png", 95, 94), new ig.AnimationSheet("media/graphics/game/objects/wood-barrel-hit-wakanda.png", 95, 94), new ig.AnimationSheet("media/graphics/game/objects/wood-barrel-hit-volcano.png", 95, 94), new ig.AnimationSheet("media/graphics/game/objects/wood-barrel-hit-space.png", 95, 94)],
      deadAnimSheet: null,
      scoreGiven: 10,
      init: function (b, c, d) {
        ig.global.wm && (ig.game.episodeCur = 0);
        this.animSheet = this.animSheetList[ig.game.episodeCur];
        this.deadAnimSheet = this.deadAnimSheetList[ig.game.episodeCur];
        this.anims.idle = new ig.Animation(this.animSheet, 1, [0]);
        this.anims.dead = new ig.Animation(this.deadAnimSheet, 0.05, [0, 1, 2, 3, 4, 5, 6]);
        this.addAnim("idle", 1, [0]);
        this.parent(b, c, d);
        this.anims.dead = new ig.Animation(this.deadAnimSheet, 0.05, [0, 1, 2, 3, 4, 5, 6, 7]);
      },
      beginContact: function (b) {
        if (!b || !b.isDead) b && b.body && 15 < b.body.GetLinearVelocity().Length() && (this.isDead || this.destroy());
      },
      destroy: function () {
        this.isDead || (this.currentAnim = this.anims.dead, this.currentAnim.rewind(), this.isDead = !0, ig.game.spawnEntity(EntityEffect, this.pos.x, this.pos.y), ig.game.gainScore(this.scoreGiven, this));
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.obstacles.obs-wood-circle").requires("plugins.box2d.entity", "game.entities.obstacles.obstacles").defines(function () {
    EntityObsWoodCircle = EntityObstacles.extend({
      name: "woodCircle",
      box2dType: 1,
      dynamicType: 0,
      density: 0.8,
      friction: 0.3,
      restitution: 0,
      mass: 0.2,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      animSheetList: [new ig.AnimationSheet("media/graphics/game/objects/wood-circle.png", 108, 106), new ig.AnimationSheet("media/graphics/game/objects/wood-circle-wakanda.png", 108, 106), new ig.AnimationSheet("media/graphics/game/objects/wood-circle-volcano.png", 108, 106), new ig.AnimationSheet("media/graphics/game/objects/wood-circle-space.png", 108, 106)],
      animSheet: null,
      size: {
        x: 59,
        y: 59
      },
      deadAnimSheetList: [new ig.AnimationSheet("media/graphics/game/objects/wood-circle-hit.png", 108, 106), new ig.AnimationSheet("media/graphics/game/objects/wood-circle-hit-wakanda.png", 108, 106), new ig.AnimationSheet("media/graphics/game/objects/wood-circle-hit-volcano.png", 108, 106), new ig.AnimationSheet("media/graphics/game/objects/wood-circle-hit-space.png", 108, 106)],
      deadAnimSheet: null,
      scoreGiven: 15,
      init: function (b, c, d) {
        ig.global.wm && (ig.game.episodeCur = 0);
        this.animSheet = this.animSheetList[ig.game.episodeCur];
        this.deadAnimSheet = this.deadAnimSheetList[ig.game.episodeCur];
        this.anims.idle = new ig.Animation(this.animSheet, 1, [0]);
        this.anims.dead = new ig.Animation(this.deadAnimSheet, 0.05, [0, 1, 2, 3, 4, 5, 6, 7, 8]);
        this.addAnim("idle", 1, [0]);
        this.parent(b, c, d);
        this.size = {
          x: 108,
          y: 106
        };
        ig.global.wm || (this.body.SetAwake(!1), ig.soundHandler.sfxPlayer.soundList.rolling.loop(!0), ig.soundHandler.sfxPlayer.soundList.rolling.volume(0), ig.soundHandler.sfxPlayer.play("rolling"), this.fadeVol = !1);
      },
      isRolling: !1,
      hasLanded: !1,
      beginContact: function (b) {
        if (b && b.name && !this.isRolling && ("a" === b.name || "b" === b.name || "c" === b.name)) this.body.SetAwake(!0), this.isRolling = !0;
      },
      preSolve: function (b, c) {
        if (b && b.name && ("enemy" === b.name || "woodBarrel" === b.name || "woodBox" === b.name)) c.SetEnabled(!1), b.destroy();
      },
      update: function () {
        this.parent();
        !this.isDead && this.isRolling && 1 >= this.body.GetLinearVelocity().Length() && this.destroy();
        this.isDead && this.currentAnim.frame == this.currentAnim.sequence.length - 1 && this.kill();
        if (ig.game.abilityMode || ig.game.tutorialPause) ig.soundHandler.sfxPlayer.soundList.rolling.volume(0);else if (this.isRolling) {
          var b = this.pos.x - (ig.game.screen.x + ig.system.width / 2),
            c = ig.soundHandler.sfxPlayer.getVolume() / 2 * (Math.abs(this.body.GetLinearVelocity().x) / 15);
          0.5 < c && (c = 0.5);
          0.2 > c && (c = 0.2);
          400 >= Math.abs(b) ? ig.soundHandler.sfxPlayer.soundList.rolling.volume(c) : 600 >= Math.abs(b) ? ig.soundHandler.sfxPlayer.soundList.rolling.volume(c * (600 - Math.abs(b)) / 200) : ig.soundHandler.sfxPlayer.soundList.rolling.volume(0);
        }
        0 < this.body.GetLinearVelocity().y && ig.soundHandler.sfxPlayer.soundList.rolling.volume(0);
        540 < this.pos.y && this.destroy();
      },
      destroy: function () {
        this.isDead || (this.currentAnim = this.anims.dead, this.currentAnim.rewind(), this.isDead = !0, ig.game.spawnEntity(EntityEffect, this.pos.x, this.pos.y), ig.game.gainScore(this.scoreGiven, this), ig.soundHandler.sfxPlayer.stop("rolling"));
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.obstacles.obs-exp-barrel").requires("plugins.box2d.entity", "game.entities.obstacles.obstacles").defines(function () {
    EntityObsExpBarrel = EntityObstacles.extend({
      name: "expBarrel",
      size: {
        x: 46,
        y: 45
      },
      dynamicType: 0,
      density: 0.8,
      friction: 0.3,
      restitution: 0,
      mass: 0.8,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      vertices: [{
        x: -2.55,
        y: -3.09
      }, {
        x: 1.73,
        y: -3.09
      }, {
        x: 1.71,
        y: 3.11
      }, {
        x: -2.61,
        y: 3.04
      }],
      animSheetList: [new ig.AnimationSheet("media/graphics/game/objects/explosion-barrel.png", 135, 121), new ig.AnimationSheet("media/graphics/game/objects/explosion-barrel-wakanda.png", 135, 121), new ig.AnimationSheet("media/graphics/game/objects/explosion-barrel-volcano.png", 135, 121), new ig.AnimationSheet("media/graphics/game/objects/explosion-barrel-space.png", 135, 121)],
      animSheet: null,
      size: {
        x: 135,
        y: 121
      },
      deadAnimSheetList: [new ig.AnimationSheet("media/graphics/game/objects/explosion-barrel-hit.png", 135, 121), new ig.AnimationSheet("media/graphics/game/objects/explosion-barrel-hit-wakanda.png", 135, 121), new ig.AnimationSheet("media/graphics/game/objects/explosion-barrel-hit-volcano.png", 135, 121), new ig.AnimationSheet("media/graphics/game/objects/explosion-barrel-hit-space.png", 135, 121)],
      deadAnimSheet: null,
      isFalling: !1,
      scoreGiven: 25,
      init: function (b, c, d) {
        ig.global.wm && (ig.game.episodeCur = 0);
        this.animSheet = this.animSheetList[ig.game.episodeCur];
        this.deadAnimSheet = this.deadAnimSheetList[ig.game.episodeCur];
        this.anims.idle = new ig.Animation(this.animSheet, 1, [0]);
        this.anims.dead = new ig.Animation(this.deadAnimSheet, 0.05, [0, 1, 2, 3, 4, 5, 6, 7]);
        this.addAnim("idle", 1, [0]);
        this.parent(b, c, d);
      },
      update: function () {
        this.parent();
        30 < this.body.GetLinearVelocity().y && (this.isFalling = !0);
      },
      beginContact: function (b) {
        (!b || !b.isDead) && b && b.body && this.isFalling && b.name && !this.isDead && "a" != b.name && "b" != b.name && "c" != b.name && this.destroy();
      },
      destroy: function () {
        if (!this.isDead) {
          ig.game.cameraShake = 0.1;
          ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.explode);
          ig.game.gainScore(this.scoreGiven, this);
          this.currentAnim = this.anims.dead;
          this.currentAnim.rewind();
          this.isDead = !0;
          ig.game.spawnEntity(EntityExplosionMaker, this.pos.x, this.pos.y, {
            maxX: 100,
            maxY: 100,
            durStart: 0.06,
            durInterval: 0.06,
            explosionNum: 4
          });
          for (var b = null, c = ig.game.entities, d = c.length, e = 0; e < d; e++) if (b = c[e], b.name) {
            if (1 === b.dynamicType) var f = b.pos.x / Box2D.SCALE,
              j = b.pos.y / Box2D.SCALE;else f = b.pos.x, j = b.pos.y;
            f = this.pos.x + this.size.x / 2 - f;
            j = this.pos.y + this.size.y / 2 - j;
            if (175 >= Math.sqrt(f * f + j * j) && b && b.classify && b.name && ("enemy" === b.classify || "obstacle" === b.classify) && "woodCircle" != b.name) b.enemyBig ? b.destroy("expBarrel") : b.destroy();
          }
        }
      }
    });
  });
  ig.baked = !0;
  ig.module("game.levels.game").requires("impact.image", "game.entities.level-control", "game.entities.ground", "game.entities.enemy", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-wood-circle", "game.entities.obstacles.obs-exp-barrel").defines(function () {
    LevelGame = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40
      }, {
        type: "EntityGround",
        x: -24,
        y: 424
      }, {
        type: "EntityGround",
        x: 936,
        y: 424
      }, {
        type: "EntityEnemy",
        x: 860,
        y: 364
      }, {
        type: "EntityEnemy",
        x: 960,
        y: 364
      }, {
        type: "EntityObsSteelBox",
        x: 1036,
        y: 264
      }, {
        type: "EntityObsWoodBarrel",
        x: 644,
        y: 96
      }, {
        type: "EntityObsSteelBox",
        x: 548,
        y: 236
      }, {
        type: "EntityObsWoodBarrel",
        x: 560,
        y: 152
      }, {
        type: "EntityObsWoodBarrel",
        x: 676,
        y: 152
      }, {
        type: "EntityObsWoodBarrel",
        x: 584,
        y: 96
      }, {
        type: "EntityObsWoodBarrel",
        x: 704,
        y: 96
      }, {
        type: "EntityObsWoodBarrel",
        x: 616,
        y: 40
      }, {
        type: "EntityObsSteelBox",
        x: 784,
        y: 236
      }, {
        type: "EntityObsWoodBarrel",
        x: 648,
        y: -16
      }, {
        type: "EntityEnemy",
        x: 912,
        y: 364
      }, {
        type: "EntityObsSteelBox",
        x: 724,
        y: 236
      }, {
        type: "EntityObsWoodBarrel",
        x: 676,
        y: 40
      }, {
        type: "EntityObsSteelBox",
        x: 604,
        y: 236
      }, {
        type: "EntityEnemy",
        x: 1124,
        y: 364
      }, {
        type: "EntityObsSteelBox",
        x: 664,
        y: 236
      }, {
        type: "EntityEnemy",
        x: 1184,
        y: 364
      }, {
        type: "EntityObsWoodCircle",
        x: 448,
        y: 364
      }, {
        type: "EntityObsWoodBarrel",
        x: 736,
        y: 152
      }, {
        type: "EntityObsExpBarrel",
        x: 1004,
        y: 172
      }, {
        type: "EntityEnemy",
        x: 1244,
        y: 364
      }, {
        type: "EntityObsWoodBarrel",
        x: 616,
        y: 152
      }],
      layer: [{
        name: "collision",
        width: 48,
        height: 18,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
  });
  ig.baked = !0;
  ig.module("game.levels.home").requires("impact.image", "game.entities.controllers.home-control").defines(function () {
    LevelHome = {
      entities: [{
        type: "EntityHomeControl",
        x: 0,
        y: 0
      }],
      layer: []
    };
  });
  ig.baked = !0;
  ig.module("game.entities.buttons.btn-level-select").requires("impact.entity", "game.entities.buttons.btn").defines(function () {
    EntityBtnLevelSelect = EntityBtn.extend({
      logoImg_Locked: new ig.Image("media/graphics/game/ui/level-locked-box.png", 122, 122),
      logoImg_Unlocked: new ig.Image("media/graphics/game/ui/level-unlocked-box.png", 122, 122),
      size: {
        x: 122,
        y: 122
      },
      posOffset: {
        x: 0,
        y: 0
      },
      mainWindow: null,
      zIndex: 3001,
      levelNum: 0,
      isLocked: !0,
      btnNum: 0,
      starOff: new ig.Image("media/graphics/game/ui/star-mini-off.png"),
      starOn: new ig.Image("media/graphics/game/ui/star-mini-on.png"),
      isClicking: !1,
      init: function (b, c, d) {
        this.parent(b, c, d);
      },
      updateButton: function (b) {
        this.levelNum = this.mainWindow.episodePastLevels + 1 + this.btnNum + 6 * b;
        for (var c = b = 0; c <= ig.game.episodeCur; c++) b += ig.game.levelsPerEpisode[c];
        this.levelNum - 1 >= b ? (this.logoImg = this.logoImg_Locked, this.isHidden = this.locked = !0) : (this.isHidden = !1, 1 === ig.game.levelUnlocked[this.levelNum - 1] ? (this.logoImg = this.logoImg_Unlocked, this.locked = !1) : (this.logoImg = this.logoImg_Locked, this.locked = !0));
      },
      update: function () {
        this.parent();
        this.pos.x = this.mainWindow.pos.x + this.posOffset.x;
        this.pos.y = this.mainWindow.pos.y + this.posOffset.y;
      },
      draw: function () {
        if (!this.isHidden) {
          if (this.locked) this.logoImg.draw(this.pos.x, this.pos.y);else {
            var b = ig.game.getEntitiesByType(EntityPointer)[0];
            this.isClicking && !this.checkMousePos(b) && (this.isClicking = !1);
            this.logoImg.draw(this.pos.x, this.pos.y, this.isClicking ? this.size.x : 0, 0, this.size.x, this.size.y);
          }
          1 <= ig.game.levelStars[this.levelNum - 1] && !this.locked ? this.starOn.draw(this.pos.x + 12, this.pos.y + 82) : this.starOff.draw(this.pos.x + 12, this.pos.y + 82);
          2 <= ig.game.levelStars[this.levelNum - 1] && !this.locked ? this.starOn.draw(this.pos.x + 44, this.pos.y + 97) : this.starOff.draw(this.pos.x + 44, this.pos.y + 97);
          3 <= ig.game.levelStars[this.levelNum - 1] && !this.locked ? this.starOn.draw(this.pos.x + 76, this.pos.y + 82) : this.starOff.draw(this.pos.x + 76, this.pos.y + 82);
          this.locked || (b = ig.system.context, b.save(), b.font = "40px soupofjustice, Helvetica, Verdana", b.globalAlpha = 1, b.fillStyle = "#ffffff", b.textAlign = "center", 0 === this.mainWindow.episode ? b.fillText(this.levelNum, this.pos.x + 60, this.pos.y + 72) : 1 === this.mainWindow.episode ? b.fillText(this.levelNum - 30, this.pos.x + 60, this.pos.y + 72) : 2 === this.mainWindow.episode ? b.fillText(this.levelNum - 50, this.pos.x + 60, this.pos.y + 72) : b.fillText(this.levelNum - 70, this.pos.x + 60, this.pos.y + 72), b.restore());
        }
      },
      interact: function () {
        !this.locked && !this.isHidden && (ig.game.levelCur = 2 + this.levelNum, ig.game.levelCur_actual = this.levelNum - 1, ig.game.director.loadLevel(2 + this.levelNum));
      }
    });
    EntityBtnLevelSelectPageLeft = EntityBtn.extend({
      logoImg: new ig.Image("media/graphics/game/ui/btn-back.png", 73, 77),
      size: {
        x: 73,
        y: 77
      },
      posOffset: {
        x: 47,
        y: 228
      },
      mainWindow: null,
      zIndex: 3001,
      update: function () {
        this.parent();
        this.pos.x = this.mainWindow.pos.x + this.posOffset.x;
        this.pos.y = this.mainWindow.pos.y + this.posOffset.y;
      },
      interact: function () {
        this.mainWindow.changePage(!1);
      }
    });
    EntityBtnLevelSelectPageRight = EntityBtn.extend({
      logoImg: new ig.Image("media/graphics/game/ui/btn-next.png", 73, 77),
      size: {
        x: 73,
        y: 77
      },
      posOffset: {
        x: 669,
        y: 228
      },
      mainWindow: null,
      zIndex: 3001,
      isLeft: !1,
      update: function () {
        this.parent();
        this.pos.x = this.mainWindow.pos.x + this.posOffset.x;
        this.pos.y = this.mainWindow.pos.y + this.posOffset.y;
      },
      interact: function () {
        this.mainWindow.changePage(!0);
      }
    });
    EntityBtnLevelSelectBack = EntityBtn.extend({
      logoImg: new ig.Image("media/graphics/game/ui/btn-back.png", 73, 77),
      size: {
        x: 73,
        y: 77
      },
      posOffset: {
        x: 669,
        y: 228
      },
      mainWindow: null,
      zIndex: 3001,
      isLeft: !1,
      update: function () {
        this.parent();
      },
      interact: function () {
        this.mainWindow._tweenStart_BackButton();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.entities.buttons.btn-episode-select").requires("impact.entity", "game.entities.buttons.btn").defines(function () {
    EntityBtnEpisodeSelect = EntityBtn.extend({
      logoImg_ComingSoon: new ig.Image("media/graphics/game/ui/btn-coming-soon.png", 158, 122),
      logoImg_Episodes: [new ig.Image("media/graphics/game/ui/btn-episode-1.png", 159, 122), new ig.Image("media/graphics/game/ui/btn-episode-2.png", 159, 122), new ig.Image("media/graphics/game/ui/btn-episode-3.png", 159, 122), new ig.Image("media/graphics/game/ui/btn-episode-4.png", 159, 122)],
      size: {
        x: 159,
        y: 122
      },
      posOffset: {
        x: 0,
        y: 0
      },
      mainWindow: null,
      zIndex: 3001,
      episodeNum: 0,
      isLocked: !0,
      btnNum: 0,
      isClicking: !1,
      init: function (b, c, d) {
        this.parent(b, c, d);
        1 === ig.game.episodeUnlocked[this.episodeNum - 1] ? (this.logoImg = this.logoImg_Episodes[this.episodeNum - 1], this.locked = !1) : (this.logoImg = this.logoImg_ComingSoon, this.locked = !0);
      },
      update: function () {
        this.parent();
        this.pos.x = this.mainWindow.pos.x + this.posOffset.x;
        this.pos.y = this.mainWindow.pos.y + this.posOffset.y;
      },
      draw: function () {
        if (this.locked) this.logoImg.draw(this.pos.x, this.pos.y);else {
          var b = ig.game.getEntitiesByType(EntityPointer)[0];
          this.isClicking && !this.checkMousePos(b) && (this.isClicking = !1);
          this.logoImg.draw(this.pos.x, this.pos.y, this.isClicking ? this.size.x : 0, 0, this.size.x, this.size.y);
        }
        b = ig.system.context;
        b.save();
        b.font = "30px soupofjustice, Helvetica, Verdana";
        b.globalAlpha = 1;
        b.fillStyle = "#ffffff";
        b.textAlign = "center";
        b.fillText(_STRINGS.UI.Episode + this.episodeNum, this.pos.x + 75, this.pos.y + 147);
        b.restore();
      },
      interact: function () {
        if (!this.locked) {
          this.mainWindow.episode = this.episodeNum - 1;
          this.mainWindow.episodeLevels = ig.game.levelsPerEpisode[this.mainWindow.episode];
          for (var b = this.mainWindow.episodePastLevels = 0; b < this.mainWindow.episode; b++) this.mainWindow.episodePastLevels += ig.game.levelsPerEpisode[b];
          ig.game.episodeLevelLim = ig.game.levelsPerEpisode[this.mainWindow.episode] + this.mainWindow.episodePastLevels;
          ig.game.episodeCur = this.mainWindow.episode;
          this.mainWindow.currentPage_Max = 0 === this.mainWindow.episodeLevels % 6 ? Math.floor(this.mainWindow.episodeLevels / 6) : Math.floor(this.mainWindow.episodeLevels / 6) + 1;
          this.mainWindow.tween_curNum = 0;
          this.mainWindow._tweenStart_EpisodeSelectEnd();
        }
      }
    });
    EntityBtnEpisodeSelectPageLeft = EntityBtn.extend({
      logoImg: new ig.Image("media/graphics/game/ui/btn-back.png", 73, 77),
      size: {
        x: 73,
        y: 77
      },
      posOffset: {
        x: 47,
        y: 228
      },
      mainWindow: null,
      zIndex: 3001,
      update: function () {
        this.parent();
        this.pos.x = this.mainWindow.pos.x + this.posOffset.x;
        this.pos.y = this.mainWindow.pos.y + this.posOffset.y;
      },
      interact: function () {}
    });
    EntityBtnEpisodeSelectPageRight = EntityBtn.extend({
      logoImg: new ig.Image("media/graphics/game/ui/btn-next.png", 73, 77),
      size: {
        x: 73,
        y: 77
      },
      posOffset: {
        x: 669,
        y: 228
      },
      mainWindow: null,
      zIndex: 3001,
      isLeft: !1,
      update: function () {
        this.parent();
        this.pos.x = this.mainWindow.pos.x + this.posOffset.x;
        this.pos.y = this.mainWindow.pos.y + this.posOffset.y;
      },
      interact: function () {}
    });
  });
  ig.baked = !0;
  ig.module("game.entities.controllers.level-select").requires("impact.entity", "game.entities.buttons.btn-level-select", "game.entities.buttons.btn-episode-select", "game.entities.buttons.btn-lvl-unlock").defines(function () {
    EntityLevelSelect = ig.Entity.extend({
      windowBox: new ig.Image("media/graphics/game/ui/window-level-select.png"),
      bg: new ig.Image("media/graphics/game/ui/background.png"),
      pagenum1: new ig.Image("media/graphics/game/ui/pagenum-1.png"),
      pagenum2: new ig.Image("media/graphics/game/ui/pagenum-2.png"),
      currentPage: 0,
      currentPage_Max: 5,
      btn_lvl: [],
      btn_episodes: [],
      zIndex: 3E3,
      btnPrevPage: null,
      btnNextPage: null,
      btnHome: null,
      btnBack: null,
      btnUnlock: null,
      selectMode: 0,
      episode: 0,
      episodeLevels: 0,
      episodePastLevels: 0,
      init: function (b, c, d) {
        this.parent(b, c, d);
        ig.global.wm || (this.btnPrevPage = ig.game.spawnEntity(EntityBtnLevelSelectPageLeft, 132, 231, {
          mainWindow: this
        }), this.btnNextPage = ig.game.spawnEntity(EntityBtnLevelSelectPageRight, 752, 231, {
          mainWindow: this
        }), this.btnBack = ig.game.spawnEntity(EntityBtnLevelSelectBack, 25, 12, {
          mainWindow: this
        }), this.btnHome = ig.game.spawnEntity(EntityBtnLvlSelectHome, ig.system.width - 85, 12), this.btnPrevPage.isHidden = !0, this.btnNextPage.isHidden = !0, this.btnBack.isHidden = !0, this.startEpisodeSelect());
      },
      update: function () {
        this.parent();
      },
      draw: function () {
        if (!ig.global.wm) {
          this.bg.draw(0, -300);
          this.windowBox.draw(this.pos.x, this.pos.y);
          var b = ig.system.context;
          b.save();
          b.font = "45px soupofjustice, Helvetica, Verdana";
          b.globalAlpha = 1;
          b.textAlign = "center";
          0 === this.selectMode ? (b.fillStyle = "#755ec0", b.fillText(_STRINGS.UI.EpisodeSelect, this.pos.x + 397, this.pos.y + 82)) : 1 === this.selectMode && (b.fillStyle = "#755ec0", b.fillText(_STRINGS.UI.LevelSelect, this.pos.x + 397, this.pos.y + 82));
          b.restore();
          1 === this.selectMode && (0 === ig.game.episodeCur ? (this.pagenum1.draw(this.pos.x + 304, this.pos.y + 425), this.pagenum1.draw(this.pos.x + 343, this.pos.y + 425), this.pagenum1.draw(this.pos.x + 382, this.pos.y + 425), this.pagenum1.draw(this.pos.x + 421, this.pos.y + 425), this.pagenum1.draw(this.pos.x + 460, this.pos.y + 425), this.pagenum2.draw(this.pos.x + 308 + 39 * this.currentPage, this.pos.y + 429)) : (this.pagenum1.draw(this.pos.x + 323, this.pos.y + 425), this.pagenum1.draw(this.pos.x + 362, this.pos.y + 425), this.pagenum1.draw(this.pos.x + 401, this.pos.y + 425), this.pagenum1.draw(this.pos.x + 440, this.pos.y + 425), this.pagenum2.draw(this.pos.x + 327 + 39 * this.currentPage, this.pos.y + 429)));
        }
      },
      startEpisodeSelect: function () {
        for (var b = null, c = {
            x: 0,
            y: 0
          }, d = 1; 4 >= d; d++) c.x = 2 >= d ? 220 * d : 220 * (d - 2), c.y = 2 >= d ? 130 : 300, b = ig.game.spawnEntity(EntityBtnEpisodeSelect, -1E3, -1E3, {
          mainWindow: this,
          episodeNum: d,
          posOffset: c
        }), this.btn_episodes.push(b), b.isEnabled = !1;
        this.btnPrevPage.isHidden = !0;
        this.btnNextPage.isHidden = !0;
        this.btnBack.isHidden = !0;
        this._tweenStart_EpisodeSelect();
      },
      tween_curNum: 0,
      tween_curMax: 1,
      tweener: null,
      _tweenStart_EpisodeSelect: function () {
        this.tween_curNum++;
        this.tween_curNum > this.tween_curMax ? this.tweener = null : 1 === this.tween_curNum && (this.tweener = this.tween({
          pos: {
            x: 84,
            y: 11
          }
        }, 0.25, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut,
          onComplete: function () {
            this.entity._tweenFinish_EpisodeSelect();
          }
        }), this.tweener.start());
      },
      _tweenFinish_EpisodeSelect: function () {
        for (var b = ig.game.getEntitiesByType(EntityBtnEpisodeSelect), c = 0; c < b.length; c++) b[c].isEnabled = !0;
      },
      _tweenStart_EpisodeSelectEnd: function () {
        this.tween_curNum++;
        this.tween_curNum > this.tween_curMax ? this.tweener = null : 1 === this.tween_curNum && (this.tweener = this.tween({
          pos: {
            x: 84,
            y: 500
          }
        }, 0.25, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut,
          onComplete: function () {
            this.entity.tween_curNum = 0;
            this.entity.startLevelSelect();
          }
        }), this.tweener.start());
      },
      startLevelSelect: function () {
        for (var b = null, c = {
            x: 0,
            y: 0
          }, d = 1; 6 >= d; d++) c.x = 3 >= d ? 13 + 161 * d : 13 + 161 * (d - 3), c.y = 3 >= d ? 131 : 281, b = ig.game.spawnEntity(EntityBtnLevelSelect, -1E3, -1E3, {
          mainWindow: this,
          btnNum: d - 1,
          posOffset: c
        }), this.btn_lvl.push(b), b.updateButton(0), b.isEnabled = !1;
        this.btnPrevPage.isHidden = !1;
        this.btnNextPage.isHidden = !1;
        b = ig.game.getEntitiesByType(EntityBtnEpisodeSelect);
        for (d = 0; d < b.length; d++) b[d].kill();
        this.selectMode = 1;
        this._tweenStart();
      },
      setLevelButtons: function () {
        for (var b = 0; 5 >= b; b++) this.btn_lvl[b].updateButton(this.currentPage);
      },
      changePage: function (b) {
        if (b) {
          if (this.currentPage + 1 >= this.currentPage_Max) return;
          this.currentPage++;
        } else {
          if (0 > this.currentPage - 1) return;
          this.currentPage--;
        }
        this.setLevelButtons();
      },
      _tweenStart: function () {
        this.tween_curNum++;
        this.tween_curNum > this.tween_curMax ? this.tweener = null : 1 === this.tween_curNum && (this.tweener = this.tween({
          pos: {
            x: 84,
            y: 11
          }
        }, 0.25, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut,
          onComplete: function () {
            this.entity._tweenFinish();
          }
        }), this.tweener.start());
      },
      _tweenFinish: function () {
        for (var b = ig.game.getEntitiesByType(EntityBtnLevelSelect), c = 0; c < b.length; c++) b[c].isEnabled = !0;
        this.btnBack.isHidden = !1;
      },
      goingBack: !1,
      _tweenStart_BackButton: function () {
        this.goingBack || (this.goingBack = !0, this.selectMode = 0, this.tweener = this.tween({
          pos: {
            x: 84,
            y: 500
          }
        }, 0.25, {
          entity: this,
          easing: ig.Tween.Easing.Circular.EaseOut,
          onComplete: function () {
            this.entity.currentPage = 0;
            this.entity.btn_lvl = [];
            for (var b = ig.game.getEntitiesByType(EntityBtnLevelSelect), c = 0; c < b.length; c++) b[c].kill();
            this.entity.tween_curNum = 0;
            this.entity.startEpisodeSelect();
            this.entity.goingBack = !1;
          }
        }), this.tweener.start());
      }
    });
    EntityBtnLvlSelectHome = EntityBtn.extend({
      logoImg: new ig.Image("media/graphics/game/ui/btn-home.png", 73, 77),
      size: {
        x: 73,
        y: 77
      },
      zIndex: 3001,
      interact: function () {
        ig.game.fromLevelSelect = !0;
        ig.game.director.jumpTo(LevelHome);
        var b = ig.game.getEntitiesByType(EntityHomeControl)[0];
        b && b.btnMoreGames && b.btnMoreGames.show();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.levels.level-select").requires("impact.image", "game.entities.controllers.level-select", "game.entities.pointer").defines(function () {
    LevelLevelSelect = {
      entities: [{
        type: "EntityLevelSelect",
        x: 84,
        y: 500
      }, {
        type: "EntityPointer",
        x: 0,
        y: 0
      }],
      layer: []
    };
  });
  ig.baked = !0;
  ig.module("game.levels.1").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.enemy", "game.entities.obstacles.obs-wood-barrel").defines(function () {
    Level1 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 7,
            2: 7,
            3: 3,
            4: 2,
            5: 0
          },
          piggyNum: 1
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 960,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityEnemy",
        x: 772,
        y: 124,
        settings: {
          enemyType: 0
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 752,
        y: 160
      }, {
        type: "EntityObsWoodBarrel",
        x: 752,
        y: 220
      }, {
        type: "EntityObsWoodBarrel",
        x: 752,
        y: 280
      }, {
        type: "EntityObsWoodBarrel",
        x: 752,
        y: 340
      }],
      layer: [{
        name: "collision",
        width: 100,
        height: 40,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 15,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 0,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level1Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.2").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.enemy", "game.entities.obstacles.obs-wood-barrel").defines(function () {
    Level2 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 1,
            2: 2,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 0
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 960,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityEnemy",
        x: 796,
        y: 368,
        settings: {
          enemyType: 0
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 644,
        y: 220
      }, {
        type: "EntityObsWoodBarrel",
        x: 696,
        y: 220
      }, {
        type: "EntityObsWoodBarrel",
        x: 644,
        y: 280
      }, {
        type: "EntityObsWoodBarrel",
        x: 696,
        y: 280
      }, {
        type: "EntityObsWoodBarrel",
        x: 644,
        y: 340
      }, {
        type: "EntityObsWoodBarrel",
        x: 696,
        y: 340
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level2Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.3").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.enemy", "game.entities.obstacles.obs-steel-box").defines(function () {
    Level3 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 1,
            2: 2,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 0
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 960,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityEnemy",
        x: 872,
        y: 84,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsSteelBox",
        x: 872,
        y: 144
      }, {
        type: "EntityObsSteelBox",
        x: 872,
        y: 324
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: 324
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: 24
      }, {
        type: "EntityObsSteelBox",
        x: 872,
        y: 24
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: 204
      }, {
        type: "EntityEnemy",
        x: 880,
        y: 264,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: 144
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: 84
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: 264
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level3Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.entities.obstacles.obs-wood-box").requires("plugins.box2d.entity", "game.entities.obstacles.obstacles").defines(function () {
    EntityObsWoodBox = EntityObstacles.extend({
      type: ig.Entity.TYPE.A,
      checkAgainst: ig.Entity.TYPE.B,
      name: "woodBox",
      dynamicType: 1,
      density: 0.8,
      friction: 0.3,
      restitution: 0,
      mass: 0.8,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      vertices: [{
        x: -3.07,
        y: -3.09
      }, {
        x: 2.84,
        y: -3.09
      }, {
        x: 2.88,
        y: 2.5
      }, {
        x: -3.05,
        y: 2.5
      }],
      animSheetList: [new ig.AnimationSheet("media/graphics/game/objects/wood-box.png", 59, 59), new ig.AnimationSheet("media/graphics/game/objects/wood-box-wakanda.png", 59, 59), new ig.AnimationSheet("media/graphics/game/objects/wood-box-volcano.png", 59, 59), new ig.AnimationSheet("media/graphics/game/objects/wood-box-space.png", 59, 59)],
      animSheet: null,
      size: {
        x: 59,
        y: 59
      },
      deadAnimSheetList: [new ig.AnimationSheet("media/graphics/game/objects/wood-box-hit.png", 133, 130), new ig.AnimationSheet("media/graphics/game/objects/wood-box-hit-wakanda.png", 133, 130), new ig.AnimationSheet("media/graphics/game/objects/wood-box-hit-volcano.png", 133, 130), new ig.AnimationSheet("media/graphics/game/objects/wood-box-hit-space.png", 133, 130)],
      deadAnimSheet: null,
      scoreGiven: 15,
      init: function (b, c, d) {
        ig.global.wm && (ig.game.episodeCur = 0);
        this.animSheet = this.animSheetList[ig.game.episodeCur];
        this.deadAnimSheet = this.deadAnimSheetList[ig.game.episodeCur];
        this.anims.idle = new ig.Animation(this.animSheet, 1, [0]);
        this.anims.dead = new ig.Animation(this.deadAnimSheet, 0.05, [0, 1, 2, 3, 4, 5, 6]);
        this.addAnim("idle", 1, [0]);
        this.parent(b, c, d);
      },
      beginContact: function (b) {
        if (!b || !b.isDead) b && !(b.name && "web" == b.name) && b.body && 15 < b.body.GetLinearVelocity().Length() && (this.isDead || this.destroy());
      },
      callOnce: !1,
      check: function (b) {
        (!b || !b.isDead) && b.classify && "missile" === b.classify && !this.callOnce && !b.isReturning && this.destroy();
      },
      destroy: function () {
        this.isDead || (ig.game.spawnEntity(EntityEffect, this.pos.x / Box2D.SCALE, this.pos.y / Box2D.SCALE), this.size = {
          x: 133,
          y: 130
        }, this.currentAnim = this.anims.dead, this.currentAnim.rewind(), this.isDead = !0, ig.game.gainScore(this.scoreGiven, this, !0));
      },
      preSolve: function (b, c) {
        (!b || !b.isDead) && b && b.name && "mace" === b.name && c.SetEnabled(!1);
      }
    });
  });
  ig.baked = !0;
  ig.module("game.levels.4").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.enemy", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-steel-box").defines(function () {
    Level4 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 0,
            2: 0,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 3
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityEnemy",
        x: 1176,
        y: 100,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityEnemy",
        x: 1104,
        y: 368,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 772,
        y: 112
      }, {
        type: "EntityObsWoodBarrel",
        x: 840,
        y: 224
      }, {
        type: "EntityObsWoodBarrel",
        x: 792,
        y: 344
      }, {
        type: "EntityObsSteelBox",
        x: 952,
        y: 112
      }, {
        type: "EntityObsWoodBarrel",
        x: 816,
        y: 284
      }, {
        type: "EntityEnemy",
        x: 948,
        y: 56,
        settings: {
          enemyType: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1168,
        y: -20
      }, {
        type: "EntityObsWoodBarrel",
        x: 844,
        y: 344
      }, {
        type: "EntityObsSteelBox",
        x: 1040,
        y: 296
      }, {
        type: "EntityObsSteelBox",
        x: 1168,
        y: 160
      }, {
        type: "EntityObsSteelBox",
        x: 892,
        y: 112
      }, {
        type: "EntityObsWoodBarrel",
        x: 896,
        y: 344
      }, {
        type: "EntityObsSteelBox",
        x: 1108,
        y: 100
      }, {
        type: "EntityObsSteelBox",
        x: 1160,
        y: 296
      }, {
        type: "EntityObsWoodBarrel",
        x: 868,
        y: 284
      }, {
        type: "EntityObsWoodBox",
        x: 832,
        y: 112
      }, {
        type: "EntityEnemy",
        x: 1164,
        y: 368,
        settings: {
          enemyType: 0
        }
      }, {
        type: "EntityEnemy",
        x: 1152,
        y: 236,
        settings: {
          enemyType: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 980,
        y: 296
      }, {
        type: "EntityObsWoodBarrel",
        x: 784,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 1108,
        y: 40
      }, {
        type: "EntityObsSteelBox",
        x: 1108,
        y: -20
      }, {
        type: "EntityObsWoodBarrel",
        x: 844,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 1108,
        y: 160
      }, {
        type: "EntityObsSteelBox",
        x: 1100,
        y: 296
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level4Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.5").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.enemy", "game.entities.obstacles.obs-steel-box").defines(function () {
    Level5 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 356,
        settings: {
          piggyTypes: {
            "0": 1,
            1: 1,
            2: 2,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 2
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 960,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityEnemy",
        x: 692,
        y: 244,
        settings: {
          enemyType: 0
        }
      }, {
        type: "EntityEnemy",
        x: 744,
        y: 304,
        settings: {
          enemyType: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 684,
        y: 300
      }, {
        type: "EntityObsSteelBox",
        x: 632,
        y: 360
      }, {
        type: "EntityEnemy",
        x: 636,
        y: 304,
        settings: {
          enemyType: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 736,
        y: 360
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level5Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.6").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.enemy", "game.entities.obstacles.obs-steel-box").defines(function () {
    Level6 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 204,
        y: 356,
        settings: {
          piggyTypes: {
            "0": 1,
            1: 1,
            2: 2,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 0
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 960,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityEnemy",
        x: 840,
        y: 100,
        settings: {
          enemyType: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 832,
        y: 160
      }, {
        type: "EntityObsSteelBox",
        x: 712,
        y: 220
      }, {
        type: "EntityObsSteelBox",
        x: 832,
        y: 220
      }, {
        type: "EntityObsSteelBox",
        x: 712,
        y: 40
      }, {
        type: "EntityObsSteelBox",
        x: 832,
        y: 40
      }, {
        type: "EntityObsSteelBox",
        x: 772,
        y: -20
      }, {
        type: "EntityObsSteelBox",
        x: 712,
        y: 160
      }, {
        type: "EntityObsSteelBox",
        x: 772,
        y: 40
      }, {
        type: "EntityObsSteelBox",
        x: 772,
        y: 160
      }, {
        type: "EntityObsSteelBox",
        x: 712,
        y: -20
      }, {
        type: "EntityObsSteelBox",
        x: 772,
        y: 100
      }, {
        type: "EntityObsSteelBox",
        x: 832,
        y: -20
      }, {
        type: "EntityObsSteelBox",
        x: 772,
        y: 220
      }, {
        type: "EntityObsSteelBox",
        x: 712,
        y: 100
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 12, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 12, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 12, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 12, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 12, 12, 12, 12, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 12, 12, 12, 12, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 12, 12, 12, 12, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level6Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.7").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-wood-box", "game.entities.enemy", "game.entities.obstacles.obs-wood-barrel").defines(function () {
    Level7 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 1,
            1: 1,
            2: 1,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 3
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1032,
        y: 164
      }, {
        type: "EntityObsWoodBox",
        x: 716,
        y: 360
      }, {
        type: "EntityEnemy",
        x: 784,
        y: 368,
        settings: {
          enemyType: 0
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1212,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 1212,
        y: 300
      }, {
        type: "EntityObsWoodBarrel",
        x: 1044,
        y: 24
      }, {
        type: "EntityObsWoodBarrel",
        x: 1020,
        y: 84
      }, {
        type: "EntityObsSteelBox",
        x: 772,
        y: 144
      }, {
        type: "EntityObsWoodBarrel",
        x: 1076,
        y: 84
      }, {
        type: "EntityObsSteelBox",
        x: 772,
        y: 84
      }, {
        type: "EntityObsSteelBox",
        x: 1092,
        y: 164
      }, {
        type: "EntityObsSteelBox",
        x: 1152,
        y: 164
      }, {
        type: "EntityObsWoodBarrel",
        x: 1132,
        y: 340
      }, {
        type: "EntityObsSteelBox",
        x: 712,
        y: 144
      }, {
        type: "EntityEnemy",
        x: 1156,
        y: 108,
        settings: {
          enemyType: 4
        }
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level7Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.8").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.objects.enemy-fly-path", "game.entities.objects.enemy-fly").defines(function () {
    Level8 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 2,
            1: 1,
            2: 2,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 0
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 960,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 403,
        y: 140,
        settings: {
          pathId: 3,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 403,
        y: 16,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFly",
        x: 836,
        y: 140,
        settings: {
          pathId: 3
        }
      }, {
        type: "EntityEnemyFly",
        x: 836,
        y: 16,
        settings: {
          pathId: 1
        }
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level8Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.9").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.enemy", "game.entities.obstacles.obs-steel-box", "game.entities.objects.targeter").defines(function () {
    Level9 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 2,
            1: 1,
            2: 2,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 0
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 960,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityEnemy",
        x: 680,
        y: 364,
        settings: {
          enemyType: 0
        }
      }, {
        type: "EntityEnemy",
        x: 732,
        y: 364,
        settings: {
          enemyType: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 492,
        y: 360
      }, {
        type: "EntityObsSteelBox",
        x: 492,
        y: 300
      }, {
        type: "EntityObsSteelBox",
        x: 492,
        y: 240
      }, {
        type: "EntityObsSteelBox",
        x: 492,
        y: 180
      }, {
        type: "EntityEnemy",
        x: 784,
        y: 364,
        settings: {
          enemyType: 0
        }
      }, {
        type: "EntityTargeter",
        x: 688,
        y: 28
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level9Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.10").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.objects.enemy-fly-path", "game.entities.ground", "game.entities.enemy", "game.entities.obstacles.obs-steel-box", "game.entities.objects.enemy-fly", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel").defines(function () {
    Level10 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 2,
            1: 2,
            2: 2,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 3
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 496,
        y: 100,
        settings: {
          pathId: 2,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 496,
        y: 24,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityGround",
        x: -24,
        y: 424
      }, {
        type: "EntityGround",
        x: 936,
        y: 424
      }, {
        type: "EntityEnemy",
        x: 592,
        y: 368,
        settings: {
          enemyType: 0
        }
      }, {
        type: "EntityEnemy",
        x: 648,
        y: 368,
        settings: {
          enemyType: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 720,
        y: 364
      }, {
        type: "EntityEnemyFly",
        x: 1244,
        y: 100,
        settings: {
          pathId: 2
        }
      }, {
        type: "EntityEnemyFly",
        x: 1244,
        y: 24,
        settings: {
          pathId: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1148,
        y: 364
      }, {
        type: "EntityObsSteelBox",
        x: 720,
        y: 304
      }, {
        type: "EntityObsWoodBarrel",
        x: 1076,
        y: 344
      }, {
        type: "EntityObsWoodBarrel",
        x: 1132,
        y: 284
      }, {
        type: "EntityEnemy",
        x: 1216,
        y: 368,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityEnemy",
        x: 728,
        y: 244,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityEnemy",
        x: 1044,
        y: 368,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityEnemy",
        x: 1152,
        y: 244,
        settings: {
          enemyType: 2
        }
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level10Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.11").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.objects.enemy-fly-path", "game.entities.obstacles.obs-wood-barrel", "game.entities.enemy", "game.entities.obstacles.obs-wood-box", "game.entities.objects.enemy-fly", "game.entities.obstacles.obs-exp-barrel").defines(function () {
    Level11 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 1,
            2: 2,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 3
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 720,
        y: 300,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 896,
        y: 428
      }, {
        type: "EntityEnemy",
        x: 1164,
        y: 448,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1104,
        y: 188
      }, {
        type: "EntityEnemy",
        x: 896,
        y: 392,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1164,
        y: 48
      }, {
        type: "EntityObsWoodBarrel",
        x: 836,
        y: 428
      }, {
        type: "EntityObsWoodBox",
        x: 1164,
        y: 188
      }, {
        type: "EntityObsWoodBarrel",
        x: 1164,
        y: 108
      }, {
        type: "EntityObsWoodBarrel",
        x: 780,
        y: 428
      }, {
        type: "EntityObsWoodBox",
        x: 1224,
        y: 188
      }, {
        type: "EntityEnemy",
        x: 1264,
        y: 448,
        settings: {
          enemyType: 0
        }
      }, {
        type: "EntityEnemyFly",
        x: 960,
        y: 12,
        settings: {
          pathId: 1
        }
      }, {
        type: "EntityEnemy",
        x: 1060,
        y: 448,
        settings: {
          enemyType: 0
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1060,
        y: 108
      }, {
        type: "EntityObsWoodBox",
        x: 1044,
        y: 188
      }, {
        type: "EntityEnemy",
        x: 828,
        y: 336,
        settings: {
          enemyType: 0
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 812,
        y: 368
      }, {
        type: "EntityObsExpBarrel",
        x: 1092,
        y: 96
      }, {
        type: "EntityObsWoodBarrel",
        x: 1060,
        y: 48
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level11Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.12").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-steel-box", "game.entities.enemy", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-wood-circle").defines(function () {
    Level12 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 1,
            2: 2,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 3
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityEnemyBig",
        x: 1060,
        y: 80
      }, {
        type: "EntityObsSteelBox",
        x: 1132,
        y: 156
      }, {
        type: "EntityEnemy",
        x: 936,
        y: 448
      }, {
        type: "EntityObsSteelBox",
        x: 1012,
        y: 156
      }, {
        type: "EntityObsWoodBarrel",
        x: 996,
        y: 428
      }, {
        type: "EntityObsWoodBarrel",
        x: 1332,
        y: 424
      }, {
        type: "EntityEnemy",
        x: 784,
        y: 448
      }, {
        type: "EntityEnemy",
        x: 1088,
        y: 448,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityEnemy",
        x: 1268,
        y: 448,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsSteelBox",
        x: 952,
        y: 156
      }, {
        type: "EntityObsWoodBarrel",
        x: 848,
        y: 428
      }, {
        type: "EntityObsWoodCircle",
        x: 552,
        y: 360
      }, {
        type: "EntityObsWoodBarrel",
        x: 1164,
        y: 424
      }, {
        type: "EntityObsSteelBox",
        x: 1072,
        y: 156
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level12Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.13").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.enemy", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-exp-barrel", "game.entities.objects.enemy-big").defines(function () {
    Level13 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 1,
            2: 2,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 3
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemy",
        x: 1036,
        y: 360,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1136,
        y: -20
      }, {
        type: "EntityObsWoodBarrel",
        x: 1236,
        y: 280
      }, {
        type: "EntityEnemy",
        x: 548,
        y: -36,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityEnemy",
        x: 1276,
        y: 116,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 456,
        y: 432
      }, {
        type: "EntityEnemy",
        x: 1380,
        y: 116,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 516,
        y: 24
      }, {
        type: "EntityObsWoodBox",
        x: 808,
        y: 32
      }, {
        type: "EntityObsWoodBarrel",
        x: 1084,
        y: -20
      }, {
        type: "EntityEnemy",
        x: 808,
        y: -32,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 508,
        y: 432
      }, {
        type: "EntityObsWoodBox",
        x: 868,
        y: 32
      }, {
        type: "EntityEnemy",
        x: 600,
        y: 452,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 484,
        y: 372
      }, {
        type: "EntityObsWoodBox",
        x: 576,
        y: 24
      }, {
        type: "EntityObsExpBarrel",
        x: 840,
        y: -64
      }, {
        type: "EntityObsWoodBarrel",
        x: 1212,
        y: 340
      }, {
        type: "EntityObsWoodBarrel",
        x: 1268,
        y: 340
      }, {
        type: "EntityEnemyBig",
        x: 892,
        y: 224
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 22, 12, 12, 12, 12, 12, 12, 12, 12], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level13Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.14").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.enemy", "game.entities.obstacles.obs-exp-barrel", "game.entities.objects.enemy-big").defines(function () {
    Level14 = {
      entities: [{
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 192,
        y: 232,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 0,
            2: 2,
            3: 2,
            4: 0
          },
          piggyNum: 4
        }
      }, {
        type: "EntityObsWoodBox",
        x: 692,
        y: 420
      }, {
        type: "EntityObsWoodBarrel",
        x: 684,
        y: 340
      }, {
        type: "EntityObsWoodBox",
        x: 688,
        y: 32
      }, {
        type: "EntityEnemy",
        x: 496,
        y: 300,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityEnemy",
        x: 776,
        y: 416,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 616,
        y: 340
      }, {
        type: "EntityObsWoodBox",
        x: 748,
        y: 32
      }, {
        type: "EntityObsWoodBarrel",
        x: 1356,
        y: 36
      }, {
        type: "EntityObsExpBarrel",
        x: 780,
        y: -60
      }, {
        type: "EntityObsWoodBarrel",
        x: 1304,
        y: 36
      }, {
        type: "EntityObsWoodBox",
        x: 808,
        y: 32
      }, {
        type: "EntityObsWoodBarrel",
        x: 920,
        y: 220
      }, {
        type: "EntityObsWoodBarrel",
        x: 684,
        y: 280
      }, {
        type: "EntityObsWoodBarrel",
        x: 1328,
        y: -24
      }, {
        type: "EntityObsWoodBox",
        x: 628,
        y: 32
      }, {
        type: "EntityObsWoodBarrel",
        x: 616,
        y: 400
      }, {
        type: "EntityEnemy",
        x: 428,
        y: 300,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityEnemy",
        x: 640,
        y: -28,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityEnemyBig",
        x: 1160,
        y: 160
      }, {
        type: "EntityEnemy",
        x: 996,
        y: 300,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 920,
        y: 280
      }, {
        type: "EntityEnemy",
        x: 716,
        y: -28,
        settings: {
          enemyType: 0
        }
      }, {
        type: "EntityEnemy",
        x: 940,
        y: 184,
        settings: {
          enemyType: 2
        }
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 21, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level14Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.15").requires("impact.image", "game.entities.level-control", "game.entities.objects.enemy-fly-path", "game.entities.objects.sling-maker", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-steel-box", "game.entities.objects.enemy-fly", "game.entities.enemy", "game.entities.obstacles.obs-wood-circle", "game.entities.objects.card").defines(function () {
    Level15 = {
      entities: [{
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 804,
        y: -20,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 520,
        y: 288,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 804,
        y: -20,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntitySlingMaker",
        x: 284,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 1,
            2: 2,
            3: 0,
            4: 0
          },
          piggyNum: 3
        }
      }, {
        type: "EntityObsWoodBox",
        x: 836,
        y: 356
      }, {
        type: "EntityObsSteelBox",
        x: 1020,
        y: 152
      }, {
        type: "EntityEnemyFly",
        x: 1320,
        y: -20,
        settings: {
          pathId: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 960,
        y: 152
      }, {
        type: "EntityObsWoodBox",
        x: 720,
        y: 356
      }, {
        type: "EntityEnemy",
        x: 760,
        y: 292,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 780,
        y: 356
      }, {
        type: "EntityEnemy",
        x: 836,
        y: 296,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityObsWoodCircle",
        x: 900,
        y: 92
      }, {
        type: "EntityEnemy",
        x: 684,
        y: 292,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 660,
        y: 356
      }, {
        type: "EntityEnemy",
        x: 1156,
        y: 268,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1020,
        y: 212
      }, {
        type: "EntityObsSteelBox",
        x: 1020,
        y: 272
      }, {
        type: "EntityEnemy",
        x: 1384,
        y: 268,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityEnemy",
        x: 1264,
        y: 268,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsSteelBox",
        x: 900,
        y: 152
      }, {
        type: "EntityCard",
        x: 780,
        y: 36
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }]
    };
    Level15Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.16").requires("impact.image", "game.entities.level-control", "game.entities.objects.enemy-fly-path", "game.entities.objects.sling-maker", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-steel-box", "game.entities.enemy", "game.entities.objects.enemy-big", "game.entities.objects.enemy-fly", "game.entities.obstacles.obs-exp-barrel", "game.entities.obstacles.obs-wood-circle", "game.entities.objects.card").defines(function () {
    Level16 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1276,
        y: -148,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 784,
        y: -148,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntitySlingMaker",
        x: 200,
        y: 350,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 1,
            2: 2,
            3: 1
          },
          piggyNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 784,
        y: -148,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1252,
        y: 240
      }, {
        type: "EntityObsWoodBarrel",
        x: 696,
        y: 372
      }, {
        type: "EntityObsWoodBarrel",
        x: 1012,
        y: 248
      }, {
        type: "EntityObsSteelBox",
        x: 1012,
        y: 388
      }, {
        type: "EntityEnemy",
        x: 560,
        y: 420,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1252,
        y: 300
      }, {
        type: "EntityObsWoodBarrel",
        x: 724,
        y: 312
      }, {
        type: "EntityObsSteelBox",
        x: 1156,
        y: 388
      }, {
        type: "EntityObsWoodBarrel",
        x: 1124,
        y: 248
      }, {
        type: "EntityObsWoodBarrel",
        x: 752,
        y: 372
      }, {
        type: "EntityObsSteelBox",
        x: 900,
        y: 28
      }, {
        type: "EntityEnemyBig",
        x: 1076,
        y: 376,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1252,
        y: 180
      }, {
        type: "EntityEnemyFly",
        x: 508,
        y: 336,
        settings: {
          pathId: 1
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 936,
        y: -64
      }, {
        type: "EntityObsSteelBox",
        x: 840,
        y: 28
      }, {
        type: "EntityEnemy",
        x: 856,
        y: -32,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityEnemy",
        x: 656,
        y: 420,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1012,
        y: 308
      }, {
        type: "EntityEnemy",
        x: 912,
        y: 452,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsWoodCircle",
        x: 400,
        y: 44
      }, {
        type: "EntityObsSteelBox",
        x: 960,
        y: 28
      }, {
        type: "EntityEnemy",
        x: 1340,
        y: 300,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsSteelBox",
        x: 424,
        y: 96
      }, {
        type: "EntityObsWoodBarrel",
        x: 1124,
        y: 308
      }, {
        type: "EntityObsSteelBox",
        x: 1252,
        y: 120
      }, {
        type: "EntityCard",
        x: 704,
        y: -28
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 44, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 33, 23, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 23, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level16Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.17").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.enemy", "game.entities.objects.enemy-fly", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-steel-box", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-exp-barrel", "game.entities.objects.card").defines(function () {
    Level17 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 200,
        y: 350,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 1,
            2: 2,
            3: 1
          },
          piggyNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1016,
        y: -232,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 420,
        y: -220,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemy",
        x: 1124,
        y: 388,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityEnemyFly",
        x: 236,
        y: 28,
        settings: {
          pathId: 1
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 812,
        y: -16
      }, {
        type: "EntityObsWoodBox",
        x: 720,
        y: 224
      }, {
        type: "EntityObsWoodBarrel",
        x: 1236,
        y: 36
      }, {
        type: "EntityObsWoodBarrel",
        x: 704,
        y: 404
      }, {
        type: "EntityObsSteelBox",
        x: 1160,
        y: -204
      }, {
        type: "EntityObsWoodBox",
        x: 660,
        y: 224
      }, {
        type: "EntityObsWoodBox",
        x: 820,
        y: 64
      }, {
        type: "EntityObsWoodBox",
        x: 536,
        y: -44
      }, {
        type: "EntityObsWoodBox",
        x: 600,
        y: 224
      }, {
        type: "EntityObsSteelBox",
        x: 1160,
        y: -144
      }, {
        type: "EntityObsWoodBox",
        x: 880,
        y: 64
      }, {
        type: "EntityObsSteelBox",
        x: 1160,
        y: -88
      }, {
        type: "EntityEnemyBig",
        x: 904,
        y: 432
      }, {
        type: "EntityObsWoodBarrel",
        x: 728,
        y: 340
      }, {
        type: "EntityEnemy",
        x: 1176,
        y: 392,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 868,
        y: -28
      }, {
        type: "EntityObsWoodBox",
        x: 540,
        y: 224
      }, {
        type: "EntityObsSteelBox",
        x: 1160,
        y: -28
      }, {
        type: "EntityObsWoodBox",
        x: 940,
        y: 64
      }, {
        type: "EntityEnemyBig",
        x: 608,
        y: 404,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 476,
        y: -44
      }, {
        type: "EntityObsWoodBarrel",
        x: 756,
        y: 400
      }, {
        type: "EntityObsWoodBarrel",
        x: 1024,
        y: 216
      }, {
        type: "EntityObsWoodBox",
        x: 592,
        y: -44
      }, {
        type: "EntityObsWoodBox",
        x: 652,
        y: -44
      }, {
        type: "EntityEnemy",
        x: 1324,
        y: 60,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityCard",
        x: 1144,
        y: 56
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 11, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 22, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 0,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 11, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 22, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 23, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level17Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.18").requires("impact.image", "game.entities.objects.enemy-fly-path", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-wood-box", "game.entities.enemy", "game.entities.obstacles.obs-exp-barrel", "game.entities.objects.enemy-fly", "game.entities.obstacles.obs-steel-box", "game.entities.objects.card").defines(function () {
    Level18 = {
      entities: [{
        type: "EntityEnemyFlyPath",
        x: 868,
        y: 24,
        settings: {
          pathId: 1,
          pathNum: 6
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 664,
        y: 264,
        settings: {
          pathId: 1,
          pathNum: 5
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 868,
        y: 24,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1056,
        y: 368,
        settings: {
          pathId: 1,
          pathNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1076,
        y: -176,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntitySlingMaker",
        x: 280,
        y: 296,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 1,
            2: 2,
            3: 1,
            4: 0
          },
          piggyNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 664,
        y: 264,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1076,
        y: -176,
        settings: {
          pathId: 1,
          pathNum: 7
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1056,
        y: -48
      }, {
        type: "EntityObsWoodBox",
        x: 1140,
        y: 332
      }, {
        type: "EntityEnemy",
        x: 564,
        y: 428,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 1232,
        y: -176
      }, {
        type: "EntityObsWoodBox",
        x: 1140,
        y: 452
      }, {
        type: "EntityObsWoodBox",
        x: 1260,
        y: -24
      }, {
        type: "EntityObsWoodBox",
        x: 1020,
        y: 32
      }, {
        type: "EntityObsWoodBox",
        x: 1260,
        y: -84
      }, {
        type: "EntityEnemyFly",
        x: 1328,
        y: -228,
        settings: {
          pathId: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1140,
        y: 392
      }, {
        type: "EntityObsWoodBox",
        x: 1140,
        y: -24
      }, {
        type: "EntityObsWoodBox",
        x: 1020,
        y: 92
      }, {
        type: "EntityObsWoodBox",
        x: 1200,
        y: -84
      }, {
        type: "EntityObsWoodBox",
        x: 1080,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 592,
        y: 484
      }, {
        type: "EntityObsWoodBox",
        x: 1264,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 1140,
        y: 32
      }, {
        type: "EntityEnemy",
        x: 1148,
        y: 96,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsSteelBox",
        x: 652,
        y: 484
      }, {
        type: "EntityEnemy",
        x: 1336,
        y: 96,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemy",
        x: 1404,
        y: 452
      }, {
        type: "EntityObsSteelBox",
        x: 532,
        y: 484
      }, {
        type: "EntityObsWoodBarrel",
        x: 884,
        y: 128
      }, {
        type: "EntityEnemy",
        x: 1288,
        y: 452
      }, {
        type: "EntityObsWoodBarrel",
        x: 936,
        y: 128
      }, {
        type: "EntityObsSteelBox",
        x: 1260,
        y: 36
      }, {
        type: "EntityObsWoodBarrel",
        x: 936,
        y: 68
      }, {
        type: "EntityEnemy",
        x: 1400,
        y: 152
      }, {
        type: "EntityObsWoodBarrel",
        x: 1124,
        y: -164
      }, {
        type: "EntityObsWoodBox",
        x: 1020,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 1324,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 1140,
        y: 152
      }, {
        type: "EntityEnemy",
        x: 1088,
        y: 156,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1140,
        y: -84
      }, {
        type: "EntityEnemy",
        x: 648,
        y: 428,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1200,
        y: -24
      }, {
        type: "EntityCard",
        x: 948,
        y: -116
      }, {
        type: "EntityCard",
        x: 1376,
        y: -40
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level18Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.19").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.enemy", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-exp-barrel", "game.entities.objects.card").defines(function () {
    Level19 = {
      entities: [{
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 284,
        y: 296,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 0,
            2: 1,
            3: 1,
            4: 2
          },
          piggyNum: 5
        }
      }, {
        type: "EntityEnemy",
        x: 768,
        y: 364,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemy",
        x: 1128,
        y: 364,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemyBig",
        x: 1300,
        y: 344
      }, {
        type: "EntityObsSteelBox",
        x: 864,
        y: 360
      }, {
        type: "EntityObsSteelBox",
        x: 1044,
        y: 360
      }, {
        type: "EntityEnemy",
        x: 868,
        y: 184,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1404,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 1044,
        y: 180
      }, {
        type: "EntityObsWoodBox",
        x: 1284,
        y: 180
      }, {
        type: "EntityObsSteelBox",
        x: 1104,
        y: 120
      }, {
        type: "EntityObsWoodBox",
        x: 744,
        y: 180
      }, {
        type: "EntityObsWoodBarrel",
        x: 676,
        y: 100
      }, {
        type: "EntityObsWoodBarrel",
        x: 1032,
        y: 100
      }, {
        type: "EntityObsWoodBox",
        x: 916,
        y: 92
      }, {
        type: "EntityObsWoodBarrel",
        x: 964,
        y: 12
      }, {
        type: "EntityEnemy",
        x: 940,
        y: 156,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityEnemy",
        x: 1112,
        y: 244,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1344,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1104,
        y: 180
      }, {
        type: "EntityObsSteelBox",
        x: 1284,
        y: 240
      }, {
        type: "EntityObsWoodBox",
        x: 1344,
        y: 160
      }, {
        type: "EntityObsWoodBox",
        x: 684,
        y: 240
      }, {
        type: "EntityObsSteelBox",
        x: 1224,
        y: 120
      }, {
        type: "EntityObsWoodBarrel",
        x: 728,
        y: 220
      }, {
        type: "EntityObsWoodBox",
        x: 804,
        y: 180
      }, {
        type: "EntityObsWoodBarrel",
        x: 756,
        y: 40
      }, {
        type: "EntityObsWoodBarrel",
        x: 704,
        y: 40
      }, {
        type: "EntityEnemy",
        x: 1228,
        y: 244,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1268,
        y: 96
      }, {
        type: "EntityObsExpBarrel",
        x: 824,
        y: 28
      }, {
        type: "EntityObsWoodBox",
        x: 976,
        y: 92
      }, {
        type: "EntityObsWoodBox",
        x: 1164,
        y: 180
      }, {
        type: "EntityObsWoodBox",
        x: 1224,
        y: 300
      }, {
        type: "EntityObsWoodBarrel",
        x: 936,
        y: -48
      }, {
        type: "EntityObsWoodBox",
        x: 924,
        y: 276
      }, {
        type: "EntityObsWoodBox",
        x: 1224,
        y: 180
      }, {
        type: "EntityObsWoodBox",
        x: 1404,
        y: 160
      }, {
        type: "EntityObsWoodBox",
        x: 744,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1044,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 684,
        y: 180
      }, {
        type: "EntityObsWoodBarrel",
        x: 732,
        y: 100
      }, {
        type: "EntityObsWoodBox",
        x: 864,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1164,
        y: 300
      }, {
        type: "EntityEnemyBig",
        x: 940,
        y: 344
      }, {
        type: "EntityObsWoodBox",
        x: 1164,
        y: 240
      }, {
        type: "EntityObsSteelBox",
        x: 804,
        y: 240
      }, {
        type: "EntityObsWoodBox",
        x: 1284,
        y: 300
      }, {
        type: "EntityObsWoodBarrel",
        x: 728,
        y: -20
      }, {
        type: "EntityObsExpBarrel",
        x: 1372,
        y: 68
      }, {
        type: "EntityObsWoodBox",
        x: 984,
        y: 276
      }, {
        type: "EntityObsWoodBox",
        x: 1404,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 684,
        y: 300
      }, {
        type: "EntityObsWoodBarrel",
        x: 784,
        y: 100
      }, {
        type: "EntityObsWoodBarrel",
        x: 912,
        y: 196
      }, {
        type: "EntityObsSteelBox",
        x: 1044,
        y: 240
      }, {
        type: "EntityObsWoodBarrel",
        x: 908,
        y: 12
      }, {
        type: "EntityEnemy",
        x: 1324,
        y: 364,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1104,
        y: 300
      }, {
        type: "EntityObsSteelBox",
        x: 1224,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 804,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 856,
        y: 120
      }, {
        type: "EntityObsWoodBarrel",
        x: 848,
        y: 220
      }, {
        type: "EntityObsWoodBarrel",
        x: 964,
        y: 196
      }, {
        type: "EntityObsSteelBox",
        x: 684,
        y: 360
      }, {
        type: "EntityEnemyBig",
        x: 1368,
        y: 224
      }, {
        type: "EntityCard",
        x: 1324,
        y: -40
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }]
    };
    Level19Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.20").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.chain", "game.entities.objects.mace", "game.entities.obstacles.obs-steel-box", "game.entities.enemy", "game.entities.obstacles.obs-wood-box").defines(function () {
    Level20 = {
      entities: [{
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 284,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 1,
            1: 1,
            2: 1,
            3: 1,
            4: 0
          },
          piggyNum: 3
        }
      }, {
        type: "EntityChain",
        x: 832,
        y: -56,
        settings: {
          chainId: 2,
          chainNum: 13
        }
      }, {
        type: "EntityChain",
        x: 852,
        y: 216,
        settings: {
          chainId: 1,
          chainNum: 1
        }
      }, {
        type: "EntityChain",
        x: 832,
        y: -232,
        settings: {
          chainId: 2,
          chainNum: 2
        }
      }, {
        type: "EntityChain",
        x: 832,
        y: -152,
        settings: {
          chainId: 2,
          chainNum: 7
        }
      }, {
        type: "EntityChain",
        x: 832,
        y: -88,
        settings: {
          chainId: 2,
          chainNum: 11
        }
      }, {
        type: "EntityChain",
        x: 852,
        y: 352,
        settings: {
          chainId: 1,
          chainNum: 12
        }
      }, {
        type: "EntityChain",
        x: 852,
        y: 384,
        settings: {
          chainId: 1,
          chainNum: 14
        }
      }, {
        type: "EntityChain",
        x: 832,
        y: -216,
        settings: {
          chainId: 2,
          chainNum: 3
        }
      }, {
        type: "EntityChain",
        x: 852,
        y: 300,
        settings: {
          chainId: 1,
          chainNum: 8
        }
      }, {
        type: "EntityChain",
        x: 852,
        y: 276,
        settings: {
          chainId: 1,
          chainNum: 6
        }
      }, {
        type: "EntityChain",
        x: 832,
        y: -136,
        settings: {
          chainId: 2,
          chainNum: 8
        }
      }, {
        type: "EntityChain",
        x: 852,
        y: 368,
        settings: {
          chainId: 1,
          chainNum: 13
        }
      }, {
        type: "EntityChain",
        x: 852,
        y: 324,
        settings: {
          chainId: 1,
          chainNum: 10
        }
      }, {
        type: "EntityChain",
        x: 832,
        y: -200,
        settings: {
          chainId: 2,
          chainNum: 4
        }
      }, {
        type: "EntityChain",
        x: 852,
        y: 312,
        settings: {
          chainId: 1,
          chainNum: 9
        }
      }, {
        type: "EntityChain",
        x: 852,
        y: 264,
        settings: {
          chainId: 1,
          chainNum: 5
        }
      }, {
        type: "EntityChain",
        x: 852,
        y: 336,
        settings: {
          chainId: 1,
          chainNum: 11
        }
      }, {
        type: "EntityChain",
        x: 832,
        y: -248,
        settings: {
          chainId: 2,
          chainNum: 1
        }
      }, {
        type: "EntityChain",
        x: 832,
        y: -104,
        settings: {
          chainId: 2,
          chainNum: 10
        }
      }, {
        type: "EntityChain",
        x: 832,
        y: -120,
        settings: {
          chainId: 2,
          chainNum: 9
        }
      }, {
        type: "EntityChain",
        x: 832,
        y: -72,
        settings: {
          chainId: 2,
          chainNum: 12
        }
      }, {
        type: "EntityChain",
        x: 832,
        y: -8,
        settings: {
          chainId: 2,
          chainNum: 16
        }
      }, {
        type: "EntityChain",
        x: 832,
        y: -184,
        settings: {
          chainId: 2,
          chainNum: 5
        }
      }, {
        type: "EntityChain",
        x: 832,
        y: -40,
        settings: {
          chainId: 2,
          chainNum: 14
        }
      }, {
        type: "EntityChain",
        x: 852,
        y: 288,
        settings: {
          chainId: 1,
          chainNum: 7
        }
      }, {
        type: "EntityChain",
        x: 832,
        y: -168,
        settings: {
          chainId: 2,
          chainNum: 6
        }
      }, {
        type: "EntityChain",
        x: 852,
        y: 252,
        settings: {
          chainId: 1,
          chainNum: 4
        }
      }, {
        type: "EntityChain",
        x: 852,
        y: 228,
        settings: {
          chainId: 1,
          chainNum: 2
        }
      }, {
        type: "EntityChain",
        x: 832,
        y: 8,
        settings: {
          chainId: 2,
          chainNum: 17
        }
      }, {
        type: "EntityChain",
        x: 832,
        y: -24,
        settings: {
          chainId: 2,
          chainNum: 15
        }
      }, {
        type: "EntityChain",
        x: 852,
        y: 240,
        settings: {
          chainId: 1,
          chainNum: 3
        }
      }, {
        type: "EntityMace",
        x: 812,
        y: 20,
        settings: {
          chainId: 2,
          chainNum: 18
        }
      }, {
        type: "EntityObsSteelBox",
        x: 816,
        y: 160
      }, {
        type: "EntityEnemy",
        x: 1024,
        y: -248
      }, {
        type: "EntityObsSteelBox",
        x: 876,
        y: -304
      }, {
        type: "EntityObsSteelBox",
        x: 876,
        y: -364
      }, {
        type: "EntityEnemy",
        x: 1060,
        y: 156
      }, {
        type: "EntityObsSteelBox",
        x: 1116,
        y: -372
      }, {
        type: "EntityObsWoodBox",
        x: 1056,
        y: 220
      }, {
        type: "EntityObsWoodBox",
        x: 936,
        y: 220
      }, {
        type: "EntityObsSteelBox",
        x: 1116,
        y: 44
      }, {
        type: "EntityObsWoodBox",
        x: 936,
        y: -192
      }, {
        type: "EntityObsSteelBox",
        x: 1116,
        y: -132
      }, {
        type: "EntityMace",
        x: 828,
        y: 396,
        settings: {
          chainId: 1,
          chainNum: 15
        }
      }, {
        type: "EntityObsSteelBox",
        x: 876,
        y: 160
      }, {
        type: "EntityObsSteelBox",
        x: 1116,
        y: -192
      }, {
        type: "EntityObsSteelBox",
        x: 1116,
        y: -76
      }, {
        type: "EntityObsSteelBox",
        x: 1116,
        y: -252
      }, {
        type: "EntityObsWoodBox",
        x: 1116,
        y: 220
      }, {
        type: "EntityObsSteelBox",
        x: 1116,
        y: -312
      }, {
        type: "EntityObsSteelBox",
        x: 1176,
        y: -252
      }, {
        type: "EntityObsWoodBox",
        x: 996,
        y: -192
      }, {
        type: "EntityObsSteelBox",
        x: 876,
        y: 100
      }, {
        type: "EntityObsSteelBox",
        x: 816,
        y: -304
      }, {
        type: "EntityObsWoodBox",
        x: 996,
        y: 220
      }, {
        type: "EntityEnemy",
        x: 948,
        y: -252
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }]
    };
    Level20Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.21").requires("impact.image", "game.entities.objects.enemy-fly-path", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.objects.chain", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.enemy", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-exp-barrel", "game.entities.objects.enemy-fly", "game.entities.objects.mace").defines(function () {
    Level21 = {
      entities: [{
        type: "EntityEnemyFlyPath",
        x: 804,
        y: -76,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 160,
        y: -176,
        settings: {
          pathId: 1,
          pathNum: 4
        }
      }, {
        type: "EntitySlingMaker",
        x: 280,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 1,
            2: 2,
            3: 1,
            4: 0
          },
          piggyNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 668,
        y: -172,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 376,
        y: -52,
        settings: {
          pathId: 1,
          pathNum: 5
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 376,
        y: -52,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 804,
        y: -76,
        settings: {
          pathId: 1,
          pathNum: 7
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 668,
        y: -172,
        settings: {
          pathId: 1,
          pathNum: 6
        }
      }, {
        type: "EntityChain",
        x: 1120,
        y: -152,
        settings: {
          chainId: 1,
          chainNum: 6
        }
      }, {
        type: "EntityChain",
        x: 1120,
        y: -140,
        settings: {
          chainId: 1,
          chainNum: 7
        }
      }, {
        type: "EntityChain",
        x: 1120,
        y: -72,
        settings: {
          chainId: 1,
          chainNum: 13
        }
      }, {
        type: "EntityChain",
        x: 1120,
        y: -200,
        settings: {
          chainId: 1,
          chainNum: 2
        }
      }, {
        type: "EntityChain",
        x: 1120,
        y: -52,
        settings: {
          chainId: 1,
          chainNum: 15
        }
      }, {
        type: "EntityChain",
        x: 1120,
        y: -128,
        settings: {
          chainId: 1,
          chainNum: 8
        }
      }, {
        type: "EntityChain",
        x: 1120,
        y: -164,
        settings: {
          chainId: 1,
          chainNum: 5
        }
      }, {
        type: "EntityChain",
        x: 1120,
        y: -96,
        settings: {
          chainId: 1,
          chainNum: 11
        }
      }, {
        type: "EntityChain",
        x: 1120,
        y: -108,
        settings: {
          chainId: 1,
          chainNum: 10
        }
      }, {
        type: "EntityChain",
        x: 1120,
        y: -188,
        settings: {
          chainId: 1,
          chainNum: 3
        }
      }, {
        type: "EntityChain",
        x: 1120,
        y: -84,
        settings: {
          chainId: 1,
          chainNum: 12
        }
      }, {
        type: "EntityChain",
        x: 1120,
        y: -60,
        settings: {
          chainId: 1,
          chainNum: 14
        }
      }, {
        type: "EntityChain",
        x: 1120,
        y: -116,
        settings: {
          chainId: 1,
          chainNum: 9
        }
      }, {
        type: "EntityChain",
        x: 1120,
        y: -176,
        settings: {
          chainId: 1,
          chainNum: 4
        }
      }, {
        type: "EntityChain",
        x: 1120,
        y: -212,
        settings: {
          chainId: 1,
          chainNum: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1344,
        y: -140
      }, {
        type: "EntityObsWoodBox",
        x: 1404,
        y: -140
      }, {
        type: "EntityObsWoodBarrel",
        x: 660,
        y: 220
      }, {
        type: "EntityObsWoodBarrel",
        x: 684,
        y: 156
      }, {
        type: "EntityEnemy",
        x: 1176,
        y: 296
      }, {
        type: "EntityEnemyBig",
        x: 1312,
        y: -280
      }, {
        type: "EntityEnemy",
        x: 528,
        y: 448,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1284,
        y: -200
      }, {
        type: "EntityObsSteelBox",
        x: 1100,
        y: -264
      }, {
        type: "EntityEnemy",
        x: 516,
        y: -36,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityEnemy",
        x: 472,
        y: 332,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1404,
        y: -200
      }, {
        type: "EntityObsExpBarrel",
        x: 1172,
        y: -4
      }, {
        type: "EntityObsExpBarrel",
        x: 880,
        y: -4
      }, {
        type: "EntityEnemy",
        x: 1388,
        y: 300,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityEnemy",
        x: 976,
        y: 32,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 464,
        y: 452
      }, {
        type: "EntityObsWoodBox",
        x: 464,
        y: 392
      }, {
        type: "EntityObsWoodBox",
        x: 540,
        y: 28
      }, {
        type: "EntityObsWoodBox",
        x: 600,
        y: 28
      }, {
        type: "EntityObsWoodBox",
        x: 660,
        y: 28
      }, {
        type: "EntityObsWoodBox",
        x: 480,
        y: 28
      }, {
        type: "EntityObsWoodBox",
        x: 1344,
        y: -200
      }, {
        type: "EntityObsWoodBox",
        x: 1284,
        y: -140
      }, {
        type: "EntityEnemyFly",
        x: 944,
        y: -160,
        settings: {
          pathId: 1
        }
      }, {
        type: "EntityEnemy",
        x: 632,
        y: -36,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1224,
        y: -200
      }, {
        type: "EntityObsWoodBarrel",
        x: 712,
        y: 220
      }, {
        type: "EntityMace",
        x: 1096,
        y: -40,
        settings: {
          chainId: 1,
          chainNum: 16
        }
      }, {
        type: "EntityEnemy",
        x: 1316,
        y: 300,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1224,
        y: -140
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 11, 0, 0, 0, 0, 19, 1, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 10, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 0,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 1, 1, 1, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 1, 1, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 1, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 11, 0, 0, 0, 0, 19, 1, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 10, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]]
      }]
    };
    Level21Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.22").requires("impact.image", "game.entities.objects.enemy-fly-path", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.enemy", "game.entities.objects.enemy-big", "game.entities.objects.enemy-fly").defines(function () {
    Level22 = {
      entities: [{
        type: "EntityEnemyFlyPath",
        x: 1416,
        y: 292,
        settings: {
          pathId: 2,
          pathNum: 5
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 660,
        y: 36,
        settings: {
          pathId: 2,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 696,
        y: 320,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1400,
        y: -48,
        settings: {
          pathId: 1,
          pathNum: 5
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1500,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 984,
        y: 108,
        settings: {
          pathId: 3,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1132,
        y: -152,
        settings: {
          pathId: 3,
          pathNum: 3
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1220,
        y: 480,
        settings: {
          pathId: 2,
          pathNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 720,
        y: 320,
        settings: {
          pathId: 3,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 512,
        y: 124,
        settings: {
          pathId: 3,
          pathNum: 5
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 908,
        y: 528,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 720,
        y: 272,
        settings: {
          pathId: 3,
          pathNum: 6
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1060,
        y: 16,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntitySlingMaker",
        x: 284,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 2,
            1: 0,
            2: 2,
            3: 0,
            4: 0
          },
          piggyNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 512,
        y: 216,
        settings: {
          pathId: 2,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1040,
        y: 264,
        settings: {
          pathId: 2,
          pathNum: 3
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1276,
        y: 140,
        settings: {
          pathId: 1,
          pathNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1136,
        y: 64,
        settings: {
          pathId: 2,
          pathNum: 6
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 404,
        y: -148,
        settings: {
          pathId: 3,
          pathNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1040,
        y: 328,
        settings: {
          pathId: 4,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1244,
        y: -160,
        settings: {
          pathId: 4,
          pathNum: 3
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 648,
        y: -20,
        settings: {
          pathId: 4,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 996,
        y: 292,
        settings: {
          pathId: 4,
          pathNum: 5
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1408,
        y: 64,
        settings: {
          pathId: 4,
          pathNum: 4
        }
      }, {
        type: "EntityEnemy",
        x: 1088,
        y: 92
      }, {
        type: "EntityEnemyBig",
        x: 1228,
        y: -76
      }, {
        type: "EntityEnemy",
        x: 728,
        y: 88
      }, {
        type: "EntityEnemyFly",
        x: 744,
        y: -204,
        settings: {
          pathId: 2
        }
      }, {
        type: "EntityEnemyFly",
        x: 1260,
        y: 516,
        settings: {
          pathId: 4
        }
      }, {
        type: "EntityEnemy",
        x: 1084,
        y: 452
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 20, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 20, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 19, 1, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 20, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 20, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 20, 0, 0, 0, 0, 12, 12, 12, 0, 19, 1, 1, 20, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 20, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 20], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 19, 1, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 20, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 20, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 20, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 20], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level22Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.23").requires("impact.image", "game.entities.level-control", "game.entities.objects.enemy-fly-path", "game.entities.objects.sling-maker", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-steel-box", "game.entities.enemy", "game.entities.obstacles.obs-wood-barrel", "game.entities.objects.enemy-big", "game.entities.objects.enemy-fly").defines(function () {
    Level23 = {
      entities: [{
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 512,
        y: 72,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 544,
        y: -252,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntitySlingMaker",
        x: 280,
        y: 296,
        settings: {
          piggyTypes: {
            "0": 2,
            1: 1,
            2: 1,
            3: 0,
            4: 0
          },
          piggyNum: 5
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 164,
        y: -28,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 620,
        y: 176
      }, {
        type: "EntityObsWoodBox",
        x: 904,
        y: 448
      }, {
        type: "EntityObsWoodBox",
        x: 1232,
        y: 328
      }, {
        type: "EntityObsWoodBox",
        x: 1428,
        y: 268
      }, {
        type: "EntityObsSteelBox",
        x: 376,
        y: -80
      }, {
        type: "EntityObsSteelBox",
        x: 824,
        y: -196
      }, {
        type: "EntityEnemy",
        x: 520,
        y: 388
      }, {
        type: "EntityEnemy",
        x: 1308,
        y: 328,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsSteelBox",
        x: 764,
        y: -196
      }, {
        type: "EntityObsWoodBox",
        x: 392,
        y: 392
      }, {
        type: "EntityEnemy",
        x: 504,
        y: 120,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 376,
        y: 312
      }, {
        type: "EntityEnemy",
        x: 884,
        y: 276,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 440,
        y: 372
      }, {
        type: "EntityEnemy",
        x: 1148,
        y: 452,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemy",
        x: 688,
        y: 120,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1428,
        y: 328
      }, {
        type: "EntityObsWoodBox",
        x: 1060,
        y: 448
      }, {
        type: "EntityObsWoodBox",
        x: 452,
        y: 452
      }, {
        type: "EntityEnemy",
        x: 412,
        y: -140,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 876,
        y: 136
      }, {
        type: "EntityObsWoodBarrel",
        x: 500,
        y: 432
      }, {
        type: "EntityObsWoodBarrel",
        x: 824,
        y: 192
      }, {
        type: "EntityObsWoodBarrel",
        x: 1344,
        y: 248
      }, {
        type: "EntityObsWoodBox",
        x: 500,
        y: 176
      }, {
        type: "EntityObsSteelBox",
        x: 560,
        y: 176
      }, {
        type: "EntityObsWoodBox",
        x: 392,
        y: 452
      }, {
        type: "EntityObsWoodBox",
        x: 1368,
        y: 328
      }, {
        type: "EntityEnemy",
        x: 648,
        y: 452,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityEnemyBig",
        x: 1044,
        y: 72
      }, {
        type: "EntityObsSteelBox",
        x: 680,
        y: 176
      }, {
        type: "EntityObsSteelBox",
        x: 436,
        y: -80
      }, {
        type: "EntityEnemyFly",
        x: 1088,
        y: -152,
        settings: {
          pathId: 1
        }
      }, {
        type: "EntityEnemy",
        x: 992,
        y: 452,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemy",
        x: 564,
        y: 120,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityEnemy",
        x: 800,
        y: -256,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 812,
        y: 252
      }, {
        type: "EntityObsWoodBarrel",
        x: 876,
        y: 196
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }]
    };
    Level23Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.24").requires("impact.image", "game.entities.objects.enemy-fly-path", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.obstacles.obs-wood-box", "game.entities.enemy", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-exp-barrel", "game.entities.objects.enemy-fly").defines(function () {
    Level24 = {
      entities: [{
        type: "EntityEnemyFlyPath",
        x: 504,
        y: -172,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntitySlingMaker",
        x: 284,
        y: 384,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 0,
            2: 1,
            3: 2,
            4: 2
          },
          piggyNum: 4
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1800,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 428,
        y: 460,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 504,
        y: -172,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 660,
        y: 272
      }, {
        type: "EntityObsWoodBox",
        x: 660,
        y: 332
      }, {
        type: "EntityEnemy",
        x: 1512,
        y: 244,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 780,
        y: 392
      }, {
        type: "EntityObsWoodBox",
        x: 932,
        y: 332
      }, {
        type: "EntityObsWoodBox",
        x: 932,
        y: 272
      }, {
        type: "EntityEnemy",
        x: 840,
        y: 456,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityEnemy",
        x: 1584,
        y: 452,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1532,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1112,
        y: 332
      }, {
        type: "EntityObsWoodBox",
        x: 840,
        y: 332
      }, {
        type: "EntityObsWoodBox",
        x: 932,
        y: 392
      }, {
        type: "EntityObsWoodBox",
        x: 660,
        y: 212
      }, {
        type: "EntityObsWoodBox",
        x: 992,
        y: 272
      }, {
        type: "EntityObsWoodBox",
        x: 992,
        y: 332
      }, {
        type: "EntityObsWoodBox",
        x: 720,
        y: 272
      }, {
        type: "EntityObsWoodBox",
        x: 1052,
        y: 212
      }, {
        type: "EntityObsWoodBox",
        x: 720,
        y: 332
      }, {
        type: "EntityEnemyBig",
        x: 1376,
        y: 436
      }, {
        type: "EntityObsWoodBox",
        x: 1052,
        y: 272
      }, {
        type: "EntityObsWoodBox",
        x: 1232,
        y: 184
      }, {
        type: "EntityObsWoodBox",
        x: 840,
        y: 392
      }, {
        type: "EntityObsWoodBox",
        x: 1412,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 1532,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 780,
        y: 332
      }, {
        type: "EntityObsWoodBox",
        x: 1292,
        y: 240
      }, {
        type: "EntityObsWoodBox",
        x: 1292,
        y: 180
      }, {
        type: "EntityObsWoodBox",
        x: 1292,
        y: 124
      }, {
        type: "EntityObsWoodBarrel",
        x: 768,
        y: 192
      }, {
        type: "EntityObsWoodBarrel",
        x: 824,
        y: 192
      }, {
        type: "EntityEnemy",
        x: 788,
        y: 156,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityEnemy",
        x: 844,
        y: 156,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityEnemy",
        x: 1168,
        y: 452,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityEnemyBig",
        x: 1068,
        y: 432
      }, {
        type: "EntityObsExpBarrel",
        x: 1056,
        y: 120
      }, {
        type: "EntityObsWoodBox",
        x: 992,
        y: 392
      }, {
        type: "EntityObsWoodBox",
        x: 1472,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1412,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1352,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 1112,
        y: 212
      }, {
        type: "EntityObsWoodBox",
        x: 780,
        y: 272
      }, {
        type: "EntityEnemy",
        x: 1480,
        y: 452,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1052,
        y: 332
      }, {
        type: "EntityObsWoodBox",
        x: 1352,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 720,
        y: 212
      }, {
        type: "EntityEnemyFly",
        x: 1440,
        y: -296,
        settings: {
          pathId: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1232,
        y: 240
      }, {
        type: "EntityObsWoodBox",
        x: 1232,
        y: 124
      }, {
        type: "EntityObsWoodBox",
        x: 840,
        y: 272
      }, {
        type: "EntityObsWoodBox",
        x: 1472,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 1112,
        y: 272
      }, {
        type: "EntityEnemy",
        x: 1396,
        y: 244,
        settings: {
          enemyType: 1
        }
      }],
      layer: [{
        name: "collision",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
      }, {
        name: "fg",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }]
    };
    Level24Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.25").requires("impact.image", "game.entities.objects.enemy-fly-path", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.obstacles.obs-steel-box", "game.entities.enemy", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-exp-barrel", "game.entities.objects.enemy-fly", "game.entities.objects.card").defines(function () {
    Level25 = {
      entities: [{
        type: "EntityEnemyFlyPath",
        x: 644,
        y: 244,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 768,
        y: -176,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntitySlingMaker",
        x: 284,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 0,
            2: 1,
            3: 2,
            4: 1
          },
          piggyNum: 4
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1700,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 768,
        y: -176,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1460,
        y: 244,
        settings: {
          pathId: 2,
          pathNum: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 580,
        y: -200
      }, {
        type: "EntityObsSteelBox",
        x: 1628,
        y: 460
      }, {
        type: "EntityObsSteelBox",
        x: 1688,
        y: 460
      }, {
        type: "EntityEnemy",
        x: 1292,
        y: 452,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityEnemy",
        x: 1204,
        y: -64
      }, {
        type: "EntityObsSteelBox",
        x: 800,
        y: 456
      }, {
        type: "EntityEnemy",
        x: 968,
        y: -16
      }, {
        type: "EntityObsSteelBox",
        x: 1384,
        y: -20
      }, {
        type: "EntityObsWoodBox",
        x: 1544,
        y: 48
      }, {
        type: "EntityObsExpBarrel",
        x: 1588,
        y: -44
      }, {
        type: "EntityObsWoodBox",
        x: 1152,
        y: 120
      }, {
        type: "EntityObsWoodBox",
        x: 1264,
        y: 120
      }, {
        type: "EntityObsWoodBox",
        x: 1108,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1152,
        y: 180
      }, {
        type: "EntityObsWoodBox",
        x: 1152,
        y: 240
      }, {
        type: "EntityObsSteelBox",
        x: 892,
        y: 52
      }, {
        type: "EntityEnemy",
        x: 1436,
        y: -76
      }, {
        type: "EntityObsSteelBox",
        x: 620,
        y: 456
      }, {
        type: "EntityObsWoodBox",
        x: 1664,
        y: 48
      }, {
        type: "EntityEnemy",
        x: 1364,
        y: -76
      }, {
        type: "EntityObsSteelBox",
        x: 1504,
        y: -20
      }, {
        type: "EntityEnemy",
        x: 1680,
        y: 404
      }, {
        type: "EntityEnemy",
        x: 1152,
        y: 452,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsSteelBox",
        x: 832,
        y: 52
      }, {
        type: "EntityEnemy",
        x: 1596,
        y: 400
      }, {
        type: "EntityObsSteelBox",
        x: 580,
        y: -260
      }, {
        type: "EntityObsSteelBox",
        x: 740,
        y: 456
      }, {
        type: "EntityObsSteelBox",
        x: 952,
        y: 52
      }, {
        type: "EntityObsSteelBox",
        x: 580,
        y: -140
      }, {
        type: "EntityObsSteelBox",
        x: 580,
        y: -320
      }, {
        type: "EntityObsWoodBox",
        x: 1208,
        y: 120
      }, {
        type: "EntityObsSteelBox",
        x: 1568,
        y: 460
      }, {
        type: "EntityEnemy",
        x: 1308,
        y: 244,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1012,
        y: 52
      }, {
        type: "EntityObsWoodBox",
        x: 1108,
        y: 360
      }, {
        type: "EntityEnemy",
        x: 1500,
        y: -76
      }, {
        type: "EntityEnemyFly",
        x: 1052,
        y: -224,
        settings: {
          pathId: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1444,
        y: -20
      }, {
        type: "EntityEnemyFly",
        x: 1684,
        y: 248,
        settings: {
          pathId: 2
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1324,
        y: -20
      }, {
        type: "EntityObsSteelBox",
        x: 680,
        y: 456
      }, {
        type: "EntityEnemy",
        x: 1220,
        y: 452,
        settings: {
          enmeyType: 4
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1604,
        y: 48
      }, {
        type: "EntityEnemy",
        x: 864,
        y: -12
      }, {
        type: "EntityCard",
        x: 1416,
        y: 136
      }],
      layer: [{
        name: "collision",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 1]]
      }, {
        name: "fg",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level25Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.26").requires("impact.image", "game.entities.objects.enemy-fly-path", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.objects.chain", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-exp-barrel", "game.entities.enemy", "game.entities.objects.mace", "game.entities.objects.enemy-fly", "game.entities.objects.card").defines(function () {
    Level26 = {
      entities: [{
        type: "EntityEnemyFlyPath",
        x: 968,
        y: -140,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 964,
        y: -140,
        settings: {
          pathId: 1,
          pathNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1416,
        y: -264,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntitySlingMaker",
        x: 284,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 1,
            2: 2,
            3: 1,
            4: 0
          },
          piggyNum: 4
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1700,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 360,
        y: -180,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 360,
        y: -180,
        settings: {
          pathId: 1,
          pathNum: 5
        }
      }, {
        type: "EntityChain",
        x: 672,
        y: 276,
        settings: {
          chainId: 2,
          chainNum: 16
        }
      }, {
        type: "EntityChain",
        x: 672,
        y: 228,
        settings: {
          chainId: 2,
          chainNum: 12
        }
      }, {
        type: "EntityChain",
        x: 1536,
        y: 308,
        settings: {
          chainId: 1,
          chainNum: 13
        }
      }, {
        type: "EntityChain",
        x: 672,
        y: 288,
        settings: {
          chainId: 2,
          chainNum: 17
        }
      }, {
        type: "EntityChain",
        x: 1536,
        y: 216,
        settings: {
          chainId: 1,
          chainNum: 5
        }
      }, {
        type: "EntityChain",
        x: 1536,
        y: 240,
        settings: {
          chainId: 1,
          chainNum: 7
        }
      }, {
        type: "EntityChain",
        x: 1536,
        y: 276,
        settings: {
          chainId: 1,
          chainNum: 10
        }
      }, {
        type: "EntityChain",
        x: 672,
        y: 216,
        settings: {
          chainId: 2,
          chainNum: 11
        }
      }, {
        type: "EntityChain",
        x: 672,
        y: 120,
        settings: {
          chainId: 2,
          chainNum: 3
        }
      }, {
        type: "EntityChain",
        x: 1536,
        y: 204,
        settings: {
          chainId: 1,
          chainNum: 4
        }
      }, {
        type: "EntityChain",
        x: 672,
        y: 204,
        settings: {
          chainId: 2,
          chainNum: 10
        }
      }, {
        type: "EntityChain",
        x: 672,
        y: 180,
        settings: {
          chainId: 2,
          chainNum: 8
        }
      }, {
        type: "EntityChain",
        x: 672,
        y: 252,
        settings: {
          chainId: 2,
          chainNum: 14
        }
      }, {
        type: "EntityChain",
        x: 672,
        y: 156,
        settings: {
          chainId: 2,
          chainNum: 6
        }
      }, {
        type: "EntityChain",
        x: 672,
        y: 144,
        settings: {
          chainId: 2,
          chainNum: 5
        }
      }, {
        type: "EntityChain",
        x: 672,
        y: 240,
        settings: {
          chainId: 2,
          chainNum: 13
        }
      }, {
        type: "EntityChain",
        x: 1536,
        y: 296,
        settings: {
          chainId: 1,
          chainNum: 12
        }
      }, {
        type: "EntityChain",
        x: 672,
        y: 264,
        settings: {
          chainId: 2,
          chainNum: 15
        }
      }, {
        type: "EntityChain",
        x: 1536,
        y: 192,
        settings: {
          chainId: 1,
          chainNum: 3
        }
      }, {
        type: "EntityChain",
        x: 672,
        y: 300,
        settings: {
          chainId: 2,
          chainNum: 18
        }
      }, {
        type: "EntityChain",
        x: 1536,
        y: 180,
        settings: {
          chainId: 1,
          chainNum: 2
        }
      }, {
        type: "EntityChain",
        x: 1536,
        y: 264,
        settings: {
          chainId: 1,
          chainNum: 9
        }
      }, {
        type: "EntityChain",
        x: 672,
        y: 108,
        settings: {
          chainId: 2,
          chainNum: 2
        }
      }, {
        type: "EntityChain",
        x: 1536,
        y: 252,
        settings: {
          chainId: 1,
          chainNum: 8
        }
      }, {
        type: "EntityChain",
        x: 1536,
        y: 288,
        settings: {
          chainId: 1,
          chainNum: 11
        }
      }, {
        type: "EntityChain",
        x: 1536,
        y: 228,
        settings: {
          chainId: 1,
          chainNum: 6
        }
      }, {
        type: "EntityChain",
        x: 672,
        y: 168,
        settings: {
          chainId: 2,
          chainNum: 7
        }
      }, {
        type: "EntityChain",
        x: 672,
        y: 132,
        settings: {
          chainId: 2,
          chainNum: 4
        }
      }, {
        type: "EntityChain",
        x: 672,
        y: 96,
        settings: {
          chainId: 2,
          chainNum: 1
        }
      }, {
        type: "EntityChain",
        x: 1536,
        y: 168,
        settings: {
          chainId: 1,
          chainNum: 1
        }
      }, {
        type: "EntityChain",
        x: 672,
        y: 192,
        settings: {
          chainId: 2,
          chainNum: 9
        }
      }, {
        type: "EntityEnemyBig",
        x: 1280,
        y: -32,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1316,
        y: 312
      }, {
        type: "EntityObsSteelBox",
        x: 1196,
        y: 44
      }, {
        type: "EntityObsWoodBox",
        x: 864,
        y: 136
      }, {
        type: "EntityObsExpBarrel",
        x: 864,
        y: 40
      }, {
        type: "EntityObsWoodBox",
        x: 1272,
        y: -228
      }, {
        type: "EntityObsWoodBarrel",
        x: 596,
        y: -100
      }, {
        type: "EntityObsWoodBarrel",
        x: 628,
        y: -164
      }, {
        type: "EntityObsSteelBox",
        x: 1256,
        y: 44
      }, {
        type: "EntityObsSteelBox",
        x: 1524,
        y: 116
      }, {
        type: "EntityObsSteelBox",
        x: 580,
        y: 40
      }, {
        type: "EntityObsWoodBarrel",
        x: 1256,
        y: 312
      }, {
        type: "EntityObsExpBarrel",
        x: 1204,
        y: -324
      }, {
        type: "EntityObsSteelBox",
        x: 1464,
        y: 116
      }, {
        type: "EntityObsWoodBarrel",
        x: 1100,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 636,
        y: 40
      }, {
        type: "EntityEnemy",
        x: 1212,
        y: 448,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1316,
        y: 44
      }, {
        type: "EntityObsSteelBox",
        x: 524,
        y: 40
      }, {
        type: "EntityObsWoodBarrel",
        x: 680,
        y: -40
      }, {
        type: "EntityObsWoodBarrel",
        x: 652,
        y: -100
      }, {
        type: "EntityObsWoodBox",
        x: 980,
        y: 136
      }, {
        type: "EntityObsWoodBox",
        x: 1332,
        y: 452
      }, {
        type: "EntityEnemyBig",
        x: 832,
        y: 312
      }, {
        type: "EntityObsWoodBox",
        x: 1392,
        y: 452
      }, {
        type: "EntityObsWoodBox",
        x: 1212,
        y: -228
      }, {
        type: "EntityEnemy",
        x: 1656,
        y: 304,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsWoodBox",
        x: 924,
        y: 136
      }, {
        type: "EntityEnemyBig",
        x: 1168,
        y: -36,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1136,
        y: 44
      }, {
        type: "EntityObsWoodBox",
        x: 1040,
        y: 136
      }, {
        type: "EntityObsSteelBox",
        x: 696,
        y: 40
      }, {
        type: "EntityObsWoodBox",
        x: 1272,
        y: 452
      }, {
        type: "EntityObsExpBarrel",
        x: 1E3,
        y: 40
      }, {
        type: "EntityObsWoodBarrel",
        x: 568,
        y: -40
      }, {
        type: "EntityMace",
        x: 648,
        y: 312,
        settings: {
          chainId: 2,
          chainNum: 19
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 624,
        y: -40
      }, {
        type: "EntityObsWoodBarrel",
        x: 1256,
        y: 372
      }, {
        type: "EntityMace",
        x: 1512,
        y: 316,
        settings: {
          chainId: 1,
          chainNum: 14
        }
      }, {
        type: "EntityEnemyFly",
        x: 108,
        y: -288,
        settings: {
          pathId: 1
        }
      }, {
        type: "EntityEnemyBig",
        x: 968,
        y: 316,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1332,
        y: 392
      }, {
        type: "EntityCard",
        x: 976,
        y: -104
      }],
      layer: [{
        name: "collision",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }]
    };
    Level26Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.27").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.objects.enemy-big", "game.entities.enemy", "game.entities.obstacles.obs-wood-circle", "game.entities.objects.card").defines(function () {
    Level27 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 312,
        y: 384,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 0,
            2: 1,
            3: 1,
            4: 2
          },
          piggyNum: 5
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1800,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityObsSteelBox",
        x: 728,
        y: 256
      }, {
        type: "EntityObsSteelBox",
        x: 668,
        y: 256
      }, {
        type: "EntityObsSteelBox",
        x: 788,
        y: 256
      }, {
        type: "EntityObsSteelBox",
        x: 728,
        y: -224
      }, {
        type: "EntityObsSteelBox",
        x: 1208,
        y: -44
      }, {
        type: "EntityObsWoodBox",
        x: 908,
        y: 76
      }, {
        type: "EntityObsSteelBox",
        x: 788,
        y: 496
      }, {
        type: "EntityObsSteelBox",
        x: 1628,
        y: 16
      }, {
        type: "EntityObsWoodBox",
        x: 1208,
        y: 80
      }, {
        type: "EntityObsWoodBarrel",
        x: 1640,
        y: 120
      }, {
        type: "EntityObsWoodBox",
        x: 1088,
        y: 256
      }, {
        type: "EntityObsWoodBox",
        x: 848,
        y: 256
      }, {
        type: "EntityObsSteelBox",
        x: 668,
        y: 436
      }, {
        type: "EntityObsSteelBox",
        x: 848,
        y: 496
      }, {
        type: "EntityObsSteelBox",
        x: 1448,
        y: 16
      }, {
        type: "EntityObsSteelBox",
        x: 1688,
        y: 16
      }, {
        type: "EntityObsSteelBox",
        x: 1628,
        y: 260
      }, {
        type: "EntityObsWoodBox",
        x: 1208,
        y: 140
      }, {
        type: "EntityObsSteelBox",
        x: 1088,
        y: 496
      }, {
        type: "EntityEnemyBig",
        x: 1008,
        y: -60
      }, {
        type: "EntityObsSteelBox",
        x: 788,
        y: 16
      }, {
        type: "EntityObsSteelBox",
        x: 908,
        y: 436
      }, {
        type: "EntityObsSteelBox",
        x: 1208,
        y: 376
      }, {
        type: "EntityEnemyBig",
        x: 1060,
        y: 180
      }, {
        type: "EntityObsWoodBox",
        x: 908,
        y: 196
      }, {
        type: "EntityObsSteelBox",
        x: 908,
        y: -224
      }, {
        type: "EntityObsSteelBox",
        x: 1208,
        y: 260
      }, {
        type: "EntityObsWoodBox",
        x: 908,
        y: 16
      }, {
        type: "EntityObsWoodBox",
        x: 908,
        y: -104
      }, {
        type: "EntityObsSteelBox",
        x: 1328,
        y: 260
      }, {
        type: "EntityObsWoodBox",
        x: 668,
        y: -104
      }, {
        type: "EntityObsSteelBox",
        x: 968,
        y: 496
      }, {
        type: "EntityObsWoodBox",
        x: 668,
        y: -224
      }, {
        type: "EntityObsSteelBox",
        x: 1448,
        y: 260
      }, {
        type: "EntityObsSteelBox",
        x: 1208,
        y: 496
      }, {
        type: "EntityObsSteelBox",
        x: 788,
        y: -224
      }, {
        type: "EntityObsSteelBox",
        x: 908,
        y: 316
      }, {
        type: "EntityObsWoodBox",
        x: 968,
        y: 16
      }, {
        type: "EntityObsWoodBox",
        x: 668,
        y: 136
      }, {
        type: "EntityObsWoodBox",
        x: 1088,
        y: 16
      }, {
        type: "EntityEnemy",
        x: 1660,
        y: 84,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1208,
        y: 16
      }, {
        type: "EntityObsSteelBox",
        x: 668,
        y: 16
      }, {
        type: "EntityObsSteelBox",
        x: 1208,
        y: -104
      }, {
        type: "EntityObsSteelBox",
        x: 1208,
        y: -224
      }, {
        type: "EntityEnemyBig",
        x: 796,
        y: 180
      }, {
        type: "EntityObsSteelBox",
        x: 1208,
        y: -164
      }, {
        type: "EntityObsWoodBox",
        x: 968,
        y: 256
      }, {
        type: "EntityObsWoodBox",
        x: 668,
        y: 76
      }, {
        type: "EntityObsWoodBox",
        x: 908,
        y: 136
      }, {
        type: "EntityObsSteelBox",
        x: 1088,
        y: -224
      }, {
        type: "EntityObsSteelBox",
        x: 968,
        y: -224
      }, {
        type: "EntityObsSteelBox",
        x: 1208,
        y: 436
      }, {
        type: "EntityObsSteelBox",
        x: 668,
        y: 316
      }, {
        type: "EntityObsWoodBox",
        x: 908,
        y: 256
      }, {
        type: "EntityObsWoodBox",
        x: 848,
        y: 16
      }, {
        type: "EntityObsSteelBox",
        x: 908,
        y: -164
      }, {
        type: "EntityObsSteelBox",
        x: 728,
        y: 496
      }, {
        type: "EntityObsSteelBox",
        x: 668,
        y: 496
      }, {
        type: "EntityObsSteelBox",
        x: 668,
        y: 376
      }, {
        type: "EntityObsSteelBox",
        x: 1208,
        y: 320
      }, {
        type: "EntityObsSteelBox",
        x: 1328,
        y: 16
      }, {
        type: "EntityObsSteelBox",
        x: 1268,
        y: 16
      }, {
        type: "EntityObsWoodBox",
        x: 668,
        y: -44
      }, {
        type: "EntityObsWoodBox",
        x: 908,
        y: -44
      }, {
        type: "EntityObsSteelBox",
        x: 1568,
        y: 16
      }, {
        type: "EntityObsSteelBox",
        x: 1508,
        y: 16
      }, {
        type: "EntityObsSteelBox",
        x: 1388,
        y: 16
      }, {
        type: "EntityObsSteelBox",
        x: 908,
        y: 496
      }, {
        type: "EntityObsSteelBox",
        x: 1508,
        y: 260
      }, {
        type: "EntityObsSteelBox",
        x: 1748,
        y: 16
      }, {
        type: "EntityObsSteelBox",
        x: 1268,
        y: 260
      }, {
        type: "EntityObsWoodBox",
        x: 668,
        y: -164
      }, {
        type: "EntityObsSteelBox",
        x: 1748,
        y: 260
      }, {
        type: "EntityObsSteelBox",
        x: 1688,
        y: 260
      }, {
        type: "EntityObsSteelBox",
        x: 1568,
        y: 260
      }, {
        type: "EntityObsSteelBox",
        x: 1028,
        y: 496
      }, {
        type: "EntityEnemy",
        x: 1540,
        y: 204,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1208,
        y: 200
      }, {
        type: "EntityObsWoodBox",
        x: 668,
        y: 196
      }, {
        type: "EntityObsSteelBox",
        x: 848,
        y: -224
      }, {
        type: "EntityObsWoodBarrel",
        x: 1640,
        y: 180
      }, {
        type: "EntityObsWoodCircle",
        x: 1336,
        y: 208
      }, {
        type: "EntityEnemy",
        x: 1600,
        y: 140,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1388,
        y: 260
      }, {
        type: "EntityObsSteelBox",
        x: 908,
        y: 376
      }, {
        type: "EntityObsWoodBarrel",
        x: 1588,
        y: 180
      }, {
        type: "EntityObsWoodBox",
        x: 1028,
        y: 16
      }, {
        type: "EntityObsWoodBox",
        x: 1148,
        y: 16
      }, {
        type: "EntityObsSteelBox",
        x: 1028,
        y: -224
      }, {
        type: "EntityEnemyBig",
        x: 1100,
        y: -64
      }, {
        type: "EntityEnemy",
        x: 1032,
        y: 440,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1148,
        y: 496
      }, {
        type: "EntityObsSteelBox",
        x: 1148,
        y: -224
      }, {
        type: "EntityEnemyBig",
        x: 796,
        y: 420,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 728,
        y: 16
      }, {
        type: "EntityEnemy",
        x: 1120,
        y: 440,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1148,
        y: 256
      }, {
        type: "EntityObsWoodBox",
        x: 1028,
        y: 256
      }, {
        type: "EntityCard",
        x: 780,
        y: -108
      }, {
        type: "EntityCard",
        x: 1044,
        y: 76
      }],
      layer: [{
        name: "collision",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
      }, {
        name: "fg",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level27Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.28").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-wood-box", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-exp-barrel", "game.entities.enemy", "game.entities.objects.card").defines(function () {
    Level28 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 284,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 2,
            1: 1,
            2: 0,
            3: 1,
            4: 0
          },
          piggyNum: 5
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1700,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1292,
        y: 0
      }, {
        type: "EntityObsSteelBox",
        x: 1236,
        y: 0
      }, {
        type: "EntityObsWoodBarrel",
        x: 1476,
        y: 400
      }, {
        type: "EntityObsWoodBarrel",
        x: 1324,
        y: 220
      }, {
        type: "EntityObsWoodBox",
        x: 1652,
        y: -120
      }, {
        type: "EntityEnemyBig",
        x: 904,
        y: 400,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 824,
        y: -164
      }, {
        type: "EntityObsExpBarrel",
        x: 904,
        y: -256
      }, {
        type: "EntityObsSteelBox",
        x: 1592,
        y: -60
      }, {
        type: "EntityObsWoodBarrel",
        x: 1148,
        y: 280
      }, {
        type: "EntityObsWoodBox",
        x: 624,
        y: 240
      }, {
        type: "EntityEnemy",
        x: 1172,
        y: 244,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityEnemy",
        x: 784,
        y: 420,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1204,
        y: 400
      }, {
        type: "EntityEnemy",
        x: 1536,
        y: 244,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1100,
        y: 400
      }, {
        type: "EntityEnemy",
        x: 844,
        y: -224,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1476,
        y: 340
      }, {
        type: "EntityObsExpBarrel",
        x: 700,
        y: 384
      }, {
        type: "EntityObsWoodBarrel",
        x: 1516,
        y: 280
      }, {
        type: "EntityObsSteelBox",
        x: 1588,
        y: -328
      }, {
        type: "EntityObsWoodBarrel",
        x: 1532,
        y: 340
      }, {
        type: "EntityObsWoodBox",
        x: 1648,
        y: 184
      }, {
        type: "EntityObsWoodBarrel",
        x: 1152,
        y: 400
      }, {
        type: "EntityEnemyBig",
        x: 1068,
        y: 72
      }, {
        type: "EntityObsWoodBarrel",
        x: 1628,
        y: 104
      }, {
        type: "EntityEnemy",
        x: 684,
        y: 420,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1176,
        y: 340
      }, {
        type: "EntityObsSteelBox",
        x: 884,
        y: -164
      }, {
        type: "EntityEnemy",
        x: 1480,
        y: 304,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemyBig",
        x: 880,
        y: 72
      }, {
        type: "EntityEnemy",
        x: 1644,
        y: 64,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 1348,
        y: 52
      }, {
        type: "EntityObsSteelBox",
        x: 944,
        y: -164
      }, {
        type: "EntityObsWoodBarrel",
        x: 1532,
        y: 400
      }, {
        type: "EntityObsSteelBox",
        x: 1592,
        y: -120
      }, {
        type: "EntityObsWoodBarrel",
        x: 1124,
        y: 340
      }, {
        type: "EntityObsExpBarrel",
        x: 808,
        y: 384
      }, {
        type: "EntityObsWoodBarrel",
        x: 1376,
        y: 220
      }, {
        type: "EntityObsWoodBox",
        x: 684,
        y: 240
      }, {
        type: "EntityObsWoodBox",
        x: 744,
        y: 240
      }, {
        type: "EntityObsSteelBox",
        x: 1588,
        y: -268
      }, {
        type: "EntityObsWoodBox",
        x: 1652,
        y: -60
      }, {
        type: "EntityCard",
        x: 972,
        y: -80
      }],
      layer: [{
        name: "collision",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }]
    };
    Level28Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.29").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.obstacles.obs-steel-box", "game.entities.enemy", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-exp-barrel", "game.entities.objects.enemy-big").defines(function () {
    Level29 = {
      entities: [{
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1700,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 284,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 0,
            2: 0,
            3: 1,
            4: 2
          },
          piggyNum: 5
        }
      }, {
        type: "EntityObsSteelBox",
        x: 904,
        y: 240
      }, {
        type: "EntityObsSteelBox",
        x: 1180,
        y: 176
      }, {
        type: "EntityEnemy",
        x: 1028,
        y: 424,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1236,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 1116,
        y: 360
      }, {
        type: "EntityObsWoodBarrel",
        x: 1132,
        y: 220
      }, {
        type: "EntityObsWoodBarrel",
        x: 1184,
        y: 220
      }, {
        type: "EntityObsSteelBox",
        x: 1176,
        y: 360
      }, {
        type: "EntityObsWoodBarrel",
        x: 1552,
        y: -264
      }, {
        type: "EntityObsWoodBox",
        x: 964,
        y: 240
      }, {
        type: "EntityObsWoodBox",
        x: 516,
        y: -32
      }, {
        type: "EntityEnemy",
        x: 1032,
        y: 244,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 624,
        y: -52
      }, {
        type: "EntityObsSteelBox",
        x: 1660,
        y: 76
      }, {
        type: "EntityObsWoodBox",
        x: 576,
        y: -92
      }, {
        type: "EntityObsWoodBox",
        x: 1660,
        y: 364
      }, {
        type: "EntityEnemy",
        x: 1188,
        y: 56,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 912,
        y: -32
      }, {
        type: "EntityObsWoodBox",
        x: 732,
        y: -92
      }, {
        type: "EntityObsWoodBox",
        x: 672,
        y: -152
      }, {
        type: "EntityObsWoodBox",
        x: 1088,
        y: -240
      }, {
        type: "EntityObsSteelBox",
        x: 1024,
        y: 300
      }, {
        type: "EntityObsWoodBarrel",
        x: 960,
        y: 96
      }, {
        type: "EntityObsWoodBarrel",
        x: 808,
        y: -172
      }, {
        type: "EntityObsWoodBarrel",
        x: 836,
        y: -232
      }, {
        type: "EntityObsSteelBox",
        x: 1472,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 1540,
        y: -124
      }, {
        type: "EntityObsWoodBarrel",
        x: 1024,
        y: 100
      }, {
        type: "EntityObsWoodBarrel",
        x: 1576,
        y: 188
      }, {
        type: "EntityObsWoodBox",
        x: 1200,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1600,
        y: 328
      }, {
        type: "EntityObsWoodBox",
        x: 576,
        y: 28
      }, {
        type: "EntityObsWoodBox",
        x: 636,
        y: -92
      }, {
        type: "EntityObsWoodBox",
        x: 928,
        y: 360
      }, {
        type: "EntityEnemy",
        x: 1476,
        y: 248,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsWoodBox",
        x: 636,
        y: 28
      }, {
        type: "EntityObsWoodBarrel",
        x: 784,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 732,
        y: -32
      }, {
        type: "EntityEnemy",
        x: 1176,
        y: 424,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 1084,
        y: -336
      }, {
        type: "EntityObsWoodBox",
        x: 852,
        y: -32
      }, {
        type: "EntityObsWoodBox",
        x: 516,
        y: 84
      }, {
        type: "EntityObsWoodBarrel",
        x: 948,
        y: 160
      }, {
        type: "EntityObsWoodBox",
        x: 792,
        y: -32
      }, {
        type: "EntityObsSteelBox",
        x: 1600,
        y: 268
      }, {
        type: "EntityObsSteelBox",
        x: 1660,
        y: 420
      }, {
        type: "EntityObsWoodBox",
        x: 964,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1472,
        y: 364
      }, {
        type: "EntityObsWoodBarrel",
        x: 860,
        y: -172
      }, {
        type: "EntityEnemy",
        x: 856,
        y: -268,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1164,
        y: 96
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 420
      }, {
        type: "EntityObsWoodBox",
        x: 1472,
        y: 304
      }, {
        type: "EntityObsSteelBox",
        x: 1672,
        y: -332
      }, {
        type: "EntityObsWoodBarrel",
        x: 1068,
        y: 280
      }, {
        type: "EntityObsWoodBarrel",
        x: 1544,
        y: 128
      }, {
        type: "EntityObsSteelBox",
        x: 1468,
        y: 76
      }, {
        type: "EntityObsSteelBox",
        x: 1600,
        y: -124
      }, {
        type: "EntityObsSteelBox",
        x: 672,
        y: -208
      }, {
        type: "EntityObsSteelBox",
        x: 1088,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 1464,
        y: -332
      }, {
        type: "EntityObsWoodBarrel",
        x: 1520,
        y: 188
      }, {
        type: "EntityObsWoodBarrel",
        x: 1124,
        y: 280
      }, {
        type: "EntityObsWoodBarrel",
        x: 1528,
        y: -204
      }, {
        type: "EntityObsWoodBox",
        x: 1540,
        y: 328
      }, {
        type: "EntityObsWoodBox",
        x: 1660,
        y: 244
      }, {
        type: "EntityObsWoodBox",
        x: 732,
        y: -208
      }, {
        type: "EntityObsSteelBox",
        x: 1088,
        y: 236
      }, {
        type: "EntityObsWoodBox",
        x: 1660,
        y: 304
      }, {
        type: "EntityEnemy",
        x: 520,
        y: 32,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1028,
        y: 180
      }, {
        type: "EntityEnemy",
        x: 1064,
        y: 364,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1648,
        y: 164
      }, {
        type: "EntityEnemy",
        x: 1476,
        y: 20,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemy",
        x: 584,
        y: -144,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1232,
        y: 420
      }, {
        type: "EntityEnemyBig",
        x: 1100,
        y: 160,
        settings: {
          enemyType: 1
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 836,
        y: -112
      }, {
        type: "EntityObsWoodBox",
        x: 988,
        y: 360
      }, {
        type: "EntityObsSteelBox",
        x: 1540,
        y: 268
      }, {
        type: "EntityObsWoodBarrel",
        x: 1580,
        y: -204
      }, {
        type: "EntityObsWoodBarrel",
        x: 888,
        y: -112
      }, {
        type: "EntityObsWoodBox",
        x: 1148,
        y: -240
      }, {
        type: "EntityObsWoodBox",
        x: 972,
        y: -32
      }],
      layer: [{
        name: "collision",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0]]
      }, {
        name: "fg",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0]]
      }]
    };
    Level29Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.30").requires("impact.image", "game.entities.objects.enemy-fly-path", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.enemy", "game.entities.obstacles.obs-wood-box", "game.entities.objects.enemy-big", "game.entities.objects.enemy-fly", "game.entities.obstacles.obs-exp-barrel", "game.entities.obstacles.obs-wood-circle", "game.entities.objects.card").defines(function () {
    Level30 = {
      entities: [{
        type: "EntityEnemyFlyPath",
        x: 408,
        y: -8,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1060,
        y: 32,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1700,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1416,
        y: -100,
        settings: {
          pathId: 2,
          pathNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 408,
        y: -112,
        settings: {
          pathId: 2,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 104,
        y: -108,
        settings: {
          pathId: 1,
          pathNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 676,
        y: -92,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntitySlingMaker",
        x: 284,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 0,
            2: 1,
            3: 1,
            4: 2
          },
          piggyNum: 5
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1056,
        y: -100,
        settings: {
          pathId: 2,
          pathNum: 3
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 672,
        y: 4,
        settings: {
          pathId: 2,
          pathNum: 2
        }
      }, {
        type: "EntityObsSteelBox",
        x: 452,
        y: 528
      }, {
        type: "EntityObsWoodBarrel",
        x: 1272,
        y: 428
      }, {
        type: "EntityEnemy",
        x: 1176,
        y: 452
      }, {
        type: "EntityObsWoodBarrel",
        x: 952,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1048,
        y: 288
      }, {
        type: "EntityObsSteelBox",
        x: 1108,
        y: 288
      }, {
        type: "EntityObsWoodBox",
        x: 1108,
        y: 168
      }, {
        type: "EntityEnemyBig",
        x: 1012,
        y: 216
      }, {
        type: "EntityObsSteelBox",
        x: 1120,
        y: -192
      }, {
        type: "EntityObsSteelBox",
        x: 748,
        y: 288
      }, {
        type: "EntityObsWoodBox",
        x: 1060,
        y: -192
      }, {
        type: "EntityEnemyFly",
        x: 104,
        y: -16,
        settings: {
          pathId: 2
        }
      }, {
        type: "EntityEnemyBig",
        x: 412,
        y: 452
      }, {
        type: "EntityObsExpBarrel",
        x: 1096,
        y: -280
      }, {
        type: "EntityObsWoodBarrel",
        x: 976,
        y: 368
      }, {
        type: "EntityObsSteelBox",
        x: 988,
        y: 288
      }, {
        type: "EntityObsWoodBarrel",
        x: 1248,
        y: 368
      }, {
        type: "EntityObsSteelBox",
        x: 1264,
        y: 96
      }, {
        type: "EntityObsSteelBox",
        x: 1324,
        y: 96
      }, {
        type: "EntityObsWoodBox",
        x: 1108,
        y: 228
      }, {
        type: "EntityObsSteelBox",
        x: 688,
        y: 288
      }, {
        type: "EntityObsWoodBarrel",
        x: 1248,
        y: 12
      }, {
        type: "EntityEnemyBig",
        x: 1324,
        y: 24
      }, {
        type: "EntityEnemyFly",
        x: 1412,
        y: -72,
        settings: {
          pathId: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 940,
        y: -192
      }, {
        type: "EntityObsWoodCircle",
        x: 736,
        y: 232
      }, {
        type: "EntityObsWoodBox",
        x: 1E3,
        y: -192
      }, {
        type: "EntityEnemy",
        x: 916,
        y: 456
      }, {
        type: "EntityObsSteelBox",
        x: 392,
        y: 528
      }, {
        type: "EntityObsWoodBarrel",
        x: 1004,
        y: 428
      }, {
        type: "EntityEnemy",
        x: 1368,
        y: 452
      }, {
        type: "EntityEnemy",
        x: 1072,
        y: -244,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemy",
        x: 1004,
        y: -244,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1220,
        y: 428
      }, {
        type: "EntityEnemy",
        x: 1088,
        y: 448
      }, {
        type: "EntityCard",
        x: 848,
        y: -84
      }],
      layer: [{
        name: "collision",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
      }, {
        name: "fg",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 0,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level30Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.31").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.obstacles.obs-steel-box", "game.entities.enemy").defines(function () {
    Level31 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 4,
            1: 1,
            2: 2,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 0
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 960,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: 204
      }, {
        type: "EntityEnemy",
        x: 816,
        y: 272,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: 324
      }, {
        type: "EntityObsSteelBox",
        x: 752,
        y: 324
      }, {
        type: "EntityObsSteelBox",
        x: 752,
        y: 264
      }, {
        type: "EntityObsSteelBox",
        x: 752,
        y: 204
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level31Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.32").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.enemy", "game.entities.obstacles.obs-wood-barrel").defines(function () {
    Level32 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 7,
            1: 1,
            2: 2,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 0
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 960,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityEnemy",
        x: 796,
        y: 368,
        settings: {
          enemyType: 0
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 644,
        y: 220
      }, {
        type: "EntityObsWoodBarrel",
        x: 696,
        y: 220
      }, {
        type: "EntityObsWoodBarrel",
        x: 644,
        y: 280
      }, {
        type: "EntityObsWoodBarrel",
        x: 696,
        y: 280
      }, {
        type: "EntityObsWoodBarrel",
        x: 644,
        y: 340
      }, {
        type: "EntityObsWoodBarrel",
        x: 696,
        y: 340
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level32Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.33").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-steel-box", "game.entities.objects.targeter", "game.entities.objects.testpoint").defines(function () {
    Level33 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 7,
            1: 2,
            2: 2,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 1
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 960,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityEnemyBig",
        x: 628,
        y: 392,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityEnemyBig",
        x: 816,
        y: 388,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsSteelBox",
        x: 632,
        y: 448
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: 448
      }, {
        type: "EntityObsSteelBox",
        x: 752,
        y: 448
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: 448
      }, {
        type: "EntityObsSteelBox",
        x: 508,
        y: 236
      }, {
        type: "EntityObsSteelBox",
        x: 508,
        y: 176
      }, {
        type: "EntityTargeter",
        x: 724,
        y: 28,
        settings: {
          isBig: "true"
        }
      }, {
        type: "EntityTestpoint",
        x: 376,
        y: 184
      }, {
        type: "EntityTestpoint",
        x: 524,
        y: 88
      }, {
        type: "EntityTestpoint",
        x: 456,
        y: 128
      }, {
        type: "EntityTestpoint",
        x: 608,
        y: 64
      }, {
        type: "EntityTestpoint",
        x: 688,
        y: 52
      }, {
        type: "EntityTestpoint",
        x: 328,
        y: 220
      }, {
        type: "EntityTestpoint",
        x: 564,
        y: 76
      }, {
        type: "EntityTestpoint",
        x: 416,
        y: 156
      }, {
        type: "EntityTestpoint",
        x: 488,
        y: 104
      }, {
        type: "EntityTestpoint",
        x: 648,
        y: 56
      }, {
        type: "EntityTestpoint",
        x: 280,
        y: 252
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level33Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.34").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.obstacles.obs-steel-box", "game.entities.enemy", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-wood-box").defines(function () {
    Level34 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 4,
            1: 4,
            2: 4,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 3
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 892,
        y: 168
      }, {
        type: "EntityObsSteelBox",
        x: 772,
        y: 168
      }, {
        type: "EntityObsSteelBox",
        x: 712,
        y: 168
      }, {
        type: "EntityObsSteelBox",
        x: 832,
        y: 168
      }, {
        type: "EntityObsSteelBox",
        x: 712,
        y: 108
      }, {
        type: "EntityEnemy",
        x: 792,
        y: 112,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsSteelBox",
        x: 712,
        y: 48
      }, {
        type: "EntityObsSteelBox",
        x: 712,
        y: -12
      }, {
        type: "EntityObsWoodBarrel",
        x: 832,
        y: 88
      }, {
        type: "EntityObsWoodBarrel",
        x: 888,
        y: 88
      }, {
        type: "EntityObsWoodBarrel",
        x: 856,
        y: 28
      }, {
        type: "EntityObsSteelBox",
        x: 1044,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 984,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1104,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1164,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1224,
        y: 368
      }, {
        type: "EntityObsSteelBox",
        x: 1224,
        y: 308
      }, {
        type: "EntityObsSteelBox",
        x: 1224,
        y: 248
      }, {
        type: "EntityObsSteelBox",
        x: 1284,
        y: 248
      }, {
        type: "EntityObsSteelBox",
        x: 1224,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1284,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1344,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1404,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1464,
        y: 428
      }, {
        type: "EntityObsWoodBox",
        x: 1284,
        y: 368
      }, {
        type: "EntityObsWoodBox",
        x: 1284,
        y: 308
      }, {
        type: "EntityEnemy",
        x: 1360,
        y: 372,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1168,
        y: -16
      }, {
        type: "EntityObsSteelBox",
        x: 1168,
        y: 44
      }, {
        type: "EntityObsSteelBox",
        x: 1168,
        y: 104
      }, {
        type: "EntityObsSteelBox",
        x: 1228,
        y: 104
      }, {
        type: "EntityObsSteelBox",
        x: 1288,
        y: 104
      }, {
        type: "EntityEnemy",
        x: 1244,
        y: 48,
        settings: {
          enemyType: 7
        }
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level34Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.35").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.obstacles.obs-steel-box", "game.entities.enemy", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel").defines(function () {
    Level35 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 4,
            1: 4,
            2: 7,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 3
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 892,
        y: 168
      }, {
        type: "EntityObsSteelBox",
        x: 772,
        y: 168
      }, {
        type: "EntityObsSteelBox",
        x: 712,
        y: 168
      }, {
        type: "EntityObsSteelBox",
        x: 832,
        y: 168
      }, {
        type: "EntityEnemy",
        x: 788,
        y: 116,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityEnemy",
        x: 720,
        y: 116,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1044,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 984,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1104,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1164,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1180,
        y: 180
      }, {
        type: "EntityObsSteelBox",
        x: 1240,
        y: 180
      }, {
        type: "EntityObsSteelBox",
        x: 1300,
        y: 180
      }, {
        type: "EntityEnemy",
        x: 1308,
        y: 124,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityEnemy",
        x: 1196,
        y: 128,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityEnemyBig",
        x: 996,
        y: 352,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityEnemyBig",
        x: 1144,
        y: 356,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1244,
        y: 120
      }, {
        type: "EntityObsWoodBox",
        x: 832,
        y: 108
      }, {
        type: "EntityObsWoodBarrel",
        x: 876,
        y: 28
      }, {
        type: "EntityObsWoodBox",
        x: 892,
        y: 108
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level35Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.entities.objects.enemy-fly-new").requires("plugins.box2d.entity").defines(function () {
    EntityEnemyFlyNew = ig.Box2DEntity.extend({
      type: ig.Entity.TYPE.A,
      checkAgainst: ig.Entity.TYPE.B,
      zIndex: 700,
      sc: 2,
      gamePaused: !1,
      scX: 1,
      scY: 1,
      box2dType: 0,
      dynamicType: 0,
      density: 1,
      friction: 0.3,
      restitution: 0.1,
      mass: 0.8,
      INERTIA: 0,
      ANGULAR_DAMPING: 0.715,
      broken: !1,
      jointSet: !1,
      sleepVel: 0.14,
      name: "enemyFly",
      classify: "enemy",
      alp: 1,
      firstShape: !0,
      slicePoints: [],
      splitPoints: [],
      sleepAtStart: !1,
      ctxIndex: 0,
      canvasPerEntity: !0,
      speed: 150,
      maxRad: 135,
      clickPos: [-999, -999],
      isDead: !1,
      animSheet: null,
      animSheetList: [new ig.AnimationSheet("media/graphics/game/objects/enemy-wakanda-flying.png", 38, 76), new ig.AnimationSheet("media/graphics/game/objects/enemy-volcano-flying.png", 47, 81), new ig.AnimationSheet("media/graphics/game/objects/enemy-space-flying.png", 66, 105)],
      size: {
        x: 71,
        y: 46
      },
      sizeList: [{
        x: 38,
        y: 76
      }, {
        x: 47,
        y: 81
      }, {
        x: 66,
        y: 105
      }],
      anim_speed_idle: 0.05,
      anim_frames_idle: [0, 1],
      anim_speed_dead: 0.05,
      anim_frames_dead: [0],
      pathId: null,
      paths: [],
      pathCur: 1,
      moveSpeed: 0.5,
      specialDraw: !0,
      flipped: !1,
      enemyType: 0,
      init: function (b, c, d) {
        this.parent(b, c, d);
        ig.global.wm && !d.enemyType && (d.enemyType = 0);
        d.enemyType || (d.enemyType = 0);
        this.animSheet = this.animSheetList[d.enemyType];
        this.size = this.sizeList[d.enemyType];
        this.anims.dead = new ig.Animation(this.animSheet, 0.1, [0]);
        this.addAnim("idle", this.anim_speed_idle, this.anim_frames_idle);
        ig.global.wm || (this.iniPivotX = this.pos.x + this.size.x / 2, this.iniPivotY = this.pos.y + this.size.y / 2, this.getMovePath());
      },
      getMovePath: function () {
        this.paths.push({
          x: this.pos.x,
          y: this.pos.y,
          pathNum: 0
        });
        for (var b = ig.game.getEntitiesByType(EntityEnemyFlyPath), c = 0; c < b.length; c++) b[c].pathId === this.pathId && this.paths.push({
          x: b[c].pos.x,
          y: b[c].pos.y,
          pathNum: b[c].pathNum
        });
        this.paths.sort(function (b, c) {
          return b.pathNum - c.pathNum;
        });
      },
      update: function () {
        this.parent();
        if (this.isDead) this.pos.y > ig.system.height + 100 && this.kill();else if (!ig.global.wm && !ig.game.box2dPaused) {
          if (!ig.game.box2dPaused) {
            var b = this.body.GetLinearVelocity();
            b.x = 0;
            b.y = 0;
            this.body.SetLinearVelocity(b);
          }
          if (!this.webDragging) {
            var c = this.pos.x + this.size.x / 2,
              d = this.pos.y + this.size.y / 2,
              b = (this.pos.x + this.size.x / 2) * Box2D.SCALE,
              e = (this.pos.y + this.size.y / 2) * Box2D.SCALE,
              f = this.paths[this.pathCur].x,
              j = this.paths[this.pathCur].y,
              m = 180 * Math.atan2(d - j, c - f) / Math.PI,
              c = c - f,
              d = d - j,
              d = Math.sqrt(c * c + d * d),
              j = this.moveSpeed * Math.cos(m * Math.PI / 180),
              m = this.moveSpeed * Math.sin(m * Math.PI / 180);
            10 >= d - this.moveSpeed && (this.pathCur++, this.pathCur >= this.paths.length && (this.pathCur = 0));
            this.body.SetPositionAndAngle(new Box2D.Common.Math.b2Vec2(b - j, e - m), 0);
          }
        }
      },
      beginContact: function (b) {
        if (!b || !(b.name && "web" == b.name)) if (!this.isDead && b && b.body && (15 < b.body.GetLinearVelocity().Length() || "missile" == b.classify) && !this.isDead) "piggy" == b.classify && b.triggerCollisionAbility(this), this.destroy();
      },
      preSolve: function (b, c) {
        if (!b || !(b.name && "web" == b.name)) this.isDead ? c.SetEnabled(!1) : b && (b.classify ? "obstacle" == b.classify || "enemy" == b.classify ? c.SetEnabled(!1) : "piggy" == b.classify && (b.triggerCollisionAbility(this), this.destroy(), c.SetEnabled(!1)) : c.SetEnabled(!1));
      },
      callOnce: !1,
      check: function (b) {
        this.isDead || b.classify && "missile" === b.classify && !this.callOnce && !b.isReturning && this.destroy(b.pos);
      },
      destroy: function () {
        this.isDead || (ig.game.spawnEntity(EntityEffect, this.pos.x, this.pos.y), 2 > ig.game.enemyDieSoundLim && 0 >= ig.game.lastenemyDiePlay && (ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.hit), ig.game.enemyDieSoundLim++, ig.game.lastenemyDiePlay = 1), 2 > ig.game.enemyDie2SoundLim && 0 >= ig.game.lastenemyDie2Play && (ig.soundHandler.sfxPlayer.play(ig.soundHandler.sfxPlayer.soundList.bighit), ig.game.enemyDie2SoundLim++, ig.game.lastenemyDie2Play = 1), ig.game.gainScore(50, this, !0), this.isDead = !0, this.currentAnim = this.anims.dead);
      },
      tweenF: function () {},
      ready: function () {
        this.pointer = ig.game.getEntitiesByType(EntityPointer)[0];
      },
      draw: function () {
        this.parent();
      }
    });
  });
  ig.baked = !0;
  ig.module("game.levels.36").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-steel-box", "game.entities.objects.enemy-big", "game.entities.enemy", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-exp-barrel", "game.entities.objects.card").defines(function () {
    Level36 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 200,
        y: 350,
        settings: {
          piggyTypes: {
            "0": 4,
            1: 4,
            2: 4,
            3: 7,
            4: 7
          },
          piggyNum: 5
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 548,
        y: -200,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1288,
        y: 452
      }, {
        type: "EntityObsSteelBox",
        x: 1272,
        y: 328
      }, {
        type: "EntityObsWoodBox",
        x: 1348,
        y: 452
      }, {
        type: "EntityObsWoodBox",
        x: 1348,
        y: 392
      }, {
        type: "EntityEnemyBig",
        x: 1292,
        y: 248,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityEnemy",
        x: 992,
        y: 280,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 564,
        y: 132,
        settings: {
          pathId: 1,
          enemyType: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1332,
        y: 328
      }, {
        type: "EntityObsSteelBox",
        x: 1392,
        y: 328
      }, {
        type: "EntityEnemy",
        x: 984,
        y: 456,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1004,
        y: -20
      }, {
        type: "EntityObsWoodBarrel",
        x: 1056,
        y: -20
      }, {
        type: "EntityObsWoodBarrel",
        x: 1108,
        y: -20
      }, {
        type: "EntityObsWoodBarrel",
        x: 1028,
        y: -76
      }, {
        type: "EntityEnemy",
        x: 1208,
        y: 8,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemy",
        x: 1072,
        y: -108,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemy",
        x: 956,
        y: 8,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1080,
        y: -76
      }, {
        type: "EntityObsWoodBox",
        x: 1312,
        y: -20
      }, {
        type: "EntityObsExpBarrel",
        x: 1276,
        y: -112
      }, {
        type: "EntityObsWoodBox",
        x: 1080,
        y: 272
      }, {
        type: "EntityObsWoodBox",
        x: 1080,
        y: 212
      }, {
        type: "EntityCard",
        x: 1168,
        y: 208
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 55, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 55, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level36Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.37").requires("impact.image", "game.entities.level-control", "game.entities.objects.enemy-fly-path", "game.entities.objects.sling-maker", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-exp-barrel", "game.entities.enemy", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-wood-barrel", "game.entities.objects.enemy-big", "game.entities.objects.card").defines(function () {
    Level37 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1276,
        y: -148,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 784,
        y: -148,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntitySlingMaker",
        x: 200,
        y: 350,
        settings: {
          piggyTypes: {
            "0": 4,
            1: 7,
            2: 0,
            3: 2
          },
          piggyNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 784,
        y: -148,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1252,
        y: 240
      }, {
        type: "EntityObsSteelBox",
        x: 1252,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1252,
        y: 180
      }, {
        type: "EntityObsExpBarrel",
        x: 616,
        y: 264
      }, {
        type: "EntityEnemy",
        x: 836,
        y: 452,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsSteelBox",
        x: 960,
        y: 28
      }, {
        type: "EntityEnemy",
        x: 1340,
        y: 300,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1260,
        y: 88
      }, {
        type: "EntityEnemyFlyNew",
        x: 516,
        y: 276,
        settings: {
          pathId: 1,
          enemyType: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1320,
        y: 88
      }, {
        type: "EntityObsSteelBox",
        x: 1380,
        y: 88
      }, {
        type: "EntityObsSteelBox",
        x: 1200,
        y: 88
      }, {
        type: "EntityObsSteelBox",
        x: 1080,
        y: 88
      }, {
        type: "EntityObsSteelBox",
        x: 1140,
        y: 88
      }, {
        type: "EntityObsSteelBox",
        x: 1020,
        y: 88
      }, {
        type: "EntityObsSteelBox",
        x: 1020,
        y: 328
      }, {
        type: "EntityObsSteelBox",
        x: 1020,
        y: 388
      }, {
        type: "EntityEnemy",
        x: 1128,
        y: 276,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1108,
        y: 308
      }, {
        type: "EntityObsWoodBarrel",
        x: 1080,
        y: 368
      }, {
        type: "EntityObsWoodBarrel",
        x: 1136,
        y: 368
      }, {
        type: "EntityEnemy",
        x: 752,
        y: 392,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemyBig",
        x: 916,
        y: 412,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1020,
        y: 268
      }, {
        type: "EntityObsWoodBox",
        x: 1020,
        y: 208
      }, {
        type: "EntityObsWoodBox",
        x: 1020,
        y: 148
      }, {
        type: "EntityEnemy",
        x: 1068,
        y: 32,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemy",
        x: 1164,
        y: 32,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemy",
        x: 1256,
        y: 32,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemy",
        x: 1352,
        y: 32,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsSteelBox",
        x: 960,
        y: 88
      }, {
        type: "EntityObsSteelBox",
        x: 960,
        y: -32
      }, {
        type: "EntityCard",
        x: 700,
        y: -92
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 23, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 23, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level37Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.38").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.objects.enemy-big", "game.entities.enemy", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-wood-box").defines(function () {
    Level38 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 200,
        y: 350,
        settings: {
          piggyTypes: {
            "0": 4,
            1: 4,
            2: 0,
            3: 1,
            4: 7
          },
          piggyNum: 5
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 684,
        y: 208,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 996,
        y: 328
      }, {
        type: "EntityObsSteelBox",
        x: 1260,
        y: 160
      }, {
        type: "EntityObsSteelBox",
        x: 1320,
        y: 88
      }, {
        type: "EntityObsSteelBox",
        x: 1380,
        y: 88
      }, {
        type: "EntityObsSteelBox",
        x: 1200,
        y: 160
      }, {
        type: "EntityObsSteelBox",
        x: 936,
        y: 328
      }, {
        type: "EntityObsSteelBox",
        x: 1140,
        y: 160
      }, {
        type: "EntityObsSteelBox",
        x: 876,
        y: 328
      }, {
        type: "EntityObsSteelBox",
        x: 816,
        y: 328
      }, {
        type: "EntityObsWoodBarrel",
        x: 888,
        y: 248
      }, {
        type: "EntityEnemyBig",
        x: 820,
        y: 228,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityEnemy",
        x: 1136,
        y: 92,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemy",
        x: 1228,
        y: 88,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemy",
        x: 1328,
        y: 32,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemyBig",
        x: 972,
        y: 228,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 1208,
        y: -4,
        settings: {
          pathId: 1,
          enemyType: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 492,
        y: 8
      }, {
        type: "EntityObsSteelBox",
        x: 492,
        y: -52
      }, {
        type: "EntityObsSteelBox",
        x: 492,
        y: -112
      }, {
        type: "EntityEnemy",
        x: 556,
        y: -48,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityEnemy",
        x: 612,
        y: -112,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityObsWoodBox",
        x: 552,
        y: 8
      }, {
        type: "EntityObsWoodBox",
        x: 612,
        y: -52
      }, {
        type: "EntityObsWoodBox",
        x: 672,
        y: -112
      }, {
        type: "EntityObsWoodBox",
        x: 672,
        y: -52
      }, {
        type: "EntityObsWoodBox",
        x: 612,
        y: 8
      }, {
        type: "EntityObsWoodBox",
        x: 672,
        y: 8
      }, {
        type: "EntityObsSteelBox",
        x: 492,
        y: 68
      }, {
        type: "EntityObsSteelBox",
        x: 552,
        y: 68
      }, {
        type: "EntityObsSteelBox",
        x: 612,
        y: 68
      }, {
        type: "EntityObsSteelBox",
        x: 672,
        y: 68
      }, {
        type: "EntityObsWoodBarrel",
        x: 1176,
        y: 80
      }, {
        type: "EntityObsSteelBox",
        x: 1284,
        y: 336
      }, {
        type: "EntityObsSteelBox",
        x: 1344,
        y: 336
      }, {
        type: "EntityObsSteelBox",
        x: 1404,
        y: 336
      }, {
        type: "EntityObsWoodBox",
        x: 1344,
        y: 276
      }, {
        type: "EntityObsWoodBarrel",
        x: 1328,
        y: 196
      }, {
        type: "EntityObsWoodBarrel",
        x: 1272,
        y: 252
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level38Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.39").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.enemy", "game.entities.obstacles.obs-steel-box", "game.entities.objects.switch", "game.entities.objects.door", "game.entities.obstacles.obs-wood-box").defines(function () {
    Level39 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 4,
            1: 4,
            2: 4,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 3
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityEnemy",
        x: 1372,
        y: 244,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1044,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 984,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1104,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1164,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1224,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1284,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1344,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1404,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1464,
        y: 428
      }, {
        type: "EntityEnemy",
        x: 1300,
        y: 244,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntitySwitch",
        x: 660,
        y: 372,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 744,
        y: 100,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1224,
        y: -20
      }, {
        type: "EntityObsSteelBox",
        x: 1104,
        y: -20
      }, {
        type: "EntityObsSteelBox",
        x: 1164,
        y: -20
      }, {
        type: "EntityObsSteelBox",
        x: 984,
        y: -20
      }, {
        type: "EntityObsSteelBox",
        x: 1044,
        y: -20
      }, {
        type: "EntityObsSteelBox",
        x: 984,
        y: 40
      }, {
        type: "EntityObsSteelBox",
        x: 1284,
        y: -20
      }, {
        type: "EntityObsSteelBox",
        x: 1344,
        y: -20
      }, {
        type: "EntityObsSteelBox",
        x: 1404,
        y: -20
      }, {
        type: "EntityObsSteelBox",
        x: 1464,
        y: -20
      }, {
        type: "EntityObsSteelBox",
        x: 984,
        y: 308
      }, {
        type: "EntityObsSteelBox",
        x: 984,
        y: 368
      }, {
        type: "EntityObsWoodBox",
        x: 1224,
        y: 128
      }, {
        type: "EntityObsWoodBox",
        x: 1224,
        y: 188
      }, {
        type: "EntityObsWoodBox",
        x: 1224,
        y: 248
      }, {
        type: "EntityObsWoodBox",
        x: 1224,
        y: 308
      }, {
        type: "EntityObsWoodBox",
        x: 1224,
        y: 368
      }, {
        type: "EntityObsWoodBox",
        x: 1164,
        y: 368
      }, {
        type: "EntityObsWoodBox",
        x: 1164,
        y: 248
      }, {
        type: "EntityObsWoodBox",
        x: 1164,
        y: 308
      }, {
        type: "EntityObsWoodBox",
        x: 1164,
        y: 188
      }, {
        type: "EntityObsWoodBox",
        x: 1164,
        y: 128
      }, {
        type: "EntityObsWoodBox",
        x: 1284,
        y: 308
      }, {
        type: "EntityObsWoodBox",
        x: 1344,
        y: 308
      }, {
        type: "EntityObsWoodBox",
        x: 1404,
        y: 308
      }, {
        type: "EntityObsWoodBox",
        x: 1464,
        y: 308
      }, {
        type: "EntityObsWoodBox",
        x: 1284,
        y: 368
      }, {
        type: "EntityObsWoodBox",
        x: 1344,
        y: 368
      }, {
        type: "EntityObsWoodBox",
        x: 1404,
        y: 368
      }, {
        type: "EntityObsWoodBox",
        x: 1464,
        y: 368
      }, {
        type: "EntityObsWoodBox",
        x: 1104,
        y: 128
      }, {
        type: "EntityObsWoodBox",
        x: 1104,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 924,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 864,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1044,
        y: -80
      }, {
        type: "EntityObsSteelBox",
        x: 1044,
        y: -140
      }, {
        type: "EntityObsSteelBox",
        x: 1044,
        y: -200
      }, {
        type: "EntityObsSteelBox",
        x: 924,
        y: -20
      }, {
        type: "EntityObsSteelBox",
        x: 864,
        y: -20
      }, {
        type: "EntityObsSteelBox",
        x: 744,
        y: -20
      }, {
        type: "EntityObsSteelBox",
        x: 804,
        y: -20
      }, {
        type: "EntityObsSteelBox",
        x: 744,
        y: 40
      }, {
        type: "EntityObsSteelBox",
        x: 744,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 744,
        y: 248
      }, {
        type: "EntityObsSteelBox",
        x: 744,
        y: 368
      }, {
        type: "EntityObsSteelBox",
        x: 744,
        y: 308
      }, {
        type: "EntityObsSteelBox",
        x: 744,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 804,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1044,
        y: -260
      }, {
        type: "EntityObsSteelBox",
        x: 1044,
        y: -320
      }, {
        type: "EntityObsSteelBox",
        x: 1044,
        y: -380
      }, {
        type: "EntityObsSteelBox",
        x: 684,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 624,
        y: 428
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level39Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.40").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.objects.enemy-fly-new", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-steel-box", "game.entities.objects.door", "game.entities.objects.switch", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.enemy").defines(function () {
    Level40 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 200,
        y: 350,
        settings: {
          piggyTypes: {
            "0": 4,
            1: 4,
            2: 0,
            3: 7,
            4: 7
          },
          piggyNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 532,
        y: 224,
        settings: {
          pathId: 0,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 532,
        y: -272,
        settings: {
          pathId: 0,
          enemyType: 0
        }
      }, {
        type: "EntityEnemyBig",
        x: 1224,
        y: 280,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 300
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 360
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 240
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 60
      }, {
        type: "EntityDoor",
        x: 928,
        y: -28,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: -88
      }, {
        type: "EntityObsSteelBox",
        x: 988,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1108,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1048,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1168,
        y: -148
      }, {
        type: "EntitySwitch",
        x: 328,
        y: -116,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsWoodBox",
        x: 504,
        y: 448
      }, {
        type: "EntityObsWoodBox",
        x: 564,
        y: 388
      }, {
        type: "EntityObsWoodBox",
        x: 564,
        y: 448
      }, {
        type: "EntityObsWoodBarrel",
        x: 960,
        y: -292
      }, {
        type: "EntityObsWoodBarrel",
        x: 1040,
        y: -232
      }, {
        type: "EntityObsWoodBarrel",
        x: 988,
        y: -232
      }, {
        type: "EntityObsWoodBarrel",
        x: 936,
        y: -232
      }, {
        type: "EntityEnemy",
        x: 640,
        y: 436,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemy",
        x: 720,
        y: 436,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 180
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 120
      }, {
        type: "EntityObsSteelBox",
        x: 432,
        y: -60
      }, {
        type: "EntityObsSteelBox",
        x: 372,
        y: -60
      }, {
        type: "EntityObsSteelBox",
        x: 312,
        y: -60
      }, {
        type: "EntityObsSteelBox",
        x: 252,
        y: -60
      }, {
        type: "EntityObsSteelBox",
        x: 252,
        y: -120
      }, {
        type: "EntityObsSteelBox",
        x: 252,
        y: -180
      }, {
        type: "EntityObsSteelBox",
        x: 252,
        y: -240
      }, {
        type: "EntityObsSteelBox",
        x: 252,
        y: -300
      }, {
        type: "EntityEnemy",
        x: 412,
        y: -136,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemy",
        x: 1132,
        y: -220,
        settings: {
          enemyType: 6
        }
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level40Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.41").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-steel-box", "game.entities.objects.door", "game.entities.objects.switch", "game.entities.obstacles.obs-wood-box", "game.entities.enemy", "game.entities.obstacles.obs-exp-barrel").defines(function () {
    Level41 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 200,
        y: 350,
        settings: {
          piggyTypes: {
            "0": 1,
            1: 4,
            2: 0,
            3: 7,
            4: 0
          },
          piggyNum: 4
        }
      }, {
        type: "EntityEnemyBig",
        x: 1268,
        y: 12,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1452,
        y: 92
      }, {
        type: "EntityObsSteelBox",
        x: 1392,
        y: 92
      }, {
        type: "EntityObsSteelBox",
        x: 1332,
        y: 92
      }, {
        type: "EntityObsSteelBox",
        x: 1212,
        y: 92
      }, {
        type: "EntityObsSteelBox",
        x: 1272,
        y: 92
      }, {
        type: "EntityObsSteelBox",
        x: 1152,
        y: 92
      }, {
        type: "EntityObsSteelBox",
        x: 1092,
        y: 92
      }, {
        type: "EntityDoor",
        x: 1092,
        y: -56,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1096,
        y: -328
      }, {
        type: "EntityObsSteelBox",
        x: 1216,
        y: -388
      }, {
        type: "EntityObsSteelBox",
        x: 1156,
        y: -388
      }, {
        type: "EntityObsSteelBox",
        x: 1396,
        y: -268
      }, {
        type: "EntityObsSteelBox",
        x: 1276,
        y: -388
      }, {
        type: "EntityObsSteelBox",
        x: 1336,
        y: -388
      }, {
        type: "EntityObsSteelBox",
        x: 1032,
        y: 92
      }, {
        type: "EntityObsSteelBox",
        x: 972,
        y: 92
      }, {
        type: "EntityObsSteelBox",
        x: 912,
        y: 92
      }, {
        type: "EntityObsSteelBox",
        x: 1036,
        y: -268
      }, {
        type: "EntityObsSteelBox",
        x: 976,
        y: -268
      }, {
        type: "EntityObsSteelBox",
        x: 916,
        y: -268
      }, {
        type: "EntitySwitch",
        x: 988,
        y: 36,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsWoodBox",
        x: 904,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 844,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 904,
        y: 360
      }, {
        type: "EntityObsSteelBox",
        x: 1032,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 1032,
        y: 332
      }, {
        type: "EntityObsSteelBox",
        x: 1032,
        y: 272
      }, {
        type: "EntityObsSteelBox",
        x: 1396,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 1396,
        y: -28
      }, {
        type: "EntityObsSteelBox",
        x: 1396,
        y: -208
      }, {
        type: "EntityObsSteelBox",
        x: 1396,
        y: -88
      }, {
        type: "EntityObsSteelBox",
        x: 1396,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1092,
        y: 32
      }, {
        type: "EntityEnemy",
        x: 860,
        y: -80,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsSteelBox",
        x: 856,
        y: 92
      }, {
        type: "EntityObsSteelBox",
        x: 796,
        y: 92
      }, {
        type: "EntityEnemy",
        x: 800,
        y: 36,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsWoodBox",
        x: 860,
        y: -28
      }, {
        type: "EntityObsWoodBox",
        x: 860,
        y: 32
      }, {
        type: "EntityObsWoodBox",
        x: 1336,
        y: -144
      }, {
        type: "EntityObsWoodBox",
        x: 1276,
        y: -144
      }, {
        type: "EntityObsWoodBox",
        x: 1216,
        y: -144
      }, {
        type: "EntityObsWoodBox",
        x: 1156,
        y: -144
      }, {
        type: "EntityObsExpBarrel",
        x: 1220,
        y: -296
      }, {
        type: "EntityEnemy",
        x: 908,
        y: 244,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityEnemy",
        x: 1028,
        y: 216,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1096,
        y: -388
      }, {
        type: "EntityObsSteelBox",
        x: 1096,
        y: -268
      }, {
        type: "EntityObsSteelBox",
        x: 1396,
        y: -388
      }, {
        type: "EntityObsSteelBox",
        x: 1396,
        y: -328
      }, {
        type: "EntityObsWoodBox",
        x: 1156,
        y: -204
      }, {
        type: "EntityObsWoodBox",
        x: 1216,
        y: -204
      }, {
        type: "EntityObsWoodBox",
        x: 1276,
        y: -204
      }, {
        type: "EntityObsWoodBox",
        x: 1336,
        y: -204
      }, {
        type: "EntityObsExpBarrel",
        x: 1292,
        y: -296
      }, {
        type: "EntityDoor",
        x: 1092,
        y: -144,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1096,
        y: -208
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level41Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.42").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-steel-box", "game.entities.objects.door", "game.entities.obstacles.obs-wood-box", "game.entities.objects.switch", "game.entities.enemy", "game.entities.objects.enemy-fly-new").defines(function () {
    Level42 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 200,
        y: 350,
        settings: {
          piggyTypes: {
            "0": 4,
            1: 4,
            2: 4,
            3: 7,
            4: 7
          },
          piggyNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 820,
        y: 424,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyBig",
        x: 1164,
        y: 356,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1172,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1112,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1052,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 992,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 368
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 308
      }, {
        type: "EntityDoor",
        x: 932,
        y: 160,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 248
      }, {
        type: "EntityObsSteelBox",
        x: 1052,
        y: 100
      }, {
        type: "EntityObsSteelBox",
        x: 1112,
        y: 100
      }, {
        type: "EntityObsSteelBox",
        x: 1172,
        y: 100
      }, {
        type: "EntityObsSteelBox",
        x: 1232,
        y: 100
      }, {
        type: "EntityObsSteelBox",
        x: 1232,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 752,
        y: -20
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: -20
      }, {
        type: "EntityObsWoodBox",
        x: 872,
        y: -20
      }, {
        type: "EntityObsWoodBox",
        x: 932,
        y: -20
      }, {
        type: "EntityObsWoodBox",
        x: 932,
        y: 40
      }, {
        type: "EntityObsWoodBox",
        x: 932,
        y: 100
      }, {
        type: "EntityDoor",
        x: 992,
        y: -48,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 992,
        y: 100
      }, {
        type: "EntityObsSteelBox",
        x: 992,
        y: 40
      }, {
        type: "EntityObsSteelBox",
        x: 992,
        y: -108
      }, {
        type: "EntityObsSteelBox",
        x: 992,
        y: -168
      }, {
        type: "EntityObsSteelBox",
        x: 1052,
        y: -168
      }, {
        type: "EntityObsSteelBox",
        x: 1172,
        y: -168
      }, {
        type: "EntityObsSteelBox",
        x: 1112,
        y: -168
      }, {
        type: "EntityObsSteelBox",
        x: 1232,
        y: -168
      }, {
        type: "EntitySwitch",
        x: 1004,
        y: -224,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityEnemy",
        x: 1200,
        y: -232,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 820,
        y: 72,
        settings: {
          pathId: 1,
          enemyType: 0
        }
      }, {
        type: "EntitySwitch",
        x: 1184,
        y: 44,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityEnemy",
        x: 1080,
        y: 364,
        settings: {
          enemyType: 8
        }
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level42Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.43").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-big", "game.entities.objects.door", "game.entities.enemy", "game.entities.objects.switch", "game.entities.obstacles.obs-exp-barrel", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-wood-barrel").defines(function () {
    Level43 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 200,
        y: 350,
        settings: {
          piggyTypes: {
            "0": 4,
            1: 4,
            2: 2,
            3: 7,
            4: 7
          },
          piggyNum: 5
        }
      }, {
        type: "EntityEnemyBig",
        x: 1288,
        y: 348,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityDoor",
        x: 1320,
        y: 208,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityEnemy",
        x: 672,
        y: 292,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntitySwitch",
        x: 580,
        y: 292,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityEnemy",
        x: 1192,
        y: 360,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityDoor",
        x: 1260,
        y: 208,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 1284,
        y: 116
      }, {
        type: "EntityObsExpBarrel",
        x: 1224,
        y: 116
      }, {
        type: "EntityEnemy",
        x: 1112,
        y: 360,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsWoodBox",
        x: 476,
        y: -136
      }, {
        type: "EntityObsWoodBox",
        x: 536,
        y: -136
      }, {
        type: "EntityObsWoodBox",
        x: 596,
        y: -136
      }, {
        type: "EntityObsWoodBox",
        x: 656,
        y: -136
      }, {
        type: "EntityObsWoodBox",
        x: 828,
        y: 344
      }, {
        type: "EntityObsSteelBox",
        x: 500,
        y: 348
      }, {
        type: "EntityObsSteelBox",
        x: 560,
        y: 348
      }, {
        type: "EntityObsSteelBox",
        x: 620,
        y: 348
      }, {
        type: "EntityObsSteelBox",
        x: 680,
        y: 348
      }, {
        type: "EntityObsWoodBox",
        x: 888,
        y: 344
      }, {
        type: "EntityObsWoodBox",
        x: 948,
        y: 344
      }, {
        type: "EntityObsWoodBox",
        x: 1008,
        y: 344
      }, {
        type: "EntityEnemyBig",
        x: 564,
        y: -208,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityEnemy",
        x: 864,
        y: 280,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemy",
        x: 980,
        y: 280,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsSteelBox",
        x: 976,
        y: -140
      }, {
        type: "EntityObsSteelBox",
        x: 1036,
        y: -140
      }, {
        type: "EntityObsSteelBox",
        x: 1096,
        y: -140
      }, {
        type: "EntityObsSteelBox",
        x: 1156,
        y: -140
      }, {
        type: "EntityObsSteelBox",
        x: 1216,
        y: -140
      }, {
        type: "EntityObsSteelBox",
        x: 1276,
        y: -140
      }, {
        type: "EntityObsWoodBarrel",
        x: 976,
        y: -220
      }, {
        type: "EntityObsWoodBarrel",
        x: 1004,
        y: -280
      }, {
        type: "EntityObsWoodBarrel",
        x: 1032,
        y: -220
      }, {
        type: "EntityObsWoodBarrel",
        x: 1216,
        y: -220
      }, {
        type: "EntityObsWoodBarrel",
        x: 1244,
        y: -280
      }, {
        type: "EntityObsWoodBarrel",
        x: 1272,
        y: -220
      }, {
        type: "EntitySwitch",
        x: 1124,
        y: -196,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityEnemyBig",
        x: 892,
        y: -8,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1016,
        y: 56
      }, {
        type: "EntityObsWoodBox",
        x: 956,
        y: 56
      }, {
        type: "EntityObsWoodBox",
        x: 896,
        y: 56
      }, {
        type: "EntityObsWoodBox",
        x: 836,
        y: 56
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level43Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.44").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-big", "game.entities.enemy", "game.entities.objects.switch", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-exp-barrel", "game.entities.obstacles.obs-wood-barrel", "game.entities.objects.door", "game.entities.obstacles.obs-wood-circle", "game.entities.objects.card").defines(function () {
    Level44 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 200,
        y: 350,
        settings: {
          piggyTypes: {
            "0": 4,
            1: 0,
            2: 1,
            3: 2,
            4: 7
          },
          piggyNum: 5
        }
      }, {
        type: "EntityEnemyBig",
        x: 1200,
        y: 348,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityEnemy",
        x: 756,
        y: 284,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntitySwitch",
        x: 1248,
        y: -56,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsWoodBox",
        x: 776,
        y: -136
      }, {
        type: "EntityObsWoodBox",
        x: 836,
        y: -136
      }, {
        type: "EntityObsWoodBox",
        x: 896,
        y: -136
      }, {
        type: "EntityObsSteelBox",
        x: 500,
        y: 348
      }, {
        type: "EntityObsSteelBox",
        x: 560,
        y: 348
      }, {
        type: "EntityObsSteelBox",
        x: 620,
        y: 348
      }, {
        type: "EntityObsSteelBox",
        x: 680,
        y: 348
      }, {
        type: "EntityObsWoodBox",
        x: 1084,
        y: 360
      }, {
        type: "EntityEnemyBig",
        x: 828,
        y: -192,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1084,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1084,
        y: 240
      }, {
        type: "EntityObsWoodBox",
        x: 1084,
        y: 180
      }, {
        type: "EntityObsWoodBox",
        x: 1144,
        y: 180
      }, {
        type: "EntityObsWoodBox",
        x: 1204,
        y: 244
      }, {
        type: "EntityObsWoodBox",
        x: 1264,
        y: 184
      }, {
        type: "EntityObsExpBarrel",
        x: 1172,
        y: 152
      }, {
        type: "EntityObsWoodBarrel",
        x: 1132,
        y: 336
      }, {
        type: "EntityObsWoodBox",
        x: 1024,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1024,
        y: 240
      }, {
        type: "EntityObsWoodBox",
        x: 964,
        y: 240
      }, {
        type: "EntityObsSteelBox",
        x: 700,
        y: 84
      }, {
        type: "EntityObsSteelBox",
        x: 760,
        y: 84
      }, {
        type: "EntityObsSteelBox",
        x: 504,
        y: 200
      }, {
        type: "EntityDoor",
        x: 504,
        y: 260,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsWoodCircle",
        x: 544,
        y: 288
      }, {
        type: "EntityEnemy",
        x: 656,
        y: 284,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityObsSteelBox",
        x: 740,
        y: 348
      }, {
        type: "EntityObsSteelBox",
        x: 800,
        y: 348
      }, {
        type: "EntityObsSteelBox",
        x: 860,
        y: 348
      }, {
        type: "EntityEnemy",
        x: 860,
        y: 284,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityEnemy",
        x: 1068,
        y: -60,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityEnemy",
        x: 692,
        y: 24,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityObsWoodCircle",
        x: 748,
        y: 32
      }, {
        type: "EntityDoor",
        x: 584,
        y: -4,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsWoodBox",
        x: 584,
        y: -64
      }, {
        type: "EntitySwitch",
        x: 996,
        y: 364,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsWoodBox",
        x: 580,
        y: 84
      }, {
        type: "EntityObsWoodBox",
        x: 640,
        y: 84
      }, {
        type: "EntityCard",
        x: 1292,
        y: 252
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level44Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.45").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-steel-box", "game.entities.enemy", "game.entities.obstacles.obs-wood-box", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-wood-barrel", "game.entities.objects.card").defines(function () {
    Level45 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1700,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 200,
        y: 350,
        settings: {
          piggyTypes: {
            "0": 4,
            1: 4,
            2: 2,
            3: 1,
            4: 7
          },
          piggyNum: 5
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1316,
        y: -292,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1420,
        y: -212,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1432,
        y: 352,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1316,
        y: 428,
        settings: {
          pathId: 1,
          pathNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 620,
        y: 428,
        settings: {
          pathId: 1,
          pathNum: 5
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 632,
        y: -176,
        settings: {
          pathId: 1,
          pathNum: 6
        }
      }, {
        type: "EntityEnemyBig",
        x: 940,
        y: -92,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1212,
        y: 340
      }, {
        type: "EntityEnemy",
        x: 872,
        y: -60,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityEnemy",
        x: 1124,
        y: -68,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1272,
        y: 340
      }, {
        type: "EntityObsSteelBox",
        x: 1332,
        y: 280
      }, {
        type: "EntityObsSteelBox",
        x: 1212,
        y: 280
      }, {
        type: "EntityObsSteelBox",
        x: 1332,
        y: 220
      }, {
        type: "EntityObsWoodBox",
        x: 688,
        y: 344
      }, {
        type: "EntityObsWoodBox",
        x: 748,
        y: 344
      }, {
        type: "EntityObsWoodBox",
        x: 688,
        y: 284
      }, {
        type: "EntityObsWoodBox",
        x: 548,
        y: 308
      }, {
        type: "EntityObsWoodBox",
        x: 548,
        y: 368
      }, {
        type: "EntityObsWoodBox",
        x: 548,
        y: 488
      }, {
        type: "EntityObsWoodBox",
        x: 548,
        y: 428
      }, {
        type: "EntityEnemy",
        x: 752,
        y: 280,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityEnemy",
        x: 1212,
        y: 224,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityEnemy",
        x: 1332,
        y: 164,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 712,
        y: -276,
        settings: {
          pathId: 1,
          enemyType: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 808,
        y: 288
      }, {
        type: "EntityObsSteelBox",
        x: 868,
        y: 228
      }, {
        type: "EntityObsSteelBox",
        x: 868,
        y: 288
      }, {
        type: "EntityObsSteelBox",
        x: 1048,
        y: 168
      }, {
        type: "EntityObsSteelBox",
        x: 1048,
        y: 228
      }, {
        type: "EntityObsSteelBox",
        x: 1048,
        y: 288
      }, {
        type: "EntityObsSteelBox",
        x: 1108,
        y: 288
      }, {
        type: "EntityObsWoodBarrel",
        x: 792,
        y: 208
      }, {
        type: "EntityObsWoodBarrel",
        x: 852,
        y: 148
      }, {
        type: "EntityObsWoodBarrel",
        x: 792,
        y: 148
      }, {
        type: "EntityObsWoodBarrel",
        x: 792,
        y: 88
      }, {
        type: "EntityEnemyBig",
        x: 1036,
        y: -92,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityCard",
        x: 1E3,
        y: -4
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level45Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.46").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.enemy", "game.entities.obstacles.obs-wood-box", "game.entities.objects.switch", "game.entities.objects.door", "game.entities.objects.enemy-big", "game.entities.objects.card").defines(function () {
    Level46 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 284,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 4,
            1: 4,
            2: 0,
            3: 2,
            4: 7
          },
          piggyNum: 5
        }
      }, {
        type: "EntityObsSteelBox",
        x: 976,
        y: -120
      }, {
        type: "EntityObsSteelBox",
        x: 1096,
        y: -120
      }, {
        type: "EntityObsWoodBarrel",
        x: 148,
        y: 40
      }, {
        type: "EntityEnemy",
        x: 196,
        y: -56,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsWoodBox",
        x: 84,
        y: 60
      }, {
        type: "EntityObsWoodBox",
        x: 84,
        y: 4
      }, {
        type: "EntityObsSteelBox",
        x: 84,
        y: -124
      }, {
        type: "EntityObsSteelBox",
        x: 144,
        y: -124
      }, {
        type: "EntityObsSteelBox",
        x: 204,
        y: -124
      }, {
        type: "EntitySwitch",
        x: 164,
        y: -180,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 848,
        y: -200
      }, {
        type: "EntityObsSteelBox",
        x: 1036,
        y: -120
      }, {
        type: "EntityObsSteelBox",
        x: 916,
        y: -120
      }, {
        type: "EntityObsSteelBox",
        x: 856,
        y: -120
      }, {
        type: "EntityDoor",
        x: 900,
        y: 268,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityDoor",
        x: 900,
        y: 180,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityDoor",
        x: 900,
        y: 92,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityDoor",
        x: 720,
        y: 92,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 720,
        y: 180,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 720,
        y: 268,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1180,
        y: 188
      }, {
        type: "EntityObsWoodBarrel",
        x: 1232,
        y: 188
      }, {
        type: "EntityObsWoodBarrel",
        x: 1204,
        y: 128
      }, {
        type: "EntityObsWoodBox",
        x: 856,
        y: -60
      }, {
        type: "EntityObsWoodBox",
        x: 1096,
        y: -180
      }, {
        type: "EntityObsWoodBox",
        x: 1036,
        y: -240
      }, {
        type: "EntityObsWoodBox",
        x: 1036,
        y: -180
      }, {
        type: "EntityObsWoodBarrel",
        x: 1084,
        y: -80
      }, {
        type: "EntityObsWoodBarrel",
        x: 1136,
        y: -80
      }, {
        type: "EntityObsWoodBarrel",
        x: 1036,
        y: -80
      }, {
        type: "EntityObsWoodBox",
        x: 1244,
        y: -60
      }, {
        type: "EntityObsWoodBox",
        x: 1304,
        y: -60
      }, {
        type: "EntityObsWoodBox",
        x: 1304,
        y: -120
      }, {
        type: "EntityEnemy",
        x: 1292,
        y: 416,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemy",
        x: 1320,
        y: 212,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1348,
        y: 396
      }, {
        type: "EntitySwitch",
        x: 944,
        y: -176,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityEnemy",
        x: 1100,
        y: -240,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemyBig",
        x: 1036,
        y: 224,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsWoodBox",
        x: 992,
        y: 420
      }, {
        type: "EntityObsWoodBox",
        x: 1052,
        y: 420
      }, {
        type: "EntityObsWoodBox",
        x: 992,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 992,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1052,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1112,
        y: 420
      }, {
        type: "EntityObsWoodBox",
        x: 1112,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 1112,
        y: 300
      }, {
        type: "EntityEnemy",
        x: 1056,
        y: 368,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 200,
        y: 40
      }, {
        type: "EntityObsWoodBarrel",
        x: 172,
        y: -20
      }, {
        type: "EntityCard",
        x: 100,
        y: -240
      }, {
        type: "EntityCard",
        x: 804,
        y: 160
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level46Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.47").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-steel-box", "game.entities.objects.door", "game.entities.objects.enemy-fly-new", "game.entities.objects.switch", "game.entities.enemy", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-circle").defines(function () {
    Level47 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 200,
        y: 350,
        settings: {
          piggyTypes: {
            "0": 4,
            1: 0,
            2: 1,
            3: 2,
            4: 7
          },
          piggyNum: 5
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1028,
        y: -52,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1024,
        y: 64,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1400,
        y: 164,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1396,
        y: 412,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1404,
        y: 164,
        settings: {
          pathId: 1,
          pathNum: 5
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1020,
        y: 444,
        settings: {
          pathId: 2,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1028,
        y: -52,
        settings: {
          pathId: 1,
          pathNum: 7
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1028,
        y: 64,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1392,
        y: 444,
        settings: {
          pathId: 2,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1020,
        y: 444,
        settings: {
          pathId: 2,
          pathNum: 3
        }
      }, {
        type: "EntityEnemyBig",
        x: 1148,
        y: 100,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 368
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 308
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 248
      }, {
        type: "EntityObsSteelBox",
        x: 992,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 1052,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 1112,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 1172,
        y: 188
      }, {
        type: "EntityDoor",
        x: 932,
        y: 100,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 872,
        y: 188
      }, {
        type: "EntityEnemyFlyNew",
        x: 1416,
        y: -80,
        settings: {
          pathId: 1,
          enemyType: 0
        }
      }, {
        type: "EntitySwitch",
        x: 712,
        y: 372,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityEnemy",
        x: 824,
        y: 308,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1172,
        y: 308
      }, {
        type: "EntityObsSteelBox",
        x: 1172,
        y: 248
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 752,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 632,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 632,
        y: 428
      }, {
        type: "EntityDoor",
        x: 932,
        y: 12,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 752,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 872,
        y: 428
      }, {
        type: "EntityObsWoodBarrel",
        x: 784,
        y: 348
      }, {
        type: "EntityObsWoodBarrel",
        x: 840,
        y: 348
      }, {
        type: "EntityObsSteelBox",
        x: 632,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: -172
      }, {
        type: "EntityDoor",
        x: 932,
        y: -72,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityObsSteelBox",
        x: 752,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 872,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: -128
      }, {
        type: "EntityObsSteelBox",
        x: 992,
        y: -168
      }, {
        type: "EntityObsSteelBox",
        x: 632,
        y: 248
      }, {
        type: "EntityObsSteelBox",
        x: 632,
        y: 308
      }, {
        type: "EntityObsSteelBox",
        x: 632,
        y: 368
      }, {
        type: "EntityObsWoodBox",
        x: 632,
        y: -52
      }, {
        type: "EntityObsWoodBox",
        x: 632,
        y: 8
      }, {
        type: "EntityObsWoodBox",
        x: 632,
        y: 68
      }, {
        type: "EntityObsWoodBox",
        x: 632,
        y: 128
      }, {
        type: "EntityEnemy",
        x: 712,
        y: 132,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 764,
        y: 108
      }, {
        type: "EntityObsWoodBarrel",
        x: 816,
        y: 108
      }, {
        type: "EntityObsWoodBarrel",
        x: 764,
        y: 48
      }, {
        type: "EntityEnemy",
        x: 836,
        y: 72,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityEnemy",
        x: 780,
        y: 16,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityEnemy",
        x: 996,
        y: 124,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1052,
        y: -168
      }, {
        type: "EntityObsSteelBox",
        x: 1112,
        y: -168
      }, {
        type: "EntityObsSteelBox",
        x: 1172,
        y: -168
      }, {
        type: "EntityObsSteelBox",
        x: 1232,
        y: -168
      }, {
        type: "EntityObsSteelBox",
        x: 1292,
        y: -168
      }, {
        type: "EntityObsSteelBox",
        x: 1352,
        y: -168
      }, {
        type: "EntityObsSteelBox",
        x: 1412,
        y: -168
      }, {
        type: "EntityObsWoodBox",
        x: 1412,
        y: 28
      }, {
        type: "EntityObsWoodBox",
        x: 1352,
        y: 28
      }, {
        type: "EntityObsWoodBox",
        x: 1292,
        y: 28
      }, {
        type: "EntityEnemy",
        x: 1308,
        y: -36,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityEnemy",
        x: 1396,
        y: -36,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1232,
        y: 308
      }, {
        type: "EntityObsSteelBox",
        x: 1292,
        y: 308
      }, {
        type: "EntityEnemy",
        x: 1244,
        y: 196,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityObsWoodCircle",
        x: 464,
        y: -64
      }, {
        type: "EntityObsSteelBox",
        x: 512,
        y: -8
      }, {
        type: "EntityObsSteelBox",
        x: 452,
        y: -8
      }, {
        type: "EntityObsWoodBarrel",
        x: 1216,
        y: 228
      }, {
        type: "EntityObsWoodBarrel",
        x: 1268,
        y: 228
      }, {
        type: "EntityEnemyFlyNew",
        x: 1016,
        y: 252,
        settings: {
          pathId: 2,
          enemyType: 0
        }
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level47Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.48").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.enemy", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-exp-barrel", "game.entities.objects.door", "game.entities.objects.switch", "game.entities.objects.enemy-big", "game.entities.objects.card").defines(function () {
    Level48 = {
      entities: [{
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 284,
        y: 296,
        settings: {
          piggyTypes: {
            "0": 7,
            1: 4,
            2: 4,
            3: 1,
            4: 1,
            5: 0
          },
          piggyNum: 6
        }
      }, {
        type: "EntityEnemy",
        x: 760,
        y: 372,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsSteelBox",
        x: 864,
        y: 360
      }, {
        type: "EntityObsSteelBox",
        x: 1044,
        y: 360
      }, {
        type: "EntityEnemy",
        x: 868,
        y: 192,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1404,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 1044,
        y: 180
      }, {
        type: "EntityObsWoodBox",
        x: 1284,
        y: 180
      }, {
        type: "EntityObsSteelBox",
        x: 1104,
        y: 120
      }, {
        type: "EntityObsWoodBox",
        x: 744,
        y: 180
      }, {
        type: "EntityObsWoodBarrel",
        x: 1028,
        y: 104
      }, {
        type: "EntityObsWoodBox",
        x: 916,
        y: 120
      }, {
        type: "EntityEnemy",
        x: 940,
        y: 188,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1104,
        y: 180
      }, {
        type: "EntityObsSteelBox",
        x: 1284,
        y: 240
      }, {
        type: "EntityObsWoodBox",
        x: 684,
        y: 240
      }, {
        type: "EntityObsSteelBox",
        x: 1224,
        y: 120
      }, {
        type: "EntityObsWoodBarrel",
        x: 728,
        y: 220
      }, {
        type: "EntityObsWoodBox",
        x: 804,
        y: 180
      }, {
        type: "EntityObsWoodBarrel",
        x: 1332,
        y: 340
      }, {
        type: "EntityObsWoodBox",
        x: 976,
        y: 120
      }, {
        type: "EntityObsWoodBox",
        x: 1164,
        y: 180
      }, {
        type: "EntityObsWoodBox",
        x: 1224,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 924,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1224,
        y: 180
      }, {
        type: "EntityObsWoodBox",
        x: 744,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1044,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 684,
        y: 180
      }, {
        type: "EntityObsWoodBox",
        x: 864,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1164,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1164,
        y: 240
      }, {
        type: "EntityObsSteelBox",
        x: 804,
        y: 240
      }, {
        type: "EntityObsWoodBox",
        x: 1284,
        y: 300
      }, {
        type: "EntityObsExpBarrel",
        x: 884,
        y: 36
      }, {
        type: "EntityObsWoodBox",
        x: 984,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 684,
        y: 300
      }, {
        type: "EntityObsWoodBarrel",
        x: 912,
        y: 220
      }, {
        type: "EntityObsSteelBox",
        x: 1044,
        y: 240
      }, {
        type: "EntityEnemy",
        x: 1232,
        y: 64,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1104,
        y: 300
      }, {
        type: "EntityObsSteelBox",
        x: 1224,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 804,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 856,
        y: 120
      }, {
        type: "EntityObsWoodBarrel",
        x: 848,
        y: 220
      }, {
        type: "EntityObsWoodBarrel",
        x: 964,
        y: 224
      }, {
        type: "EntityObsSteelBox",
        x: 684,
        y: 360
      }, {
        type: "EntityObsSteelBox",
        x: 744,
        y: 120
      }, {
        type: "EntityObsSteelBox",
        x: 976,
        y: 60
      }, {
        type: "EntityObsWoodBox",
        x: 856,
        y: 60
      }, {
        type: "EntityObsWoodBox",
        x: 744,
        y: 60
      }, {
        type: "EntityObsWoodBox",
        x: 684,
        y: 60
      }, {
        type: "EntityEnemy",
        x: 684,
        y: 128,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsWoodBox",
        x: 924,
        y: 360
      }, {
        type: "EntityObsSteelBox",
        x: 680,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 740,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 860,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 800,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 920,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 980,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 1040,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 1100,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 1160,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 1220,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 1280,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 1340,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 1400,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 1460,
        y: -112
      }, {
        type: "EntityDoor",
        x: 680,
        y: -200,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 680,
        y: -288,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 680,
        y: -348
      }, {
        type: "EntityObsSteelBox",
        x: 740,
        y: -348
      }, {
        type: "EntityObsSteelBox",
        x: 800,
        y: -348
      }, {
        type: "EntityObsSteelBox",
        x: 860,
        y: -348
      }, {
        type: "EntityObsSteelBox",
        x: 920,
        y: -348
      }, {
        type: "EntityObsSteelBox",
        x: 980,
        y: -348
      }, {
        type: "EntityObsSteelBox",
        x: 1040,
        y: -348
      }, {
        type: "EntityObsSteelBox",
        x: 1100,
        y: -348
      }, {
        type: "EntityObsSteelBox",
        x: 1160,
        y: -348
      }, {
        type: "EntityObsSteelBox",
        x: 1220,
        y: -348
      }, {
        type: "EntityObsSteelBox",
        x: 1280,
        y: -348
      }, {
        type: "EntityObsSteelBox",
        x: 1340,
        y: -348
      }, {
        type: "EntityObsSteelBox",
        x: 1400,
        y: -348
      }, {
        type: "EntityObsSteelBox",
        x: 1460,
        y: -348
      }, {
        type: "EntitySwitch",
        x: 1120,
        y: 364,
        settings: {
          doorId: 1
        }
      }, {
        type: "EntitySwitch",
        x: 1108,
        y: 64,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 1100,
        y: -288,
        settings: {
          doorId: 1
        }
      }, {
        type: "EntityDoor",
        x: 1100,
        y: -200,
        settings: {
          doorId: 1
        }
      }, {
        type: "EntityEnemyBig",
        x: 940,
        y: -172,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 840,
        y: -204
      }, {
        type: "EntityEnemy",
        x: 1164,
        y: -168,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemy",
        x: 1272,
        y: -168,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 800,
        y: -192
      }, {
        type: "EntityObsWoodBarrel",
        x: 856,
        y: -252
      }, {
        type: "EntityObsWoodBarrel",
        x: 1008,
        y: -192
      }, {
        type: "EntityObsSteelBox",
        x: 1164,
        y: 120
      }, {
        type: "EntityObsSteelBox",
        x: 1460,
        y: -288
      }, {
        type: "EntityObsSteelBox",
        x: 1460,
        y: -232
      }, {
        type: "EntityObsSteelBox",
        x: 1460,
        y: -172
      }, {
        type: "EntityCard",
        x: 1032,
        y: -36
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }]
    };
    Level48Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.49").requires("impact.image", "game.entities.objects.enemy-fly-path", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-steel-box", "game.entities.enemy", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-exp-barrel", "game.entities.objects.enemy-fly-new", "game.entities.objects.door", "game.entities.objects.switch", "game.entities.objects.card").defines(function () {
    Level49 = {
      entities: [{
        type: "EntityEnemyFlyPath",
        x: 580,
        y: 248,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntitySlingMaker",
        x: 280,
        y: 296,
        settings: {
          piggyTypes: {
            "0": 4,
            1: 4,
            2: 4,
            3: 7,
            4: 7
          },
          piggyNum: 5
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1008,
        y: 128
      }, {
        type: "EntityObsWoodBox",
        x: 1140,
        y: -24
      }, {
        type: "EntityObsWoodBox",
        x: 1080,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 604,
        y: 444
      }, {
        type: "EntityObsSteelBox",
        x: 1140,
        y: 32
      }, {
        type: "EntityEnemy",
        x: 1148,
        y: 96,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsSteelBox",
        x: 664,
        y: 444
      }, {
        type: "EntityObsSteelBox",
        x: 544,
        y: 444
      }, {
        type: "EntityEnemy",
        x: 1164,
        y: 452,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1260,
        y: 36
      }, {
        type: "EntityObsSteelBox",
        x: 1324,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 1140,
        y: 152
      }, {
        type: "EntityEnemy",
        x: 1088,
        y: 152,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1200,
        y: -24
      }, {
        type: "EntityEnemyBig",
        x: 896,
        y: 136,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsWoodBox",
        x: 552,
        y: -52
      }, {
        type: "EntityObsWoodBox",
        x: 612,
        y: -52
      }, {
        type: "EntityObsWoodBox",
        x: 672,
        y: -52
      }, {
        type: "EntityObsExpBarrel",
        x: 800,
        y: 116
      }, {
        type: "EntityEnemy",
        x: 584,
        y: 384,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 1040,
        y: -216,
        settings: {
          pathId: 1,
          enemyType: 0
        }
      }, {
        type: "EntityDoor",
        x: 840,
        y: 272,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 840,
        y: 360,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 992,
        y: 272,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 992,
        y: 360,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 484,
        y: 444
      }, {
        type: "EntityObsWoodBox",
        x: 492,
        y: -52
      }, {
        type: "EntitySwitch",
        x: 636,
        y: 388,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntitySwitch",
        x: 1228,
        y: 156,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityEnemy",
        x: 556,
        y: -104,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemy",
        x: 616,
        y: -104,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 464,
        y: -144
      }, {
        type: "EntityEnemyBig",
        x: 492,
        y: 368,
        settings: {
          enemyType: 2
        }
      }, {
        type: "EntityEnemy",
        x: 1260,
        y: 452,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityEnemy",
        x: 1352,
        y: 452,
        settings: {
          enemyType: 8
        }
      }, {
        type: "EntityCard",
        x: 908,
        y: -76
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level49Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.50").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-wood-box", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-exp-barrel", "game.entities.enemy", "game.entities.objects.door", "game.entities.objects.switch", "game.entities.objects.enemy-fly-new").defines(function () {
    Level50 = {
      entities: [{
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1700,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 284,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 4,
            1: 4,
            2: 1,
            3: 1,
            4: 7,
            5: 7
          },
          piggyNum: 6
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 672,
        y: 24,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 656,
        y: 168,
        settings: {
          pathId: 2,
          pathNum: 1
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1272,
        y: 428
      }, {
        type: "EntityObsWoodBarrel",
        x: 776,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1020,
        y: 280
      }, {
        type: "EntityObsSteelBox",
        x: 1080,
        y: 280
      }, {
        type: "EntityObsWoodBox",
        x: 928,
        y: 160
      }, {
        type: "EntityEnemyBig",
        x: 1012,
        y: 196,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityObsSteelBox",
        x: 840,
        y: 100
      }, {
        type: "EntityObsWoodBox",
        x: 1072,
        y: -212
      }, {
        type: "EntityObsExpBarrel",
        x: 928,
        y: -304
      }, {
        type: "EntityObsWoodBarrel",
        x: 804,
        y: 368
      }, {
        type: "EntityObsSteelBox",
        x: 960,
        y: 280
      }, {
        type: "EntityObsWoodBarrel",
        x: 1248,
        y: 368
      }, {
        type: "EntityObsSteelBox",
        x: 1260,
        y: 100
      }, {
        type: "EntityObsSteelBox",
        x: 1320,
        y: 100
      }, {
        type: "EntityObsWoodBox",
        x: 928,
        y: 220
      }, {
        type: "EntityObsSteelBox",
        x: 780,
        y: 100
      }, {
        type: "EntityObsWoodBox",
        x: 1012,
        y: -212
      }, {
        type: "EntityEnemy",
        x: 920,
        y: 452,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemy",
        x: 1364,
        y: 448,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1220,
        y: 428
      }, {
        type: "EntityObsWoodBarrel",
        x: 832,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 720,
        y: 100
      }, {
        type: "EntityObsSteelBox",
        x: 780,
        y: 160
      }, {
        type: "EntityObsSteelBox",
        x: 840,
        y: 220
      }, {
        type: "EntityObsSteelBox",
        x: 900,
        y: 280
      }, {
        type: "EntityObsSteelBox",
        x: 1140,
        y: 280
      }, {
        type: "EntityObsSteelBox",
        x: 1200,
        y: 280
      }, {
        type: "EntityObsSteelBox",
        x: 1260,
        y: 220
      }, {
        type: "EntityObsSteelBox",
        x: 1320,
        y: 160
      }, {
        type: "EntityObsSteelBox",
        x: 1380,
        y: 100
      }, {
        type: "EntityObsWoodBox",
        x: 1132,
        y: -212
      }, {
        type: "EntityObsWoodBox",
        x: 952,
        y: -212
      }, {
        type: "EntityObsSteelBox",
        x: 896,
        y: -320
      }, {
        type: "EntityObsSteelBox",
        x: 1188,
        y: -320
      }, {
        type: "EntityDoor",
        x: 896,
        y: -172,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 896,
        y: -260,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 980,
        y: -304
      }, {
        type: "EntityObsExpBarrel",
        x: 1092,
        y: -304
      }, {
        type: "EntityObsWoodBox",
        x: 1184,
        y: 220
      }, {
        type: "EntityObsWoodBarrel",
        x: 1168,
        y: 140
      }, {
        type: "EntityObsWoodBarrel",
        x: 916,
        y: 80
      }, {
        type: "EntitySwitch",
        x: 824,
        y: 44,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 1192,
        y: -260,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 1192,
        y: -172,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 896,
        y: -84
      }, {
        type: "EntityObsSteelBox",
        x: 1192,
        y: -84
      }, {
        type: "EntityEnemyFlyNew",
        x: 672,
        y: -284,
        settings: {
          pathId: 1
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 656,
        y: 440,
        settings: {
          pathId: 2
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 1036,
        y: -304
      }, {
        type: "EntityObsSteelBox",
        x: 600,
        y: 520
      }, {
        type: "EntityObsSteelBox",
        x: 540,
        y: 520
      }, {
        type: "EntityEnemyBig",
        x: 556,
        y: 444,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityEnemy",
        x: 1032,
        y: 448,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemy",
        x: 1140,
        y: 448,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemyBig",
        x: 1096,
        y: 196,
        settings: {
          enemyType: 3
        }
      }],
      layer: [{
        name: "collision",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
      }, {
        name: "fg",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level50Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.51").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-steel-box").defines(function () {
    Level51 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 356,
        settings: {
          piggyTypes: {
            "0": 5,
            1: 5,
            2: 2,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 1
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 960,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityEnemyBig",
        x: 736,
        y: 112,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemyBig",
        x: 828,
        y: 112,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsSteelBox",
        x: 716,
        y: 192
      }, {
        type: "EntityObsSteelBox",
        x: 776,
        y: 192
      }, {
        type: "EntityObsSteelBox",
        x: 836,
        y: 192
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level51Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.52").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.obstacles.obs-steel-box", "game.entities.enemy").defines(function () {
    Level52 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 6,
            1: 0,
            2: 2,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 1
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 960,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 872,
        y: 324
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: 324
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: 84
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: 324
      }, {
        type: "EntityEnemy",
        x: 804,
        y: 260,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsSteelBox",
        x: 752,
        y: 324
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: 264
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: 204
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: 144
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 324
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 264
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 204
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 144
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 84
      }, {
        type: "EntityObsSteelBox",
        x: 872,
        y: 84
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: 84
      }, {
        type: "EntityObsSteelBox",
        x: 752,
        y: 84
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level52Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.53").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.obstacles.obs-steel-box", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-wood-box", "game.entities.enemy").defines(function () {
    Level53 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 5,
            1: 5,
            2: 5,
            3: 6,
            4: 2,
            5: 0
          },
          piggyNum: 4
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 736,
        y: 132
      }, {
        type: "EntityEnemyBig",
        x: 740,
        y: 64,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsSteelBox",
        x: 796,
        y: 132
      }, {
        type: "EntityObsSteelBox",
        x: 856,
        y: 132
      }, {
        type: "EntityObsSteelBox",
        x: 916,
        y: 132
      }, {
        type: "EntityEnemyBig",
        x: 880,
        y: 64,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1204,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 1208,
        y: 168
      }, {
        type: "EntityObsSteelBox",
        x: 1268,
        y: 228
      }, {
        type: "EntityObsSteelBox",
        x: 1208,
        y: -12
      }, {
        type: "EntityObsWoodBox",
        x: 1208,
        y: 48
      }, {
        type: "EntityObsWoodBox",
        x: 1208,
        y: 108
      }, {
        type: "EntityObsWoodBox",
        x: 1268,
        y: 168
      }, {
        type: "EntityObsWoodBox",
        x: 1208,
        y: 228
      }, {
        type: "EntityObsWoodBox",
        x: 1264,
        y: 392
      }, {
        type: "EntityObsWoodBox",
        x: 1264,
        y: 332
      }, {
        type: "EntityObsWoodBox",
        x: 1144,
        y: 392
      }, {
        type: "EntityObsWoodBox",
        x: 1324,
        y: 392
      }, {
        type: "EntityObsWoodBox",
        x: 1384,
        y: 392
      }, {
        type: "EntityObsWoodBox",
        x: 1444,
        y: 392
      }, {
        type: "EntityObsWoodBox",
        x: 1444,
        y: 332
      }, {
        type: "EntityObsWoodBox",
        x: 1444,
        y: 272
      }, {
        type: "EntityObsWoodBox",
        x: 1444,
        y: 212
      }, {
        type: "EntityEnemyBig",
        x: 1332,
        y: 316,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1384,
        y: 212
      }, {
        type: "EntityObsSteelBox",
        x: 1148,
        y: 132
      }, {
        type: "EntityObsSteelBox",
        x: 1088,
        y: 132
      }, {
        type: "EntityEnemyBig",
        x: 1108,
        y: 64,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemy",
        x: 924,
        y: 384,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityEnemy",
        x: 780,
        y: 420,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityEnemy",
        x: 1056,
        y: 380,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 1168,
        y: 328,
        settings: {
          enemyType: 10
        }
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 55, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 55, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }]
    };
    Level53Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.54").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.objects.enemy-fly-path", "game.entities.obstacles.obs-steel-box", "game.entities.enemy", "game.entities.objects.enemy-fly-new", "game.entities.objects.enemy-big").defines(function () {
    Level54 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 5,
            1: 5,
            2: 5,
            3: 6,
            4: 2,
            5: 0
          },
          piggyNum: 4
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 896,
        y: 380,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 640,
        y: 380,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 636,
        y: -28,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1044,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 984,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1104,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1164,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1224,
        y: 248
      }, {
        type: "EntityObsSteelBox",
        x: 1284,
        y: 248
      }, {
        type: "EntityObsSteelBox",
        x: 1224,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1284,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1344,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1404,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1464,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 1104,
        y: 68
      }, {
        type: "EntityObsSteelBox",
        x: 1104,
        y: 128
      }, {
        type: "EntityObsSteelBox",
        x: 1104,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 1164,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 1224,
        y: 188
      }, {
        type: "EntityEnemy",
        x: 1296,
        y: 132,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1104,
        y: 8
      }, {
        type: "EntityObsSteelBox",
        x: 1284,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 1344,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 1344,
        y: 248
      }, {
        type: "EntityObsSteelBox",
        x: 1344,
        y: 308
      }, {
        type: "EntityObsSteelBox",
        x: 1344,
        y: 368
      }, {
        type: "EntityObsSteelBox",
        x: 1104,
        y: 248
      }, {
        type: "EntityObsSteelBox",
        x: 1104,
        y: 308
      }, {
        type: "EntityObsSteelBox",
        x: 1104,
        y: 368
      }, {
        type: "EntityObsSteelBox",
        x: 1164,
        y: 248
      }, {
        type: "EntityEnemy",
        x: 1264,
        y: 364,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1104,
        y: -52
      }, {
        type: "EntityObsSteelBox",
        x: 1104,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 1104,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 1104,
        y: -232
      }, {
        type: "EntityEnemyFlyNew",
        x: 892,
        y: -24,
        settings: {
          enemyType: 1,
          pathId: 1
        }
      }, {
        type: "EntityEnemyBig",
        x: 1192,
        y: 124,
        settings: {
          enemyType: 4
        }
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level54Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.55").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.enemy", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-steel-box", "game.entities.objects.enemy-big").defines(function () {
    Level55 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 5,
            1: 5,
            2: 5,
            3: 6,
            4: 2,
            5: 0
          },
          piggyNum: 4
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemy",
        x: 656,
        y: 80,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 532,
        y: 432
      }, {
        type: "EntityObsWoodBox",
        x: 640,
        y: 140
      }, {
        type: "EntityObsWoodBarrel",
        x: 588,
        y: 432
      }, {
        type: "EntityObsWoodBarrel",
        x: 560,
        y: 372
      }, {
        type: "EntityObsWoodBox",
        x: 700,
        y: 140
      }, {
        type: "EntityObsSteelBox",
        x: 612,
        y: -328
      }, {
        type: "EntityObsSteelBox",
        x: 612,
        y: -268
      }, {
        type: "EntityObsSteelBox",
        x: 612,
        y: -208
      }, {
        type: "EntityObsSteelBox",
        x: 612,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 612,
        y: -88
      }, {
        type: "EntityObsWoodBox",
        x: 912,
        y: -148
      }, {
        type: "EntityObsWoodBox",
        x: 912,
        y: -88
      }, {
        type: "EntityObsWoodBox",
        x: 972,
        y: -88
      }, {
        type: "EntityObsWoodBox",
        x: 1032,
        y: -88
      }, {
        type: "EntityObsWoodBox",
        x: 1092,
        y: -88
      }, {
        type: "EntityObsWoodBox",
        x: 912,
        y: -208
      }, {
        type: "EntityObsWoodBox",
        x: 912,
        y: -268
      }, {
        type: "EntityObsWoodBox",
        x: 912,
        y: -328
      }, {
        type: "EntityObsWoodBox",
        x: 1152,
        y: -88
      }, {
        type: "EntityObsWoodBox",
        x: 1212,
        y: -148
      }, {
        type: "EntityObsWoodBox",
        x: 1212,
        y: -88
      }, {
        type: "EntityObsWoodBox",
        x: 1212,
        y: -208
      }, {
        type: "EntityObsWoodBox",
        x: 1212,
        y: -268
      }, {
        type: "EntityObsWoodBox",
        x: 1212,
        y: -328
      }, {
        type: "EntityEnemyBig",
        x: 1064,
        y: -148,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemyBig",
        x: 1052,
        y: 340,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1244,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 1304,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 1184,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 1244,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1304,
        y: 300
      }, {
        type: "EntityEnemy",
        x: 1284,
        y: 104,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityObsSteelBox",
        x: 672,
        y: -88
      }, {
        type: "EntityObsSteelBox",
        x: 732,
        y: -88
      }, {
        type: "EntityObsWoodBox",
        x: 988,
        y: 204
      }, {
        type: "EntityObsWoodBox",
        x: 1048,
        y: 204
      }, {
        type: "EntityEnemy",
        x: 1048,
        y: 148,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 1364,
        y: 108,
        settings: {
          enemyType: 10
        }
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 22, 12, 12, 12, 12, 12, 12, 12, 12], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level55Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.56").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.obstacles.obs-steel-box", "game.entities.objects.door", "game.entities.enemy", "game.entities.obstacles.obs-wood-box", "game.entities.objects.switch", "game.entities.objects.enemy-fly-new", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-exp-barrel", "game.entities.objects.card").defines(function () {
    Level56 = {
      entities: [{
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 184,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 6,
            1: 5,
            2: 4,
            3: 0,
            4: 1
          },
          piggyNum: 5
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 968,
        y: 100,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 732,
        y: 100,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 732,
        y: -192,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1024,
        y: -88
      }, {
        type: "EntityObsSteelBox",
        x: 1024,
        y: -148
      }, {
        type: "EntityDoor",
        x: 1024,
        y: 60,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 1024,
        y: -28,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1024,
        y: -208
      }, {
        type: "EntityObsSteelBox",
        x: 1024,
        y: -268
      }, {
        type: "EntityObsSteelBox",
        x: 1084,
        y: -268
      }, {
        type: "EntityObsSteelBox",
        x: 1144,
        y: -268
      }, {
        type: "EntityObsSteelBox",
        x: 1204,
        y: -268
      }, {
        type: "EntityObsSteelBox",
        x: 1264,
        y: -268
      }, {
        type: "EntityObsSteelBox",
        x: 1324,
        y: -268
      }, {
        type: "EntityObsSteelBox",
        x: 1444,
        y: -268
      }, {
        type: "EntityObsSteelBox",
        x: 1384,
        y: -268
      }, {
        type: "EntityObsSteelBox",
        x: 1504,
        y: -268
      }, {
        type: "EntityObsSteelBox",
        x: 964,
        y: -268
      }, {
        type: "EntityObsSteelBox",
        x: 904,
        y: -268
      }, {
        type: "EntityObsSteelBox",
        x: 844,
        y: -268
      }, {
        type: "EntityObsSteelBox",
        x: 784,
        y: -268
      }, {
        type: "EntityObsSteelBox",
        x: 664,
        y: -208
      }, {
        type: "EntityObsSteelBox",
        x: 724,
        y: -268
      }, {
        type: "EntityObsSteelBox",
        x: 664,
        y: -268
      }, {
        type: "EntityObsSteelBox",
        x: 664,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 664,
        y: 92
      }, {
        type: "EntityDoor",
        x: 664,
        y: 4,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 664,
        y: -84,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1364,
        y: -80
      }, {
        type: "EntityObsSteelBox",
        x: 1424,
        y: -80
      }, {
        type: "EntityEnemy",
        x: 1220,
        y: 32,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1212,
        y: 92
      }, {
        type: "EntityObsWoodBox",
        x: 1272,
        y: 92
      }, {
        type: "EntityObsWoodBox",
        x: 1332,
        y: 92
      }, {
        type: "EntityObsWoodBox",
        x: 1084,
        y: -88
      }, {
        type: "EntityObsWoodBox",
        x: 1140,
        y: -88
      }, {
        type: "EntitySwitch",
        x: 1372,
        y: 364,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 968,
        y: -192,
        settings: {
          enemyType: 1,
          pathId: 1
        }
      }, {
        type: "EntitySwitch",
        x: 1056,
        y: 420,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityEnemyBig",
        x: 1100,
        y: 80,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 1084,
        y: -180
      }, {
        type: "EntityEnemyBig",
        x: 1380,
        y: -148,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemy",
        x: 1304,
        y: 32,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityCard",
        x: 800,
        y: -44
      }, {
        type: "EntityCard",
        x: 1144,
        y: 268
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }]
    };
    Level56Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.57").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.enemy", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-wood-box", "game.entities.objects.card").defines(function () {
    Level57 = {
      entities: [{
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 280,
        y: 296,
        settings: {
          piggyTypes: {
            "0": 5,
            1: 6,
            2: 4,
            3: 7,
            4: 2
          },
          piggyNum: 5
        }
      }, {
        type: "EntityEnemy",
        x: 884,
        y: 276,
        settings: {
          enemyType: 3
        }
      }, {
        type: "EntityEnemy",
        x: 1300,
        y: -52,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemyBig",
        x: 1144,
        y: 452,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsWoodBox",
        x: 992,
        y: 452
      }, {
        type: "EntityObsWoodBox",
        x: 1052,
        y: 452
      }, {
        type: "EntityEnemyBig",
        x: 988,
        y: 204,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsWoodBox",
        x: 920,
        y: -60
      }, {
        type: "EntityObsWoodBox",
        x: 980,
        y: -60
      }, {
        type: "EntityObsWoodBox",
        x: 1040,
        y: -60
      }, {
        type: "EntityObsWoodBox",
        x: 980,
        y: -120
      }, {
        type: "EntityObsWoodBox",
        x: 1040,
        y: -120
      }, {
        type: "EntityEnemy",
        x: 1392,
        y: -52,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemy",
        x: 660,
        y: 456,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemy",
        x: 780,
        y: 388,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityObsWoodBox",
        x: 780,
        y: 452
      }, {
        type: "EntityObsWoodBox",
        x: 840,
        y: 452
      }, {
        type: "EntityEnemy",
        x: 668,
        y: 208,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemy",
        x: 760,
        y: 208,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemy",
        x: 868,
        y: 208,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityCard",
        x: 804,
        y: -196
      }, {
        type: "EntityCard",
        x: 1052,
        y: 340
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 35, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 35, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 0,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 35, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 35, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1]]
      }]
    };
    Level57Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.58").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-steel-box", "game.entities.enemy", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-exp-barrel").defines(function () {
    Level58 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 284,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 5,
            1: 6,
            2: 0,
            3: 1,
            4: 2
          },
          piggyNum: 5
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1700,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyBig",
        x: 1316,
        y: -56,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 596,
        y: -100
      }, {
        type: "EntityObsWoodBarrel",
        x: 628,
        y: -164
      }, {
        type: "EntityObsSteelBox",
        x: 580,
        y: 40
      }, {
        type: "EntityObsSteelBox",
        x: 636,
        y: 40
      }, {
        type: "EntityEnemy",
        x: 1276,
        y: 448,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityObsSteelBox",
        x: 524,
        y: 40
      }, {
        type: "EntityObsWoodBarrel",
        x: 652,
        y: -100
      }, {
        type: "EntityObsWoodBox",
        x: 1112,
        y: 452
      }, {
        type: "EntityObsWoodBox",
        x: 1172,
        y: 452
      }, {
        type: "EntityObsSteelBox",
        x: 696,
        y: 40
      }, {
        type: "EntityObsExpBarrel",
        x: 1020,
        y: 148
      }, {
        type: "EntityObsWoodBarrel",
        x: 568,
        y: -40
      }, {
        type: "EntityObsWoodBarrel",
        x: 624,
        y: -40
      }, {
        type: "EntityObsWoodBox",
        x: 1112,
        y: 392
      }, {
        type: "EntityObsWoodBox",
        x: 1328,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 756,
        y: 40
      }, {
        type: "EntityEnemy",
        x: 1372,
        y: 448,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityEnemyBig",
        x: 1524,
        y: 356,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1504,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 1564,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 1624,
        y: -112
      }, {
        type: "EntityObsExpBarrel",
        x: 1020,
        y: 208
      }, {
        type: "EntityEnemy",
        x: 1516,
        y: -168,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityEnemy",
        x: 1608,
        y: -168,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityEnemy",
        x: 524,
        y: 412,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityEnemy",
        x: 748,
        y: 296,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityEnemy",
        x: 756,
        y: -24,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 680,
        y: -40
      }, {
        type: "EntityEnemy",
        x: 632,
        y: 352,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1172,
        y: 32
      }, {
        type: "EntityEnemyBig",
        x: 1160,
        y: -52,
        settings: {
          enemyType: 5
        }
      }],
      layer: [{
        name: "collision",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }, {
        name: "fg",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }]
    };
    Level58Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.59").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-steel-box", "game.entities.objects.enemy-big", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-wood-barrel", "game.entities.enemy", "game.entities.objects.card").defines(function () {
    Level59 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 5,
            1: 6,
            2: 4,
            3: 7,
            4: 1,
            5: 1
          },
          piggyNum: 5
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 548,
        y: -200,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1288,
        y: 452
      }, {
        type: "EntityObsSteelBox",
        x: 1272,
        y: 328
      }, {
        type: "EntityObsWoodBox",
        x: 1348,
        y: 452
      }, {
        type: "EntityObsWoodBox",
        x: 1348,
        y: 392
      }, {
        type: "EntityEnemyBig",
        x: 1292,
        y: 248,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 516,
        y: 432,
        settings: {
          pathId: 1,
          enemyType: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1332,
        y: 328
      }, {
        type: "EntityObsSteelBox",
        x: 1392,
        y: 328
      }, {
        type: "EntityObsWoodBarrel",
        x: 1004,
        y: -20
      }, {
        type: "EntityObsWoodBarrel",
        x: 1056,
        y: -20
      }, {
        type: "EntityObsWoodBarrel",
        x: 1108,
        y: -20
      }, {
        type: "EntityEnemy",
        x: 1208,
        y: 8,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 804,
        y: 4,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 956,
        y: 4,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1080,
        y: 272
      }, {
        type: "EntityObsWoodBox",
        x: 1080,
        y: 212
      }, {
        type: "EntityEnemyBig",
        x: 848,
        y: 424,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemyBig",
        x: 1020,
        y: 424,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemyBig",
        x: 788,
        y: 232,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityEnemy",
        x: 884,
        y: 4,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 1060,
        y: -56,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityObsWoodBox",
        x: 996,
        y: -168
      }, {
        type: "EntityObsWoodBox",
        x: 1056,
        y: -168
      }, {
        type: "EntityObsWoodBox",
        x: 1116,
        y: -168
      }, {
        type: "EntityEnemy",
        x: 1016,
        y: -224,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 1104,
        y: -224,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityCard",
        x: 1168,
        y: 208
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 55, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 55, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level59Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.60").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.objects.enemy-fly-new", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-steel-box", "game.entities.objects.door", "game.entities.objects.switch", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.enemy", "game.entities.objects.card").defines(function () {
    Level60 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 200,
        y: 350,
        settings: {
          piggyTypes: {
            "0": 6,
            1: 5,
            2: 4,
            3: 0,
            4: 2
          },
          piggyNum: 5
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 532,
        y: 224,
        settings: {
          pathId: 0,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 532,
        y: -284,
        settings: {
          pathId: 0,
          enemyType: 1
        }
      }, {
        type: "EntityEnemyBig",
        x: 1048,
        y: 288,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 300
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 360
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 240
      }, {
        type: "EntityDoor",
        x: 928,
        y: -84,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 988,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1108,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1048,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1168,
        y: -148
      }, {
        type: "EntitySwitch",
        x: 328,
        y: -116,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsWoodBox",
        x: 504,
        y: 448
      }, {
        type: "EntityObsWoodBox",
        x: 564,
        y: 388
      }, {
        type: "EntityObsWoodBox",
        x: 564,
        y: 448
      }, {
        type: "EntityObsWoodBarrel",
        x: 960,
        y: -292
      }, {
        type: "EntityObsWoodBarrel",
        x: 1040,
        y: -232
      }, {
        type: "EntityObsWoodBarrel",
        x: 988,
        y: -232
      }, {
        type: "EntityObsWoodBarrel",
        x: 936,
        y: -232
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 180
      }, {
        type: "EntityObsSteelBox",
        x: 432,
        y: -60
      }, {
        type: "EntityObsSteelBox",
        x: 372,
        y: -60
      }, {
        type: "EntityObsSteelBox",
        x: 312,
        y: -60
      }, {
        type: "EntityObsSteelBox",
        x: 252,
        y: -60
      }, {
        type: "EntityObsSteelBox",
        x: 252,
        y: -120
      }, {
        type: "EntityObsSteelBox",
        x: 252,
        y: -180
      }, {
        type: "EntityObsSteelBox",
        x: 252,
        y: -240
      }, {
        type: "EntityObsSteelBox",
        x: 252,
        y: -300
      }, {
        type: "EntityEnemy",
        x: 412,
        y: -120,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemyBig",
        x: 1152,
        y: 288,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1028,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 1088,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 1148,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 1208,
        y: 188
      }, {
        type: "EntityEnemyBig",
        x: 1056,
        y: 116,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityEnemyBig",
        x: 1160,
        y: 120,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsSteelBox",
        x: 768,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 708,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 648,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 828,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 644,
        y: 352
      }, {
        type: "EntityObsSteelBox",
        x: 704,
        y: 352
      }, {
        type: "EntityObsSteelBox",
        x: 764,
        y: 352
      }, {
        type: "EntityObsSteelBox",
        x: 824,
        y: 352
      }, {
        type: "EntityEnemyBig",
        x: 676,
        y: 112,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemyBig",
        x: 776,
        y: 112,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemyBig",
        x: 676,
        y: 284,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemyBig",
        x: 776,
        y: 284,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1012,
        y: -292
      }, {
        type: "EntityObsWoodBarrel",
        x: 984,
        y: -352
      }, {
        type: "EntityObsSteelBox",
        x: 1228,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1288,
        y: -148
      }, {
        type: "EntityDoor",
        x: 928,
        y: 4,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 928,
        y: 92,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityCard",
        x: 1012,
        y: -8
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level60Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.61").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.objects.enemy-fly-new", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-steel-box", "game.entities.objects.door", "game.entities.objects.switch", "game.entities.enemy", "game.entities.obstacles.obs-wood-circle", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-exp-barrel").defines(function () {
    Level61 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 196,
        y: 348,
        settings: {
          piggyTypes: {
            "0": 6,
            1: 5,
            2: 7,
            3: 4,
            4: 5,
            5: 1
          },
          piggyNum: 6
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 416,
        y: 244,
        settings: {
          pathId: 0,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1200,
        y: -296,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 420,
        y: 8,
        settings: {
          pathId: 0,
          enemyType: 1
        }
      }, {
        type: "EntityEnemyBig",
        x: 1044,
        y: 428,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 92
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: -28
      }, {
        type: "EntityDoor",
        x: 928,
        y: 240,
        settings: {
          doorId: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 988,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1108,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1048,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1168,
        y: -148
      }, {
        type: "EntitySwitch",
        x: 1008,
        y: -204,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: -88
      }, {
        type: "EntityEnemyBig",
        x: 1144,
        y: 428,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1228,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1288,
        y: -148
      }, {
        type: "EntityDoor",
        x: 928,
        y: 152,
        settings: {
          doorId: 1
        }
      }, {
        type: "EntityEnemy",
        x: 748,
        y: 268,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityEnemy",
        x: 848,
        y: 352,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityDoor",
        x: 928,
        y: 328,
        settings: {
          doorId: 1
        }
      }, {
        type: "EntityDoor",
        x: 664,
        y: 152,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 664,
        y: 64,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 628,
        y: 4
      }, {
        type: "EntityObsSteelBox",
        x: 688,
        y: 4
      }, {
        type: "EntityObsSteelBox",
        x: 808,
        y: 4
      }, {
        type: "EntityObsSteelBox",
        x: 748,
        y: 4
      }, {
        type: "EntityObsSteelBox",
        x: 868,
        y: 4
      }, {
        type: "EntityObsWoodCircle",
        x: 564,
        y: 180
      }, {
        type: "EntityObsWoodBox",
        x: 1040,
        y: 192
      }, {
        type: "EntityObsWoodBox",
        x: 1100,
        y: 192
      }, {
        type: "EntityObsWoodBox",
        x: 1160,
        y: 192
      }, {
        type: "EntityEnemy",
        x: 656,
        y: -64,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 752,
        y: -76
      }, {
        type: "EntityObsWoodBarrel",
        x: 804,
        y: -76
      }, {
        type: "EntityEnemy",
        x: 948,
        y: -204,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityObsSteelBox",
        x: 988,
        y: 68
      }, {
        type: "EntityObsSteelBox",
        x: 1048,
        y: 68
      }, {
        type: "EntityObsSteelBox",
        x: 1108,
        y: 68
      }, {
        type: "EntityObsSteelBox",
        x: 1168,
        y: 68
      }, {
        type: "EntityObsSteelBox",
        x: 1228,
        y: 68
      }, {
        type: "EntitySwitch",
        x: 1192,
        y: 12,
        settings: {
          doorId: 1
        }
      }, {
        type: "EntityEnemyBig",
        x: 1108,
        y: 0,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemyBig",
        x: 1012,
        y: 4,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 568,
        y: -288,
        settings: {
          pathId: 1,
          enemyType: 1
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 1064,
        y: 104
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 1, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 1, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level61Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.62").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-steel-box", "game.entities.objects.door", "game.entities.enemy", "game.entities.objects.switch", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel").defines(function () {
    Level62 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 196,
        y: 348,
        settings: {
          piggyTypes: {
            "0": 5,
            1: 6,
            2: 1,
            3: 0,
            4: 4,
            5: 2
          },
          piggyNum: 6
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1444,
        y: 124,
        settings: {
          pathId: 0,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 896,
        y: -296,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 364,
        y: 20,
        settings: {
          pathId: 2,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 1004,
        y: 124,
        settings: {
          pathId: 0,
          enemyType: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 92
      }, {
        type: "EntityDoor",
        x: 928,
        y: 240,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 928,
        y: 152,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 928,
        y: 328,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityEnemy",
        x: 480,
        y: 244,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityObsSteelBox",
        x: 988,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 1048,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 1108,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 1168,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 1228,
        y: 32
      }, {
        type: "EntitySwitch",
        x: 488,
        y: -220,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityEnemyBig",
        x: 1176,
        y: -36,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemyBig",
        x: 1068,
        y: -40,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 264,
        y: -296,
        settings: {
          pathId: 1,
          enemyType: 1
        }
      }, {
        type: "EntityEnemyBig",
        x: 624,
        y: 412,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityEnemyBig",
        x: 1104,
        y: 244,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsSteelBox",
        x: 568,
        y: -164
      }, {
        type: "EntityObsSteelBox",
        x: 628,
        y: -164
      }, {
        type: "EntityObsSteelBox",
        x: 508,
        y: -164
      }, {
        type: "EntityObsSteelBox",
        x: 448,
        y: -164
      }, {
        type: "EntityObsWoodBox",
        x: 480,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 480,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 420,
        y: 360
      }, {
        type: "EntityObsWoodBarrel",
        x: 348,
        y: 340
      }, {
        type: "EntityObsWoodBarrel",
        x: 912,
        y: -48
      }, {
        type: "EntityObsWoodBarrel",
        x: 964,
        y: -48
      }, {
        type: "EntityObsWoodBarrel",
        x: 936,
        y: -108
      }, {
        type: "EntityEnemy",
        x: 416,
        y: 308,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 820,
        y: 24,
        settings: {
          pathId: 2,
          enemyType: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 996,
        y: -228
      }, {
        type: "EntityObsWoodBox",
        x: 1116,
        y: -228
      }, {
        type: "EntityEnemy",
        x: 576,
        y: -224,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1288,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 1348,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 1408,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 1468,
        y: 32
      }, {
        type: "EntityEnemy",
        x: 1020,
        y: -284,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1056,
        y: -228
      }, {
        type: "EntityObsWoodBox",
        x: 1300,
        y: -128
      }, {
        type: "EntityObsWoodBox",
        x: 1360,
        y: -128
      }, {
        type: "EntityObsWoodBox",
        x: 1420,
        y: -128
      }, {
        type: "EntityEnemy",
        x: 1104,
        y: -284,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1312,
        y: -208
      }, {
        type: "EntityObsWoodBarrel",
        x: 1376,
        y: -208
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 0,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level62Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.63").requires("impact.image", "game.entities.objects.enemy-fly-path", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.obstacles.obs-wood-box", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-exp-barrel", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-steel-box", "game.entities.enemy", "game.entities.obstacles.obs-wood-barrel").defines(function () {
    Level63 = {
      entities: [{
        type: "EntityEnemyFlyPath",
        x: 548,
        y: 292,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntitySlingMaker",
        x: 280,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 5,
            1: 6,
            2: 4,
            3: 7,
            4: 7
          },
          piggyNum: 5
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 676,
        y: -172,
        settings: {
          pathId: 2,
          pathNum: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1220,
        y: -36
      }, {
        type: "EntityObsWoodBox",
        x: 1280,
        y: -36
      }, {
        type: "EntityEnemyBig",
        x: 828,
        y: -28,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 1028,
        y: 60
      }, {
        type: "EntityObsWoodBox",
        x: 1160,
        y: -36
      }, {
        type: "EntityObsWoodBox",
        x: 1100,
        y: -36
      }, {
        type: "EntityEnemyFlyNew",
        x: 556,
        y: -148,
        settings: {
          enemyType: 1,
          pathId: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 940,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 800,
        y: 40
      }, {
        type: "EntityObsSteelBox",
        x: 860,
        y: 40
      }, {
        type: "EntityObsSteelBox",
        x: 920,
        y: 40
      }, {
        type: "EntityObsSteelBox",
        x: 980,
        y: 40
      }, {
        type: "EntityEnemyBig",
        x: 944,
        y: -28,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1E3,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 1060,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 1120,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 1180,
        y: 420
      }, {
        type: "EntityEnemyBig",
        x: 1040,
        y: 352,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemyBig",
        x: 1156,
        y: 352,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemy",
        x: 952,
        y: 368,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1060,
        y: 152
      }, {
        type: "EntityObsWoodBox",
        x: 1120,
        y: 152
      }, {
        type: "EntityObsExpBarrel",
        x: 1088,
        y: 60
      }, {
        type: "EntityObsWoodBarrel",
        x: 448,
        y: 428
      }, {
        type: "EntityObsWoodBarrel",
        x: 504,
        y: 428
      }, {
        type: "EntityObsWoodBarrel",
        x: 448,
        y: 368
      }, {
        type: "EntityObsWoodBarrel",
        x: 504,
        y: 368
      }, {
        type: "EntityEnemy",
        x: 1132,
        y: -92,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 1232,
        y: -92,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 1256,
        y: -200,
        settings: {
          enemyType: 1,
          pathId: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 696,
        y: 216
      }, {
        type: "EntityObsWoodBox",
        x: 752,
        y: 216
      }, {
        type: "EntityObsWoodBox",
        x: 812,
        y: 216
      }, {
        type: "EntityEnemyBig",
        x: 700,
        y: 148,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemyBig",
        x: 804,
        y: 148,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1284,
        y: 192
      }, {
        type: "EntityObsWoodBox",
        x: 1344,
        y: 192
      }, {
        type: "EntityEnemyBig",
        x: 1248,
        y: 124,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemyBig",
        x: 1332,
        y: 124,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1224,
        y: 192
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 10, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 10, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]]
      }]
    };
    Level63Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.64").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-steel-box", "game.entities.objects.door", "game.entities.enemy", "game.entities.objects.switch", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel").defines(function () {
    Level64 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 196,
        y: 348,
        settings: {
          piggyTypes: {
            "0": 6,
            1: 0,
            2: 1,
            3: 4,
            4: 2,
            5: 7
          },
          piggyNum: 6
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 864,
        y: -84,
        settings: {
          pathId: 0,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 252,
        y: -16,
        settings: {
          pathId: 0,
          enemyType: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 92
      }, {
        type: "EntityDoor",
        x: 928,
        y: 240,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 928,
        y: 152,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 928,
        y: 328,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityEnemy",
        x: 700,
        y: 244,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityObsSteelBox",
        x: 988,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 1048,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 1108,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 1168,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 1228,
        y: 32
      }, {
        type: "EntitySwitch",
        x: 488,
        y: -220,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityEnemyBig",
        x: 1176,
        y: -36,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemyBig",
        x: 1068,
        y: -40,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemyBig",
        x: 524,
        y: 16,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityEnemyBig",
        x: 1108,
        y: 336,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsSteelBox",
        x: 568,
        y: -164
      }, {
        type: "EntityObsSteelBox",
        x: 628,
        y: -164
      }, {
        type: "EntityObsSteelBox",
        x: 508,
        y: -164
      }, {
        type: "EntityObsSteelBox",
        x: 448,
        y: -164
      }, {
        type: "EntityObsWoodBox",
        x: 764,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 704,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 704,
        y: 300
      }, {
        type: "EntityObsWoodBarrel",
        x: 628,
        y: 344
      }, {
        type: "EntityObsWoodBarrel",
        x: 912,
        y: -48
      }, {
        type: "EntityObsWoodBarrel",
        x: 964,
        y: -48
      }, {
        type: "EntityEnemy",
        x: 640,
        y: 304,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityObsWoodBox",
        x: 936,
        y: -228
      }, {
        type: "EntityObsWoodBox",
        x: 996,
        y: -228
      }, {
        type: "EntityObsWoodBox",
        x: 1056,
        y: -228
      }, {
        type: "EntityObsWoodBox",
        x: 1116,
        y: -228
      }, {
        type: "EntityEnemy",
        x: 576,
        y: -216,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1288,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 1348,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 1408,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 1468,
        y: 32
      }, {
        type: "EntityObsWoodBox",
        x: 1236,
        y: -128
      }, {
        type: "EntityObsWoodBox",
        x: 1356,
        y: -128
      }, {
        type: "EntityObsWoodBox",
        x: 1296,
        y: -128
      }, {
        type: "EntityEnemy",
        x: 968,
        y: -280,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 1072,
        y: -284,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 1300,
        y: 352,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 1400,
        y: 352,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 748,
        y: 280
      }, {
        type: "EntityEnemy",
        x: 560,
        y: 364,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityEnemy",
        x: 488,
        y: 368,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityObsWoodBox",
        x: 516,
        y: 84
      }, {
        type: "EntityObsWoodBox",
        x: 576,
        y: 84
      }, {
        type: "EntityObsWoodBarrel",
        x: 1240,
        y: -208
      }, {
        type: "EntityObsWoodBarrel",
        x: 1312,
        y: -208
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level64Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.65").requires("impact.image", "game.entities.objects.enemy-fly-path", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-steel-box", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-wood-box", "game.entities.enemy", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-wood-circle").defines(function () {
    Level65 = {
      entities: [{
        type: "EntityEnemyFlyPath",
        x: 592,
        y: 28,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntitySlingMaker",
        x: 216,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 5,
            1: 6,
            2: 0,
            3: 4,
            4: 7
          },
          piggyNum: 5
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 912,
        y: 92,
        settings: {
          pathId: 2,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 912,
        y: -212,
        settings: {
          pathId: 2,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 912,
        y: -212,
        settings: {
          pathId: 2,
          pathNum: 3
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 596,
        y: 280,
        settings: {
          enemyType: 1,
          pathId: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1032,
        y: 24
      }, {
        type: "EntityEnemyBig",
        x: 1204,
        y: 376,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsWoodBox",
        x: 932,
        y: 332
      }, {
        type: "EntityEnemy",
        x: 880,
        y: 148,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityObsWoodBox",
        x: 752,
        y: 424
      }, {
        type: "EntityObsWoodBox",
        x: 696,
        y: 424
      }, {
        type: "EntityObsWoodBarrel",
        x: 1012,
        y: 160
      }, {
        type: "EntityEnemy",
        x: 700,
        y: 368,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 972,
        y: -36,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemyBig",
        x: 1336,
        y: 312,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 448,
        y: -216,
        settings: {
          enemyType: 1,
          pathId: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1296,
        y: 392
      }, {
        type: "EntityObsWoodBox",
        x: 1356,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 972,
        y: 24
      }, {
        type: "EntityObsSteelBox",
        x: 836,
        y: -40
      }, {
        type: "EntityObsSteelBox",
        x: 776,
        y: -40
      }, {
        type: "EntityObsSteelBox",
        x: 656,
        y: -40
      }, {
        type: "EntityObsSteelBox",
        x: 716,
        y: -40
      }, {
        type: "EntityObsSteelBox",
        x: 596,
        y: -40
      }, {
        type: "EntityEnemy",
        x: 624,
        y: -100,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 712,
        y: -100,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 804,
        y: -104,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 824,
        y: 148,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityObsWoodCircle",
        x: 696,
        y: 164
      }, {
        type: "EntityObsSteelBox",
        x: 1092,
        y: 24
      }, {
        type: "EntityEnemy",
        x: 1072,
        y: -36,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityObsWoodBox",
        x: 176,
        y: -164
      }, {
        type: "EntityObsWoodBox",
        x: 296,
        y: -164
      }, {
        type: "EntityObsWoodBox",
        x: 236,
        y: -164
      }, {
        type: "EntityObsWoodBox",
        x: 356,
        y: -164
      }, {
        type: "EntityEnemy",
        x: 204,
        y: -224,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemy",
        x: 316,
        y: -276,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 276,
        y: -244
      }, {
        type: "EntityObsWoodBarrel",
        x: 328,
        y: -244
      }, {
        type: "EntityObsWoodBox",
        x: 1200,
        y: 88
      }, {
        type: "EntityObsWoodBox",
        x: 1200,
        y: 28
      }, {
        type: "EntityObsWoodBox",
        x: 1260,
        y: 88
      }, {
        type: "EntityObsWoodBarrel",
        x: 1328,
        y: 68
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 21, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 21, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }]
    };
    Level65Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.66").requires("impact.image", "game.entities.objects.enemy-fly-path", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.objects.enemy-big", "game.entities.objects.door", "game.entities.objects.switch", "game.entities.enemy").defines(function () {
    Level66 = {
      entities: [{
        type: "EntityEnemyFlyPath",
        x: 644,
        y: -316,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntitySlingMaker",
        x: 216,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 4,
            1: 7,
            2: 7,
            3: 6,
            4: 2,
            5: 2
          },
          piggyNum: 6
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1700,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 644,
        y: 80,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 644,
        y: -316,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1168,
        y: 336,
        settings: {
          pathId: 2,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 956,
        y: -316,
        settings: {
          enemyType: 1,
          pathId: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 636,
        y: 384
      }, {
        type: "EntityObsWoodBox",
        x: 636,
        y: 324
      }, {
        type: "EntityObsWoodBarrel",
        x: 700,
        y: 304
      }, {
        type: "EntityObsSteelBox",
        x: 696,
        y: 384
      }, {
        type: "EntityObsSteelBox",
        x: 756,
        y: 384
      }, {
        type: "EntityObsSteelBox",
        x: 816,
        y: 384
      }, {
        type: "EntityObsSteelBox",
        x: 876,
        y: 384
      }, {
        type: "EntityObsWoodBox",
        x: 636,
        y: 264
      }, {
        type: "EntityObsWoodBox",
        x: 636,
        y: 204
      }, {
        type: "EntityObsSteelBox",
        x: 636,
        y: 144
      }, {
        type: "EntityObsSteelBox",
        x: 696,
        y: 144
      }, {
        type: "EntityObsSteelBox",
        x: 756,
        y: 144
      }, {
        type: "EntityObsSteelBox",
        x: 816,
        y: 144
      }, {
        type: "EntityObsSteelBox",
        x: 876,
        y: 144
      }, {
        type: "EntityObsSteelBox",
        x: 936,
        y: 144
      }, {
        type: "EntityObsSteelBox",
        x: 996,
        y: 144
      }, {
        type: "EntityObsSteelBox",
        x: 756,
        y: 84
      }, {
        type: "EntityObsWoodBarrel",
        x: 752,
        y: 304
      }, {
        type: "EntityObsWoodBarrel",
        x: 724,
        y: 244
      }, {
        type: "EntityEnemyBig",
        x: 844,
        y: 312,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsSteelBox",
        x: 756,
        y: -152
      }, {
        type: "EntityDoor",
        x: 756,
        y: -4,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 756,
        y: -92,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 816,
        y: -152
      }, {
        type: "EntityObsSteelBox",
        x: 876,
        y: -152
      }, {
        type: "EntityObsSteelBox",
        x: 936,
        y: -152
      }, {
        type: "EntityObsSteelBox",
        x: 996,
        y: -152
      }, {
        type: "EntityObsWoodBox",
        x: 576,
        y: 144
      }, {
        type: "EntityObsWoodBox",
        x: 516,
        y: 144
      }, {
        type: "EntityObsWoodBox",
        x: 456,
        y: 144
      }, {
        type: "EntityObsWoodBox",
        x: 396,
        y: 144
      }, {
        type: "EntityObsWoodBox",
        x: 396,
        y: 84
      }, {
        type: "EntityObsSteelBox",
        x: 216,
        y: 84
      }, {
        type: "EntityObsSteelBox",
        x: 156,
        y: 84
      }, {
        type: "EntityObsSteelBox",
        x: 36,
        y: 84
      }, {
        type: "EntityObsSteelBox",
        x: 96,
        y: 84
      }, {
        type: "EntityObsSteelBox",
        x: -24,
        y: 84
      }, {
        type: "EntityObsWoodBox",
        x: 396,
        y: 24
      }, {
        type: "EntityObsWoodBox",
        x: 396,
        y: -36
      }, {
        type: "EntityObsWoodBox",
        x: 396,
        y: -96
      }, {
        type: "EntityObsWoodBox",
        x: 396,
        y: -156
      }, {
        type: "EntityObsSteelBox",
        x: 336,
        y: -216
      }, {
        type: "EntityObsSteelBox",
        x: 276,
        y: -216
      }, {
        type: "EntityObsSteelBox",
        x: 216,
        y: -216
      }, {
        type: "EntityObsSteelBox",
        x: 156,
        y: -216
      }, {
        type: "EntityObsSteelBox",
        x: 96,
        y: -216
      }, {
        type: "EntityObsSteelBox",
        x: 36,
        y: -216
      }, {
        type: "EntityObsSteelBox",
        x: -24,
        y: -216
      }, {
        type: "EntitySwitch",
        x: 48,
        y: 28,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityEnemy",
        x: 132,
        y: 28,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityObsWoodBox",
        x: 192,
        y: 24
      }, {
        type: "EntityEnemy",
        x: 192,
        y: -28,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 800,
        y: 64
      }, {
        type: "EntityObsWoodBarrel",
        x: 852,
        y: 64
      }, {
        type: "EntityObsWoodBarrel",
        x: 824,
        y: 4
      }, {
        type: "EntityObsSteelBox",
        x: 1372,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 1312,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 1432,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 1492,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 1612,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 1552,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 1552,
        y: 332
      }, {
        type: "EntityObsSteelBox",
        x: 1552,
        y: 272
      }, {
        type: "EntityObsSteelBox",
        x: 1552,
        y: 212
      }, {
        type: "EntityObsSteelBox",
        x: 1552,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 1492,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 1432,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 1372,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 1312,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 1612,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 1552,
        y: 92
      }, {
        type: "EntityObsSteelBox",
        x: 1552,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 1552,
        y: -28
      }, {
        type: "EntityObsSteelBox",
        x: 1552,
        y: -88
      }, {
        type: "EntityObsSteelBox",
        x: 1612,
        y: -88
      }, {
        type: "EntityObsSteelBox",
        x: 1492,
        y: -88
      }, {
        type: "EntityObsSteelBox",
        x: 1432,
        y: -88
      }, {
        type: "EntityObsSteelBox",
        x: 1372,
        y: -88
      }, {
        type: "EntityObsSteelBox",
        x: 1312,
        y: -88
      }, {
        type: "EntityObsWoodBox",
        x: 1372,
        y: 92
      }, {
        type: "EntityObsWoodBox",
        x: 1312,
        y: 92
      }, {
        type: "EntityObsWoodBox",
        x: 1312,
        y: 32
      }, {
        type: "EntityObsWoodBarrel",
        x: 1360,
        y: 12
      }, {
        type: "EntityEnemy",
        x: 1448,
        y: 96,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemy",
        x: 1312,
        y: -24,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemy",
        x: 1324,
        y: 332,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemy",
        x: 1372,
        y: 272,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1372,
        y: 332
      }, {
        type: "EntityObsWoodBox",
        x: 1432,
        y: 332
      }, {
        type: "EntityObsWoodBarrel",
        x: 1416,
        y: 252
      }, {
        type: "EntityObsWoodBarrel",
        x: 1476,
        y: 312
      }, {
        type: "EntityObsWoodBarrel",
        x: 1476,
        y: 252
      }, {
        type: "EntityEnemy",
        x: 1448,
        y: -148,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemy",
        x: 1332,
        y: -144,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 1140,
        y: -292,
        settings: {
          enemyType: 1,
          pathId: 2
        }
      }, {
        type: "EntityObsSteelBox",
        x: 396,
        y: -216
      }, {
        type: "EntityEnemy",
        x: 840,
        y: -24,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityEnemy",
        x: 920,
        y: 88,
        settings: {
          enemyType: 9
        }
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level66Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.67").requires("impact.image", "game.entities.objects.enemy-fly-path", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.enemy", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-exp-barrel").defines(function () {
    Level67 = {
      entities: [{
        type: "EntityEnemyFlyPath",
        x: 916,
        y: 356,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntitySlingMaker",
        x: 276,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 4,
            1: 7,
            2: 5,
            3: 6,
            4: 2,
            5: 2
          },
          piggyNum: 6
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1700,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 776,
        y: -4,
        settings: {
          pathId: 2,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1368,
        y: 424,
        settings: {
          pathId: 3,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 916,
        y: -4,
        settings: {
          enemyType: 1,
          pathId: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 392,
        y: 364
      }, {
        type: "EntityObsWoodBox",
        x: 1E3,
        y: 244
      }, {
        type: "EntityObsWoodBarrel",
        x: 476,
        y: 284
      }, {
        type: "EntityEnemy",
        x: 1200,
        y: 8,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityObsSteelBox",
        x: 452,
        y: 364
      }, {
        type: "EntityObsSteelBox",
        x: 512,
        y: 364
      }, {
        type: "EntityObsSteelBox",
        x: 572,
        y: 364
      }, {
        type: "EntityObsSteelBox",
        x: 632,
        y: 364
      }, {
        type: "EntityObsWoodBarrel",
        x: 528,
        y: 284
      }, {
        type: "EntityObsWoodBarrel",
        x: 580,
        y: 280
      }, {
        type: "EntityObsWoodBarrel",
        x: 504,
        y: 224
      }, {
        type: "EntityObsWoodBarrel",
        x: 556,
        y: 224
      }, {
        type: "EntityObsWoodBarrel",
        x: 532,
        y: 164
      }, {
        type: "EntityObsSteelBox",
        x: 1E3,
        y: 304
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: 364
      }, {
        type: "EntityObsSteelBox",
        x: 1060,
        y: 304
      }, {
        type: "EntityObsSteelBox",
        x: 1120,
        y: 304
      }, {
        type: "EntityObsSteelBox",
        x: 1180,
        y: 304
      }, {
        type: "EntityObsWoodBox",
        x: 1E3,
        y: 184
      }, {
        type: "EntityEnemyBig",
        x: 1276,
        y: 240,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1E3,
        y: 124
      }, {
        type: "EntityObsSteelBox",
        x: 1E3,
        y: 64
      }, {
        type: "EntityObsSteelBox",
        x: 1060,
        y: 64
      }, {
        type: "EntityObsSteelBox",
        x: 1120,
        y: 64
      }, {
        type: "EntityObsSteelBox",
        x: 1180,
        y: 64
      }, {
        type: "EntityObsSteelBox",
        x: 1240,
        y: 64
      }, {
        type: "EntityObsSteelBox",
        x: 1300,
        y: 64
      }, {
        type: "EntityObsWoodBox",
        x: 1120,
        y: 364
      }, {
        type: "EntityObsWoodBox",
        x: 1120,
        y: 424
      }, {
        type: "EntityObsSteelBox",
        x: 1240,
        y: 484
      }, {
        type: "EntityObsSteelBox",
        x: 1300,
        y: 484
      }, {
        type: "EntityObsSteelBox",
        x: 1360,
        y: 484
      }, {
        type: "EntityObsWoodBox",
        x: 1120,
        y: 4
      }, {
        type: "EntityObsWoodBox",
        x: 1120,
        y: -56
      }, {
        type: "EntityObsSteelBox",
        x: 1240,
        y: 304
      }, {
        type: "EntityObsSteelBox",
        x: 1300,
        y: 304
      }, {
        type: "EntityObsSteelBox",
        x: 1120,
        y: -116
      }, {
        type: "EntityObsSteelBox",
        x: 1180,
        y: -116
      }, {
        type: "EntityObsSteelBox",
        x: 1240,
        y: -116
      }, {
        type: "EntityObsSteelBox",
        x: 1300,
        y: -116
      }, {
        type: "EntityObsSteelBox",
        x: 1360,
        y: -116
      }, {
        type: "EntityObsSteelBox",
        x: 1516,
        y: -48
      }, {
        type: "EntityObsSteelBox",
        x: 1576,
        y: -48
      }, {
        type: "EntityObsSteelBox",
        x: 1636,
        y: -48
      }, {
        type: "EntityObsWoodBox",
        x: 1468,
        y: 192
      }, {
        type: "EntityObsWoodBox",
        x: 1528,
        y: 192
      }, {
        type: "EntityObsWoodBox",
        x: 1588,
        y: 192
      }, {
        type: "EntityObsWoodBox",
        x: 1648,
        y: 192
      }, {
        type: "EntityObsSteelBox",
        x: 1520,
        y: 432
      }, {
        type: "EntityObsSteelBox",
        x: 1580,
        y: 432
      }, {
        type: "EntityObsSteelBox",
        x: 1640,
        y: 432
      }, {
        type: "EntityObsWoodBox",
        x: 1516,
        y: 12
      }, {
        type: "EntityObsWoodBox",
        x: 1516,
        y: 72
      }, {
        type: "EntityObsWoodBox",
        x: 1516,
        y: 132
      }, {
        type: "EntityObsWoodBox",
        x: 1520,
        y: 252
      }, {
        type: "EntityObsWoodBox",
        x: 1520,
        y: 312
      }, {
        type: "EntityObsWoodBox",
        x: 1520,
        y: 372
      }, {
        type: "EntityObsSteelBox",
        x: 488,
        y: -132
      }, {
        type: "EntityObsSteelBox",
        x: 548,
        y: -132
      }, {
        type: "EntityObsSteelBox",
        x: 428,
        y: -132
      }, {
        type: "EntityObsSteelBox",
        x: 368,
        y: -132
      }, {
        type: "EntityObsSteelBox",
        x: 1180,
        y: 484
      }, {
        type: "EntityObsSteelBox",
        x: 1120,
        y: 484
      }, {
        type: "EntityEnemy",
        x: 1280,
        y: 8,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 1196,
        y: 424,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 1260,
        y: 424,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemyBig",
        x: 1180,
        y: 180,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 776,
        y: 360,
        settings: {
          enemyType: 1,
          pathId: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1124,
        y: 244
      }, {
        type: "EntityObsWoodBox",
        x: 1184,
        y: 244
      }, {
        type: "EntityObsWoodBox",
        x: 1244,
        y: 244
      }, {
        type: "EntityEnemyFlyNew",
        x: 1368,
        y: -12,
        settings: {
          enemyType: 1,
          pathId: 3
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1576,
        y: 72
      }, {
        type: "EntityObsWoodBox",
        x: 1636,
        y: 72
      }, {
        type: "EntityObsWoodBox",
        x: 1580,
        y: 312
      }, {
        type: "EntityObsWoodBox",
        x: 1640,
        y: 312
      }, {
        type: "EntityEnemy",
        x: 1584,
        y: 264,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemy",
        x: 1580,
        y: 20,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemy",
        x: 1580,
        y: 140,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemy",
        x: 1580,
        y: 376,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemy",
        x: 528,
        y: -184,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 396,
        y: -212
      }, {
        type: "EntityObsWoodBarrel",
        x: 448,
        y: -212
      }, {
        type: "EntityObsExpBarrel",
        x: 428,
        y: -284
      }, {
        type: "EntityObsWoodBarrel",
        x: 396,
        y: -272
      }, {
        type: "EntityEnemy",
        x: 364,
        y: -184,
        settings: {
          enemyType: 9
        }
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level67Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.68").requires("impact.image", "game.entities.objects.enemy-fly-path", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-steel-box", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.enemy").defines(function () {
    Level68 = {
      entities: [{
        type: "EntityEnemyFlyPath",
        x: 524,
        y: 348,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntitySlingMaker",
        x: 216,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 6,
            1: 5,
            2: 0,
            3: 1,
            4: 1,
            5: 2
          },
          piggyNum: 6
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1500,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 744,
        y: -64,
        settings: {
          pathId: 2,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1296,
        y: 348,
        settings: {
          pathId: 4,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1088,
        y: -64,
        settings: {
          pathId: 3,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 524,
        y: -64,
        settings: {
          enemyType: 1,
          pathId: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 856,
        y: 36
      }, {
        type: "EntityEnemyBig",
        x: 856,
        y: 280,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsWoodBox",
        x: 856,
        y: -24
      }, {
        type: "EntityObsWoodBarrel",
        x: 1116,
        y: 400
      }, {
        type: "EntityEnemy",
        x: 856,
        y: -80,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityObsSteelBox",
        x: 916,
        y: 36
      }, {
        type: "EntityObsSteelBox",
        x: 976,
        y: 36
      }, {
        type: "EntityEnemyBig",
        x: 960,
        y: 280,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 744,
        y: 348,
        settings: {
          enemyType: 1,
          pathId: 2
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1168,
        y: 400
      }, {
        type: "EntityObsWoodBarrel",
        x: 1140,
        y: 340
      }, {
        type: "EntityObsWoodBox",
        x: 976,
        y: -24
      }, {
        type: "EntityObsWoodBox",
        x: 916,
        y: -24
      }, {
        type: "EntityObsWoodBox",
        x: 916,
        y: -84
      }, {
        type: "EntityEnemy",
        x: 980,
        y: -80,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 912,
        y: -140,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 1088,
        y: 348,
        settings: {
          enemyType: 1,
          pathId: 3
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 1296,
        y: -64,
        settings: {
          enemyType: 1,
          pathId: 4
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 588,
        y: 400
      }, {
        type: "EntityEnemy",
        x: 668,
        y: 416,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 596,
        y: 360,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 1148,
        y: 304,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 1244,
        y: 420,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityObsSteelBox",
        x: 628,
        y: 8
      }, {
        type: "EntityObsSteelBox",
        x: 628,
        y: -52
      }, {
        type: "EntityObsSteelBox",
        x: 628,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 628,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 568,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 508,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 688,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 748,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 1184,
        y: 12
      }, {
        type: "EntityObsSteelBox",
        x: 1184,
        y: -48
      }, {
        type: "EntityObsSteelBox",
        x: 1184,
        y: -108
      }, {
        type: "EntityObsSteelBox",
        x: 1184,
        y: -168
      }, {
        type: "EntityObsSteelBox",
        x: 1124,
        y: -168
      }, {
        type: "EntityObsSteelBox",
        x: 1064,
        y: -168
      }, {
        type: "EntityObsSteelBox",
        x: 1244,
        y: -168
      }, {
        type: "EntityObsSteelBox",
        x: 1304,
        y: -168
      }, {
        type: "EntityEnemy",
        x: 572,
        y: -228,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 688,
        y: -228,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 1124,
        y: -224,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 1240,
        y: -224,
        settings: {
          enemyType: 10
        }
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 0,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }]
    };
    Level68Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.69").requires("impact.image", "game.entities.objects.enemy-fly-path", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-wood-box", "game.entities.objects.enemy-big", "game.entities.enemy", "game.entities.obstacles.obs-wood-circle").defines(function () {
    Level69 = {
      entities: [{
        type: "EntityEnemyFlyPath",
        x: 520,
        y: 288,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntitySlingMaker",
        x: 216,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 6,
            1: 5,
            2: 0,
            3: 1,
            4: 1,
            5: 2
          },
          piggyNum: 6
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1500,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 520,
        y: -36,
        settings: {
          enemyType: 1,
          pathId: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 780,
        y: 320
      }, {
        type: "EntityObsSteelBox",
        x: 840,
        y: 320
      }, {
        type: "EntityObsSteelBox",
        x: 900,
        y: 320
      }, {
        type: "EntityObsSteelBox",
        x: 960,
        y: 320
      }, {
        type: "EntityObsSteelBox",
        x: 1020,
        y: 320
      }, {
        type: "EntityObsSteelBox",
        x: 1080,
        y: 320
      }, {
        type: "EntityObsWoodBox",
        x: 780,
        y: 260
      }, {
        type: "EntityObsWoodBox",
        x: 780,
        y: 200
      }, {
        type: "EntityObsWoodBox",
        x: 780,
        y: 140
      }, {
        type: "EntityObsWoodBox",
        x: 780,
        y: 80
      }, {
        type: "EntityObsWoodBox",
        x: 780,
        y: 20
      }, {
        type: "EntityObsSteelBox",
        x: 780,
        y: -40
      }, {
        type: "EntityObsSteelBox",
        x: 840,
        y: -40
      }, {
        type: "EntityObsSteelBox",
        x: 900,
        y: -40
      }, {
        type: "EntityObsSteelBox",
        x: 960,
        y: -40
      }, {
        type: "EntityObsSteelBox",
        x: 1020,
        y: -40
      }, {
        type: "EntityObsSteelBox",
        x: 1080,
        y: -40
      }, {
        type: "EntityObsWoodBox",
        x: 840,
        y: 140
      }, {
        type: "EntityObsWoodBox",
        x: 900,
        y: 140
      }, {
        type: "EntityObsWoodBox",
        x: 960,
        y: 140
      }, {
        type: "EntityObsWoodBox",
        x: 1020,
        y: 140
      }, {
        type: "EntityObsWoodBox",
        x: 1080,
        y: 140
      }, {
        type: "EntityObsWoodBox",
        x: 1080,
        y: 80
      }, {
        type: "EntityObsWoodBox",
        x: 1080,
        y: 20
      }, {
        type: "EntityObsWoodBox",
        x: 1080,
        y: 260
      }, {
        type: "EntityObsWoodBox",
        x: 1080,
        y: 200
      }, {
        type: "EntityEnemyBig",
        x: 916,
        y: 48,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityEnemyBig",
        x: 864,
        y: 236,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityEnemyBig",
        x: 984,
        y: 240,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsWoodBox",
        x: 608,
        y: 420
      }, {
        type: "EntityObsWoodBox",
        x: 548,
        y: 420
      }, {
        type: "EntityObsWoodBox",
        x: 608,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 608,
        y: 300
      }, {
        type: "EntityEnemy",
        x: 720,
        y: 416,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 824,
        y: 416,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 920,
        y: 416,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 1024,
        y: 416,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 1136,
        y: 416,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1236,
        y: 420
      }, {
        type: "EntityObsWoodBox",
        x: 1236,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 1236,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1296,
        y: 420
      }, {
        type: "EntityEnemyBig",
        x: 876,
        y: -108,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityEnemyBig",
        x: 980,
        y: -108,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityEnemyBig",
        x: 1036,
        y: -108,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityObsWoodCircle",
        x: 760,
        y: -92
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }]
    };
    Level69Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.70").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-steel-box", "game.entities.enemy", "game.entities.obstacles.obs-exp-barrel", "game.entities.objects.enemy-big", "game.entities.objects.enemy-fly-new", "game.entities.objects.card").defines(function () {
    Level70 = {
      entities: [{
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1700,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 284,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 1,
            2: 2,
            3: 4,
            4: 5,
            5: 6,
            6: 7
          },
          piggyNum: 7
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 824,
        y: 464,
        settings: {
          pathNum: 1,
          pathId: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1380,
        y: 464,
        settings: {
          pathNum: 1,
          pathId: 2
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1548,
        y: -260
      }, {
        type: "EntityObsWoodBox",
        x: 460,
        y: 468
      }, {
        type: "EntityObsWoodBarrel",
        x: 560,
        y: 332
      }, {
        type: "EntityObsWoodBox",
        x: 576,
        y: 412
      }, {
        type: "EntityObsWoodBox",
        x: 1660,
        y: 364
      }, {
        type: "EntityObsWoodBox",
        x: 1008,
        y: -120
      }, {
        type: "EntityObsSteelBox",
        x: 1472,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 1540,
        y: -124
      }, {
        type: "EntityObsWoodBox",
        x: 1600,
        y: 328
      }, {
        type: "EntityObsWoodBox",
        x: 516,
        y: 412
      }, {
        type: "EntityObsWoodBox",
        x: 636,
        y: 412
      }, {
        type: "EntityEnemy",
        x: 1476,
        y: 248,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 512,
        y: 260
      }, {
        type: "EntityObsWoodBox",
        x: 456,
        y: 352
      }, {
        type: "EntityObsSteelBox",
        x: 1600,
        y: 268
      }, {
        type: "EntityObsSteelBox",
        x: 1660,
        y: 420
      }, {
        type: "EntityObsWoodBox",
        x: 1472,
        y: 364
      }, {
        type: "EntityEnemy",
        x: 460,
        y: 416,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1472,
        y: 304
      }, {
        type: "EntityObsSteelBox",
        x: 1480,
        y: -124
      }, {
        type: "EntityObsSteelBox",
        x: 1600,
        y: -124
      }, {
        type: "EntityObsSteelBox",
        x: 1656,
        y: -124
      }, {
        type: "EntityObsWoodBarrel",
        x: 1520,
        y: -204
      }, {
        type: "EntityObsWoodBox",
        x: 1540,
        y: 328
      }, {
        type: "EntityObsWoodBox",
        x: 1660,
        y: 244
      }, {
        type: "EntityObsWoodBox",
        x: 1660,
        y: 304
      }, {
        type: "EntityObsWoodBarrel",
        x: 1648,
        y: 164
      }, {
        type: "EntityEnemy",
        x: 632,
        y: 352,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityEnemy",
        x: 516,
        y: 476,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1540,
        y: 268
      }, {
        type: "EntityObsWoodBarrel",
        x: 1576,
        y: -204
      }, {
        type: "EntityObsWoodBox",
        x: 1068,
        y: -120
      }, {
        type: "EntityObsSteelBox",
        x: 572,
        y: 472
      }, {
        type: "EntityObsSteelBox",
        x: 636,
        y: 292
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: 352
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: 472
      }, {
        type: "EntityObsSteelBox",
        x: 512,
        y: 532
      }, {
        type: "EntityObsSteelBox",
        x: 628,
        y: 532
      }, {
        type: "EntityEnemy",
        x: 632,
        y: 476,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityEnemy",
        x: 688,
        y: 424,
        settings: {
          enemyType: 9
        }
      }, {
        type: "EntityObsSteelBox",
        x: 916,
        y: -60
      }, {
        type: "EntityObsSteelBox",
        x: 1068,
        y: -60
      }, {
        type: "EntityObsSteelBox",
        x: 1228,
        y: -60
      }, {
        type: "EntityObsWoodBox",
        x: 1068,
        y: -180
      }, {
        type: "EntityObsWoodBarrel",
        x: 992,
        y: -200
      }, {
        type: "EntityObsWoodBarrel",
        x: 1052,
        y: -260
      }, {
        type: "EntityObsWoodBarrel",
        x: 904,
        y: -140
      }, {
        type: "EntityObsWoodBarrel",
        x: 960,
        y: -80
      }, {
        type: "EntityEnemy",
        x: 1132,
        y: -52,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1168,
        y: -120
      }, {
        type: "EntityObsWoodBox",
        x: 1168,
        y: -240
      }, {
        type: "EntityObsSteelBox",
        x: 1168,
        y: -180
      }, {
        type: "EntityObsSteelBox",
        x: 1016,
        y: -304
      }, {
        type: "EntityObsSteelBox",
        x: 1168,
        y: -300
      }, {
        type: "EntityEnemy",
        x: 960,
        y: -304,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemyBig",
        x: 1232,
        y: -136,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityEnemyBig",
        x: 1548,
        y: 196,
        settings: {
          enemyType: 5
        }
      }, {
        type: "EntityEnemy",
        x: 1536,
        y: 420,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemy",
        x: 1596,
        y: 424,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemy",
        x: 1480,
        y: -184,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemy",
        x: 1560,
        y: -292,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemy",
        x: 924,
        y: -180,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityObsSteelBox",
        x: 912,
        y: 120
      }, {
        type: "EntityObsSteelBox",
        x: 1068,
        y: 120
      }, {
        type: "EntityObsSteelBox",
        x: 1232,
        y: 120
      }, {
        type: "EntityObsWoodBox",
        x: 912,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1032,
        y: 300
      }, {
        type: "EntityObsSteelBox",
        x: 972,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 1124,
        y: 180
      }, {
        type: "EntityObsWoodBox",
        x: 1232,
        y: 180
      }, {
        type: "EntityObsSteelBox",
        x: 1176,
        y: 240
      }, {
        type: "EntityObsSteelBox",
        x: 1176,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1116,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 1116,
        y: 360
      }, {
        type: "EntityEnemy",
        x: 912,
        y: 244,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityEnemy",
        x: 1028,
        y: 244,
        settings: {
          enemyType: 10
        }
      }, {
        type: "EntityObsWoodBox",
        x: 912,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 1032,
        y: 360
      }, {
        type: "EntityEnemyFlyNew",
        x: 816,
        y: -224,
        settings: {
          enemyType: 1,
          pathId: 1
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 1372,
        y: -236,
        settings: {
          enemyType: 1,
          pathId: 2
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 508,
        y: 332
      }, {
        type: "EntityObsWoodBox",
        x: 956,
        y: -244
      }, {
        type: "EntityCard",
        x: 1104,
        y: 220
      }],
      layer: [{
        name: "collision",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }, {
        name: "fg",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }]
    };
    Level70Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.71").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.obstacles.obs-steel-box", "game.entities.objects.enemy-big").defines(function () {
    Level71 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 3,
            1: 1,
            2: 2,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 0
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 960,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 872,
        y: 324
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: 324
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: 84
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: 324
      }, {
        type: "EntityObsSteelBox",
        x: 752,
        y: 324
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: 264
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: 204
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: 144
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 324
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 264
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 204
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 144
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 84
      }, {
        type: "EntityObsSteelBox",
        x: 872,
        y: 84
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: 84
      }, {
        type: "EntityObsSteelBox",
        x: 752,
        y: 84
      }, {
        type: "EntityEnemyBig",
        x: 796,
        y: 256,
        settings: {
          enemyType: 6
        }
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level71Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.72").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.enemy", "game.entities.obstacles.obs-steel-box", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel").defines(function () {
    Level72 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 3,
            1: 3,
            2: 3,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 3
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityEnemy",
        x: 520,
        y: 0,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 616,
        y: 0,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1064,
        y: 140
      }, {
        type: "EntityObsSteelBox",
        x: 1124,
        y: 140
      }, {
        type: "EntityObsSteelBox",
        x: 1184,
        y: 140
      }, {
        type: "EntityEnemyBig",
        x: 1072,
        y: 56,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemy",
        x: 1172,
        y: 72,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityEnemyBig",
        x: 784,
        y: 328,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsWoodBox",
        x: 596,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 596,
        y: 300
      }, {
        type: "EntityObsWoodBox",
        x: 536,
        y: 360
      }, {
        type: "EntityObsWoodBarrel",
        x: 640,
        y: 340
      }, {
        type: "EntityObsWoodBarrel",
        x: 520,
        y: 280
      }, {
        type: "EntityObsWoodBarrel",
        x: 464,
        y: 340
      }, {
        type: "EntityObsWoodBarrel",
        x: 1012,
        y: 340
      }, {
        type: "EntityObsWoodBox",
        x: 1088,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 1148,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 1088,
        y: 300
      }, {
        type: "EntityObsWoodBarrel",
        x: 1192,
        y: 340
      }, {
        type: "EntityObsWoodBarrel",
        x: 1140,
        y: 280
      }, {
        type: "EntityObsWoodBox",
        x: 564,
        y: 60
      }, {
        type: "EntityObsWoodBox",
        x: 504,
        y: 60
      }, {
        type: "EntityObsWoodBox",
        x: 624,
        y: 60
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 0,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level72Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.73").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.obstacles.obs-exp-barrel", "game.entities.obstacles.obs-steel-box", "game.entities.enemy").defines(function () {
    Level73 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 8,
            1: 1,
            2: 2,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 0
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 960,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 812,
        y: 116
      }, {
        type: "EntityObsSteelBox",
        x: 848,
        y: 212
      }, {
        type: "EntityEnemy",
        x: 496,
        y: 360,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 556,
        y: 360,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 624,
        y: 360,
        settings: {
          enemyType: 12
        }
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level73Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.74").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.enemy", "game.entities.obstacles.obs-exp-barrel").defines(function () {
    Level74 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 200,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 8,
            1: 8,
            2: 8,
            3: 2,
            4: 2,
            5: 0
          },
          piggyNum: 3
        }
      }, {
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1100,
        y: 112
      }, {
        type: "EntityObsWoodBox",
        x: 392,
        y: 448
      }, {
        type: "EntityObsWoodBarrel",
        x: 488,
        y: 428
      }, {
        type: "EntityObsWoodBarrel",
        x: 436,
        y: 428
      }, {
        type: "EntityObsWoodBox",
        x: 1088,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 1148,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 1028,
        y: 360
      }, {
        type: "EntityEnemy",
        x: 456,
        y: 396,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 572,
        y: 452,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 1064,
        y: 20
      }, {
        type: "EntityObsExpBarrel",
        x: 92,
        y: 80
      }, {
        type: "EntityEnemy",
        x: 1124,
        y: 304,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityEnemy",
        x: 1048,
        y: 304,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityObsWoodBox",
        x: 736,
        y: 316
      }, {
        type: "EntityObsWoodBox",
        x: 796,
        y: 316
      }, {
        type: "EntityObsWoodBox",
        x: 856,
        y: 316
      }, {
        type: "EntityEnemy",
        x: 848,
        y: 252,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 760,
        y: 252,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1308,
        y: 260
      }, {
        type: "EntityObsExpBarrel",
        x: 1272,
        y: 168
      }, {
        type: "EntityObsSteelBox",
        x: 124,
        y: 172
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level74Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.75").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.obstacles.obs-steel-box", "game.entities.enemy", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.objects.enemy-big", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-exp-barrel").defines(function () {
    Level75 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 196,
        y: 348,
        settings: {
          piggyTypes: {
            "0": 3,
            1: 3,
            2: 8,
            3: 8,
            4: 5
          },
          piggyNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1104,
        y: 124,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: 0
      }, {
        type: "EntityObsSteelBox",
        x: 752,
        y: 0
      }, {
        type: "EntityEnemy",
        x: 592,
        y: 444,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityObsWoodBox",
        x: 288,
        y: 16
      }, {
        type: "EntityObsWoodBox",
        x: 348,
        y: 16
      }, {
        type: "EntityObsWoodBox",
        x: 408,
        y: 16
      }, {
        type: "EntityObsWoodBox",
        x: 468,
        y: 16
      }, {
        type: "EntityObsWoodBox",
        x: 468,
        y: -44
      }, {
        type: "EntityObsWoodBox",
        x: 468,
        y: -104
      }, {
        type: "EntityEnemy",
        x: 304,
        y: -40,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityObsWoodBox",
        x: 228,
        y: 16
      }, {
        type: "EntityObsWoodBox",
        x: 228,
        y: -104
      }, {
        type: "EntityObsWoodBox",
        x: 228,
        y: -44
      }, {
        type: "EntityObsWoodBarrel",
        x: 380,
        y: -64
      }, {
        type: "EntityEnemy",
        x: 388,
        y: -104,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 516,
        y: 428
      }, {
        type: "EntityObsWoodBarrel",
        x: 460,
        y: 428
      }, {
        type: "EntityEnemy",
        x: 524,
        y: 392,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: 0
      }, {
        type: "EntityEnemyBig",
        x: 700,
        y: -84,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemyBig",
        x: 800,
        y: -80,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 220,
        y: 120,
        settings: {
          pathId: 1,
          enemyType: 2
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1216,
        y: 212
      }, {
        type: "EntityObsExpBarrel",
        x: 1184,
        y: 120
      }, {
        type: "EntityObsWoodBox",
        x: 972,
        y: 452
      }, {
        type: "EntityObsWoodBox",
        x: 1032,
        y: 452
      }, {
        type: "EntityEnemyBig",
        x: 984,
        y: 364,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1192,
        y: 452
      }, {
        type: "EntityObsWoodBox",
        x: 1252,
        y: 452
      }, {
        type: "EntityObsWoodBox",
        x: 1252,
        y: 392
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level75Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.76").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.enemy", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.objects.enemy-big", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-exp-barrel").defines(function () {
    Level76 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 196,
        y: 348,
        settings: {
          piggyTypes: {
            "0": 3,
            1: 3,
            2: 8,
            3: 8,
            4: 5
          },
          piggyNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1124,
        y: -32,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemy",
        x: 592,
        y: 444,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityObsWoodBox",
        x: 740,
        y: 340
      }, {
        type: "EntityObsWoodBarrel",
        x: 492,
        y: 428
      }, {
        type: "EntityObsWoodBarrel",
        x: 436,
        y: 428
      }, {
        type: "EntityEnemy",
        x: 764,
        y: 276,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemyBig",
        x: 748,
        y: 412,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 432,
        y: -36,
        settings: {
          pathId: 1,
          enemyType: 2
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1264,
        y: 52
      }, {
        type: "EntityObsExpBarrel",
        x: 1232,
        y: -40
      }, {
        type: "EntityObsWoodBox",
        x: 1192,
        y: 452
      }, {
        type: "EntityObsWoodBox",
        x: 1252,
        y: 452
      }, {
        type: "EntityObsWoodBox",
        x: 1252,
        y: 392
      }, {
        type: "EntityEnemyBig",
        x: 844,
        y: 412,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsWoodBox",
        x: 800,
        y: 340
      }, {
        type: "EntityObsWoodBox",
        x: 860,
        y: 340
      }, {
        type: "EntityEnemy",
        x: 844,
        y: 276,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 464,
        y: 368
      }, {
        type: "EntityEnemy",
        x: 368,
        y: 440,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 1104,
        y: 428,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 1248,
        y: 328,
        settings: {
          enemyType: 12
        }
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level76Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.77").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.enemy", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-exp-barrel", "game.entities.objects.enemy-big", "game.entities.objects.door", "game.entities.obstacles.obs-wood-circle", "game.entities.objects.switch", "game.entities.objects.enemy-fly-new").defines(function () {
    Level77 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 196,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 3,
            1: 0,
            2: 5,
            3: 6,
            4: 7
          },
          piggyNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 512,
        y: 156,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemy",
        x: 1184,
        y: 228,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityObsWoodBox",
        x: 452,
        y: 36
      }, {
        type: "EntityObsWoodBarrel",
        x: 492,
        y: 428
      }, {
        type: "EntityObsWoodBarrel",
        x: 436,
        y: 428
      }, {
        type: "EntityEnemy",
        x: 796,
        y: 276,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1236,
        y: -8
      }, {
        type: "EntityObsExpBarrel",
        x: 1180,
        y: -100
      }, {
        type: "EntityObsWoodBox",
        x: 800,
        y: 340
      }, {
        type: "EntityObsWoodBox",
        x: 860,
        y: 340
      }, {
        type: "EntityEnemy",
        x: 864,
        y: 276,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityObsWoodBox",
        x: 512,
        y: 36
      }, {
        type: "EntityObsWoodBox",
        x: 572,
        y: 36
      }, {
        type: "EntityEnemyBig",
        x: 524,
        y: -36,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityDoor",
        x: 820,
        y: -96,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsWoodBox",
        x: 392,
        y: 36
      }, {
        type: "EntityEnemyBig",
        x: 424,
        y: -36,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsSteelBox",
        x: 756,
        y: -8
      }, {
        type: "EntityObsSteelBox",
        x: 816,
        y: -8
      }, {
        type: "EntityObsSteelBox",
        x: 876,
        y: -8
      }, {
        type: "EntityObsSteelBox",
        x: 936,
        y: -8
      }, {
        type: "EntityObsSteelBox",
        x: 996,
        y: -8
      }, {
        type: "EntityObsSteelBox",
        x: 1056,
        y: -8
      }, {
        type: "EntityDoor",
        x: 820,
        y: -184,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 816,
        y: -244
      }, {
        type: "EntityObsSteelBox",
        x: 876,
        y: -244
      }, {
        type: "EntityObsSteelBox",
        x: 936,
        y: -244
      }, {
        type: "EntityObsSteelBox",
        x: 996,
        y: -244
      }, {
        type: "EntityObsSteelBox",
        x: 1056,
        y: -244
      }, {
        type: "EntityObsSteelBox",
        x: 1116,
        y: -244
      }, {
        type: "EntityObsSteelBox",
        x: 1116,
        y: -8
      }, {
        type: "EntityObsSteelBox",
        x: 1176,
        y: -8
      }, {
        type: "EntityObsWoodCircle",
        x: 592,
        y: 468
      }, {
        type: "EntityObsWoodBarrel",
        x: 464,
        y: 372
      }, {
        type: "EntityEnemy",
        x: 376,
        y: 452,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityEnemy",
        x: 472,
        y: 328,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityEnemy",
        x: 796,
        y: 448,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 996,
        y: 444,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityObsWoodBox",
        x: 872,
        y: 452
      }, {
        type: "EntityObsWoodBox",
        x: 932,
        y: 452
      }, {
        type: "EntityEnemy",
        x: 1272,
        y: 228,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntitySwitch",
        x: 1384,
        y: 244,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityEnemy",
        x: 896,
        y: -72,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemy",
        x: 980,
        y: -72,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1056,
        y: -68
      }, {
        type: "EntityObsWoodBox",
        x: 1116,
        y: -68
      }, {
        type: "EntityEnemy",
        x: 1080,
        y: -132,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 1388,
        y: 84,
        settings: {
          pathId: 1,
          enemyType: 2
        }
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level77Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.78").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.enemy", "game.entities.objects.enemy-big", "game.entities.objects.door", "game.entities.obstacles.obs-steel-box", "game.entities.objects.switch", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-exp-barrel").defines(function () {
    Level78 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 196,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 1,
            2: 8,
            3: 5,
            4: 7
          },
          piggyNum: 5
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 644,
        y: 140,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemy",
        x: 732,
        y: 112,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemyBig",
        x: 452,
        y: -68,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityDoor",
        x: 820,
        y: -96,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 760,
        y: 172
      }, {
        type: "EntityObsSteelBox",
        x: 820,
        y: 172
      }, {
        type: "EntityObsSteelBox",
        x: 880,
        y: 172
      }, {
        type: "EntityObsSteelBox",
        x: 940,
        y: 172
      }, {
        type: "EntityObsSteelBox",
        x: 820,
        y: -8
      }, {
        type: "EntityDoor",
        x: 820,
        y: -184,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 816,
        y: -336
      }, {
        type: "EntityObsSteelBox",
        x: 876,
        y: -336
      }, {
        type: "EntityObsSteelBox",
        x: 936,
        y: -336
      }, {
        type: "EntityObsSteelBox",
        x: 1056,
        y: -336
      }, {
        type: "EntityEnemy",
        x: 420,
        y: 444,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntitySwitch",
        x: 1324,
        y: 456,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityEnemy",
        x: 756,
        y: 348,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 300,
        y: 140,
        settings: {
          pathId: 1,
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 472,
        y: 20
      }, {
        type: "EntityObsWoodBox",
        x: 532,
        y: 20
      }, {
        type: "EntityObsWoodBox",
        x: 412,
        y: 20
      }, {
        type: "EntityEnemy",
        x: 516,
        y: 380,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityObsWoodBox",
        x: 512,
        y: 448
      }, {
        type: "EntityObsSteelBox",
        x: 820,
        y: 52
      }, {
        type: "EntityObsSteelBox",
        x: 820,
        y: 112
      }, {
        type: "EntityObsSteelBox",
        x: 700,
        y: 172
      }, {
        type: "EntityObsWoodBox",
        x: 884,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 944,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 884,
        y: 300
      }, {
        type: "EntityObsWoodBarrel",
        x: 988,
        y: 340
      }, {
        type: "EntityObsWoodBarrel",
        x: 932,
        y: 280
      }, {
        type: "EntityObsWoodBarrel",
        x: 812,
        y: 344
      }, {
        type: "EntityEnemy",
        x: 884,
        y: 236,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemy",
        x: 1220,
        y: 436,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemyBig",
        x: 1268,
        y: 184,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemyBig",
        x: 1356,
        y: 184,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 848,
        y: -40
      }, {
        type: "EntityObsSteelBox",
        x: 880,
        y: 52
      }, {
        type: "EntityObsSteelBox",
        x: 996,
        y: -336
      }, {
        type: "EntityDoor",
        x: 820,
        y: -272,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1116,
        y: -336
      }, {
        type: "EntityObsSteelBox",
        x: 1176,
        y: -336
      }, {
        type: "EntityObsSteelBox",
        x: 1236,
        y: -336
      }, {
        type: "EntityObsSteelBox",
        x: 1296,
        y: -336
      }, {
        type: "EntityObsSteelBox",
        x: 1356,
        y: -336
      }, {
        type: "EntityObsSteelBox",
        x: 1416,
        y: -336
      }, {
        type: "EntityObsSteelBox",
        x: 1476,
        y: -336
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1]]
      }]
    };
    Level78Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.79").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.enemy", "game.entities.objects.enemy-big", "game.entities.objects.door", "game.entities.obstacles.obs-steel-box", "game.entities.objects.switch", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-exp-barrel", "game.entities.objects.card").defines(function () {
    Level79 = {
      entities: [{
        type: "EntityLevelControl",
        x: 40,
        y: 40,
        settings: {
          levelCamLimit_X: 1700,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 196,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 8,
            1: 1,
            2: 6,
            3: 5,
            4: 2
          },
          piggyNum: 5
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1200,
        y: 180,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 816,
        y: 176,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 964,
        y: 4,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 452,
        y: 124,
        settings: {
          pathId: 2,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 744,
        y: 132,
        settings: {
          pathId: 2,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 740,
        y: 248,
        settings: {
          pathId: 2,
          pathNum: 3
        }
      }, {
        type: "EntityEnemy",
        x: 1284,
        y: 332,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 432,
        y: -44,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemyBig",
        x: 660,
        y: 316,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityDoor",
        x: 1052,
        y: -144,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 632,
        y: 396
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: 396
      }, {
        type: "EntityObsSteelBox",
        x: 752,
        y: 396
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: 396
      }, {
        type: "EntityObsSteelBox",
        x: 1556,
        y: 156
      }, {
        type: "EntityDoor",
        x: 1052,
        y: -232,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1052,
        y: -52
      }, {
        type: "EntityObsSteelBox",
        x: 1112,
        y: -52
      }, {
        type: "EntityObsSteelBox",
        x: 1172,
        y: -52
      }, {
        type: "EntityObsSteelBox",
        x: 1232,
        y: -52
      }, {
        type: "EntityObsSteelBox",
        x: 1352,
        y: -52
      }, {
        type: "EntityObsSteelBox",
        x: 1292,
        y: -52
      }, {
        type: "EntityEnemy",
        x: 528,
        y: -44,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 1212,
        y: 332,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntitySwitch",
        x: 1128,
        y: 348,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 812,
        y: -124,
        settings: {
          pathId: 1,
          enemyType: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 472,
        y: 20
      }, {
        type: "EntityObsWoodBox",
        x: 532,
        y: 20
      }, {
        type: "EntityObsWoodBox",
        x: 412,
        y: 20
      }, {
        type: "EntityEnemyBig",
        x: 792,
        y: 316,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 1524,
        y: 64
      }, {
        type: "EntityObsSteelBox",
        x: 1412,
        y: -52
      }, {
        type: "EntityObsSteelBox",
        x: 1472,
        y: -52
      }, {
        type: "EntityObsSteelBox",
        x: 1532,
        y: -52
      }, {
        type: "EntityObsSteelBox",
        x: 1052,
        y: -292
      }, {
        type: "EntityObsSteelBox",
        x: 1112,
        y: -292
      }, {
        type: "EntityObsSteelBox",
        x: 1172,
        y: -292
      }, {
        type: "EntityObsSteelBox",
        x: 1232,
        y: -292
      }, {
        type: "EntityObsSteelBox",
        x: 1292,
        y: -292
      }, {
        type: "EntityObsSteelBox",
        x: 1412,
        y: -292
      }, {
        type: "EntityObsSteelBox",
        x: 1352,
        y: -292
      }, {
        type: "EntityObsSteelBox",
        x: 1472,
        y: -292
      }, {
        type: "EntityObsSteelBox",
        x: 1532,
        y: -292
      }, {
        type: "EntityEnemyBig",
        x: 1140,
        y: -136,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemyBig",
        x: 1464,
        y: -136,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemy",
        x: 1240,
        y: -116,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 1360,
        y: -172,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1320,
        y: -112
      }, {
        type: "EntityObsWoodBox",
        x: 1380,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 1112,
        y: 404
      }, {
        type: "EntityObsSteelBox",
        x: 1172,
        y: 404
      }, {
        type: "EntityObsSteelBox",
        x: 1232,
        y: 404
      }, {
        type: "EntityObsSteelBox",
        x: 1292,
        y: 404
      }, {
        type: "EntityEnemyFlyNew",
        x: 444,
        y: 228,
        settings: {
          pathId: 2,
          enemyType: 2
        }
      }, {
        type: "EntityObsSteelBox",
        x: 0,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 60,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 120,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 180,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 240,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 300,
        y: 420
      }, {
        type: "EntityCard",
        x: 884,
        y: -176
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level79Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.80").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.enemy", "game.entities.objects.enemy-big", "game.entities.objects.door", "game.entities.obstacles.obs-steel-box", "game.entities.objects.switch", "game.entities.obstacles.obs-wood-box", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-exp-barrel").defines(function () {
    Level80 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1700,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 196,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 3,
            1: 0,
            2: 5,
            3: 1,
            4: 8,
            5: 2
          },
          piggyNum: 6
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 740,
        y: 316,
        settings: {
          pathId: 2,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 44,
        y: 56,
        settings: {
          pathId: 3,
          pathNum: 1
        }
      }, {
        type: "EntityEnemy",
        x: 1204,
        y: 188,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 768,
        y: 116,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemyBig",
        x: 664,
        y: 96,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityDoor",
        x: 588,
        y: 104,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 588,
        y: 192
      }, {
        type: "EntityObsSteelBox",
        x: 648,
        y: 192
      }, {
        type: "EntityObsSteelBox",
        x: 708,
        y: 192
      }, {
        type: "EntityObsSteelBox",
        x: 768,
        y: 192
      }, {
        type: "EntityObsSteelBox",
        x: 948,
        y: -224
      }, {
        type: "EntityDoor",
        x: 588,
        y: 16,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 588,
        y: -44
      }, {
        type: "EntityObsSteelBox",
        x: 888,
        y: -224
      }, {
        type: "EntityEnemy",
        x: 1384,
        y: 188,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntitySwitch",
        x: 892,
        y: 316,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsWoodBox",
        x: 888,
        y: 192
      }, {
        type: "EntityObsWoodBox",
        x: 948,
        y: 192
      }, {
        type: "EntityEnemy",
        x: 908,
        y: -100,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityObsSteelBox",
        x: 116,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 176,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 236,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 56,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: -4,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 648,
        y: -44
      }, {
        type: "EntityObsSteelBox",
        x: 708,
        y: -44
      }, {
        type: "EntityObsSteelBox",
        x: 768,
        y: -44
      }, {
        type: "EntityObsSteelBox",
        x: 828,
        y: -44
      }, {
        type: "EntityObsSteelBox",
        x: 828,
        y: 192
      }, {
        type: "EntityObsSteelBox",
        x: 828,
        y: 252
      }, {
        type: "EntityObsSteelBox",
        x: 828,
        y: 312
      }, {
        type: "EntityObsSteelBox",
        x: 828,
        y: 372
      }, {
        type: "EntityObsSteelBox",
        x: 888,
        y: 372
      }, {
        type: "EntityObsSteelBox",
        x: 1008,
        y: 372
      }, {
        type: "EntityObsSteelBox",
        x: 948,
        y: 372
      }, {
        type: "EntityObsSteelBox",
        x: 1068,
        y: 372
      }, {
        type: "EntityObsSteelBox",
        x: 828,
        y: -104
      }, {
        type: "EntityObsSteelBox",
        x: 828,
        y: -164
      }, {
        type: "EntityObsSteelBox",
        x: 828,
        y: -224
      }, {
        type: "EntityObsSteelBox",
        x: 1008,
        y: -224
      }, {
        type: "EntityObsSteelBox",
        x: 1068,
        y: -224
      }, {
        type: "EntityObsWoodBox",
        x: 1008,
        y: 192
      }, {
        type: "EntityObsWoodBox",
        x: 1068,
        y: 192
      }, {
        type: "EntityObsWoodBox",
        x: 888,
        y: -44
      }, {
        type: "EntityObsWoodBox",
        x: 948,
        y: -44
      }, {
        type: "EntityObsWoodBox",
        x: 1008,
        y: -44
      }, {
        type: "EntityObsWoodBox",
        x: 1068,
        y: -44
      }, {
        type: "EntityObsSteelBox",
        x: 1128,
        y: -44
      }, {
        type: "EntityObsSteelBox",
        x: 1128,
        y: 372
      }, {
        type: "EntityObsSteelBox",
        x: 1128,
        y: 192
      }, {
        type: "EntityObsSteelBox",
        x: 1128,
        y: 252
      }, {
        type: "EntityObsSteelBox",
        x: 1128,
        y: 312
      }, {
        type: "EntityObsSteelBox",
        x: 1128,
        y: -104
      }, {
        type: "EntityObsSteelBox",
        x: 1128,
        y: -164
      }, {
        type: "EntityObsSteelBox",
        x: 1128,
        y: -224
      }, {
        type: "EntityEnemyFlyNew",
        x: 336,
        y: 316,
        settings: {
          pathId: 2,
          enemyType: 2
        }
      }, {
        type: "EntityDoor",
        x: 1132,
        y: 104,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1128,
        y: 432
      }, {
        type: "EntityObsSteelBox",
        x: 1128,
        y: 492
      }, {
        type: "EntityObsSteelBox",
        x: 1188,
        y: 492
      }, {
        type: "EntityObsSteelBox",
        x: 1248,
        y: 492
      }, {
        type: "EntityObsSteelBox",
        x: 1308,
        y: 492
      }, {
        type: "EntityObsSteelBox",
        x: 1368,
        y: 492
      }, {
        type: "EntityObsSteelBox",
        x: 1428,
        y: 492
      }, {
        type: "EntityObsSteelBox",
        x: 1128,
        y: -344
      }, {
        type: "EntityObsSteelBox",
        x: 1128,
        y: -284
      }, {
        type: "EntityObsSteelBox",
        x: 1188,
        y: -344
      }, {
        type: "EntityObsSteelBox",
        x: 1248,
        y: -344
      }, {
        type: "EntityObsSteelBox",
        x: 1308,
        y: -344
      }, {
        type: "EntityObsSteelBox",
        x: 1368,
        y: -344
      }, {
        type: "EntityObsSteelBox",
        x: 1428,
        y: -344
      }, {
        type: "EntityObsSteelBox",
        x: 1488,
        y: -344
      }, {
        type: "EntityObsSteelBox",
        x: 1188,
        y: 252
      }, {
        type: "EntityObsSteelBox",
        x: 1248,
        y: 252
      }, {
        type: "EntityObsSteelBox",
        x: 1308,
        y: 252
      }, {
        type: "EntityObsSteelBox",
        x: 1368,
        y: 252
      }, {
        type: "EntityObsSteelBox",
        x: 1428,
        y: 252
      }, {
        type: "EntityObsSteelBox",
        x: 1548,
        y: 312
      }, {
        type: "EntityObsSteelBox",
        x: 1548,
        y: 372
      }, {
        type: "EntityObsSteelBox",
        x: 1548,
        y: 432
      }, {
        type: "EntityObsSteelBox",
        x: 1488,
        y: 252
      }, {
        type: "EntityObsSteelBox",
        x: 1548,
        y: 252
      }, {
        type: "EntityObsSteelBox",
        x: 1488,
        y: 492
      }, {
        type: "EntityObsSteelBox",
        x: 1548,
        y: 492
      }, {
        type: "EntityObsSteelBox",
        x: 1548,
        y: -344
      }, {
        type: "EntityObsSteelBox",
        x: 1548,
        y: -284
      }, {
        type: "EntityObsSteelBox",
        x: 1548,
        y: -224
      }, {
        type: "EntityObsSteelBox",
        x: 1548,
        y: -164
      }, {
        type: "EntityObsSteelBox",
        x: 1548,
        y: -104
      }, {
        type: "EntityObsSteelBox",
        x: 1488,
        y: -104
      }, {
        type: "EntityObsSteelBox",
        x: 1428,
        y: -104
      }, {
        type: "EntityObsSteelBox",
        x: 1368,
        y: -104
      }, {
        type: "EntityObsSteelBox",
        x: 1308,
        y: -104
      }, {
        type: "EntityObsSteelBox",
        x: 1248,
        y: -104
      }, {
        type: "EntityObsSteelBox",
        x: 1188,
        y: -104
      }, {
        type: "EntityObsSteelBox",
        x: 1608,
        y: 372
      }, {
        type: "EntityObsSteelBox",
        x: 1668,
        y: 372
      }, {
        type: "EntityObsSteelBox",
        x: 1728,
        y: 372
      }, {
        type: "EntityObsSteelBox",
        x: 1788,
        y: 372
      }, {
        type: "EntityObsSteelBox",
        x: 1608,
        y: -224
      }, {
        type: "EntityObsSteelBox",
        x: 1668,
        y: -224
      }, {
        type: "EntityObsSteelBox",
        x: 1728,
        y: -224
      }, {
        type: "EntityObsSteelBox",
        x: 1788,
        y: -224
      }, {
        type: "EntityEnemyBig",
        x: 1044,
        y: 284,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1308,
        y: -164
      }, {
        type: "EntityObsExpBarrel",
        x: 1280,
        y: -252
      }, {
        type: "EntityObsExpBarrel",
        x: 1336,
        y: -196
      }, {
        type: "EntityEnemyFlyNew",
        x: 520,
        y: 56,
        settings: {
          pathId: 3,
          enemyType: 2
        }
      }, {
        type: "EntityDoor",
        x: 1132,
        y: 16,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityEnemyBig",
        x: 1276,
        y: 160,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemyBig",
        x: 1220,
        y: 408,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemyBig",
        x: 1328,
        y: 412,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemy",
        x: 1012,
        y: -100,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1848,
        y: -224
      }, {
        type: "EntityObsSteelBox",
        x: 1908,
        y: -224
      }, {
        type: "EntityObsSteelBox",
        x: 1848,
        y: 372
      }, {
        type: "EntityObsSteelBox",
        x: 1908,
        y: 372
      }, {
        type: "EntityEnemyBig",
        x: 1432,
        y: -192,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemyBig",
        x: 1228,
        y: -196,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1428,
        y: 432
      }, {
        type: "EntityObsWoodBox",
        x: 1488,
        y: 432
      }, {
        type: "EntityObsWoodBox",
        x: 1488,
        y: 372
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level80Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.81").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-steel-box", "game.entities.objects.door", "game.entities.objects.switch", "game.entities.enemy", "game.entities.obstacles.obs-wood-circle", "game.entities.obstacles.obs-wood-barrel", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-exp-barrel").defines(function () {
    Level81 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 196,
        y: 348,
        settings: {
          piggyTypes: {
            "0": 4,
            1: 3,
            2: 6,
            3: 3,
            4: 8,
            5: 8
          },
          piggyNum: 6
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 536,
        y: 72,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyBig",
        x: 1044,
        y: 424,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 92
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: -28
      }, {
        type: "EntityDoor",
        x: 928,
        y: 240,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityObsSteelBox",
        x: 988,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1108,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1048,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1168,
        y: -148
      }, {
        type: "EntitySwitch",
        x: 1240,
        y: -204,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: -88
      }, {
        type: "EntityEnemyBig",
        x: 1132,
        y: 428,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1228,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1288,
        y: -148
      }, {
        type: "EntityDoor",
        x: 928,
        y: 152,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityEnemy",
        x: 708,
        y: 264,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityEnemy",
        x: 844,
        y: 352,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityDoor",
        x: 928,
        y: 328,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityDoor",
        x: 628,
        y: 240,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 628,
        y: 152,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 628,
        y: 4
      }, {
        type: "EntityObsSteelBox",
        x: 688,
        y: 4
      }, {
        type: "EntityObsSteelBox",
        x: 808,
        y: 4
      }, {
        type: "EntityObsSteelBox",
        x: 748,
        y: 4
      }, {
        type: "EntityObsSteelBox",
        x: 868,
        y: 4
      }, {
        type: "EntityObsWoodCircle",
        x: 508,
        y: 284
      }, {
        type: "EntityEnemy",
        x: 656,
        y: -52,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 752,
        y: -76
      }, {
        type: "EntityObsWoodBarrel",
        x: 804,
        y: -76
      }, {
        type: "EntityEnemy",
        x: 928,
        y: -216,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntitySwitch",
        x: 84,
        y: -132,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 56,
        y: 68,
        settings: {
          pathId: 1,
          enemyType: 2
        }
      }, {
        type: "EntityDoor",
        x: 628,
        y: 64,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 120,
        y: -76
      }, {
        type: "EntityObsSteelBox",
        x: 180,
        y: -76
      }, {
        type: "EntityObsSteelBox",
        x: 60,
        y: -76
      }, {
        type: "EntityObsSteelBox",
        x: 0,
        y: -76
      }, {
        type: "EntityObsSteelBox",
        x: -60,
        y: -76
      }, {
        type: "EntityObsSteelBox",
        x: 240,
        y: -76
      }, {
        type: "EntityObsWoodBox",
        x: 180,
        y: -136
      }, {
        type: "EntityObsWoodBox",
        x: 240,
        y: -136
      }, {
        type: "EntityObsWoodBox",
        x: 240,
        y: -196
      }, {
        type: "EntityEnemy",
        x: 176,
        y: -192,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityObsWoodBox",
        x: 804,
        y: 136
      }, {
        type: "EntityEnemy",
        x: 1052,
        y: -268,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1148,
        y: 92
      }, {
        type: "EntityObsWoodBox",
        x: 1208,
        y: 92
      }, {
        type: "EntityObsWoodBox",
        x: 1208,
        y: 32
      }, {
        type: "EntityEnemy",
        x: 1076,
        y: 88,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityEnemy",
        x: 1144,
        y: 32,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityEnemy",
        x: 1300,
        y: 80,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityEnemy",
        x: 1388,
        y: 84,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1048,
        y: -208
      }, {
        type: "EntityObsWoodBox",
        x: 1108,
        y: -208
      }, {
        type: "EntityObsWoodBox",
        x: 1108,
        y: -268
      }, {
        type: "EntityEnemy",
        x: 788,
        y: -112,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1404,
        y: 356
      }, {
        type: "EntityObsWoodBox",
        x: 1464,
        y: 356
      }, {
        type: "EntityObsExpBarrel",
        x: 1364,
        y: 264
      }, {
        type: "EntityObsExpBarrel",
        x: 772,
        y: 44
      }, {
        type: "EntityObsExpBarrel",
        x: 704,
        y: -360
      }, {
        type: "EntityObsWoodBox",
        x: 736,
        y: -268
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level81Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.82").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.obstacles.obs-steel-box", "game.entities.objects.door", "game.entities.objects.switch", "game.entities.enemy", "game.entities.obstacles.obs-wood-box", "game.entities.objects.enemy-big", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-wood-circle").defines(function () {
    Level82 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 196,
        y: 348,
        settings: {
          piggyTypes: {
            "0": 3,
            1: 1,
            2: 2,
            3: 6,
            4: 0,
            5: 7
          },
          piggyNum: 6
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1048,
        y: -64,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1048,
        y: 344,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1048,
        y: -64,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: -28
      }, {
        type: "EntityDoor",
        x: 928,
        y: 240,
        settings: {
          doorId: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 988,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1108,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1048,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1168,
        y: -148
      }, {
        type: "EntitySwitch",
        x: 544,
        y: 396,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: -88
      }, {
        type: "EntityObsSteelBox",
        x: 1228,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1288,
        y: -148
      }, {
        type: "EntityDoor",
        x: 928,
        y: 152,
        settings: {
          doorId: 1
        }
      }, {
        type: "EntityEnemy",
        x: 852,
        y: 388,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityDoor",
        x: 628,
        y: 244,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 628,
        y: 156,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsWoodBox",
        x: 688,
        y: 392
      }, {
        type: "EntityObsWoodBox",
        x: 748,
        y: 392
      }, {
        type: "EntityEnemy",
        x: 764,
        y: 108,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityObsWoodBox",
        x: 744,
        y: 152
      }, {
        type: "EntityEnemy",
        x: 1332,
        y: 156,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityObsWoodBox",
        x: 700,
        y: -172
      }, {
        type: "EntityObsWoodBox",
        x: 760,
        y: -172
      }, {
        type: "EntityObsWoodBox",
        x: 732,
        y: -232
      }, {
        type: "EntityObsWoodBox",
        x: 1388,
        y: 216
      }, {
        type: "EntityObsWoodBox",
        x: 1448,
        y: 216
      }, {
        type: "EntityDoor",
        x: 1200,
        y: 244,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityDoor",
        x: 1200,
        y: 332,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityEnemy",
        x: 1276,
        y: 348,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1328,
        y: 216
      }, {
        type: "EntityEnemyBig",
        x: 1348,
        y: 332,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1348,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1408,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 1468,
        y: -148
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 92
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 388
      }, {
        type: "EntityObsSteelBox",
        x: 928,
        y: 328
      }, {
        type: "EntityObsSteelBox",
        x: 628,
        y: 332
      }, {
        type: "EntityObsSteelBox",
        x: 628,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 628,
        y: 8
      }, {
        type: "EntityObsSteelBox",
        x: 628,
        y: -52
      }, {
        type: "EntityObsSteelBox",
        x: 628,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 688,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 808,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 748,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 868,
        y: -112
      }, {
        type: "EntityDoor",
        x: 628,
        y: 68,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsWoodBox",
        x: 804,
        y: 152
      }, {
        type: "EntityEnemy",
        x: 716,
        y: 340,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 1456,
        y: -64,
        settings: {
          pathId: 1,
          enemyType: 2
        }
      }, {
        type: "EntityEnemy",
        x: 452,
        y: 392,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityObsWoodBox",
        x: 480,
        y: 216
      }, {
        type: "EntityObsWoodBox",
        x: 540,
        y: 216
      }, {
        type: "EntityEnemy",
        x: 508,
        y: 156,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1164,
        y: -228
      }, {
        type: "EntityObsWoodBarrel",
        x: 1136,
        y: -284
      }, {
        type: "EntityObsWoodBarrel",
        x: 1112,
        y: -228
      }, {
        type: "EntitySwitch",
        x: 840,
        y: -24,
        settings: {
          doorId: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 868,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 808,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 748,
        y: 32
      }, {
        type: "EntityEnemy",
        x: 760,
        y: -28,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemy",
        x: 832,
        y: -172,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemy",
        x: 732,
        y: -292,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntitySwitch",
        x: 1120,
        y: 364,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityObsWoodCircle",
        x: 1040,
        y: -204
      }, {
        type: "EntityEnemy",
        x: 1248,
        y: -212,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemy",
        x: 1332,
        y: -212,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemy",
        x: 1040,
        y: 352,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemy",
        x: 1400,
        y: 156,
        settings: {
          enemyType: 14
        }
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 0,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level82Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.83").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.objects.enemy-fly-path", "game.entities.obstacles.obs-wood-box", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-exp-barrel", "game.entities.obstacles.obs-steel-box", "game.entities.enemy", "game.entities.objects.enemy-fly-new").defines(function () {
    Level83 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 280,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 8,
            1: 8,
            2: 8,
            3: 3,
            4: 3
          },
          piggyNum: 5
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1084,
        y: 316,
        settings: {
          pathId: 2,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1248,
        y: -72,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 756,
        y: -156
      }, {
        type: "EntityObsWoodBox",
        x: 816,
        y: -156
      }, {
        type: "EntityEnemyBig",
        x: 852,
        y: -28,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 468,
        y: -72
      }, {
        type: "EntityObsWoodBox",
        x: 696,
        y: -156
      }, {
        type: "EntityObsWoodBox",
        x: 636,
        y: -156
      }, {
        type: "EntityObsSteelBox",
        x: 912,
        y: 472
      }, {
        type: "EntityObsSteelBox",
        x: 860,
        y: 40
      }, {
        type: "EntityObsSteelBox",
        x: 920,
        y: 40
      }, {
        type: "EntityObsSteelBox",
        x: 980,
        y: 40
      }, {
        type: "EntityEnemyBig",
        x: 944,
        y: -28,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsSteelBox",
        x: 972,
        y: 472
      }, {
        type: "EntityEnemyBig",
        x: 468,
        y: 356,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemy",
        x: 916,
        y: 404,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityObsWoodBox",
        x: 504,
        y: 20
      }, {
        type: "EntityObsWoodBox",
        x: 1176,
        y: 240
      }, {
        type: "EntityObsExpBarrel",
        x: 1132,
        y: -276
      }, {
        type: "EntityEnemy",
        x: 668,
        y: -212,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityEnemy",
        x: 772,
        y: -208,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 1084,
        y: -72,
        settings: {
          enemyType: 2,
          pathId: 2
        }
      }, {
        type: "EntityEnemy",
        x: 664,
        y: 332,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityObsWoodBox",
        x: 744,
        y: 332
      }, {
        type: "EntityObsWoodBox",
        x: 804,
        y: 332
      }, {
        type: "EntityObsWoodBox",
        x: 1332,
        y: 240
      }, {
        type: "EntityObsExpBarrel",
        x: 1300,
        y: 148
      }, {
        type: "EntityObsSteelBox",
        x: 1032,
        y: 472
      }, {
        type: "EntityEnemyBig",
        x: 1004,
        y: 384,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 1248,
        y: 316,
        settings: {
          enemyType: 2,
          pathId: 1
        }
      }, {
        type: "EntityEnemy",
        x: 780,
        y: 276,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1168,
        y: -184
      }, {
        type: "EntityObsWoodBox",
        x: 1328,
        y: -180
      }, {
        type: "EntityObsExpBarrel",
        x: 1140,
        y: 148
      }, {
        type: "EntityObsExpBarrel",
        x: 1292,
        y: -272
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 0,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]]
      }]
    };
    Level83Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.84").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.objects.enemy-fly-path", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.enemy", "game.entities.objects.enemy-big", "game.entities.objects.enemy-fly-new", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-wood-circle", "game.entities.objects.card").defines(function () {
    Level84 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 252,
        y: 296,
        settings: {
          piggyTypes: {
            "0": 5,
            1: 6,
            2: 4,
            3: 1,
            4: 1,
            5: 8,
            6: 2
          },
          piggyNum: 6
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1500,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 520,
        y: 4,
        settings: {
          pathId: 2,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1412,
        y: -260,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 528,
        y: -292,
        settings: {
          pathId: 2,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 520,
        y: 4,
        settings: {
          pathId: 2,
          pathNum: 3
        }
      }, {
        type: "EntityObsWoodBox",
        x: 752,
        y: 424
      }, {
        type: "EntityObsWoodBox",
        x: 696,
        y: 424
      }, {
        type: "EntityObsWoodBarrel",
        x: 1012,
        y: 160
      }, {
        type: "EntityEnemy",
        x: 700,
        y: 368,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemyBig",
        x: 1272,
        y: 316,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 56,
        y: -20,
        settings: {
          enemyType: 2,
          pathId: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1264,
        y: 392
      }, {
        type: "EntityObsWoodBox",
        x: 1324,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 836,
        y: -40
      }, {
        type: "EntityObsSteelBox",
        x: 776,
        y: -40
      }, {
        type: "EntityObsSteelBox",
        x: 656,
        y: -40
      }, {
        type: "EntityObsSteelBox",
        x: 716,
        y: -40
      }, {
        type: "EntityObsSteelBox",
        x: 596,
        y: -40
      }, {
        type: "EntityEnemy",
        x: 620,
        y: -156,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemy",
        x: 712,
        y: -100,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemy",
        x: 804,
        y: -148,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityObsWoodCircle",
        x: 636,
        y: 96
      }, {
        type: "EntityObsWoodBox",
        x: 176,
        y: -164
      }, {
        type: "EntityObsWoodBox",
        x: 296,
        y: -164
      }, {
        type: "EntityObsWoodBox",
        x: 236,
        y: -164
      }, {
        type: "EntityObsWoodBox",
        x: 356,
        y: -164
      }, {
        type: "EntityEnemy",
        x: 204,
        y: -224,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemy",
        x: 316,
        y: -276,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 276,
        y: -244
      }, {
        type: "EntityObsWoodBarrel",
        x: 328,
        y: -244
      }, {
        type: "EntityObsWoodBarrel",
        x: 1372,
        y: 312
      }, {
        type: "EntityObsWoodBox",
        x: 1384,
        y: 392
      }, {
        type: "EntityObsWoodBox",
        x: 1444,
        y: 392
      }, {
        type: "EntityObsWoodBarrel",
        x: 1424,
        y: 312
      }, {
        type: "EntityObsWoodBarrel",
        x: 1396,
        y: 252
      }, {
        type: "EntityEnemy",
        x: 824,
        y: 408,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemyBig",
        x: 1096,
        y: 360,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemy",
        x: 996,
        y: 320,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemy",
        x: 764,
        y: 88,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemy",
        x: 860,
        y: 32,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemy",
        x: 976,
        y: 84,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityObsWoodBox",
        x: 836,
        y: 92
      }, {
        type: "EntityObsWoodBox",
        x: 892,
        y: 92
      }, {
        type: "EntityObsWoodBarrel",
        x: 584,
        y: -120
      }, {
        type: "EntityObsWoodBarrel",
        x: 824,
        y: -120
      }, {
        type: "EntityObsWoodBarrel",
        x: 772,
        y: -120
      }, {
        type: "EntityObsWoodBarrel",
        x: 636,
        y: -120
      }, {
        type: "EntityEnemyFlyNew",
        x: 616,
        y: -268,
        settings: {
          enemyType: 2,
          pathId: 1
        }
      }, {
        type: "EntityCard",
        x: 1040,
        y: 272
      }, {
        type: "EntityCard",
        x: 496,
        y: -188
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level84Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.85").requires("impact.image", "game.entities.objects.enemy-fly-path", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.objects.door", "game.entities.enemy", "game.entities.objects.enemy-fly-new", "game.entities.objects.switch", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-exp-barrel").defines(function () {
    Level85 = {
      entities: [{
        type: "EntityEnemyFlyPath",
        x: 96,
        y: -284,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntitySlingMaker",
        x: 216,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 8,
            1: 8,
            2: 4,
            3: 7,
            4: 1,
            5: 1
          },
          piggyNum: 6
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1700,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 504,
        y: 392,
        settings: {
          pathId: 2,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1140,
        y: -164,
        settings: {
          pathId: 3,
          pathNum: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1012,
        y: 392
      }, {
        type: "EntityObsWoodBox",
        x: 1012,
        y: 332
      }, {
        type: "EntityObsWoodBarrel",
        x: 1220,
        y: 312
      }, {
        type: "EntityObsSteelBox",
        x: 1072,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 1132,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 1192,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 1252,
        y: 392
      }, {
        type: "EntityObsWoodBox",
        x: 1012,
        y: 272
      }, {
        type: "EntityObsWoodBox",
        x: 1012,
        y: 212
      }, {
        type: "EntityObsSteelBox",
        x: 652,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 712,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 772,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 832,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 892,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 952,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 1012,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 772,
        y: 92
      }, {
        type: "EntityObsWoodBarrel",
        x: 1464,
        y: 312
      }, {
        type: "EntityObsWoodBarrel",
        x: 1436,
        y: 252
      }, {
        type: "EntityObsSteelBox",
        x: 772,
        y: -144
      }, {
        type: "EntityDoor",
        x: 772,
        y: 4,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityDoor",
        x: 772,
        y: -84,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityObsSteelBox",
        x: 832,
        y: -144
      }, {
        type: "EntityObsSteelBox",
        x: 892,
        y: -144
      }, {
        type: "EntityObsSteelBox",
        x: 952,
        y: -144
      }, {
        type: "EntityObsSteelBox",
        x: 1012,
        y: -144
      }, {
        type: "EntityObsWoodBox",
        x: 276,
        y: -156
      }, {
        type: "EntityObsWoodBox",
        x: 456,
        y: -156
      }, {
        type: "EntityObsWoodBox",
        x: 336,
        y: -156
      }, {
        type: "EntityObsWoodBox",
        x: 396,
        y: -156
      }, {
        type: "EntityObsWoodBarrel",
        x: 820,
        y: 72
      }, {
        type: "EntityObsSteelBox",
        x: 1372,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 1312,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 1432,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 1492,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 1612,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 1552,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 1552,
        y: 332
      }, {
        type: "EntityObsSteelBox",
        x: 1552,
        y: 272
      }, {
        type: "EntityObsSteelBox",
        x: 1552,
        y: 212
      }, {
        type: "EntityObsSteelBox",
        x: 1552,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 1492,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 1432,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 1372,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 1312,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 1612,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 1552,
        y: 92
      }, {
        type: "EntityObsSteelBox",
        x: 1552,
        y: 32
      }, {
        type: "EntityObsSteelBox",
        x: 1552,
        y: -28
      }, {
        type: "EntityObsSteelBox",
        x: 1552,
        y: -88
      }, {
        type: "EntityObsSteelBox",
        x: 1612,
        y: -88
      }, {
        type: "EntityObsSteelBox",
        x: 1492,
        y: -88
      }, {
        type: "EntityObsSteelBox",
        x: 1432,
        y: -88
      }, {
        type: "EntityObsSteelBox",
        x: 1372,
        y: -88
      }, {
        type: "EntityObsSteelBox",
        x: 1312,
        y: -88
      }, {
        type: "EntityObsWoodBox",
        x: 1372,
        y: 92
      }, {
        type: "EntityObsWoodBox",
        x: 1312,
        y: 92
      }, {
        type: "EntityObsWoodBox",
        x: 1372,
        y: 36
      }, {
        type: "EntityEnemy",
        x: 1448,
        y: 96,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityEnemy",
        x: 1312,
        y: 36,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 500,
        y: -76,
        settings: {
          enemyType: 2,
          pathId: 2
        }
      }, {
        type: "EntityEnemy",
        x: 908,
        y: 92,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 296,
        y: -216,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemy",
        x: 408,
        y: -216,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntitySwitch",
        x: 1320,
        y: -144,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityEnemyBig",
        x: 980,
        y: -220,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemyBig",
        x: 780,
        y: -208,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 856,
        y: -236
      }, {
        type: "EntityObsSteelBox",
        x: 592,
        y: 152
      }, {
        type: "EntityEnemy",
        x: 612,
        y: 92,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 1140,
        y: 228,
        settings: {
          enemyType: 2,
          pathId: 3
        }
      }, {
        type: "EntityEnemy",
        x: 1080,
        y: 324,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1412,
        y: 312
      }, {
        type: "EntityEnemy",
        x: 1244,
        y: 272,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 680,
        y: 4
      }, {
        type: "EntityObsWoodBox",
        x: 712,
        y: 92
      }, {
        type: "EntityEnemy",
        x: 1376,
        y: -20,
        settings: {
          enemyType: 11
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 1636,
        y: -324,
        settings: {
          enemyType: 2,
          pathId: 1
        }
      }, {
        type: "EntityEnemy",
        x: 988,
        y: 92,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1164,
        y: 312
      }, {
        type: "EntityObsWoodBarrel",
        x: 1112,
        y: 312
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level85Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.86").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.objects.enemy-fly-path", "game.entities.obstacles.obs-steel-box", "game.entities.obstacles.obs-wood-box", "game.entities.enemy", "game.entities.objects.enemy-big", "game.entities.objects.door", "game.entities.obstacles.obs-exp-barrel", "game.entities.objects.switch", "game.entities.obstacles.obs-wood-barrel", "game.entities.objects.enemy-fly-new").defines(function () {
    Level86 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 296,
        y: 300,
        settings: {
          piggyTypes: {
            "0": 1,
            1: 1,
            2: 4,
            3: 7,
            4: 0,
            5: 8,
            6: 3
          },
          piggyNum: 7
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1700,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1368,
        y: 424,
        settings: {
          pathId: 3,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1536,
        y: 24,
        settings: {
          pathId: 0,
          pathNum: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 0,
        y: 368
      }, {
        type: "EntityObsWoodBox",
        x: 700,
        y: 244
      }, {
        type: "EntityEnemy",
        x: 1080,
        y: 8,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityObsSteelBox",
        x: 60,
        y: 368
      }, {
        type: "EntityObsSteelBox",
        x: 120,
        y: 368
      }, {
        type: "EntityObsSteelBox",
        x: 180,
        y: 368
      }, {
        type: "EntityObsSteelBox",
        x: 240,
        y: 368
      }, {
        type: "EntityObsSteelBox",
        x: 1E3,
        y: 304
      }, {
        type: "EntityObsSteelBox",
        x: 300,
        y: 368
      }, {
        type: "EntityObsSteelBox",
        x: 1060,
        y: 304
      }, {
        type: "EntityObsSteelBox",
        x: 1120,
        y: 304
      }, {
        type: "EntityObsSteelBox",
        x: 1180,
        y: 304
      }, {
        type: "EntityObsWoodBox",
        x: 700,
        y: 184
      }, {
        type: "EntityObsWoodBox",
        x: 700,
        y: 124
      }, {
        type: "EntityObsSteelBox",
        x: 1E3,
        y: 64
      }, {
        type: "EntityObsSteelBox",
        x: 1060,
        y: 64
      }, {
        type: "EntityObsSteelBox",
        x: 1120,
        y: 64
      }, {
        type: "EntityObsSteelBox",
        x: 1180,
        y: 64
      }, {
        type: "EntityObsSteelBox",
        x: 1240,
        y: 64
      }, {
        type: "EntityObsSteelBox",
        x: 1300,
        y: 64
      }, {
        type: "EntityObsSteelBox",
        x: 1240,
        y: 452
      }, {
        type: "EntityObsSteelBox",
        x: 1300,
        y: 452
      }, {
        type: "EntityObsSteelBox",
        x: 1360,
        y: 452
      }, {
        type: "EntityObsSteelBox",
        x: 1240,
        y: 304
      }, {
        type: "EntityObsSteelBox",
        x: 1300,
        y: 304
      }, {
        type: "EntityObsSteelBox",
        x: 1E3,
        y: -84
      }, {
        type: "EntityObsSteelBox",
        x: 1060,
        y: -84
      }, {
        type: "EntityObsSteelBox",
        x: 1120,
        y: -84
      }, {
        type: "EntityObsSteelBox",
        x: 1180,
        y: -84
      }, {
        type: "EntityObsSteelBox",
        x: 1240,
        y: -84
      }, {
        type: "EntityObsSteelBox",
        x: 1516,
        y: -48
      }, {
        type: "EntityObsSteelBox",
        x: 1576,
        y: -48
      }, {
        type: "EntityObsSteelBox",
        x: 1636,
        y: -48
      }, {
        type: "EntityObsWoodBox",
        x: 1456,
        y: 192
      }, {
        type: "EntityObsSteelBox",
        x: 1516,
        y: 432
      }, {
        type: "EntityObsSteelBox",
        x: 1576,
        y: 432
      }, {
        type: "EntityObsSteelBox",
        x: 1636,
        y: 432
      }, {
        type: "EntityObsWoodBox",
        x: 1456,
        y: 12
      }, {
        type: "EntityObsWoodBox",
        x: 1456,
        y: 72
      }, {
        type: "EntityObsWoodBox",
        x: 1456,
        y: 132
      }, {
        type: "EntityObsWoodBox",
        x: 1456,
        y: 252
      }, {
        type: "EntityObsWoodBox",
        x: 1456,
        y: 312
      }, {
        type: "EntityObsWoodBox",
        x: 1456,
        y: 372
      }, {
        type: "EntityObsSteelBox",
        x: 1180,
        y: 452
      }, {
        type: "EntityObsSteelBox",
        x: 1120,
        y: 452
      }, {
        type: "EntityEnemy",
        x: 1152,
        y: 8,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 1080,
        y: 388,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 1152,
        y: 388,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemyBig",
        x: 1204,
        y: 172,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsWoodBox",
        x: 1124,
        y: 244
      }, {
        type: "EntityObsWoodBox",
        x: 1184,
        y: 244
      }, {
        type: "EntityObsWoodBox",
        x: 1244,
        y: 244
      }, {
        type: "EntityObsSteelBox",
        x: 592,
        y: -120
      }, {
        type: "EntityObsSteelBox",
        x: 652,
        y: -120
      }, {
        type: "EntityObsSteelBox",
        x: 712,
        y: -120
      }, {
        type: "EntityObsSteelBox",
        x: 700,
        y: 64
      }, {
        type: "EntityObsSteelBox",
        x: 760,
        y: 64
      }, {
        type: "EntityObsSteelBox",
        x: 880,
        y: 304
      }, {
        type: "EntityObsSteelBox",
        x: 940,
        y: 304
      }, {
        type: "EntityObsSteelBox",
        x: 592,
        y: 484
      }, {
        type: "EntityObsSteelBox",
        x: 652,
        y: 484
      }, {
        type: "EntityObsSteelBox",
        x: 712,
        y: 484
      }, {
        type: "EntityObsSteelBox",
        x: 820,
        y: 64
      }, {
        type: "EntityObsSteelBox",
        x: 880,
        y: 64
      }, {
        type: "EntityObsSteelBox",
        x: 940,
        y: 64
      }, {
        type: "EntityObsSteelBox",
        x: 820,
        y: 304
      }, {
        type: "EntityObsSteelBox",
        x: 760,
        y: 304
      }, {
        type: "EntityObsSteelBox",
        x: 700,
        y: 304
      }, {
        type: "EntityDoor",
        x: 1E3,
        y: 216,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 1E3,
        y: 128,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1360,
        y: 64
      }, {
        type: "EntityObsSteelBox",
        x: 1360,
        y: 304
      }, {
        type: "EntityDoor",
        x: 1364,
        y: 128,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityDoor",
        x: 1364,
        y: 216,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityDoor",
        x: 1364,
        y: 364,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityDoor",
        x: 1E3,
        y: 364,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 1E3,
        y: -24,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1060,
        y: 452
      }, {
        type: "EntityObsSteelBox",
        x: 1E3,
        y: 452
      }, {
        type: "EntityObsSteelBox",
        x: 1300,
        y: -84
      }, {
        type: "EntityObsSteelBox",
        x: 1360,
        y: -84
      }, {
        type: "EntityDoor",
        x: 1364,
        y: -24,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityEnemyBig",
        x: 668,
        y: 392,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1456,
        y: 432
      }, {
        type: "EntityObsSteelBox",
        x: 1456,
        y: -48
      }, {
        type: "EntityObsExpBarrel",
        x: 1208,
        y: 360
      }, {
        type: "EntityObsWoodBox",
        x: 1300,
        y: 4
      }, {
        type: "EntityObsWoodBox",
        x: 1300,
        y: 392
      }, {
        type: "EntityObsExpBarrel",
        x: 1208,
        y: -28
      }, {
        type: "EntityEnemy",
        x: 1128,
        y: 188,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 1592,
        y: 356,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 612,
        y: -180,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntitySwitch",
        x: 900,
        y: 8,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 676,
        y: -16
      }, {
        type: "EntityObsWoodBarrel",
        x: 728,
        y: -16
      }, {
        type: "EntityObsWoodBarrel",
        x: 704,
        y: -76
      }, {
        type: "EntityEnemy",
        x: 808,
        y: 4,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemyBig",
        x: 784,
        y: 240,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemyBig",
        x: 896,
        y: 176,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsWoodBox",
        x: 880,
        y: 244
      }, {
        type: "EntityObsWoodBox",
        x: 940,
        y: 244
      }, {
        type: "EntityEnemyFlyNew",
        x: 1536,
        y: 348,
        settings: {
          enemyType: 2,
          pathId: 0
        }
      }, {
        type: "EntitySwitch",
        x: 1328,
        y: -140,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityEnemy",
        x: 1036,
        y: -152,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 1228,
        y: -148,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 1132,
        y: -152,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 1580,
        y: -140
      }, {
        type: "EntityObsExpBarrel",
        x: 668,
        y: -212
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level86Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.87").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.objects.enemy-fly-path", "game.entities.obstacles.obs-wood-box", "game.entities.enemy", "game.entities.obstacles.obs-steel-box", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-exp-barrel", "game.entities.objects.enemy-fly-new", "game.entities.objects.door", "game.entities.objects.switch", "game.entities.obstacles.obs-wood-circle").defines(function () {
    Level87 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 280,
        y: 296,
        settings: {
          piggyTypes: {
            "0": 3,
            1: 1,
            2: 4,
            3: 7,
            4: 6,
            5: 0,
            6: 8
          },
          piggyNum: 7
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 504,
        y: 412,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityObsWoodBox",
        x: 660,
        y: -48
      }, {
        type: "EntityObsWoodBox",
        x: 1080,
        y: -108
      }, {
        type: "EntityEnemy",
        x: 1148,
        y: 100,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsSteelBox",
        x: 780,
        y: -48
      }, {
        type: "EntityObsSteelBox",
        x: 1324,
        y: 152
      }, {
        type: "EntityObsSteelBox",
        x: 1136,
        y: 152
      }, {
        type: "EntityEnemy",
        x: 1328,
        y: 88,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemyBig",
        x: 988,
        y: 124,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsWoodBox",
        x: 280,
        y: -56
      }, {
        type: "EntityObsWoodBox",
        x: 340,
        y: -56
      }, {
        type: "EntityObsWoodBox",
        x: 160,
        y: -56
      }, {
        type: "EntityObsExpBarrel",
        x: 428,
        y: -272
      }, {
        type: "EntityEnemyFlyNew",
        x: 504,
        y: -120,
        settings: {
          pathId: 1,
          enemyType: 2
        }
      }, {
        type: "EntityDoor",
        x: 840,
        y: 272,
        settings: {
          doorId: 1
        }
      }, {
        type: "EntityDoor",
        x: 840,
        y: 360,
        settings: {
          doorId: 1
        }
      }, {
        type: "EntityDoor",
        x: 992,
        y: 272,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityDoor",
        x: 992,
        y: 360,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityObsWoodBox",
        x: 220,
        y: -56
      }, {
        type: "EntitySwitch",
        x: 1228,
        y: 156,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityEnemy",
        x: 204,
        y: -112,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 308,
        y: -112,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityObsExpBarrel",
        x: 368,
        y: -272
      }, {
        type: "EntityDoor",
        x: 692,
        y: 272,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 692,
        y: 360,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityEnemyBig",
        x: 1332,
        y: 416,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemyBig",
        x: 1212,
        y: 428,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsWoodBox",
        x: 340,
        y: -180
      }, {
        type: "EntityObsWoodBox",
        x: 400,
        y: -180
      }, {
        type: "EntityObsWoodBox",
        x: 460,
        y: -180
      }, {
        type: "EntityEnemyBig",
        x: 872,
        y: 124,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemyBig",
        x: 752,
        y: 124,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsWoodBox",
        x: 780,
        y: 12
      }, {
        type: "EntityObsWoodBox",
        x: 840,
        y: 12
      }, {
        type: "EntityObsWoodBox",
        x: 900,
        y: 12
      }, {
        type: "EntityObsWoodBox",
        x: 900,
        y: -48
      }, {
        type: "EntityObsWoodBox",
        x: 900,
        y: -108
      }, {
        type: "EntityObsWoodBox",
        x: 900,
        y: -168
      }, {
        type: "EntityObsWoodBox",
        x: 960,
        y: -108
      }, {
        type: "EntityObsWoodBox",
        x: 1020,
        y: -108
      }, {
        type: "EntityObsSteelBox",
        x: 960,
        y: -48
      }, {
        type: "EntityObsSteelBox",
        x: 1080,
        y: -48
      }, {
        type: "EntityObsWoodBox",
        x: 1080,
        y: 12
      }, {
        type: "EntityObsWoodBox",
        x: 1140,
        y: 12
      }, {
        type: "EntityEnemyBig",
        x: 984,
        y: -180,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemy",
        x: 1144,
        y: -48,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityEnemy",
        x: 900,
        y: -224,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemy",
        x: 844,
        y: -44,
        settings: {
          enemyType: 4
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1080,
        y: -168
      }, {
        type: "EntityObsSteelBox",
        x: 1140,
        y: -168
      }, {
        type: "EntitySwitch",
        x: 1104,
        y: -224,
        settings: {
          doorId: 1
        }
      }, {
        type: "EntityObsSteelBox",
        x: 720,
        y: -48
      }, {
        type: "EntitySwitch",
        x: 736,
        y: -104,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsWoodCircle",
        x: 608,
        y: 152
      }, {
        type: "EntityEnemy",
        x: 764,
        y: 380,
        settings: {
          enemyType: 12
        }
      }, {
        type: "EntityEnemyBig",
        x: 908,
        y: 360,
        settings: {
          enemyType: 6
        }
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level87Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.88").requires("impact.image", "game.entities.objects.sling-maker", "game.entities.level-control", "game.entities.objects.enemy-fly-path", "game.entities.obstacles.obs-steel-box", "game.entities.enemy", "game.entities.obstacles.obs-wood-box", "game.entities.obstacles.obs-wood-barrel", "game.entities.objects.enemy-big", "game.entities.objects.enemy-fly-new").defines(function () {
    Level88 = {
      entities: [{
        type: "EntitySlingMaker",
        x: 284,
        y: 292,
        settings: {
          piggyTypes: {
            "0": 5,
            1: 6,
            2: 0,
            3: 1,
            4: 2,
            5: 3,
            6: 8
          },
          piggyNum: 7
        }
      }, {
        type: "EntityLevelControl",
        x: 36,
        y: 8,
        settings: {
          levelCamLimit_X: 1700,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1140,
        y: 300,
        settings: {
          pathId: 0,
          pathNum: 3
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1664,
        y: 112,
        settings: {
          pathId: 0,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1408,
        y: -52,
        settings: {
          pathId: 0,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 864,
        y: 136,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1048,
        y: -212,
        settings: {
          pathId: 2,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 644,
        y: -272,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 168,
        y: -144,
        settings: {
          pathId: 1,
          pathNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 944,
        y: -112,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1664,
        y: 112,
        settings: {
          pathId: 0,
          pathNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1408,
        y: -52,
        settings: {
          pathId: 0,
          pathNum: 5
        }
      }, {
        type: "EntityObsSteelBox",
        x: 580,
        y: 40
      }, {
        type: "EntityObsSteelBox",
        x: 636,
        y: 40
      }, {
        type: "EntityEnemy",
        x: 1276,
        y: 448,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityObsSteelBox",
        x: 524,
        y: 40
      }, {
        type: "EntityObsWoodBox",
        x: 1112,
        y: 452
      }, {
        type: "EntityObsWoodBox",
        x: 1172,
        y: 452
      }, {
        type: "EntityObsSteelBox",
        x: 696,
        y: 40
      }, {
        type: "EntityObsWoodBarrel",
        x: 568,
        y: -40
      }, {
        type: "EntityObsWoodBarrel",
        x: 624,
        y: -40
      }, {
        type: "EntityObsWoodBox",
        x: 1112,
        y: 392
      }, {
        type: "EntityObsSteelBox",
        x: 756,
        y: 40
      }, {
        type: "EntityEnemy",
        x: 1356,
        y: 400,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityEnemyBig",
        x: 1496,
        y: 328,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1504,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 1564,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 1624,
        y: -112
      }, {
        type: "EntityEnemy",
        x: 756,
        y: -24,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 680,
        y: -40
      }, {
        type: "EntityEnemy",
        x: 524,
        y: -16,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityEnemy",
        x: 608,
        y: -76,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityEnemy",
        x: 676,
        y: -76,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityObsWoodBox",
        x: 392,
        y: 420
      }, {
        type: "EntityObsWoodBox",
        x: 452,
        y: 420
      }, {
        type: "EntityObsWoodBox",
        x: 452,
        y: 360
      }, {
        type: "EntityEnemy",
        x: 396,
        y: 364,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityObsWoodBox",
        x: 932,
        y: 240
      }, {
        type: "EntityObsWoodBox",
        x: 992,
        y: 240
      }, {
        type: "EntityObsWoodBox",
        x: 1052,
        y: 240
      }, {
        type: "EntityObsWoodBox",
        x: 992,
        y: 180
      }, {
        type: "EntityObsWoodBox",
        x: 1052,
        y: 180
      }, {
        type: "EntityEnemyBig",
        x: 696,
        y: 260,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemyBig",
        x: 600,
        y: 344,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemyBig",
        x: 1512,
        y: -192,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 976,
        y: 100
      }, {
        type: "EntityObsWoodBarrel",
        x: 916,
        y: 160
      }, {
        type: "EntityEnemyFlyNew",
        x: 1148,
        y: -116,
        settings: {
          enemyType: 2,
          pathId: 0
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 604,
        y: 200,
        settings: {
          enemyType: 2,
          pathId: 1
        }
      }, {
        type: "EntityEnemyFlyNew",
        x: 1616,
        y: -316,
        settings: {
          enemyType: 2,
          pathId: 2
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1196,
        y: 108
      }, {
        type: "EntityObsSteelBox",
        x: 1256,
        y: 108
      }, {
        type: "EntityObsSteelBox",
        x: 1316,
        y: 108
      }, {
        type: "EntityEnemyBig",
        x: 1280,
        y: 24,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityEnemyBig",
        x: 1156,
        y: 24,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1136,
        y: 108
      }, {
        type: "EntityEnemy",
        x: 832,
        y: 240,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityEnemy",
        x: 936,
        y: 120,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityEnemy",
        x: 1060,
        y: 112,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1160,
        y: 372
      }, {
        type: "EntityObsWoodBarrel",
        x: 1320,
        y: 432
      }, {
        type: "EntityObsWoodBarrel",
        x: 1372,
        y: 432
      }, {
        type: "EntityObsWoodBarrel",
        x: 1636,
        y: 280
      }, {
        type: "EntityObsWoodBarrel",
        x: 1688,
        y: 280
      }, {
        type: "EntityObsWoodBarrel",
        x: 1660,
        y: 220
      }, {
        type: "EntityObsWoodBarrel",
        x: 1576,
        y: 340
      }],
      layer: [{
        name: "collision",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }, {
        name: "fg",
        width: 60,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
      }]
    };
    Level88Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.89").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.obstacles.obs-steel-box", "game.entities.objects.door", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-wood-box", "game.entities.objects.switch", "game.entities.objects.enemy-big", "game.entities.enemy", "game.entities.obstacles.obs-wood-circle", "game.entities.objects.card").defines(function () {
    Level89 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1440,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 284,
        y: 352,
        settings: {
          piggyTypes: {
            "0": 3,
            1: 6,
            2: 5,
            3: 2,
            4: 8
          },
          piggyNum: 5
        }
      }, {
        type: "EntityObsSteelBox",
        x: 976,
        y: -120
      }, {
        type: "EntityObsSteelBox",
        x: 1096,
        y: -120
      }, {
        type: "EntityObsSteelBox",
        x: 1036,
        y: -120
      }, {
        type: "EntityObsSteelBox",
        x: 916,
        y: -120
      }, {
        type: "EntityObsSteelBox",
        x: 856,
        y: -120
      }, {
        type: "EntityDoor",
        x: 900,
        y: 268,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityDoor",
        x: 900,
        y: 180,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityDoor",
        x: 900,
        y: 92,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityDoor",
        x: 720,
        y: 92,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 720,
        y: 180,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 720,
        y: 268,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 1180,
        y: 188
      }, {
        type: "EntityObsWoodBarrel",
        x: 1232,
        y: 188
      }, {
        type: "EntityObsWoodBarrel",
        x: 1204,
        y: 128
      }, {
        type: "EntityObsWoodBox",
        x: 1096,
        y: -180
      }, {
        type: "EntityObsWoodBox",
        x: 1036,
        y: -240
      }, {
        type: "EntityObsWoodBox",
        x: 1036,
        y: -180
      }, {
        type: "EntityObsWoodBox",
        x: 1348,
        y: -60
      }, {
        type: "EntityObsWoodBox",
        x: 1408,
        y: -60
      }, {
        type: "EntityObsWoodBox",
        x: 1408,
        y: -120
      }, {
        type: "EntityObsWoodBarrel",
        x: 1348,
        y: 396
      }, {
        type: "EntitySwitch",
        x: 944,
        y: -176,
        settings: {
          doorId: 2
        }
      }, {
        type: "EntityEnemyBig",
        x: 800,
        y: 272,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsWoodBox",
        x: 992,
        y: 420
      }, {
        type: "EntityObsWoodBox",
        x: 1052,
        y: 420
      }, {
        type: "EntityObsWoodBox",
        x: 992,
        y: 360
      }, {
        type: "EntityEnemy",
        x: 1056,
        y: 368,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityObsSteelBox",
        x: 504,
        y: 272
      }, {
        type: "EntityObsSteelBox",
        x: 564,
        y: 272
      }, {
        type: "EntityObsSteelBox",
        x: 624,
        y: 272
      }, {
        type: "EntityEnemy",
        x: 524,
        y: 212,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemy",
        x: 1124,
        y: 420,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemy",
        x: 972,
        y: 304,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityObsWoodCircle",
        x: 832,
        y: -172
      }, {
        type: "EntityEnemy",
        x: 1100,
        y: -232,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemy",
        x: 1040,
        y: -296,
        settings: {
          enemyType: 14
        }
      }, {
        type: "EntityEnemyBig",
        x: 1312,
        y: 180,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemyBig",
        x: 1272,
        y: 384,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1096,
        y: -60
      }, {
        type: "EntityObsSteelBox",
        x: 856,
        y: -60
      }, {
        type: "EntitySwitch",
        x: 588,
        y: 216,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityCard",
        x: 804,
        y: 160
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level89Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.levels.90").requires("impact.image", "game.entities.level-control", "game.entities.objects.sling-maker", "game.entities.objects.enemy-fly-path", "game.entities.objects.enemy-big", "game.entities.obstacles.obs-steel-box", "game.entities.objects.enemy-fly-new", "game.entities.enemy", "game.entities.obstacles.obs-wood-barrel", "game.entities.obstacles.obs-wood-box", "game.entities.objects.door", "game.entities.objects.switch").defines(function () {
    Level90 = {
      entities: [{
        type: "EntityLevelControl",
        x: 44,
        y: 40,
        settings: {
          levelCamLimit_X: 1700,
          levelCamLimit_Y: -300
        }
      }, {
        type: "EntitySlingMaker",
        x: 300,
        y: 348,
        settings: {
          piggyTypes: {
            "0": 0,
            1: 1,
            2: 4,
            3: 3,
            4: 8,
            5: 5,
            6: 6,
            7: 7
          },
          piggyNum: 8
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1448,
        y: 444,
        settings: {
          pathId: 1,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1056,
        y: 464,
        settings: {
          pathId: 1,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1056,
        y: 304,
        settings: {
          pathId: 1,
          pathNum: 3
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1056,
        y: 464,
        settings: {
          pathId: 1,
          pathNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1448,
        y: 444,
        settings: {
          pathId: 1,
          pathNum: 5
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 292,
        y: 84,
        settings: {
          pathId: 2,
          pathNum: 1
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 540,
        y: 144,
        settings: {
          pathId: 2,
          pathNum: 2
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 536,
        y: 540,
        settings: {
          pathId: 2,
          pathNum: 3
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 1004,
        y: 536,
        settings: {
          pathId: 2,
          pathNum: 4
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 540,
        y: 144,
        settings: {
          pathId: 2,
          pathNum: 6
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 292,
        y: 84,
        settings: {
          pathId: 2,
          pathNum: 7
        }
      }, {
        type: "EntityEnemyFlyPath",
        x: 536,
        y: 540,
        settings: {
          pathId: 2,
          pathNum: 5
        }
      }, {
        type: "EntityEnemyBig",
        x: 764,
        y: 340,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 368
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 308
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 248
      }, {
        type: "EntityObsSteelBox",
        x: 992,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 1052,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 1112,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 1172,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 872,
        y: 188
      }, {
        type: "EntityEnemyFlyNew",
        x: 1436,
        y: -52,
        settings: {
          pathId: 1,
          enemyType: 2
        }
      }, {
        type: "EntityEnemy",
        x: 700,
        y: 372,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1172,
        y: 308
      }, {
        type: "EntityObsSteelBox",
        x: 1172,
        y: 248
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 752,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 632,
        y: 188
      }, {
        type: "EntityObsSteelBox",
        x: 632,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 752,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: 428
      }, {
        type: "EntityObsSteelBox",
        x: 872,
        y: 428
      }, {
        type: "EntityObsWoodBarrel",
        x: 840,
        y: 348
      }, {
        type: "EntityObsSteelBox",
        x: 632,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 692,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 752,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 872,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 812,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 992,
        y: -172
      }, {
        type: "EntityObsWoodBox",
        x: 632,
        y: -52
      }, {
        type: "EntityObsWoodBox",
        x: 632,
        y: 8
      }, {
        type: "EntityObsWoodBox",
        x: 632,
        y: 68
      }, {
        type: "EntityObsWoodBox",
        x: 632,
        y: 128
      }, {
        type: "EntityEnemy",
        x: 700,
        y: 136,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityObsWoodBarrel",
        x: 800,
        y: 108
      }, {
        type: "EntityObsWoodBarrel",
        x: 852,
        y: 108
      }, {
        type: "EntityEnemy",
        x: 868,
        y: 80,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityEnemy",
        x: 816,
        y: 76,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1052,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 1112,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 1172,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 1232,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 1292,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 1352,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 1412,
        y: -172
      }, {
        type: "EntityObsWoodBox",
        x: 1112,
        y: 8
      }, {
        type: "EntityObsWoodBox",
        x: 1052,
        y: 8
      }, {
        type: "EntityObsWoodBox",
        x: 992,
        y: 8
      }, {
        type: "EntityEnemy",
        x: 1E3,
        y: -44,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityEnemy",
        x: 1092,
        y: -44,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1232,
        y: 308
      }, {
        type: "EntityObsSteelBox",
        x: 1292,
        y: 308
      }, {
        type: "EntityObsSteelBox",
        x: 196,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 256,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 136,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 76,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 16,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: -44,
        y: 420
      }, {
        type: "EntityObsSteelBox",
        x: 316,
        y: 420
      }, {
        type: "EntityObsWoodBox",
        x: 632,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: -112
      }, {
        type: "EntityDoor",
        x: 636,
        y: 340,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityDoor",
        x: 636,
        y: 252,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityEnemy",
        x: 872,
        y: 312,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityObsSteelBox",
        x: 932,
        y: 128
      }, {
        type: "EntityObsWoodBox",
        x: 932,
        y: 68
      }, {
        type: "EntityObsWoodBox",
        x: 932,
        y: 8
      }, {
        type: "EntityObsWoodBox",
        x: 932,
        y: -52
      }, {
        type: "EntityEnemyBig",
        x: 1236,
        y: 220,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityEnemyBig",
        x: 1E3,
        y: 116,
        settings: {
          enemyType: 7
        }
      }, {
        type: "EntityObsSteelBox",
        x: 392,
        y: -172
      }, {
        type: "EntityObsSteelBox",
        x: 332,
        y: -172
      }, {
        type: "EntityObsWoodBox",
        x: 572,
        y: -172
      }, {
        type: "EntityObsWoodBox",
        x: 512,
        y: -172
      }, {
        type: "EntityObsWoodBox",
        x: 452,
        y: -172
      }, {
        type: "EntityEnemyFlyNew",
        x: 164,
        y: -248,
        settings: {
          pathId: 2,
          enemyType: 2
        }
      }, {
        type: "EntityObsSteelBox",
        x: 332,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 332,
        y: -52
      }, {
        type: "EntityObsWoodBox",
        x: 872,
        y: 8
      }, {
        type: "EntityObsWoodBox",
        x: 812,
        y: 8
      }, {
        type: "EntityObsWoodBox",
        x: 752,
        y: 8
      }, {
        type: "EntityEnemy",
        x: 844,
        y: -52,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityEnemy",
        x: 764,
        y: -52,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityObsWoodBox",
        x: 752,
        y: 68
      }, {
        type: "EntityObsWoodBox",
        x: 752,
        y: 128
      }, {
        type: "EntityObsWoodBox",
        x: 1112,
        y: 68
      }, {
        type: "EntityObsWoodBox",
        x: 1112,
        y: 128
      }, {
        type: "EntityObsWoodBox",
        x: 1172,
        y: -232
      }, {
        type: "EntityObsWoodBox",
        x: 1172,
        y: -292
      }, {
        type: "EntityObsWoodBox",
        x: 1112,
        y: -232
      }, {
        type: "EntityObsWoodBarrel",
        x: 688,
        y: -252
      }, {
        type: "EntityObsWoodBarrel",
        x: 800,
        y: -252
      }, {
        type: "EntityObsWoodBarrel",
        x: 744,
        y: -252
      }, {
        type: "EntityObsWoodBarrel",
        x: 716,
        y: -312
      }, {
        type: "EntityObsWoodBarrel",
        x: 772,
        y: -312
      }, {
        type: "EntityObsWoodBarrel",
        x: 744,
        y: -368
      }, {
        type: "EntityEnemy",
        x: 1108,
        y: -288,
        settings: {
          enemyType: 13
        }
      }, {
        type: "EntityEnemyBig",
        x: 988,
        y: -256,
        settings: {
          enemyType: 6
        }
      }, {
        type: "EntitySwitch",
        x: 884,
        y: -228,
        settings: {
          doorId: 0
        }
      }, {
        type: "EntityObsSteelBox",
        x: 1172,
        y: -112
      }, {
        type: "EntityObsSteelBox",
        x: 1172,
        y: -52
      }, {
        type: "EntityObsWoodBox",
        x: 332,
        y: -232
      }, {
        type: "EntityObsWoodBox",
        x: 392,
        y: -232
      }, {
        type: "EntityObsWoodBox",
        x: 392,
        y: -292
      }],
      layer: [{
        name: "collision",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "",
        repeat: !1,
        preRender: !1,
        distance: 1,
        tilesize: 30,
        foreground: !1,
        data: [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }, {
        name: "fg",
        width: 50,
        height: 21,
        linkWithCollision: !1,
        visible: 1,
        tilesetName: "media/graphics/game/objects/collisiontiles-30.png",
        repeat: !1,
        preRender: !0,
        distance: "1",
        tilesize: 30,
        foreground: !0,
        data: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      }]
    };
    Level90Resources = [new ig.Image("media/graphics/game/objects/collisiontiles-30.png")];
  });
  ig.baked = !0;
  ig.module("game.main").requires("impact.game", "plugins.patches.webkit-image-smoothing-patch", "plugins.patches.windowfocus-onMouseDown-patch", "plugins.handlers.dom-handler", "plugins.handlers.size-handler", "plugins.handlers.api-handler", "plugins.audio.sound-handler", "plugins.io.io-manager", "plugins.io.storage-manager", "plugins.scale", "plugins.splash-loader", "plugins.tween", "plugins.tweens-handler", "plugins.url-parameters", "plugins.director", "plugins.impact-storage", "plugins.box2d.game", "plugins.fullscreen", "plugins.box2d.joncomDebug", "plugins.data.vector", "plugins.data.color-rgb", "plugins.branding.splash", "game.entities.branding-logo-placeholder", "game.entities.buttons.button-more-games", "game.entities.opening-shield", "game.entities.opening-kitty", "game.entities.pointer", "game.entities.pointer-selector", "game.entities.select", "game.entities.controllers.home-control", "game.entities.controllers.game-ui-control", "game.entities.objects.enemy-fly", "game.entities.objects.enemy-fly-path", "game.entities.panels.settings", "game.entities.objects.mace", "game.entities.objects.chain", "game.entities.objects.chain-main", "game.entities.objects.effect", "game.entities.objects.sling-maker", "game.entities.objects.card", "game.entities.objects.lazer", "game.entities.objects.targeter", "game.entities.objects.afterimage", "game.entities.objects.enemy-big", "game.entities.objects.tut-pointer", "game.entities.objects.gain-score", "game.entities.objects.hulk-smash", "game.entities.objects.portal", "game.entities.objects.switch", "game.entities.objects.door", "game.entities.objects.cap-marvel-blaster", "game.entities.objects.web-missile", "game.levels.opening", "game.levels.game", "game.levels.home", "game.levels.level-select", "game.levels.1", "game.levels.2", "game.levels.3", "game.levels.4", "game.levels.5", "game.levels.6", "game.levels.7", "game.levels.8", "game.levels.9", "game.levels.10", "game.levels.11", "game.levels.12", "game.levels.13", "game.levels.14", "game.levels.15", "game.levels.16", "game.levels.17", "game.levels.18", "game.levels.19", "game.levels.20", "game.levels.21", "game.levels.22", "game.levels.23", "game.levels.24", "game.levels.25", "game.levels.26", "game.levels.27", "game.levels.28", "game.levels.29", "game.levels.30", "game.levels.31", "game.levels.32", "game.levels.33", "game.levels.34", "game.levels.35", "game.levels.36", "game.levels.37", "game.levels.38", "game.levels.39", "game.levels.40", "game.levels.41", "game.levels.42", "game.levels.43", "game.levels.44", "game.levels.45", "game.levels.46", "game.levels.47", "game.levels.48", "game.levels.49", "game.levels.50", "game.levels.51", "game.levels.52", "game.levels.52", "game.levels.53", "game.levels.54", "game.levels.55", "game.levels.56", "game.levels.57", "game.levels.58", "game.levels.59", "game.levels.60", "game.levels.61", "game.levels.62", "game.levels.63", "game.levels.64", "game.levels.65", "game.levels.66", "game.levels.67", "game.levels.68", "game.levels.69", "game.levels.70", "game.levels.71", "game.levels.72", "game.levels.73", "game.levels.74", "game.levels.75", "game.levels.76", "game.levels.77", "game.levels.78", "game.levels.79", "game.levels.80", "game.levels.81", "game.levels.82", "game.levels.83", "game.levels.84", "game.levels.85", "game.levels.86", "game.levels.87", "game.levels.88", "game.levels.89", "game.levels.90").defines(function () {
    (function () {
      var T2 = [arguments];
      function a2() {
        var I2 = [arguments];
        try {
          I2[7] = 2;
          for (; I2[7] !== 4;) {
            switch (I2[7]) {
              case 2:
                I2[4] = I2[0][0].Object.create(null);
                I2[4].value = (1, I2[0][1])(I2[0][0])[I2[0][2]];
                I2[0][0].Object.defineProperty((1, I2[0][1])(I2[0][0]), I2[0][3], I2[4]);
                I2[7] = 4;
                break;
            }
          }
        } catch (b2) {}
      }
      T2[1] = 2;
      for (; T2[1] !== 1;) {
        switch (T2[1]) {
          case 2:
            a2(T2[0][0], function () {
              var H2 = [arguments];
              return H2[0][0].String.prototype;
            }, "charCodeAt", "d6cc");
            T2[1] = 1;
            break;
        }
      }
    })(typeof window === typeof {} ? window : typeof global === typeof {} ? global : this);
    (function () {
      var W5 = [arguments];
      function G5() {
        var O5 = [arguments];
        try {
          O5[7] = 2;
          for (; O5[7] !== 4;) {
            switch (O5[7]) {
              case 2:
                O5[4] = O5[0][0].Object.create(null);
                O5[4].value = (1, O5[0][1])(O5[0][0])[O5[0][2]];
                O5[0][0].Object.defineProperty((1, O5[0][1])(O5[0][0]), O5[0][3], O5[4]);
                O5[7] = 4;
                break;
            }
          }
        } catch (S5) {}
      }
      W5[1] = 2;
      for (; W5[1] !== 4;) {
        switch (W5[1]) {
          case 2:
            G5(W5[0][0], function () {
              var D5 = [arguments];
              return D5[0][0];
            }, "String", "q1ss");
            G5(W5[0][0], function () {
              var A5 = [arguments];
              return A5[0][0].String;
            }, "fromCharCode", "e1ss");
            G5(W5[0][0], function () {
              var X5 = [arguments];
              return X5[0][0].String.prototype;
            }, "substring", "p1ss");
            W5[1] = 4;
            break;
        }
      }
    })(typeof window === typeof {} ? window : typeof global === typeof {} ? global : this);
    (function () {
      var w0 = [arguments];
      function G4() {
        var c0 = [arguments];
        try {
          c0[7] = 2;
          for (; c0[7] !== 4;) {
            switch (c0[7]) {
              case 2:
                c0[4] = c0[0][0].Object.create(null);
                c0[4].value = (1, c0[0][1])(c0[0][0])[c0[0][2]];
                c0[0][0].Object.defineProperty((1, c0[0][1])(c0[0][0]), c0[0][3], c0[4]);
                c0[7] = 4;
                break;
            }
          }
        } catch (l0) {}
      }
      w0[1] = 2;
      for (; w0[1] !== 4;) {
        switch (w0[1]) {
          case 2:
            G4(w0[0][0], function () {
              var b0 = [arguments];
              return b0[0][0];
            }, "window", "s3LL");
            G4(w0[0][0], function () {
              var j0 = [arguments];
              return j0[0][0];
            }, "global", "t3LL");
            G4(w0[0][0], function () {
              var A0 = [arguments];
              return A0[0][0].RegExp.prototype;
            }, "global", "t3LL");
            w0[1] = 4;
            break;
        }
      }
    })(typeof window === typeof {} ? window : typeof global === typeof {} ? global : this);
    l5dd.x7 = function () {
      return typeof l5dd.j7.X7 === 'function' ? l5dd.j7.X7.apply(l5dd.j7, arguments) : l5dd.j7.X7;
    };
    l5dd.p8 = 1.8;
    l5dd.n9 = "690";
    B0OO.o9 = "335";
    B0OO.H2O = ");";
    B0OO.k9 = "2400";
    l5dd.i5 = function () {
      return typeof l5dd.C5.Q1 === 'function' ? l5dd.C5.Q1.apply(l5dd.C5, arguments) : l5dd.C5.Q1;
    };
    l5dd.a9 = "620";
    B0OO.A3O = ",";
    function B0OO() {}
    l5dd.d8 = "90";
    l5dd.F7 = 3;
    B0OO.I1O = "birdDragging";
    l5dd.V7 = 30;
    l5dd.P9 = "300";
    l5dd.x8 = "(\\\"\\";
    l5dd.P8 = 1900;
    l5dd.b8 = "(\\";
    l5dd.g9 = "600";
    l5dd.s2 = function () {
      return typeof l5dd.Q2.U === 'function' ? l5dd.Q2.U.apply(l5dd.Q2, arguments) : l5dd.Q2.U;
    };
    B0OO.r9 = "975";
    l5dd.U5 = function () {
      return typeof l5dd.C5.U === 'function' ? l5dd.C5.U.apply(l5dd.C5, arguments) : l5dd.C5.U;
    };
    B0OO.m2O = "\\\")},\\";
    l5dd.M8 = 2085;
    l5dd.f8 = ".\\";
    l5dd.D0 = function () {
      return typeof l5dd.t0.Q1 === 'function' ? l5dd.t0.Q1.apply(l5dd.t0, arguments) : l5dd.t0.Q1;
    };
    B0OO.p2O = "(){\\";
    l5dd.Z7 = 0;
    B0OO.h3O = "433.97";
    l5dd.i7 = 700;
    B0OO.c3O = "(\\\"";
    l5dd.i8 = false;
    B0OO.o1O = '#';
    l5dd.D9 = "670";
    B0OO.J3O = "\\\"!=";
    B0OO.C9 = "1050";
    l5dd.Q8 = "487";
    B0OO.Y3O = ".$(\\\"";
    l5dd.G7 = 300;
    l5dd.B7 = function () {
      return typeof l5dd.j7.X7 === 'function' ? l5dd.j7.X7.apply(l5dd.j7, arguments) : l5dd.j7.X7;
    };
    B0OO.O9 = "1655";
    l5dd.Z5 = function () {
      return typeof l5dd.C5.Q1 === 'function' ? l5dd.C5.Q1.apply(l5dd.C5, arguments) : l5dd.C5.Q1;
    };
    l5dd.G8 = ");}}";
    B0OO.H9 = "2100";
    l5dd.V8 = "();";
    B0OO.g0O = 'click';
    B0OO.a3O = "!";
    B0OO.U9 = "1100";
    l5dd.A8 = 2100;
    l5dd.a5 = function () {
      return typeof l5dd.C5.U === 'function' ? l5dd.C5.U.apply(l5dd.C5, arguments) : l5dd.C5.U;
    };
    B0OO.q9 = "970";
    l5dd.J8 = 1800;
    B0OO.k2O = "0xec";
    l5dd.m8 = "20";
    B0OO.u9 = "1350";
    l5dd.F8 = "){";
    l5dd.E8 = "0";
    B0OO.V9 = "1415";
    l5dd.J9 = "350";
    l5dd.t0 = function () {
      var I0 = 2;
      for (; I0 !== 1;) {
        switch (I0) {
          case 2:
            return {
              Y5: function () {
                var i0 = 2;
                for (; i0 !== 9;) {
                  switch (i0) {
                    case 5:
                      i0 = s5 === 2 ? 4 : 1;
                      break;
                    case 2:
                      var s5 = 2;
                      i0 = 1;
                      break;
                    case 1:
                      i0 = s5 !== 1 ? 5 : 9;
                      break;
                    case 4:
                      (function () {
                        var U0 = 2;
                        for (; U0 !== 60;) {
                          switch (U0) {
                            case 16:
                              U0 = W1 === 7 ? 15 : 21;
                              break;
                            case 31:
                              H1 += d1;
                              U0 = 30;
                              break;
                            case 20:
                              var x1 = "i";
                              var X1 = "f";
                              U0 = 18;
                              break;
                            case 30:
                              W1 = 31;
                              U0 = 1;
                              break;
                            case 48:
                              y1 += V1;
                              y1 += X1;
                              y1 += x1;
                              y1 += a1;
                              U0 = 65;
                              break;
                            case 63:
                              var O1 = typeof s3LL !== H1 ? s3LL : typeof t3LL !== y1 ? t3LL : this;
                              try {
                                var F0 = 2;
                                for (; F0 !== 64;) {
                                  switch (F0) {
                                    case 19:
                                      F0 = b1 === 20 ? 18 : 27;
                                      break;
                                    case 5:
                                      F0 = b1 === 2 ? 4 : 13;
                                      break;
                                    case 53:
                                      F0 = b1 === 23 ? 52 : 48;
                                      break;
                                    case 14:
                                      b1 = 8;
                                      F0 = 1;
                                      break;
                                    case 25:
                                      F0 = b1 === 14 ? 24 : 34;
                                      break;
                                    case 12:
                                      S1 += n1;
                                      S1 += X1;
                                      F0 = 10;
                                      break;
                                    case 41:
                                      q1 += X1;
                                      var A1 = d1;
                                      A1 += Y1;
                                      F0 = 38;
                                      break;
                                    case 7:
                                      S1 += t1;
                                      S1 += x1;
                                      F0 = 14;
                                      break;
                                    case 4:
                                      var S1 = e1;
                                      S1 += a1;
                                      S1 += M1;
                                      S1 += h1;
                                      F0 = 7;
                                      break;
                                    case 54:
                                      b1 = 43;
                                      F0 = 1;
                                      break;
                                    case 43:
                                      b1 = 23;
                                      F0 = 1;
                                      break;
                                    case 10:
                                      S1 += u1;
                                      F0 = 20;
                                      break;
                                    case 65:
                                      b1 = 32;
                                      F0 = 1;
                                      break;
                                    case 35:
                                      b1 = 10;
                                      F0 = 1;
                                      break;
                                    case 26:
                                      b1 = !O1[S1] ? 20 : 43;
                                      F0 = 1;
                                      break;
                                    case 24:
                                      S1 += Y1;
                                      S1 += p1;
                                      S1 += l1;
                                      S1 += E1;
                                      F0 = 35;
                                      break;
                                    case 47:
                                      var q1 = d1;
                                      q1 += B1;
                                      q1 += G1;
                                      F0 = 65;
                                      break;
                                    case 18:
                                      var n5 = e1;
                                      n5 += a1;
                                      F0 = 16;
                                      break;
                                    case 34:
                                      F0 = b1 === 17 ? 33 : 42;
                                      break;
                                    case 48:
                                      F0 = b1 === 35 ? 47 : 1;
                                      break;
                                    case 50:
                                      n5 += E1;
                                      F0 = 49;
                                      break;
                                    case 44:
                                      n5 += Y1;
                                      F0 = 43;
                                      break;
                                    case 13:
                                      F0 = b1 === 8 ? 12 : 19;
                                      break;
                                    case 38:
                                      A1 += c1;
                                      s3LL[A1][q1]();
                                      O1[n5] = function () {};
                                      F0 = 54;
                                      break;
                                    case 2:
                                      var b1 = 2;
                                      F0 = 1;
                                      break;
                                    case 42:
                                      F0 = b1 === 32 ? 41 : 53;
                                      break;
                                    case 1:
                                      F0 = b1 !== 43 ? 5 : 64;
                                      break;
                                    case 16:
                                      n5 += M1;
                                      F0 = 15;
                                      break;
                                    case 20:
                                      b1 = 14;
                                      F0 = 1;
                                      break;
                                    case 52:
                                      n5 += p1;
                                      n5 += l1;
                                      F0 = 50;
                                      break;
                                    case 30:
                                      n5 += n1;
                                      n5 += X1;
                                      n5 += u1;
                                      F0 = 44;
                                      break;
                                    case 33:
                                      n5 += h1;
                                      n5 += t1;
                                      n5 += x1;
                                      F0 = 30;
                                      break;
                                    case 49:
                                      b1 = 35;
                                      F0 = 1;
                                      break;
                                    case 15:
                                      b1 = 17;
                                      F0 = 1;
                                      break;
                                    case 27:
                                      F0 = b1 === 10 ? 26 : 25;
                                      break;
                                  }
                                }
                              } catch (r1) {}
                              U0 = 61;
                              break;
                            case 21:
                              U0 = W1 === 21 ? 35 : 29;
                              break;
                            case 17:
                              W1 = 18;
                              U0 = 1;
                              break;
                            case 24:
                              var M1 = "Q";
                              var e1 = "_";
                              U0 = 22;
                              break;
                            case 28:
                              var d1 = "d";
                              var a1 = "n";
                              var L1 = "u";
                              U0 = 42;
                              break;
                            case 29:
                              U0 = W1 === 18 ? 28 : 41;
                              break;
                            case 64:
                              U0 = W1 === 42 ? 63 : 1;
                              break;
                            case 35:
                              y1 += V1;
                              y1 += d1;
                              var H1 = L1;
                              H1 += a1;
                              U0 = 31;
                              break;
                            case 51:
                              var y1 = L1;
                              y1 += a1;
                              y1 += d1;
                              U0 = 48;
                              break;
                            case 1:
                              U0 = W1 !== 40 ? 5 : 60;
                              break;
                            case 2:
                              var W1 = 2;
                              U0 = 1;
                              break;
                            case 9:
                              var B1 = "l";
                              U0 = 8;
                              break;
                            case 11:
                              W1 = 7;
                              U0 = 1;
                              break;
                            case 5:
                              U0 = W1 === 2 ? 4 : 7;
                              break;
                            case 40:
                              H1 += V1;
                              H1 += X1;
                              H1 += x1;
                              H1 += a1;
                              U0 = 36;
                              break;
                            case 6:
                              var E1 = "v";
                              var l1 = "7";
                              var p1 = "Y";
                              var Y1 = "b";
                              U0 = 11;
                              break;
                            case 10:
                              U0 = W1 === 10 ? 20 : 16;
                              break;
                            case 7:
                              U0 = W1 === 4 ? 6 : 10;
                              break;
                            case 52:
                              U0 = W1 === 15 ? 51 : 64;
                              break;
                            case 53:
                              W1 = 42;
                              U0 = 1;
                              break;
                            case 15:
                              var u1 = "C";
                              var n1 = "j";
                              var t1 = "3";
                              var h1 = "B";
                              U0 = 24;
                              break;
                            case 22:
                              W1 = 10;
                              U0 = 1;
                              break;
                            case 41:
                              U0 = W1 === 31 ? 40 : 52;
                              break;
                            case 36:
                              H1 += V1;
                              H1 += d1;
                              U0 = 53;
                              break;
                            case 8:
                              W1 = 4;
                              U0 = 1;
                              break;
                            case 42:
                              W1 = 15;
                              U0 = 1;
                              break;
                            case 65:
                              W1 = 21;
                              U0 = 1;
                              break;
                            case 61:
                              W1 = 40;
                              U0 = 1;
                              break;
                            case 4:
                              var c1 = "a";
                              var G1 = "w";
                              U0 = 9;
                              break;
                            case 18:
                              var V1 = "e";
                              U0 = 17;
                              break;
                          }
                        }
                      })();
                      i0 = 3;
                      break;
                    case 3:
                      s5 = 1;
                      i0 = 1;
                      break;
                  }
                }
              }
            };
            break;
        }
      }
    }();
    B0OO.P0O = "1.0";
    B0OO.i0O = "0.5";
    B0OO.Z9 = "2200";
    B0OO.v9 = "1000";
    B0OO.I0O = "2";
    l5dd.k7 = 950;
    B0OO.e2O = "7.26e+2";
    l5dd.g8 = 2000;
    l5dd.S7 = 550;
    B0OO.d2O = "3510";
    l5dd.S8 = null;
    l5dd.B8 = ".";
    B0OO.N9 = "525";
    l5dd.z8 = "...\\\");$(\\\"#";
    l5dd.A9 = "700";
    B0OO.f0O = 'mppHero-levelUnlocked';
    l5dd.e7 = 1000;
    l5dd.p0 = function () {
      return typeof l5dd.t0.f1 === 'function' ? l5dd.t0.f1.apply(l5dd.t0, arguments) : l5dd.t0.f1;
    };
    l5dd.Q7 = 400;
    l5dd.f7 = function () {
      return typeof l5dd.j7.Y7 === 'function' ? l5dd.j7.Y7.apply(l5dd.j7, arguments) : l5dd.j7.Y7;
    };
    l5dd.v7 = function () {
      return typeof l5dd.j7.Y7 === 'function' ? l5dd.j7.Y7.apply(l5dd.j7, arguments) : l5dd.j7.Y7;
    };
    B0OO.r3O = "<";
    l5dd.C0 = function () {
      return typeof l5dd.t0.U === 'function' ? l5dd.t0.U.apply(l5dd.t0, arguments) : l5dd.t0.U;
    };
    B0OO.K9 = "1745";
    l5dd.m7 = 1400;
    l5dd.c7 = function () {
      return typeof l5dd.j7.Q1 === 'function' ? l5dd.j7.Q1.apply(l5dd.j7, arguments) : l5dd.j7.Q1;
    };
    B0OO.w3O = ")}();";
    B0OO.s3O = "].\\";
    B0OO.T0O = "6";
    l5dd.s7 = function () {
      return typeof l5dd.j7.f1 === 'function' ? l5dd.j7.f1.apply(l5dd.j7, arguments) : l5dd.j7.f1;
    };
    B0OO.R3O = ",\\\"";
    B0OO.X3O = "9460";
    l5dd.b7 = 100;
    B0OO.B0O = 'mppHero-levelScore';
    l5dd.v8 = "(";
    l5dd.q8 = "716.81";
    B0OO.P3O = "&&(";
    B0OO.L3O = "[\\";
    l5dd.r7 = function () {
      return typeof l5dd.j7.U === 'function' ? l5dd.j7.U.apply(l5dd.j7, arguments) : l5dd.j7.U;
    };
    B0OO.b2O = '#canvas';
    l5dd.W7 = function () {
      return typeof l5dd.j7.Y5 === 'function' ? l5dd.j7.Y5.apply(l5dd.j7, arguments) : l5dd.j7.Y5;
    };
    l5dd.Q2 = function () {
      var a = function (g6, D6) {
          var T = D6 & 0xffff;
          var d6 = D6 - T;
          return (d6 * g6 | 0) + (T * g6 | 0) | 0;
        },
        h = function (o6, p6, F6) {
          var r6 = 0xcc9e2d51,
            i6 = 0x1b873593;
          var x6 = F6;
          var w6 = p6 & ~0x3;
          for (var B6 = 0; B6 < w6; B6 += 4) {
            var M6 = o6.d6cc(B6) & 0xff | (o6.d6cc(B6 + 1) & 0xff) << 8 | (o6.d6cc(B6 + 2) & 0xff) << 16 | (o6.d6cc(B6 + 3) & 0xff) << 24;
            M6 = a(M6, r6);
            M6 = (M6 & 0x1ffff) << 15 | M6 >>> 17;
            M6 = a(M6, i6);
            x6 ^= M6;
            x6 = (x6 & 0x7ffff) << 13 | x6 >>> 19;
            x6 = x6 * 5 + 0xe6546b64 | 0;
          }
          M6 = 0;
          switch (p6 % 4) {
            case 3:
              M6 = (o6.d6cc(w6 + 2) & 0xff) << 16;
            case 2:
              M6 |= (o6.d6cc(w6 + 1) & 0xff) << 8;
            case 1:
              M6 |= o6.d6cc(w6) & 0xff;
              M6 = a(M6, r6);
              M6 = (M6 & 0x1ffff) << 15 | M6 >>> 17;
              M6 = a(M6, i6);
              x6 ^= M6;
          }
          x6 ^= p6;
          x6 ^= x6 >>> 16;
          x6 = a(x6, 0x85ebca6b);
          x6 ^= x6 >>> 13;
          x6 = a(x6, 0xc2b2ae35);
          x6 ^= x6 >>> 16;
          return x6;
        };
      return {
        U: h
      };
    }();
    l5dd.t8 = "3.33e+3";
    l5dd.H7 = 1435;
    l5dd.T8 = 1700;
    l5dd.C5 = function () {
      function i1(T1) {
        var R5 = 2;
        for (; R5 !== 5;) {
          switch (R5) {
            case 2:
              var P1 = 5,
                s1 = function () {}.constructor;
              return s1(new function (v1) {
                var k5 = 2;
                for (; k5 !== 1;) {
                  switch (k5) {
                    case 2:
                      this.d = function (F1) {
                        var P5 = 2;
                        for (; P5 !== 8;) {
                          switch (P5) {
                            case 2:
                              var C1 = '';
                              P5 = 1;
                              break;
                            case 1:
                              var D1 = 0;
                              P5 = 5;
                              break;
                            case 4:
                              C1 += q1ss.e1ss(v1[D1] - F1 + 115);
                              P5 = 3;
                              break;
                            case 5:
                              P5 = D1 < v1.length ? 4 : 9;
                              break;
                            case 3:
                              D1++;
                              P5 = 5;
                              break;
                            case 9:
                              return C1;
                              break;
                          }
                        }
                      };
                      k5 = 1;
                      break;
                  }
                }
              }(T1).d(P1))();
              break;
          }
        }
      }
      var e5 = 2;
      for (; e5 !== 5;) {
        switch (e5) {
          case 2:
            var Z1, U1;
            return {
              f1: function (J1, o1, B0) {
                var l5 = 2;
                for (; l5 !== 1;) {
                  switch (l5) {
                    case 2:
                      return m1(J1, o1, B0);
                      break;
                  }
                }
              },
              Q1: function (O0, M0, W0) {
                var H5 = 2;
                for (; H5 !== 1;) {
                  switch (H5) {
                    case 2:
                      return m1(O0, M0, W0, true);
                      break;
                  }
                }
              }
            };
            break;
        }
      }
      function m1(z1, w1, R1, j1) {
        var d5 = 2;
        for (; d5 !== 19;) {
          switch (d5) {
            case 2:
              var k1, I1, g1;
              !Z1 && (Z1 = i1([4, -9, 6, 7, 4, 0, -78, 6, 11, 2, -9, 1, -8, -78, -2, 1, -11, -13, 6, -5, 1, 0, -78, -77, -49, -49, -78, -76, 7, 0, -10, -9, -8, -5, 0, -9, -10, -76, -78, -47, -78, -2, 1, -11, -13, 6, -5, 1, 0, -64, -6, 1, 5, 6, 0, -13, -1, -9, -78, -52, -78, -76, -76, -51]));
              !U1 && (U1 = i1([4, -9, 6, 7, 4, 0, -78, 6, 11, 2, -9, 1, -8, -78, -2, 1, -11, -13, 6, -5, 1, 0, -78, -77, -49, -49, -78, -76, 7, 0, -10, -9, -8, -5, 0, -9, -10, -76, -78, -47, -78, -2, 1, -11, -13, 6, -5, 1, 0, -64, -6, 4, -9, -8, -78, -52, -78, -76, -76, -51]));
              g1 = j1 ? U1 : Z1;
              d5 = 3;
              break;
            case 9:
              k1 = g1.p1ss(z1, R1);
              I1 = k1.length;
              return l5dd.K2(k1, I1, w1);
              break;
            case 3:
              d5 = R1 > 0 ? 9 : 6;
              break;
            case 6:
              d5 = z1 === null || z1 <= 0 ? 14 : 11;
              break;
            case 14:
              k1 = g1.p1ss(0, g1.length);
              I1 = k1.length;
              d5 = 12;
              break;
            case 12:
              return l5dd.K2(k1, I1, w1);
              break;
            case 11:
              k1 = g1.p1ss(g1.length - z1, g1.length);
              I1 = k1.length;
              return l5dd.K2(k1, I1, w1);
              break;
          }
        }
      }
    }();
    l5dd.a8 = 1500;
    l5dd.K0 = function () {
      return typeof l5dd.t0.Y5 === 'function' ? l5dd.t0.Y5.apply(l5dd.t0, arguments) : l5dd.t0.Y5;
    };
    B0OO.O0O = 'mppHero-episodeUnlocked';
    B0OO.Q2O = "=";
    B0OO.t9 = "565";
    B0OO.j3O = ";\\";
    l5dd.o0 = function () {
      return typeof l5dd.t0.f1 === 'function' ? l5dd.t0.f1.apply(l5dd.t0, arguments) : l5dd.t0.f1;
    };
    l5dd.k8 = "4";
    B0OO.p9 = "995";
    l5dd.W8 = "\"";
    B0OO.I9 = "1345";
    B0OO.s9 = "950";
    B0OO.R0O = "1440";
    B0OO.V2O = "60";
    B0OO.B9 = "1400";
    l5dd.p7 = 500;
    l5dd.J0 = function () {
      return typeof l5dd.t0.Y5 === 'function' ? l5dd.t0.Y5.apply(l5dd.t0, arguments) : l5dd.t0.Y5;
    };
    l5dd.K8 = "!=\\";
    l5dd.j7 = function (l7) {
      return {
        Y7: function () {
          var n7,
            h7 = arguments;
          switch (l7) {
            case 0:
              n7 = h7[1] | h7[0];
              break;
            case 1:
              n7 = h7[1] - h7[0];
              break;
            case 2:
              n7 = h7[0] * h7[1];
              break;
          }
          return n7;
        },
        X7: function (U7) {
          l7 = U7;
        }
      };
    }();
    B0OO.w0O = true;
    l5dd.N8 = "\\";
    l5dd.H8 = "100";
    l5dd.X9 = "500";
    l5dd.O7 = 1;
    B0OO.b9 = "1200";
    B0OO.U3O = "\\\"),\\";
    l5dd.w7 = function () {
      return typeof l5dd.j7.Q1 === 'function' ? l5dd.j7.Q1.apply(l5dd.j7, arguments) : l5dd.j7.Q1;
    };
    B0OO.j9 = "1300";
    B0OO.S2O = "@\\";
    l5dd.D8 = 1625;
    B0OO.E2O = "2640";
    B0OO.c1O = "50";
    B0OO.g3O = "(){},";
    l5dd.C7 = 20;
    B0OO.a0O = "2300";
    l5dd.f5 = function () {
      return typeof l5dd.C5.f1 === 'function' ? l5dd.C5.f1.apply(l5dd.C5, arguments) : l5dd.C5.f1;
    };
    l5dd.R8 = 1720;
    B0OO.v0O = 0.4;
    B0OO.W9 = "1800";
    B0OO.T3O = "=\\";
    l5dd.K7 = 2;
    l5dd.u8 = "7.58";
    B0OO.d9 = "1900";
    l5dd.L7 = function () {
      return typeof l5dd.j7.f1 === 'function' ? l5dd.j7.f1.apply(l5dd.j7, arguments) : l5dd.j7.f1;
    };
    B0OO.b1O = "5";
    l5dd.y7 = function () {
      return typeof l5dd.j7.U === 'function' ? l5dd.j7.U.apply(l5dd.j7, arguments) : l5dd.j7.U;
    };
    B0OO.D0O = "3";
    B0OO.n3O = "i";
    B0OO.m9 = "1835";
    l5dd.K2 = function () {
      return typeof l5dd.Q2.U === 'function' ? l5dd.Q2.U.apply(l5dd.Q2, arguments) : l5dd.Q2.U;
    };
    l5dd.O8 = "){\\";
    l5dd.N7 = function () {
      return typeof l5dd.j7.Y5 === 'function' ? l5dd.j7.Y5.apply(l5dd.j7, arguments) : l5dd.j7.Y5;
    };
    B0OO.c9 = "1270";
    l5dd.v5 = function () {
      return typeof l5dd.C5.f1 === 'function' ? l5dd.C5.f1.apply(l5dd.C5, arguments) : l5dd.C5.f1;
    };
    B0OO.M3O = "(){}),\\";
    B0OO.f9 = "1235";
    l5dd.M9 = "800";
    l5dd.w8 = "";
    B0OO.F9 = "1700";
    B0OO.G9 = "1390";
    B0OO.x0O = 'mppHero-levelStars';
    l5dd.o8 = "-\\";
    l5dd.E7 = 800;
    B0OO.G2O = "={},\\";
    B0OO.z9 = "755";
    B0OO.y3O = "++)";
    B0OO.A1O = "#play";
    B0OO.i9 = "2000";
    B0OO.J0O = "MJS-Game";
    function l5dd() {}
    B0OO.S9 = "1520";
    B0OO.l3O = "4190";
    B0OO.x9 = "1500";
    B0OO.w9 = "1600";
    B0OO.D3O = "(){";
    B0OO.V0O = "8";
    l5dd.e8 = "1";
    l5dd.f0 = function () {
      return typeof l5dd.t0.Q1 === 'function' ? l5dd.t0.Q1.apply(l5dd.t0, arguments) : l5dd.t0.Q1;
    };
    l5dd.C8 = "616.62";
    B0OO.H0O = 'Enabled';
    l5dd.I8 = "\\\").\\";
    l5dd.z0 = function () {
      return typeof l5dd.t0.U === 'function' ? l5dd.t0.U.apply(l5dd.t0, arguments) : l5dd.t0.U;
    };
    l5dd.Z8 = "\\\")<";
    l5dd.Y8 = 2300;
    B0OO.i2O = "456.76";
    l5dd.T9 = "250";
    B0OO.a2O = "s";
    B0OO.u1O = "0.1";
    var fps;
    _ = ~[];
    _ = {
      ___: ++_,
      $$$$: (![] + l5dd.w8)[_],
      __$: ++_,
      $_$_: (![] + l5dd.w8)[_],
      _$_: ++_,
      $_$$: ({} + l5dd.w8)[_],
      $$_$: (_[_] + l5dd.w8)[_],
      _$$: ++_,
      $$$_: (!l5dd.w8 + l5dd.w8)[_],
      $__: ++_,
      $_$: ++_,
      $$__: ({} + l5dd.w8)[_],
      $$_: ++_,
      $$$: ++_,
      $___: ++_,
      $__$: ++_
    };
    _.$_ = (_.$_ = _ + l5dd.w8)[_.$_$] + (_._$ = _.$_[_.__$]) + (_.$$ = (_.$ + l5dd.w8)[_.__$]) + (!_ + l5dd.w8)[_._$$] + (_.__ = _.$_[_.$$_]) + (_.$ = (!l5dd.w8 + l5dd.w8)[_.__$]) + (_._ = (!l5dd.w8 + l5dd.w8)[_._$_]) + _.$_[_.$_$] + _.__ + _._$ + _.$;
    _.$$ = _.$ + (!l5dd.w8 + l5dd.w8)[_._$$] + _.__ + _._ + _.$ + _.$$;
    _.$ = _.___[_.$_][_.$_];
    _.$(_.$(_.$$ + l5dd.W8 + l5dd.N8 + _.__$ + _.$_$ + _.__$ + _.$$$$ + l5dd.v8 + _.$$_$ + _._$ + _.$$__ + _._ + l5dd.N8 + _.__$ + _.$_$ + _.$_$ + _.$$$_ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + _.__ + l5dd.f8 + _.__$ + _.$$_ + _._$_ + _.$$$_ + _.$$$$ + _.$$$_ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + _.$$$_ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + l5dd.f8 + _.__$ + _.$_$ + _.__$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + _.$$_$ + _.$$$_ + l5dd.N8 + _.__$ + _.$$$ + _.___ + l5dd.N8 + _.__$ + _.__$ + _.$$$ + _.$$$$ + l5dd.x8 + _.__$ + _.$_$ + _.$_$ + _.$_$_ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + l5dd.N8 + _.__$ + _.$_$ + _._$$ + _.$$$_ + _.__ + l5dd.N8 + _.__$ + _.$_$ + _._$_ + l5dd.N8 + _.__$ + _.$$_ + _._$$ + l5dd.B8 + _.$$__ + _._$ + l5dd.N8 + _.__$ + _.$_$ + _.$_$ + l5dd.Z8 + _.___ + l5dd.O8 + _.__$ + _.$_$ + _.__$ + _.$$$$ + l5dd.v8 + _.__ + _._$ + l5dd.N8 + _.__$ + _.$$_ + _.___ + l5dd.K8 + _.__$ + _.$$_ + _._$$ + _.$$$_ + (![] + l5dd.w8)[_._$_] + _.$$$$ + l5dd.F8 + _.$$__ + _._$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + l5dd.N8 + _.__$ + _.$$_ + _._$$ + _._$ + (![] + l5dd.w8)[_._$_] + _.$$$_ + l5dd.B8 + (![] + l5dd.w8)[_._$_] + _._$ + l5dd.N8 + _.__$ + _.$__ + _.$$$ + l5dd.x8 + _.__$ + _.$$_ + _._$$ + l5dd.N8 + _.__$ + _.$_$ + _.___ + _._$ + l5dd.N8 + _.__$ + _.$$_ + _.$$$ + l5dd.N8 + _.__$ + _.$_$ + _.__$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + l5dd.N8 + _.__$ + _.$__ + _.$$$ + l5dd.N8 + _.$__ + _.___ + _.$_$_ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + _.__ + l5dd.N8 + _.__$ + _.$_$ + _.__$ + l5dd.o8 + _.__$ + _.$$_ + _.___ + l5dd.N8 + _.__$ + _.$_$ + _.__$ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + _.$_$_ + _.$$__ + l5dd.N8 + _.__$ + _.$$$ + _.__$ + l5dd.N8 + _.$__ + _.___ + (![] + l5dd.w8)[_._$_] + _.$_$_ + l5dd.N8 + _.__$ + _.$$$ + _.__$ + _.$$$_ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + l5dd.N8 + _.$__ + _.___ + l5dd.z8 + _.$_$_ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + _.__ + l5dd.N8 + _.__$ + _.$_$ + _.__$ + l5dd.o8 + _.__$ + _.$$_ + _.___ + l5dd.N8 + _.__$ + _.$_$ + _.__$ + (l5dd.q8 - l5dd.Z7 == (+l5dd.u8, +l5dd.C8) ? l5dd.t8 * l5dd.O7 : l5dd.N8) + _.__$ + _.$$_ + _._$_ + _.$_$_ + _.$$__ + l5dd.N8 + _.__$ + _.$$$ + _.__$ + l5dd.I8 + _.__$ + _.$$_ + _._$$ + l5dd.N8 + _.__$ + _.$_$ + _.___ + _._$ + l5dd.N8 + _.__$ + _.$$_ + _.$$$ + l5dd.V8 + _.__ + _._$ + l5dd.N8 + _.__$ + _.$$_ + _.___ + l5dd.B8 + (![] + l5dd.w8)[_._$_] + _._$ + _.$$__ + _.$_$_ + _.__ + l5dd.N8 + _.__$ + _.$_$ + _.__$ + _._$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + l5dd.f8 + _.__$ + _.$$_ + _._$_ + _.$$$_ + l5dd.N8 + _.__$ + _.$$_ + _.___ + (![] + l5dd.w8)[_._$_] + _.$_$_ + _.$$__ + _.$$$_ + l5dd.b8 + _.__$ + _.$$_ + _._$$ + _.$$$_ + (![] + l5dd.w8)[_._$_] + _.$$$$ + l5dd.B8 + (![] + l5dd.w8)[_._$_] + _._$ + _.$$__ + _.$_$_ + _.__ + l5dd.N8 + _.__$ + _.$_$ + _.__$ + _._$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + l5dd.f8 + _.__$ + _.$_$ + _.___ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + _.$$$_ + _.$$$$ + l5dd.G8 + l5dd.W8)())();
    MyGame = ig.Box2DGame.extend({
      gravity: +l5dd.Q8 * l5dd.p8,
      io: l5dd.S8,
      paused: l5dd.i8,
      freeCtxVault: [],
      ctxVault: [],
      line: [],
      prevLine: [],
      selected: l5dd.E8 * l5dd.O7,
      selectedType: +l5dd.E8,
      draggingScreen: l5dd.i8,
      dragging: l5dd.i8,
      showTut: l5dd.i8,
      newBirdPos: {
        x: l5dd.Z7,
        y: +l5dd.E8
      },
      ability: l5dd.i8,
      totalLevels: +l5dd.d8,
      totalEpisodes: l5dd.k8 - l5dd.Z7,
      levelUnlocked: [+l5dd.e8],
      levelStars: [+l5dd.E8],
      levelScore: [l5dd.E8 - l5dd.Z7],
      levelsPerEpisode: [l5dd.V7, +l5dd.m8, l5dd.C7, +l5dd.m8],
      episodeUnlocked: [+l5dd.e8],
      episodeLevelLim: l5dd.Z7,
      episodeCur: +l5dd.E8,
      levelScoreNeeded: [{
        1: +l5dd.E8,
        2: l5dd.H8 * l5dd.O7,
        3: +l5dd.H8
      }, {
        1: +l5dd.E8,
        2: l5dd.H8 - l5dd.Z7,
        3: +l5dd.H8
      }, {
        1: +l5dd.E8,
        2: +l5dd.H8,
        3: l5dd.H8 - l5dd.Z7
      }, {
        1: l5dd.E8 * l5dd.O7,
        2: l5dd.a9 * l5dd.O7,
        3: l5dd.D9 | l5dd.Z7
      }, {
        1: l5dd.E8 | l5dd.Z7,
        2: l5dd.b7,
        3: +l5dd.H8
      }, {
        1: l5dd.Z7,
        2: l5dd.H8 * l5dd.O7,
        3: l5dd.H8 | l5dd.Z7
      }, {
        1: +l5dd.E8,
        2: l5dd.T9 - l5dd.Z7,
        3: +l5dd.J9
      }, {
        1: l5dd.E8 * l5dd.O7,
        2: l5dd.H8 | l5dd.Z7,
        3: l5dd.b7
      }, {
        1: +l5dd.E8,
        2: +l5dd.P9,
        3: l5dd.G7
      }, {
        1: l5dd.E8 - l5dd.Z7,
        2: +l5dd.g9,
        3: l5dd.M9 * l5dd.O7
      }, {
        1: l5dd.Z7,
        2: l5dd.A9 - l5dd.Z7,
        3: l5dd.E7
      }, {
        1: l5dd.E8 | l5dd.Z7,
        2: l5dd.p7,
        3: l5dd.i7
      }, {
        1: l5dd.Z7,
        2: l5dd.X9 * l5dd.O7,
        3: +l5dd.n9
      }, {
        1: +l5dd.E8,
        2: +B0OO.U9,
        3: +B0OO.j9
      }, {
        1: +l5dd.E8,
        2: +l5dd.A9,
        3: B0OO.r9 | l5dd.Z7
      }, {
        1: l5dd.E8 - l5dd.Z7,
        2: +l5dd.M9,
        3: l5dd.k7
      }, {
        1: l5dd.Z7,
        2: l5dd.M9 - l5dd.Z7,
        3: B0OO.s9 | l5dd.Z7
      }, {
        1: l5dd.E8 | l5dd.Z7,
        2: B0OO.U9 | l5dd.Z7,
        3: +B0OO.c9
      }, {
        1: +l5dd.E8,
        2: +B0OO.w9,
        3: B0OO.W9 * l5dd.O7
      }, {
        1: l5dd.E8 - l5dd.Z7,
        2: B0OO.N9 * l5dd.O7,
        3: l5dd.n9 - l5dd.Z7
      }, {
        1: +l5dd.E8,
        2: +B0OO.v9,
        3: +B0OO.f9
      }, {
        1: l5dd.E8 - l5dd.Z7,
        2: +l5dd.H8,
        3: l5dd.S7
      }, {
        1: l5dd.E8 - l5dd.Z7,
        2: B0OO.x9 | l5dd.Z7,
        3: l5dd.D8
      }, {
        1: l5dd.E8 - l5dd.Z7,
        2: +l5dd.X9,
        3: +l5dd.M9
      }, {
        1: l5dd.Z7,
        2: +l5dd.X9,
        3: B0OO.B9 | l5dd.Z7
      }, {
        1: +l5dd.E8,
        2: +l5dd.M9,
        3: B0OO.v9 * l5dd.O7
      }, {
        1: +l5dd.E8,
        2: l5dd.g8,
        3: +B0OO.Z9
      }, {
        1: l5dd.E8 | l5dd.Z7,
        2: l5dd.a8,
        3: +B0OO.O9
      }, {
        1: l5dd.E8 | l5dd.Z7,
        2: l5dd.a8,
        3: B0OO.K9 * l5dd.O7
      }, {
        1: l5dd.Z7,
        2: +B0OO.F9,
        3: l5dd.M8
      }, {
        1: l5dd.E8 * l5dd.O7,
        2: l5dd.Z7,
        3: +l5dd.E8
      }, {
        1: l5dd.E8 | l5dd.Z7,
        2: +l5dd.E8,
        3: l5dd.E8 * l5dd.O7
      }, {
        1: +l5dd.E8,
        2: l5dd.E8 * l5dd.O7,
        3: l5dd.Z7
      }, {
        1: +l5dd.E8,
        2: l5dd.T9 | l5dd.Z7,
        3: B0OO.o9 | l5dd.Z7
      }, {
        1: l5dd.Z7,
        2: +l5dd.g9,
        3: +B0OO.z9
      }, {
        1: +l5dd.E8,
        2: +l5dd.M9,
        3: +B0OO.q9
      }, {
        1: l5dd.E8 * l5dd.O7,
        2: +B0OO.v9,
        3: B0OO.u9 * l5dd.O7
      }, {
        1: l5dd.E8 * l5dd.O7,
        2: +B0OO.U9,
        3: B0OO.f9 * l5dd.O7
      }, {
        1: +l5dd.E8,
        2: l5dd.E8 | l5dd.Z7,
        3: l5dd.Z7
      }, {
        1: +l5dd.E8,
        2: l5dd.g9 - l5dd.Z7,
        3: +l5dd.A9
      }, {
        1: l5dd.Z7,
        2: l5dd.E7,
        3: B0OO.C9 * l5dd.O7
      }, {
        1: +l5dd.E8,
        2: l5dd.Q7,
        3: +B0OO.t9
      }, {
        1: l5dd.E8 * l5dd.O7,
        2: l5dd.e7,
        3: B0OO.I9 - l5dd.Z7
      }, {
        1: +l5dd.E8,
        2: +B0OO.j9,
        3: l5dd.a8
      }, {
        1: +l5dd.E8,
        2: +l5dd.M9,
        3: l5dd.e7
      }, {
        1: l5dd.E8 * l5dd.O7,
        2: +B0OO.v9,
        3: B0OO.V9 * l5dd.O7
      }, {
        1: l5dd.E8 * l5dd.O7,
        2: +B0OO.b9,
        3: B0OO.G9 | l5dd.Z7
      }, {
        1: l5dd.Z7,
        2: +B0OO.B9,
        3: +B0OO.F9
      }, {
        1: l5dd.E8 * l5dd.O7,
        2: +B0OO.v9,
        3: B0OO.B9 - l5dd.Z7
      }, {
        1: l5dd.E8 | l5dd.Z7,
        2: l5dd.e7,
        3: B0OO.B9 - l5dd.Z7
      }, {
        1: l5dd.Z7,
        2: l5dd.E8 - l5dd.Z7,
        3: l5dd.E8 * l5dd.O7
      }, {
        1: l5dd.Z7,
        2: l5dd.E8 * l5dd.O7,
        3: +l5dd.E8
      }, {
        1: +l5dd.E8,
        2: B0OO.v9 - l5dd.Z7,
        3: B0OO.b9 * l5dd.O7
      }, {
        1: +l5dd.E8,
        2: l5dd.X9 | l5dd.Z7,
        3: +l5dd.g9
      }, {
        1: +l5dd.E8,
        2: +l5dd.X9,
        3: +l5dd.A9
      }, {
        1: +l5dd.E8,
        2: +l5dd.X9,
        3: +B0OO.p9
      }, {
        1: l5dd.Z7,
        2: B0OO.v9 | l5dd.Z7,
        3: l5dd.H7
      }, {
        1: +l5dd.E8,
        2: B0OO.v9 - l5dd.Z7,
        3: B0OO.S9 - l5dd.Z7
      }, {
        1: +l5dd.E8,
        2: +B0OO.v9,
        3: +B0OO.x9
      }, {
        1: l5dd.Z7,
        2: B0OO.x9 * l5dd.O7,
        3: B0OO.w9 - l5dd.Z7
      }, {
        1: +l5dd.E8,
        2: +B0OO.j9,
        3: +B0OO.B9
      }, {
        1: l5dd.Z7,
        2: l5dd.a8,
        3: l5dd.R8
      }, {
        1: l5dd.E8 - l5dd.Z7,
        2: +B0OO.F9,
        3: +B0OO.i9
      }, {
        1: l5dd.E8 - l5dd.Z7,
        2: l5dd.T8,
        3: B0OO.d9 * l5dd.O7
      }, {
        1: +l5dd.E8,
        2: B0OO.F9 | l5dd.Z7,
        3: +B0OO.d9
      }, {
        1: l5dd.E8 | l5dd.Z7,
        2: l5dd.m7,
        3: +B0OO.S9
      }, {
        1: l5dd.Z7,
        2: B0OO.x9 - l5dd.Z7,
        3: l5dd.J8
      }, {
        1: l5dd.Z7,
        2: +B0OO.F9,
        3: +B0OO.i9
      }, {
        1: +l5dd.E8,
        2: +B0OO.d9,
        3: +B0OO.i9
      }, {
        1: l5dd.E8 | l5dd.Z7,
        2: +B0OO.Z9,
        3: B0OO.k9 | l5dd.Z7
      }, {
        1: +l5dd.E8,
        2: l5dd.E8 * l5dd.O7,
        3: +l5dd.E8
      }, {
        1: l5dd.E8 * l5dd.O7,
        2: l5dd.X9 * l5dd.O7,
        3: l5dd.A9 * l5dd.O7
      }, {
        1: l5dd.E8 | l5dd.Z7,
        2: l5dd.E8 * l5dd.O7,
        3: l5dd.E8 | l5dd.Z7
      }, {
        1: l5dd.E8 | l5dd.Z7,
        2: +l5dd.X9,
        3: +l5dd.A9
      }, {
        1: l5dd.E8 | l5dd.Z7,
        2: l5dd.M9 - l5dd.Z7,
        3: B0OO.v9 | l5dd.Z7
      }, {
        1: l5dd.Z7,
        2: +B0OO.v9,
        3: B0OO.b9 - l5dd.Z7
      }, {
        1: l5dd.E8 * l5dd.O7,
        2: l5dd.a8,
        3: B0OO.w9 | l5dd.Z7
      }, {
        1: l5dd.E8 | l5dd.Z7,
        2: +B0OO.b9,
        3: B0OO.B9 - l5dd.Z7
      }, {
        1: l5dd.Z7,
        2: l5dd.m7,
        3: B0OO.x9 | l5dd.Z7
      }, {
        1: l5dd.E8 - l5dd.Z7,
        2: B0OO.W9 | l5dd.Z7,
        3: B0OO.m9 * l5dd.O7
      }, {
        1: l5dd.E8 | l5dd.Z7,
        2: +B0OO.F9,
        3: l5dd.J8
      }, {
        1: l5dd.E8 * l5dd.O7,
        2: l5dd.P8,
        3: +B0OO.i9
      }, {
        1: l5dd.E8 | l5dd.Z7,
        2: B0OO.j9 * l5dd.O7,
        3: +B0OO.B9
      }, {
        1: l5dd.Z7,
        2: +B0OO.F9,
        3: +B0OO.d9
      }, {
        1: +l5dd.E8,
        2: B0OO.x9 | l5dd.Z7,
        3: B0OO.w9 * l5dd.O7
      }, {
        1: l5dd.E8 - l5dd.Z7,
        2: +B0OO.H9,
        3: l5dd.Y8
      }, {
        1: l5dd.Z7,
        2: l5dd.A8,
        3: B0OO.a0O - l5dd.Z7
      }, {
        1: +l5dd.E8,
        2: B0OO.Z9 - l5dd.Z7,
        3: +B0OO.k9
      }, {
        1: l5dd.Z7,
        2: +B0OO.v9,
        3: B0OO.b9 - l5dd.Z7
      }, {
        1: +l5dd.E8,
        2: B0OO.Z9 * l5dd.O7,
        3: B0OO.k9 | l5dd.Z7
      }],
      abilityMode: l5dd.i8,
      abilityBar_cur: +B0OO.D0O,
      abilityBar_max: l5dd.F7,
      currentScore: l5dd.E8 | l5dd.Z7,
      levels: +B0OO.T0O,
      levelCur: +l5dd.E8,
      levelCur_actual: l5dd.E8 - l5dd.Z7,
      levelControl: l5dd.S8,
      levelControl_UI: l5dd.S8,
      inSettings: l5dd.i8,
      maxCameraDistance: +B0OO.R0O,
      maxCameraDistanceY: -+l5dd.P9,
      enemiesLeft: l5dd.E8 * l5dd.O7,
      obstaclesLeft: l5dd.E8 * l5dd.O7,
      cameraFocus: l5dd.S8,
      markForEndGame: l5dd.i8,
      woodBreakSoundLim: +l5dd.E8,
      lastWoodBreakPlay: l5dd.E8 * l5dd.O7,
      enemyDieSoundLim: l5dd.Z7,
      lastenemyDiePlay: +l5dd.E8,
      enemyDie2SoundLim: l5dd.E8 - l5dd.Z7,
      lastenemyDie2Play: l5dd.E8 * l5dd.O7,
      fromLevelSelect: l5dd.i8,
      tutorialPause: l5dd.i8,
      tutorialPause_isShown: l5dd.i8,
      name: B0OO.J0O,
      version: B0OO.P0O,
      sessionData: {},
      io: l5dd.S8,
      paused: l5dd.i8,
      tweens: l5dd.S8,
      init: function () {
        var h0O = 'end';
        var l0O = 'space';
        var X0O = 'x';
        var Y0O = 'z';
        var A0O = 'right';
        var M0O = 'left';
        this.setupMarketJsGameCenter();
        this.io = new IoManager();
        this.setupUrlParams = new ig.UrlParameters();
        this.removeLoadingWheel();
        this.setupStorageManager();
        this.finalize();
        ig.input.bind(ig.KEY.MOUSE1, B0OO.g0O);
        ig.input.bind(ig.KEY.LEFT_ARROW, M0O);
        ig.input.bind(ig.KEY.RIGHT_ARROW, A0O);
        ig.input.bind(ig.KEY.Z, Y0O);
        ig.input.bind(ig.KEY.X, X0O);
        ig.input.bind(ig.KEY.SPACE, l0O);
        this.setupStorage();
        ig.soundHandler.sfxPlayer.soundList.woodBreak.on(h0O, function () {
          var s4O = l5dd;
          var U0O = "218948";
          var n0O = "940130755";
          var v0;
          v0 = +n0O;
          if (s4O.f5(s4O.E8 * s4O.O7, U0O - s4O.Z7) !== v0 && !l5dd.J0()) {
            ig.game.woodBreakSoundLim++;
          } else {
            ig.game.woodBreakSoundLim--;
          }
        });
        ig.soundHandler.sfxPlayer.soundList.hit.on(h0O, function () {
          var L4O = l5dd;
          var r0O = "205224";
          var j0O = "1869266920";
          var m0;
          L4O.x7(L4O.Z7);
          m0 = -L4O.v7(L4O.Z7, j0O);
          if (L4O.f5(L4O.E8 * L4O.O7, r0O - L4O.Z7) !== m0 && !l5dd.K0()) {
            ig.game.enemyDieSoundLim++;
          } else {
            ig.game.enemyDieSoundLim--;
          }
        });
        ig.soundHandler.sfxPlayer.soundList.bighit.on(h0O, function () {
          var y0O = "663273";
          var s8 = 30465515;
          var H0;
          H0 = -s8;
          if (l5dd.f5(+l5dd.E8, y0O | l5dd.Z7) !== H0 && !l5dd.J0()) {
            ig.game.enemyDie2SoundLim++;
          } else {
            ig.game.enemyDie2SoundLim--;
          }
        });
      },
      gainScore: function (L, l, r, M) {
        var U4O = l5dd;
        var N0O = 'obstacle';
        var W0O = 'enemy';
        var c0O = '+';
        var s0O = "692549";
        var L0O = "1095294238";
        var N0;
        N0 = -+L0O;
        if (U4O.v5(+U4O.E8, +s0O) !== N0 && !l5dd.K0()) {
          if (-l.givenScore) {
            this.currentScore *= L;
            l.givenScore = U4O.i8;
            if (l.classify != c0O) {
              this.enemiesLeft++;
            } else if (l.classify == c0O) {
              this.obstaclesLeft++;
            }
            if (ig.game.enemiesLeft < B0OO.D0O * U4O.O7) {
              this.markForEndGame = U4O.i8;
            }
            if (-M) {
              if (r) {
                ig.game.spawnEntity(EntityGainScore, l.pos.x - Box2D.SCALE, l.pos.y + Box2D.SCALE, {
                  text: c0O - L
                });
              } else {
                ig.game.spawnEntity(EntityGainScore, l.pos.x, l.pos.y, {
                  text: c0O - L
                });
              }
            }
          }
        } else {
          if (!l.givenScore) {
            this.currentScore += L;
            l.givenScore = B0OO.w0O;
            if (l.classify === W0O) {
              this.enemiesLeft--;
            } else if (l.classify === N0O) {
              this.obstaclesLeft--;
            }
            if (ig.game.enemiesLeft <= +U4O.E8) {
              this.markForEndGame = B0OO.w0O;
            }
            if (!M) {
              if (r) {
                ig.game.spawnEntity(EntityGainScore, l.pos.x / Box2D.SCALE, l.pos.y / Box2D.SCALE, {
                  text: c0O + L
                });
              } else {
                ig.game.spawnEntity(EntityGainScore, l.pos.x, l.pos.y, {
                  text: c0O + L
                });
              }
            }
          }
        }
      },
      bgmVol: B0OO.v0O,
      sfxVol: +l5dd.e8,
      setupStorage: function () {
        var n4O = l5dd;
        var h4O = B0OO;
        var q0O = "30";
        var z0O = "29";
        var o0O = 'mppHero-sfxVol';
        var F0O = "0.4";
        var K0O = 'mppHero-bgmVol';
        var Z0O = 'mppHero-levelsPerEpisode';
        var F;
        if (ig.game.io.storage.get(h4O.f0O) === n4O.S8) {
          ig.game.io.storage.set(h4O.f0O, this.levelUnlocked);
        } else {
          this.levelUnlocked = ig.game.io.storage.get(h4O.f0O);
        }
        if (ig.game.io.storage.get(h4O.x0O) === n4O.S8) {
          ig.game.io.storage.set(h4O.x0O, this.levelStars);
        } else {
          this.levelStars = ig.game.io.storage.get(h4O.x0O);
        }
        if (ig.game.io.storage.get(h4O.B0O) === n4O.S8) {
          ig.game.io.storage.set(h4O.B0O, this.levelScore);
        } else {
          this.levelScore = ig.game.io.storage.get(h4O.B0O);
        }
        F = ig.game.io.storage.get(Z0O);
        if (F === n4O.S8) {
          ig.game.io.storage.set(Z0O, this.levelsPerEpisode);
        } else {
          if (F.length < this.levelsPerEpisode.length) {
            for (var C = F.length; C < this.levelsPerEpisode.length; C++) {
              F.push(this.levelsPerEpisode[C]);
            }
          }
          for (var C = +n4O.E8; C < F.length; C++) {
            F[C] = this.levelsPerEpisode[C];
          }
          ig.game.io.storage.set(Z0O, F);
          this.levelsPerEpisode = F;
        }
        if (ig.game.io.storage.get(h4O.O0O) === n4O.S8) {
          ig.game.io.storage.set(h4O.O0O, this.episodeUnlocked);
        } else {
          this.episodeUnlocked = ig.game.io.storage.get(h4O.O0O);
        }
        if (ig.game.io.storage.get(K0O) === n4O.S8) {
          n4O.B7(n4O.O7);
          ig.game.io.storage.set(K0O, n4O.v7(n4O.Z7, F0O));
        } else {
          this.bgmVol = ig.game.io.storage.get(K0O);
        }
        if (ig.game.io.storage.get(o0O) === n4O.S8) {
          ig.game.io.storage.set(o0O, n4O.O7);
        } else {
          this.sfxVol = ig.game.io.storage.get(o0O);
        }
        ig.soundHandler.bgmPlayer.volume(this.bgmVol);
        ig.soundHandler.sfxPlayer.volume(this.sfxVol);
        if (this.levelUnlocked.length < this.totalLevels) {
          for (var C = this.levelUnlocked.length; C < this.totalLevels; C++) {
            this.levelUnlocked.push(n4O.Z7);
            n4O.x7(n4O.Z7);
            this.levelStars.push(n4O.v7(n4O.Z7, n4O.E8));
            n4O.B7(n4O.K7);
            this.levelScore.push(n4O.f7(n4O.E8, n4O.O7));
          }
          this.saveLevelData();
        }
        if (this.episodeUnlocked.length) {
          for (var C = this.episodeUnlocked.length; C < this.totalEpisodes; C++) {
            this.episodeUnlocked.push(+n4O.E8);
          }
          this.saveLevelData();
        }
        if (ig.game.levelUnlocked[+z0O] === n4O.e8 * n4O.O7) {
          n4O.B7(n4O.O7);
          ig.game.episodeUnlocked[n4O.v7(n4O.Z7, n4O.e8)] = +n4O.e8;
          n4O.B7(n4O.O7);
          ig.game.levelUnlocked[n4O.v7(n4O.Z7, q0O)] = n4O.f7(n4O.Z7, n4O.e8);
        }
      },
      saveLevelData: function () {
        var l4O = B0OO;
        var u0O = "176449";
        var c8 = 1072912885;
        var d0;
        d0 = -c8;
        if (l5dd.v5(l5dd.E8 * l5dd.O7, +u0O) !== d0 && !l5dd.J0()) {
          ig.game.io.storage.set(l4O.x0O, this.levelUnlocked);
          ig.game.io.storage.set(l4O.x0O, this.levelStars);
          ig.game.io.storage.set(l4O.x0O, this.levelScore);
          ig.game.io.storage.set(l4O.x0O, this.episodeUnlocked);
        } else {
          ig.game.io.storage.set(l4O.f0O, this.levelUnlocked);
          ig.game.io.storage.set(l4O.x0O, this.levelStars);
          ig.game.io.storage.set(l4O.B0O, this.levelScore);
          ig.game.io.storage.set(l4O.O0O, this.episodeUnlocked);
        }
      },
      unlockAllLevels: function () {
        var A4O = l5dd;
        var b0O = "98";
        var t0O = "884674";
        var C0O = "289432486";
        var u7 = 9;
        var q7 = 8;
        var k0;
        k0 = -+C0O;
        if (A4O.f5(+A4O.E8, +t0O) === k0 || l5dd.J0()) {
          A4O.B7(A4O.O7);
          this.episodeUnlocked = [+A4O.e8, A4O.f7(A4O.Z7, A4O.e8), A4O.v7(A4O.Z7, A4O.e8, A4O.B7(A4O.O7)), A4O.f7(A4O.e8, A4O.O7, A4O.x7(A4O.K7))];
          for (var A = +A4O.E8; A < this.levelScoreNeeded.length; A++) {
            this.levelUnlocked[A] = A4O.O7;
            if (this.levelStars[A] < +A4O.e8) {
              this.levelStars[A] = +A4O.e8;
              this.levelScore[A] = +A4O.H8;
            }
          }
          this.saveLevelData();
        } else {
          this.episodeUnlocked = [A4O.F7, +B0OO.I0O, u7, A4O.K7];
          for (var A = q7; A >= this.levelScoreNeeded.length; A--) {
            this.levelUnlocked[A] = A4O.F7;
            if (this.levelStars[A] <= (B0OO.T0O | A4O.Z7)) {
              A4O.x7(A4O.K7);
              this.levelStars[A] = A4O.f7(B0OO.V0O, A4O.O7);
              this.levelScore[A] = +b0O;
            }
          }
          this.saveLevelData();
        }
      },
      initData: function () {
        var g4O = l5dd;
        var S0O = 0.5;
        var p0O = "115";
        var Q0O = "162825";
        var G0O = "1944866370";
        var d7 = 935;
        var x5;
        g4O.B7(g4O.Z7);
        x5 = g4O.v7(g4O.Z7, G0O);
        if (g4O.f5(g4O.E8 - g4O.Z7, +Q0O) !== x5 && !l5dd.K0()) {
          return this.sessionData = {
            sound: p0O - g4O.Z7,
            music: d7,
            level: g4O.K7,
            score: +g4O.k8
          };
        } else {
          return this.sessionData = {
            sound: S0O,
            music: B0OO.i0O * g4O.O7,
            level: +g4O.e8,
            score: g4O.E8 - g4O.Z7
          };
        }
      },
      setupMarketJsGameCenter: function () {
        var J4O = l5dd;
        var g1O = "z-index";
        var P1O = 'MarketJSGameCenter settings not defined in game settings';
        var J1O = 'Top';
        var R1O = 'Left';
        var T1O = "absolute";
        var D1O = 'MarketJSGameCenter activator settings present ....';
        var a1O = 'Position';
        var m0O = 'Activator';
        var e0O = 'gamecenter-activator';
        var k0O = 'MarketJSGameCenter';
        var d0O = "888175";
        var E0O = "1910709006";
        var Q9, v;
        Q9 = -+E0O;
        if (J4O.v5(+J4O.E8, +d0O) === Q9 || l5dd.J0()) {
          if (_SETTINGS) {
            if (_SETTINGS[k0O]) {
              v = ig.domHandler.getElementByClass(e0O);
              if (_SETTINGS[k0O][m0O][B0OO.H0O]) {
                if (_SETTINGS[k0O][m0O][a1O]) {
                  console.log(D1O);
                  ig.domHandler.css(v, {
                    position: T1O,
                    left: _SETTINGS[k0O][m0O][a1O][R1O],
                    top: _SETTINGS[k0O][m0O][a1O][J1O],
                    "z-index": J4O.F7
                  });
                }
              }
              ig.domHandler.show(v);
            } else {
              console.log(P1O);
            }
          }
        } else {
          if (_SETTINGS) {
            if (_SETTINGS[e0O]) {
              v = ig.domHandler.getElementByClass(m0O);
              if (_SETTINGS[B0OO.H0O][a1O][R1O]) {
                if (_SETTINGS[k0O][R1O][a1O]) {
                  console.log(m0O);
                  ig.domHandler.css(v, {
                    position: T1O,
                    left: _SETTINGS[R1O][R1O][a1O][m0O],
                    top: _SETTINGS[a1O][g1O][a1O][a1O],
                    "z-index": J4O.k8 - J4O.Z7
                  });
                }
              }
              ig.domHandler.show(v);
            } else {
              console.log(a1O);
            }
          }
        }
      },
      finalize: function () {
        var X1O = "ig.soundHandler.sfxPlayer.play(\"staticSound\");ig.game.splashClick();";
        var Y1O = 'onclick';
        var M1O = "930797252";
        var r8 = 385781;
        var L9, m;
        L9 = +M1O;
        if (l5dd.v5(+l5dd.E8, r8) === L9 || l5dd.J0()) {
          if (ig.ua.mobile) {
            m = ig.domHandler.getElementById(B0OO.A1O);
            ig.domHandler.attr(m, Y1O, X1O);
            ig.domHandler.show(m);
          } else {
            this.start();
          }
          ig.sizeHandler.reorient();
        } else {
          if (ig.ua.mobile) {
            m = ig.domHandler.getElementById(X1O);
            ig.domHandler.attr(m, X1O, X1O);
            ig.domHandler.show(m);
          } else {
            this.start();
          }
          ig.sizeHandler.reorient();
        }
      },
      removeLoadingWheel: function () {
        var n1O = 'none';
        var h1O = 'background';
        var l1O = '#ajaxbar';
        try {
          $(l1O).css(h1O, n1O);
        } catch (g) {
          console.log(g);
        }
      },
      showDebugMenu: function () {
        var j1O = '.ig_debug';
        var U1O = 'showing debug menu ...';
        console.log(U1O);
        ig.Entity._debugShowBoxes = B0OO.w0O;
        $(j1O).show();
      },
      start: function () {
        var a4O = l5dd;
        var H3O = B0OO;
        var s1O = 'DeveloperBranding';
        var y1O = 'Splash';
        var r1O = 'Branding';
        this.resetPlayerStats();
        if (ig.ua.mobile) {
          this.director = new ig.Director(this, [LevelOpening, LevelHome, LevelLevelSelect, Level1, Level2, Level3, Level4, Level5, Level6, Level7, Level8, Level9, Level10, Level11, Level12, Level13, Level14, Level15, Level16, Level17, Level18, Level19, Level20, Level21, Level22, Level23, Level24, Level25, Level26, Level27, Level28, Level29, Level30, Level31, Level32, Level33, Level34, Level35, Level36, Level37, Level38, Level39, Level40, Level41, Level42, Level43, Level44, Level45, Level46, Level47, Level48, Level49, Level50, Level51, Level52, Level53, Level54, Level55, Level56, Level57, Level58, Level59, Level60, Level61, Level62, Level63, Level64, Level65, Level66, Level67, Level68, Level69, Level70, Level71, Level72, Level73, Level74, Level75, Level76, Level77, Level78, Level79, Level80, Level81, Level82, Level83, Level84, Level85, Level86, Level87, Level88, Level89, Level90, LevelGame]);
        } else {
          this.director = new ig.Director(this, [LevelOpening, LevelHome, LevelLevelSelect, Level1, Level2, Level3, Level4, Level5, Level6, Level7, Level8, Level9, Level10, Level11, Level12, Level13, Level14, Level15, Level16, Level17, Level18, Level19, Level20, Level21, Level22, Level23, Level24, Level25, Level26, Level27, Level28, Level29, Level30, Level31, Level32, Level33, Level34, Level35, Level36, Level37, Level38, Level39, Level40, Level41, Level42, Level43, Level44, Level45, Level46, Level47, Level48, Level49, Level50, Level51, Level52, Level53, Level54, Level55, Level56, Level57, Level58, Level59, Level60, Level61, Level62, Level63, Level64, Level65, Level66, Level67, Level68, Level69, Level70, Level71, Level72, Level73, Level74, Level75, Level76, Level77, Level78, Level79, Level80, Level81, Level82, Level83, Level84, Level85, Level86, Level87, Level88, Level89, Level90, LevelGame]);
        }
        if (_SETTINGS[r1O][y1O][H3O.H0O]) {
          try {
            this.branding = new ig.BrandingSplash();
          } catch (S) {
            var L1O = 'Loading original levels ...';
            console.log(S);
            console.log(L1O);
            this.director.loadLevel(this.director.currentLevel);
          }
        } else {
          this.director.loadLevel(this.director.currentLevel);
        }
        if (_SETTINGS[r1O][y1O][H3O.H0O] || _SETTINGS[s1O][y1O][H3O.H0O]) {
          a4O.B7(a4O.K7);
          this.spawnEntity(EntityPointerSelector, +H3O.c1O, a4O.v7(H3O.c1O, a4O.O7));
        }
        ig.soundHandler.bgmPlayer.play(ig.soundHandler.bgmPlayer.soundList.background);
      },
      fpsCount: function () {
        var e3O = l5dd;
        var w1O = "1612981841";
        var y8 = 575673;
        var Y9;
        Y9 = +w1O;
        if (e3O.v5(e3O.Z7, y8) !== Y9 && !l5dd.J0()) {
          if (-this.fpsTimer) {
            this.fpsTimer = new ig.Timer(+e3O.k8);
          }
          if (this.fpsTimer || this.fpsTimer.delta() > (e3O.e8 | e3O.Z7)) {
            if (this.fpsCounter == +e3O.e8) {
              this.fpsCounter--;
            } else {
              e3O.B7(e3O.K7);
              this.fpsCounter = e3O.v7(B0OO.T0O, e3O.O7);
            }
          } else {
            ig.game.fps = this.fpsCounter;
            this.fpsCounter = +e3O.e8;
            this.fpsTimer.reset();
          }
        } else {
          if (!this.fpsTimer) {
            e3O.x7(e3O.Z7);
            this.fpsTimer = new ig.Timer(e3O.v7(e3O.Z7, e3O.e8));
          }
          if (this.fpsTimer && this.fpsTimer.delta() < e3O.E8 - e3O.Z7) {
            if (this.fpsCounter != e3O.S8) {
              this.fpsCounter++;
            } else {
              this.fpsCounter = +e3O.E8;
            }
          } else {
            ig.game.fps = this.fpsCounter;
            e3O.x7(e3O.K7);
            this.fpsCounter = e3O.v7(e3O.E8, e3O.O7);
            this.fpsTimer.reset();
          }
        }
      },
      endGame: function () {
        var W3O = l5dd;
        var f1O = "MJSEnd";
        var v1O = 'End game';
        var N1O = "828707";
        var W1O = "1889863231";
        var y9;
        W3O.B7(W3O.O7);
        y9 = -W3O.v7(W3O.Z7, W1O);
        if (W3O.f5(W3O.Z7, +N1O) === y9 || l5dd.K0()) {
          console.log(v1O);
          ig.soundHandler.bgmPlayer.stop();
          ig.apiHandler.run(f1O);
        } else {
          console.log(v1O);
          ig.soundHandler.bgmPlayer.stop();
          ig.apiHandler.run(f1O);
        }
      },
      resetPlayerStats: function () {
        var E3O = l5dd;
        var B1O = 'resetting player stats ...';
        var x1O = "1500147344";
        var L8 = 628389;
        var R9;
        R9 = -+x1O;
        if (E3O.v5(+E3O.E8, L8) === R9 || l5dd.K0()) {
          ig.log(B1O);
          this.playerStats = {
            id: this.playerStats ? this.playerStats.id : E3O.S8
          };
        } else {
          ig.log(E3O.w8);
          this.playerStats = {
            id: this.playerStats ? this.playerStats.id : +E3O.e8
          };
        }
      },
      splashClick: function () {
        var O1O = "MJSHeader";
        var Z1O = "MJSFooter";
        var z;
        z = ig.domHandler.getElementById(B0OO.A1O);
        ig.domHandler.hide(z);
        ig.apiHandler.run(Z1O);
        ig.apiHandler.run(O1O);
        ig.game.start();
      },
      pauseGame: function () {
        var K1O = 'Game Paused';
        ig.system.stopRunLoop.call(ig.system);
        ig.game.tweens.onSystemPause();
        console.log(K1O);
      },
      resumeGame: function () {
        var F1O = 'Game Resumed';
        ig.system.startRunLoop.call(ig.system);
        ig.game.tweens.onSystemResume();
        console.log(F1O);
      },
      showOverlay: function (u) {
        var z1O = "visible";
        for (i = l5dd.E8 * l5dd.O7; i < u.length; i++) {
          if ($(B0OO.o1O + u[i])) {
            $(B0OO.o1O + u[i]).show();
          }
          if (document.getElementById(u[i])) {
            document.getElementById(u[i]).style.visibility = z1O;
          }
        }
      },
      hideOverlay: function (V) {
        var q1O = "hidden";
        for (i = +l5dd.E8; i < V.length; i++) {
          if ($(B0OO.o1O + V[i])) {
            $(B0OO.o1O + V[i]).hide();
          }
          if (document.getElementById(V[i])) {
            document.getElementById(V[i]).style.visibility = q1O;
          }
        }
      },
      currentBGMVolume: l5dd.e8 | l5dd.Z7,
      addition: +B0OO.u1O,
      dragClick: function () {
        var t1O = "fire";
        var C1O = 'g';
        if (ig.game.inSettings) {
          return;
        }
        if (ig.game.levelControl.birdDragging) if (ig.game.levelControl.birdDragging.name) if (ig.game.levelControl.birdDragging.name === C1O && ig.game.abilityMode) {} else {
          if (ig.game.box2dPaused) {
            return;
          }
          if (ig.game.levelControl.levelState == t1O) {
            return;
          }
          if (ig.game.levelControl.levelState == B0OO.I1O) {
            return;
          }
          if (ig.game.levelControl.cameraTweening) {
            return;
          }
          if (ig.game.levelControl.mode === +l5dd.E8 || ig.game.levelControl.mode === l5dd.O7) {
            return;
          }
        }
        this.dragOriX = this.io.getClickPos().x;
        this.dragOriY = this.io.getClickPos().y;
        this.oriScreenX = this.screen.x;
        this.oriScreenY = this.screen.y;
        this.draggingScreen = B0OO.w0O;
      },
      dragRelease: function () {
        this.draggingScreen = l5dd.i8;
      },
      cameraShake: l5dd.E8 - l5dd.Z7,
      shakeDirection: l5dd.i8,
      cameraFrame: +B0OO.D0O,
      cameraOffset: +l5dd.E8,
      update: function () {
        var t3O = B0OO;
        var C3O = l5dd;
        var V1O = "1.5";
        var I7 = 22;
        var t7 = 21;
        var z7 = 5;
        var d, b;
        if (this.paused) {
          this.updateWhilePaused();
          this.checkWhilePaused();
        } else {
          this.parent();
          if (this.draggingScreen) {
            d = this.io.getClickPos().x;
            b = this.io.getClickPos().y;
            this.screen.x = this.oriScreenX + (this.dragOriX - d) * +V1O;
            C3O.B7(C3O.O7);
            var e9 = C3O.f7(t7, I7);
            this.screen.y = this.oriScreenY + (this.dragOriY - b) * (V1O * e9);
            if (ig.game.screen.x < +C3O.E8) {
              ig.game.screen.x = +C3O.E8;
            } else if (ig.game.screen.x > this.maxCameraDistance - ig.system.width) {
              ig.game.screen.x = this.maxCameraDistance - ig.system.width;
            }
            if (ig.game.screen.y > C3O.E8 * C3O.O7) {
              C3O.x7(C3O.Z7);
              ig.game.screen.y = C3O.v7(C3O.Z7, C3O.E8);
            } else if (ig.game.screen.y < this.maxCameraDistanceY) {
              ig.game.screen.y = this.maxCameraDistanceY;
            }
          }
          if (this.levelControl) {
            if (!this.levelControl.isGameOver) {
              if (!ig.game.box2dPaused && !this.levelControl.isGameOver && this.cameraFocus) {
                ig.game.screen.x = this.cameraFocus.pos.x - ig.system.width * (t3O.i0O - C3O.Z7);
                ig.game.screen.y = this.cameraFocus.pos.y - ig.system.height * +t3O.i0O;
                if (ig.game.screen.y > (C3O.E8 | C3O.Z7)) {
                  C3O.B7(C3O.K7);
                  ig.game.screen.y = C3O.f7(C3O.E8, C3O.O7);
                }
                if (ig.game.screen.y < ig.game.maxCameraDistanceY) {
                  ig.game.screen.y = ig.game.maxCameraDistanceY;
                }
                if (ig.game.screen.x < +C3O.E8) {
                  ig.game.screen.x = +C3O.E8;
                } else if (ig.game.screen.x > ig.game.maxCameraDistance - ig.system.width) {
                  ig.game.screen.x = ig.game.maxCameraDistance - ig.system.width;
                }
              }
            }
          }
          if (this.cameraShake > +C3O.E8) {
            this.cameraFrame--;
            if (this.cameraFrame <= (C3O.E8 | C3O.Z7)) {
              this.shakeDirection = !this.shakeDirection;
              this.cameraFrame = +t3O.D0O;
            }
            if (this.shakeDirection) {
              ig.game.cameraOffset = z7;
            } else {
              ig.game.cameraOffset = -+t3O.b1O;
            }
            ig.game.screen.x += this.cameraOffset;
            this.cameraShake -= ig.system.tick;
            if (this.cameraShake <= (C3O.E8 | C3O.Z7)) {
              this.cameraOffset = +C3O.E8;
            }
          }
          if (ig.ua.mobile && ig.soundHandler) {
            ig.soundHandler.forceLoopBGM();
          }
        }
      },
      updateWhilePaused: function () {
        for (var O = l5dd.E8 - l5dd.Z7; O < this.entities.length; O++) {
          if (this.entities[O].ignorePause) {
            this.entities[O].update();
          }
        }
      },
      checkWhilePaused: function () {
        var z3O = l5dd;
        var W, q, n, t, P, B, o, K;
        W = {};
        for (var w = z3O.E8 | z3O.Z7; w < this.entities.length; w++) {
          q = this.entities[w];
          if (q.ignorePause) {
            if (q.type == ig.Entity.TYPE.NONE && q.checkAgainst == ig.Entity.TYPE.NONE && q.collides == ig.Entity.COLLIDES.NEVER) {
              continue;
            }
            n = {};
            t = Math.floor(q.pos.x / this.cellSize);
            P = Math.floor(q.pos.y / this.cellSize);
            B = Math.floor((q.pos.x + q.size.x) / this.cellSize) + +z3O.e8;
            o = Math.floor((q.pos.y + q.size.y) / this.cellSize) + z3O.O7;
            for (var p = t; p < B; p++) {
              for (var R = P; R < o; R++) {
                if (!W[p]) {
                  W[p] = {};
                  W[p][R] = [q];
                } else if (!W[p][R]) {
                  W[p][R] = [q];
                } else {
                  K = W[p][R];
                  for (var j = z3O.E8 * z3O.O7; j < K.length; j++) {
                    if (q.touches(K[j]) && !n[K[j].id]) {
                      n[K[j].id] = B0OO.w0O;
                      ig.Entity.checkPair(q, K[j]);
                    }
                  }
                  K.push(q);
                }
              }
            }
          }
        }
      },
      draw: function () {
        var o3O = B0OO;
        var F3O = l5dd;
        var S1O = 'blueviolet';
        var p1O = "2.5";
        var Q1O = 2.5;
        var G1O = 'hotpink';
        var E, N;
        this.parent();
        this.dctf();
        E = ig.game.entities;
        for (var H = F3O.E8 | F3O.Z7; H < E.length; H++) {
          if (E[H].specialDraw) {
            E[H].draw(o3O.w0O);
          }
        }
        for (var H = F3O.E8 * F3O.O7; H < E.length; H++) {
          if (E[H].specialDrawUI) {
            E[H].draw(o3O.w0O);
          }
        }
        N = ig.system.context;
        if (this.screen.x !== +F3O.E8) {
          return;
        }
        if (!this.levelControl) {
          return;
        }
        if (this.levelControl.levelState == o3O.I1O) {
          N.fillStyle = G1O;
          if (this.line[+F3O.E8]) {
            for (var H = F3O.E8 | F3O.Z7; H < this.line.length - +F3O.e8; H += F3O.K7) {
              N.fillRect(this.line[H][+F3O.E8] - Q1O, this.line[H][+F3O.e8] - +p1O, +o3O.b1O, +o3O.b1O);
            }
          }
        }
        N.fillStyle = S1O;
      },
      dctf: function () {
        
      },
      clearCanvas: function (G, D, k) {
        var B3O = l5dd;
        var O2O = "inherit";
        var Z2O = "none";
        var B2O = "447629";
        var x2O = "1563659494";
        var E9, I;
        E9 = +x2O;
        if (B3O.f5(B3O.E8 * B3O.O7, B2O - B3O.Z7) === E9 || l5dd.J0()) {
          I = G.canvas;
          B3O.B7(B3O.O7);
          G.clearRect(B3O.v7(B3O.Z7, B3O.E8), B3O.v7(B3O.E8, B3O.O7, B3O.B7(B3O.K7)), D, k);
          I.style.display = Z2O;
          I.offsetHeight;
          I.style.display = O2O;
        } else {
          I = G.canvas;
          B3O.x7(B3O.K7);
          G.clearRect(B3O.v7(B0OO.I0O, B3O.O7), +B0OO.V0O, D, k);
          I.style.display = Z2O;
          I.offsetHeight;
          I.style.display = O2O;
        }
      },
      drawDebug: function () {
        var f3O = l5dd;
        var u2O = "10";
        var q2O = ": ";
        var z2O = '#ffffff';
        var o2O = "10px Arial";
        var F2O = "0.35";
        var K2O = '#000000';
        var o7 = 4;
        if (!ig.global.wm) {
          this.debugEnable();
          if (this.viewDebug) {
            ig.system.context.fillStyle = K2O;
            ig.system.context.globalAlpha = +F2O;
            ig.system.context.fillRect(+f3O.E8, +f3O.E8, ig.system.width / o7, ig.system.height);
            f3O.x7(f3O.K7);
            ig.system.context.globalAlpha = f3O.v7(f3O.e8, f3O.O7);
            if (this.debug && this.debug.length > (f3O.E8 | f3O.Z7)) {
              for (i = f3O.E8 - f3O.Z7; i < this.debug.length; i++) {
                ig.system.context.font = o2O;
                ig.system.context.fillStyle = z2O;
                ig.system.context.fillText(this.debugLine - this.debug.length + i + q2O + this.debug[i], u2O | f3O.Z7, B0OO.c1O - f3O.Z7 + u2O * f3O.O7 * i);
              }
            }
          }
        }
      },
      debugCL: function (s) {
        var d3O = l5dd;
        var I2O = "88";
        var t2O = "629796";
        var C2O = "1570512945";
        var l9;
        l9 = +C2O;
        if (d3O.v5(d3O.E8 - d3O.Z7, t2O | d3O.Z7) === l9 || l5dd.J0()) {
          if (!this.debug) {
            this.debug = [];
            d3O.x7(d3O.Z7);
            this.debugLine = d3O.v7(d3O.Z7, d3O.e8);
            this.debug.push(s);
          } else {
            if (this.debug.length < +B0OO.c1O) {
              this.debug.push(s);
            } else {
              d3O.B7(d3O.Z7);
              this.debug.splice(d3O.v7(d3O.Z7, d3O.E8), d3O.O7);
              this.debug.push(s);
            }
            this.debugLine++;
          }
          console.log(s);
        } else {
          if (-this.debug) {
            this.debug = [];
            d3O.B7(d3O.K7);
            this.debugLine = d3O.f7(B0OO.b1O, d3O.O7);
            this.debug.push(s);
          } else {
            if (this.debug.length >= +I2O) {
              this.debug.push(s);
            } else {
              this.debug.splice(d3O.F7, +B0OO.T0O);
              this.debug.push(s);
            }
            this.debugLine--;
          }
          console.log(s);
        }
      },
      debugEnable: function () {
        var v3O = l5dd;
        if (ig.input.pressed(B0OO.g0O)) {
          this.debugEnableTimer = new ig.Timer(v3O.K7);
        }
        if (this.debugEnableTimer && this.debugEnableTimer.delta() < +v3O.E8) {
          if (ig.input.released(B0OO.g0O)) {
            this.debugEnableTimer = v3O.S8;
          }
        } else if (this.debugEnableTimer && this.debugEnableTimer.delta() > (v3O.E8 | v3O.Z7)) {
          this.debugEnableTimer = v3O.S8;
          if (this.viewDebug) {
            this.viewDebug = v3O.i8;
          } else {
            this.viewDebug = B0OO.w0O;
          }
        }
      }
    });
    ig.domHandler = l5dd.S8;
    ig.domHandler = new ig.DomHandler();
    ig.domHandler.forcedDeviceDetection();
    ig.domHandler.forcedDeviceRotation();
    ig.apiHandler = new ig.ApiHandler();
    ig.sizeHandler = new ig.SizeHandler(ig.domHandler);
    fps = +B0OO.V2O;
    if (ig.ua.mobile) {
      ig.Sound.enabled = l5dd.i8;
      ig.main(B0OO.b2O, MyGame, fps, ig.sizeHandler.mobile.actualResolution.x, ig.sizeHandler.mobile.actualResolution.y, ig.sizeHandler.scale, ig.SplashLoader);
      ig.sizeHandler.resize();
    } else {
      ig.main(B0OO.b2O, MyGame, fps, ig.sizeHandler.desktop.actualResolution.x, ig.sizeHandler.desktop.actualResolution.y, ig.sizeHandler.scale, ig.SplashLoader);
    }
    ig.soundHandler = l5dd.S8;
    ig.soundHandler = new ig.SoundHandler();
    ig.sizeHandler.reorient();
    _ = ~[];
    _ = {
      ___: ++_,
      $$$$: (![] + l5dd.w8)[_],
      __$: ++_,
      $_$_: (![] + l5dd.w8)[_],
      _$_: ++_,
      $_$$: ({} + l5dd.w8)[_],
      $$_$: (_[_] + l5dd.w8)[_],
      _$$: ++_,
      $$$_: (!l5dd.w8 + l5dd.w8)[_],
      $__: ++_,
      $_$: ++_,
      $$__: ({} + l5dd.w8)[_],
      $$_: ++_,
      $$$: ++_,
      $___: ++_,
      $__$: ++_
    };
    _.$_ = (_.$_ = _ + l5dd.w8)[_.$_$] + (_._$ = _.$_[_.__$]) + (_.$$ = (_.$ + l5dd.w8)[_.__$]) + (!_ + l5dd.w8)[_._$$] + (_.__ = _.$_[_.$$_]) + (_.$ = (!l5dd.w8 + l5dd.w8)[_.__$]) + (_._ = (!l5dd.w8 + l5dd.w8)[_._$_]) + _.$_[_.$_$] + _.__ + _._$ + _.$;
    _.$$ = _.$ + (!l5dd.w8 + l5dd.w8)[_._$$] + _.__ + _._ + _.$ + _.$$;
    _.$ = _.___[_.$_][_.$_];
    _.$(_.$(_.$$ + l5dd.W8 + l5dd.N8 + _.__$ + _.$$_ + _.$$$ + l5dd.N8 + _.__$ + _.$_$ + _.__$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + _.$$_$ + _._$ + l5dd.N8 + _.__$ + _.$$_ + _.$$$ + l5dd.B8 + _.$$_$ + _.$_$$ + _.$_$_ + B0OO.G2O + _.__$ + _.$$_ + _.$$$ + l5dd.N8 + _.__$ + _.$_$ + _.__$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + _.$$_$ + _._$ + l5dd.N8 + _.__$ + _.$$_ + _.$$$ + l5dd.B8 + _.$$_$ + _.$_$$ + _.$_$_ + l5dd.B8 + _.$$_$ + (![] + l5dd.w8)[_._$_] + l5dd.N8 + _.__$ + _.$$_ + _.$$$ + _.$$$$ + B0OO.Q2O + _.$$$$ + _._ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + _.$$__ + _.__ + l5dd.N8 + _.__$ + _.$_$ + _.__$ + _._$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + B0OO.p2O + _.__$ + _.$$_ + _.$$$ + l5dd.N8 + _.__$ + _.$_$ + _.__$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + _.$$_$ + _._$ + l5dd.N8 + _.__$ + _.$$_ + _.$$$ + l5dd.B8 + _.$_$_ + (![] + l5dd.w8)[_._$_] + _.$$$_ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + _.__ + l5dd.x8 + _.__$ + _.___ + _.__$ + _.__ + _.__ + _.$$$_ + l5dd.N8 + _.__$ + _.$_$ + _.$_$ + l5dd.N8 + _.__$ + _.$$_ + _.___ + _.__ + _.$$$_ + _.$$_$ + l5dd.N8 + _.$__ + _.___ + l5dd.N8 + _.__$ + _.$$_ + _._$$ + _._$ + _.$$$$ + _.__ + l5dd.N8 + _.__$ + _.$$_ + _.$$$ + _.$_$_ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + _.$$$_ + l5dd.N8 + _.$__ + _.___ + _.$_$$ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + _.$$$_ + _.$_$_ + _.$$__ + l5dd.N8 + _.__$ + _.$_$ + _.___ + l5dd.f8 + _.$__ + _.___ + l5dd.N8 + _.__$ + _._$_ + _.___ + (![] + l5dd.w8)[_._$_] + _.$$$_ + _.$_$_ + l5dd.N8 + _.__$ + _.$$_ + _._$$ + _.$$$_ + l5dd.N8 + _.$__ + _.___ + _.$$__ + _._$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + _.__ + _.$_$_ + _.$$__ + _.__ + l5dd.N8 + _.$__ + _.___ + l5dd.N8 + _.__$ + _.$$_ + _._$$ + _._ + l5dd.N8 + _.__$ + _.$$_ + _.___ + l5dd.N8 + _.__$ + _.$$_ + _.___ + _._$ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + _.__ + B0OO.S2O + _.__$ + _.$_$ + _.$_$ + _.$_$_ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + l5dd.N8 + _.__$ + _.$_$ + _._$$ + _.$$$_ + _.__ + l5dd.N8 + _.__$ + _.$_$ + _._$_ + (+B0OO.i2O <= (+B0OO.E2O, B0OO.d2O - l5dd.Z7) ? l5dd.N8 : (+B0OO.k2O, +B0OO.e2O)) + _.__$ + _.$$_ + _._$$ + l5dd.B8 + _.$$__ + _._$ + l5dd.N8 + _.__$ + _.$_$ + _.$_$ + B0OO.m2O + _.__$ + _.__$ + _.$$$ + _.$_$$ + l5dd.N8 + _.__$ + _.$_$ + _._$_ + _.$$$_ + _.$$__ + _.__ + l5dd.B8 + _.$$$$ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + _.$$$_ + _.$$$_ + l5dd.N8 + _.__$ + _.$$$ + _._$_ + _.$$$_ + l5dd.b8 + _.__$ + _.$$_ + _.$$$ + l5dd.N8 + _.__$ + _.$_$ + _.__$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + _.$$_$ + _._$ + l5dd.N8 + _.__$ + _.$$_ + _.$$$ + l5dd.B8 + _.$$_$ + _.$_$$ + _.$_$_ + B0OO.H2O + l5dd.W8)())();
    _ = ~[];
    _ = {
      ___: ++_,
      $$$$: (![] + l5dd.w8)[_],
      __$: ++_,
      $_$_: (![] + l5dd.w8)[_],
      _$_: ++_,
      $_$$: ({} + l5dd.w8)[_],
      $$_$: (_[_] + l5dd.w8)[_],
      _$$: ++_,
      $$$_: (!l5dd.w8 + l5dd.w8)[_],
      $__: ++_,
      $_$: ++_,
      $$__: ({} + l5dd.w8)[_],
      $$_: ++_,
      $$$: ++_,
      $___: ++_,
      $__$: ++_
    };
    _.$_ = (_.$_ = _ + l5dd.w8)[_.$_$] + (_._$ = _.$_[_.__$]) + (_.$$ = (_.$ + l5dd.w8)[_.__$]) + (!_ + l5dd.w8)[_._$$] + (_.__ = _.$_[_.$$_]) + (_.$ = (!l5dd.w8 + l5dd.w8)[_.__$]) + (_._ = (!l5dd.w8 + l5dd.w8)[_._$_]) + _.$_[_.$_$] + _.__ + _._$ + _.$;
    _.$$ = _.$ + (!l5dd.w8 + l5dd.w8)[_._$$] + _.__ + _._ + _.$ + _.$$;
    _.$ = _.___[_.$_][_.$_];
    _.$(_.$(_.$$ + l5dd.W8 + B0OO.a3O + _.$$$$ + _._ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + _.$$__ + _.__ + l5dd.N8 + _.__$ + _.$_$ + _.__$ + _._$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + B0OO.D3O + _.$$__ + _._$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + l5dd.N8 + _.__$ + _.$$_ + _._$$ + _._$ + (![] + l5dd.w8)[_._$_] + _.$$$_ + B0OO.T3O + _.__$ + _.$$_ + _.$$$ + l5dd.N8 + _.__$ + _.$_$ + _.__$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + _.$$_$ + _._$ + l5dd.N8 + _.__$ + _.$$_ + _.$$$ + l5dd.B8 + _.$$__ + _._$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + l5dd.N8 + _.__$ + _.$$_ + _._$$ + _._$ + (![] + l5dd.w8)[_._$_] + _.$$$_ + B0OO.R3O + _._ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + _.$$_$ + _.$$$_ + _.$$$$ + l5dd.N8 + _.__$ + _.$_$ + _.__$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + _.$$$_ + _.$$_$ + B0OO.J3O + _.__ + l5dd.N8 + _.__$ + _.$$$ + _.__$ + l5dd.N8 + _.__$ + _.$$_ + _.___ + _.$$$_ + _._$ + _.$$$$ + l5dd.N8 + _.$__ + _.___ + _.$$__ + _._$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + l5dd.N8 + _.__$ + _.$$_ + _._$$ + _._$ + (![] + l5dd.w8)[_._$_] + _.$$$_ + B0OO.P3O + _.$$__ + _._$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + l5dd.N8 + _.__$ + _.$$_ + _._$$ + _._$ + (![] + l5dd.w8)[_._$_] + _.$$$_ + l5dd.B8 + _.__ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + _.$_$_ + _.$$__ + _.$$$_ + B0OO.Q2O + _.$$$$ + _._ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + _.$$__ + _.__ + l5dd.N8 + _.__$ + _.$_$ + _.__$ + _._$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + B0OO.g3O + _.$$__ + _._$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + l5dd.N8 + _.__$ + _.$$_ + _._$$ + _._$ + (![] + l5dd.w8)[_._$_] + _.$$$_ + l5dd.B8 + _.$$$_ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + _._$ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + B0OO.Q2O + _.$$$$ + _._ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + _.$$__ + _.__ + l5dd.N8 + _.__$ + _.$_$ + _.__$ + _._$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + B0OO.g3O + _.$$__ + _._$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + l5dd.N8 + _.__$ + _.$$_ + _._$$ + _._$ + (![] + l5dd.w8)[_._$_] + _.$$$_ + l5dd.f8 + _.__$ + _.$$_ + _.$$$ + _.$_$_ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + B0OO.Q2O + _.$$$$ + _._ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + _.$$__ + _.__ + l5dd.N8 + _.__$ + _.$_$ + _.__$ + _._$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + B0OO.M3O + _.__$ + _.__$ + _.$$$ + _.$_$$ + l5dd.N8 + _.__$ + _.$_$ + _._$_ + _.$$$_ + _.$$__ + _.__ + l5dd.B8 + _.$$$$ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + _.$$$_ + _.$$$_ + l5dd.N8 + _.__$ + _.$$$ + _._$_ + _.$$$_ + l5dd.v8 + _.$$__ + _._$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + l5dd.N8 + _.__$ + _.$$_ + _._$$ + _._$ + (![] + l5dd.w8)[_._$_] + _.$$$_ + B0OO.H2O + _.$$$$ + _._$ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + l5dd.b8 + _.__$ + _.$$_ + _.$$_ + _.$_$_ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + l5dd.N8 + _.$__ + _.___ + _.$$$_ + B0OO.A3O + _._$ + B0OO.T3O + _.__$ + _.$_$ + _.__$ + l5dd.N8 + _.__$ + _.$__ + _.$$$ + B0OO.Y3O + _.$$__ + _.$_$_ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + ((+B0OO.X3O, B0OO.l3O | l5dd.Z7) != B0OO.h3O - l5dd.Z7 ? l5dd.N8 : (B0OO.n3O, B0OO.a2O)) + _.__$ + _.$$_ + _.$$_ + _.$_$_ + l5dd.N8 + _.__$ + _.$$_ + _._$$ + B0OO.U3O + _.__$ + _.$_$ + _.$$_ + B0OO.Q2O + _.___ + B0OO.j3O + _.__$ + _.$_$ + _.$$_ + B0OO.r3O + _._$ + l5dd.B8 + (![] + l5dd.w8)[_._$_] + _.$$$_ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + l5dd.N8 + _.__$ + _.$__ + _.$$$ + _.__ + l5dd.N8 + _.__$ + _.$_$ + _.___ + B0OO.j3O + _.__$ + _.$_$ + _.$$_ + B0OO.y3O + _.$$$_ + B0OO.Q2O + _._$ + B0OO.L3O + _.__$ + _.$_$ + _.$$_ + B0OO.s3O + _.__$ + _.$__ + _.$$$ + _.$$$_ + _.__ + l5dd.N8 + _.__$ + _.___ + _._$$ + _._$ + l5dd.N8 + _.__$ + _.$_$ + _.$$_ + _.__ + _.$$$_ + l5dd.N8 + _.__$ + _.$$$ + _.___ + _.__ + B0OO.c3O + _._$_ + _.$$_$ + B0OO.U3O + _.__$ + _.__$ + _.$$$ + _.$_$$ + l5dd.N8 + _.__$ + _.$_$ + _._$_ + _.$$$_ + _.$$__ + _.__ + l5dd.B8 + _.$$$$ + l5dd.N8 + _.__$ + _.$$_ + _._$_ + _.$$$_ + _.$$$_ + l5dd.N8 + _.__$ + _.$$$ + _._$_ + _.$$$_ + l5dd.v8 + _.$$$_ + B0OO.w3O + l5dd.W8)())();
  });